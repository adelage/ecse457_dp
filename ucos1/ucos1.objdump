
ucos1.elf:     file format elf32-littlenios2
ucos1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x004321e0

Program Header:
    LOAD off    0x00001000 vaddr 0x00432000 paddr 0x00432000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00432020 paddr 0x00432020 align 2**12
         filesz 0x0001218c memsz 0x0001218c flags r-x
    LOAD off    0x000131ac vaddr 0x004441ac paddr 0x00445cb0 align 2**12
         filesz 0x00001b04 memsz 0x00001b04 flags rw-
    LOAD off    0x000157b4 vaddr 0x004477b4 paddr 0x004477b4 align 2**12
         filesz 0x00000000 memsz 0x00003584 flags rw-
    LOAD off    0x00015000 vaddr 0x04200000 paddr 0x04200000 align 2**12
         filesz 0x00001000 memsz 0x00001000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00432000  00432000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001c0  00432020  00432020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .critical     00001000  04200000  04200000  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .text         00011cf4  004321e0  004321e0  000011e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000002d8  00443ed4  00443ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rwdata       00001b04  004441ac  00445cb0  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  6 .bss          00003584  004477b4  004477b4  000157b4  2**2
                  ALLOC, SMALL_DATA
  7 .comment      00000023  00000000  00000000  00016000  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000db8  00000000  00000000  00016028  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026657  00000000  00000000  00016de0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000092d6  00000000  00000000  0003d437  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a8cd  00000000  00000000  0004670d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022c4  00000000  00000000  00050fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d29  00000000  00000000  000532a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008a5a  00000000  00000000  00056fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  0005fa24  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000590  00000000  00000000  0005fa48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000648e5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000011  00000000  00000000  000648eb  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000648fc  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000648fd  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000648fe  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00064902  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00064906  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000016  00000000  00000000  0006490a  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000016  00000000  00000000  00064920  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000016  00000000  00000000  00064936  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0006494c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003a  00000000  00000000  00064957  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00179073  00000000  00000000  00064991  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00432000 l    d  .entry	00000000 .entry
00432020 l    d  .exceptions	00000000 .exceptions
04200000 l    d  .critical	00000000 .critical
004321e0 l    d  .text	00000000 .text
00443ed4 l    d  .rodata	00000000 .rodata
004441ac l    d  .rwdata	00000000 .rwdata
004477b4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ucos1_bsp//obj/HAL/src/crt0.o
00432218 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii_1.c
0043221c l     F .text	00000068 handle_cpu1_interrupt
00432284 l     F .text	00000030 init_cpu1_isr
00000000 l    df *ABS*	00000000 tlb.c
00000000 l    df *ABS*	00000000 fingerprint.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
004441ac l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00434520 l     F .text	00000008 __fp_lock
00434528 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
00435528 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00435644 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00435670 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00435abc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00435bb0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00435c9c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
00435e8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00445c20 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00436158 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
00445c24 l     O .rwdata	00000004 lockid
004477ec l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00445c28 l     O .rwdata	00000004 lockid
004477f4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
00438060 l     F .text	00000044 OS_InitMisc
004380a4 l     F .text	0000006c OS_InitRdyList
00438208 l     F .text	000000e0 OS_InitTCBList
00437f84 l     F .text	000000dc OS_InitEventList
00438110 l     F .text	0000007c OS_InitTaskIdle
0043818c l     F .text	0000007c OS_InitTaskStat
004384a0 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0043a96c l     F .text	0000010c OS_FlagTaskRdy
0043a6c8 l     F .text	000001c0 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00440050 l     F .text	00000038 alt_dev_reg
00440088 l     F .text	00000050 alt_get_errno
004400d8 l     F .text	000000a4 alt_avalon_mutex_reg
00444b5c l     O .rwdata	0000106c processor1_0_jtag_uart
00445bc8 l     O .rwdata	00000014 mutex_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
004404e0 l     F .text	000002ac altera_avalon_jtag_uart_irq
0044078c l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00440fe0 l     F .text	00000050 alt_get_errno
00441030 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00441334 l     F .text	000000a0 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00441854 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00441abc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00441c14 l     F .text	00000050 alt_get_errno
00441c64 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00442c30 l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00443724 l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00445c76 g     O .rwdata	00000002 OSTaskNameSize
004353c4 g     F .text	00000064 _isatty_r
00435dc0 g     F .text	000000cc alt_main
004329c0 g       .text	00000000 get_gp
00443e4c g     F .text	00000044 __ashldi3
004329e4 g     F .text	00000084 _puts_r
02500000 g       *ABS*	00000000 __alt_mem_shared_memory
00447884 g     O .bss	00000100 alt_irq
00435428 g     F .text	0000006c _lseek_r
0043b35c g     F .text	000000d8 OS_MemInit
004325c0 g     F .text	00000028 set_enable
00445cb0 g       *ABS*	00000000 __flash_rwdata_start
0043ffc0 g     F .text	00000090 OSTimeSet
0043695c g     F .text	00000718 OSEventPendMulti
0044ad38 g       *ABS*	00000000 __alt_heap_start
00442458 g     F .text	00000020 OSTaskCreateHook
00445c4e g     O .rwdata	00000002 OSMboxEn
004370c8 g     F .text	000000a8 OSIntEnter
004350d8 g     F .text	0000005c __sseek
004345c4 g     F .text	0000010c __sinit
00445c5e g     O .rwdata	00000002 OSQEn
0043453c g     F .text	00000078 __sfmoreglue
0043651c g     F .text	00000158 __malloc_unlock
004424b4 g     F .text	0000001c OSTaskStatHook
004477fc g     O .bss	00000001 OSLockNesting
00445c9c g     O .rwdata	00000002 OSDataSize
004477fd g     O .bss	00000001 OSRunning
00447850 g     O .bss	00000004 altera_avalon_timer_ts_freq
004339a8 g     F .text	0000018c memmove
004424ec g     F .text	0000001c OSInitHookBegin
004326d0 g     F .text	00000028 get_spmtable_entry
00445c94 g     O .rwdata	00000002 OSTmrSize
004345b4 g     F .text	00000010 _cleanup
00441188 g     F .text	00000080 altera_avalon_mutex_trylock
00447800 g     O .bss	00000004 OSIdleCtr
00432674 g     F .text	00000028 get_cputable_entry
00442140 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00438824 g     F .text	0000035c OS_TCBInit
04200000 g     O .critical	00001000 critical_task_stk
00432000 g     F .entry	0000001c __reset
00445c9a g     O .rwdata	00000002 OSTmrWheelTblSize
00441270 g     F .text	00000074 altera_avalon_mutex_is_mine
00432020 g       *ABS*	00000000 __flash_exceptions_start
00445c3a g     O .rwdata	00000002 OSEventSize
00447804 g     O .bss	00000001 OSPrioHighRdy
0043535c g     F .text	00000068 _fstat_r
00442478 g     F .text	00000020 OSTaskDelHook
00432538 g     F .text	00000010 enable_tlb
004477d4 g     O .bss	00000004 errno
004477b8 g     O .bss	00000004 mbox
0043269c g     F .text	00000034 set_spmtable_entry
00442120 g       .text	00000000 OSStartHighRdy
0043e0a4 g     F .text	000002a4 OSTaskCreateExt
0043a100 g     F .text	00000094 OSFlagPendGetFlagsRdy
00445c7a g     O .rwdata	00000002 OSTaskStatStkSize
00438d0c g     F .text	000003e4 OSFlagAccept
0043bb9c g     F .text	000000e4 OSQFlush
0043b434 g     F .text	0000016c OSQAccept
004477e4 g     O .bss	00000004 alt_argv
0044dbdc g       *ABS*	00000000 _gp
004325f4 g     F .text	0000000c get_enable
0043de38 g     F .text	0000026c OSTaskCreate
0043d860 g     F .text	000005d8 OSTaskChangePrio
004477f8 g     O .bss	00000004 alt_heapsem
00445be0 g     O .rwdata	00000004 LINE_ENABLE_REG
00438b80 g     F .text	0000018c OSDebugInit
0043e348 g     F .text	0000048c OSTaskDel
00432634 g     F .text	0000000c get_valid
004449dc g     O .rwdata	00000180 alt_fd_list
00447984 g     O .bss	00000370 OSFlagTbl
00437d74 g     F .text	000000b0 OS_EventTaskRemove
004419fc g     F .text	00000090 alt_find_dev
00433868 g     F .text	00000140 memcpy
00445c64 g     O .rwdata	00000002 OSRdyTblSize
00434530 g     F .text	0000000c _cleanup_r
00441b9c g     F .text	00000078 alt_io_redirect
00443ed4 g       *ABS*	00000000 __DTOR_END__
00432628 g     F .text	0000000c reset_valid
00432a68 g     F .text	00000014 puts
00436674 g     F .text	0000014c OSEventNameGet
00445c48 g     O .rwdata	00000002 OSFlagMax
00437170 g     F .text	000001bc OSIntExit
00445c82 g     O .rwdata	00000002 OSTCBSize
00447805 g     O .bss	00000001 OSPrioCur
004409f4 g     F .text	000002f0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00443844 g     F .text	00000008 __udivsi3
00435b0c g     F .text	000000a4 isatty
00445c68 g     O .rwdata	00000002 OSStkWidth
00445c5c g     O .rwdata	00000002 OSPtrSize
00445c3c g     O .rwdata	00000002 OSEventTblSize
00442bac g     F .text	00000084 __fixunsdfsi
00442094 g       .text	00000000 OSCtxSw
00442788 g     F .text	0000008c alt_icache_flush
004477d0 g     O .bss	00000004 __malloc_top_pad
00447808 g     O .bss	00000004 OSTCBList
004477d8 g     O .bss	00000004 alt_fd_list_lock
00432b08 g     F .text	000004e4 __sfvwrite_r
00447cf4 g     O .bss	00000c30 OSMemTbl
0044780c g     O .bss	00000001 OSTickStepState
00434130 g     F .text	00000064 _sbrk_r
00445c60 g     O .rwdata	00000002 OSQMax
00448924 g     O .bss	00000800 OSTaskStatStk
0043ae80 g     F .text	00000124 OSMemNameGet
00445c40 g     O .rwdata	00000002 OSFlagEn
00435494 g     F .text	0000006c _read_r
00445c86 g     O .rwdata	00000002 OSTimeTickHookEn
0043c1cc g     F .text	000001ec OSQPost
0043aa78 g     F .text	000000a0 OS_FlagUnlink
00445c14 g     O .rwdata	00000004 alt_max_fd
0043833c g     F .text	0000006c OS_MemCopy
00443c34 g     F .text	00000104 __unpack_d
004383a8 g     F .text	000000f8 OS_Sched
0043520c g     F .text	0000013c _fclose_r
0043ad38 g     F .text	00000148 OSMemGet
0043ec08 g     F .text	00000274 OSTaskNameSet
004344f0 g     F .text	00000030 fflush
004477cc g     O .bss	00000004 __malloc_max_sbrked_mem
00447810 g     O .bss	00000004 OSCtxSwCtr
004424d0 g     F .text	0000001c OSTimeTickHook
00445c4a g     O .rwdata	00000002 OSFlagNameSize
00437e24 g     F .text	000000f8 OS_EventTaskRemoveMulti
00442f84 g     F .text	00000054 __adddf3
00437c2c g     F .text	00000148 OS_EventTaskWaitMulti
00445c62 g     O .rwdata	00000002 OSQSize
00435cec g     F .text	000000d4 lseek
004412e4 g     F .text	00000050 altera_avalon_mutex_first_lock
0043cfa0 g     F .text	000002f0 OSSemPend
00445bf4 g     O .rwdata	00000004 _global_impure_ptr
00433b34 g     F .text	000005fc _realloc_r
00445c4c g     O .rwdata	00000002 OSLowestPrio
0044ad38 g       *ABS*	00000000 __bss_end
004359a0 g     F .text	0000011c alt_iic_isr_register
00442540 g     F .text	00000020 OSTCBInitHook
00445c92 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00441f70 g     F .text	00000104 alt_tick
00445c34 g     O .rwdata	00000002 OSEventEn
00445c8e g     O .rwdata	00000002 OSTmrCfgNameSize
00443608 g     F .text	0000011c __floatunsidf
00400000 g       *ABS*	00000000 __alt_mem_memory_0_onchip_memoryMain
004347dc g     F .text	00000018 __fp_lock_all
00445be8 g     O .rwdata	00000004 VIRT_ADDR_TABLE
00435954 g     F .text	0000004c alt_ic_irq_enabled
00432850 g     F .text	00000028 fprint_set_block_size
00432600 g     F .text	00000028 set_valid
0043a888 g     F .text	000000e4 OS_FlagInit
00441eac g     F .text	000000c4 alt_alarm_stop
00445c70 g     O .rwdata	00000002 OSTaskIdleStkSize
004477dc g     O .bss	00000004 alt_irq_active
0043ca78 g     F .text	000000dc OSSemAccept
0043b118 g     F .text	00000130 OSMemPut
0043ab18 g     F .text	00000220 OSMemCreate
00447814 g     O .bss	00000004 OSIdleCtrMax
00432110 g     F .exceptions	000000d0 alt_irq_handler
004449b4 g     O .rwdata	00000028 alt_dev_null
00445c84 g     O .rwdata	00000002 OSTicksPerSec
004410ac g     F .text	00000050 altera_avalon_mutex_open
00442094 g       .text	00000000 OSIntCtxSw
00441838 g     F .text	0000001c alt_dcache_flush_all
00443534 g     F .text	000000d4 __fixdfsi
00447818 g     O .bss	00000004 OSTCBFreeList
00445cb0 g       *ABS*	00000000 __ram_rwdata_end
0043d290 g     F .text	000001cc OSSemPendAbort
00445c0c g     O .rwdata	00000008 alt_dev_list
004361a8 g     F .text	000000f0 write
00445c88 g     O .rwdata	00000002 OSVersionNbr
004416a4 g     F .text	00000028 alt_timestamp_freq
00445ca0 g     O .rwdata	00000008 alt_mutex_list
004441ac g       *ABS*	00000000 __ram_rodata_end
004356c0 g     F .text	000000b0 fstat
00443e08 g     F .text	00000044 __lshrdi3
00432958 g       .text	00000000 context_switch
004326f8 g     F .text	00000098 set_task_directory
00445bdc g     O .rwdata	00000004 isr_1_ptr
00445c30 g     O .rwdata	00000004 OSEndiannessTest
0044384c g     F .text	00000008 __umodsi3
00445c42 g     O .rwdata	00000002 OSFlagGrpSize
004477bc g     O .bss	00000004 mutex
0044ad38 g       *ABS*	00000000 end
004403a4 g     F .text	0000013c altera_avalon_jtag_uart_init
00438668 g     F .text	000000f4 OS_TaskStat
00432790 g     F .text	0000002c enable_fprint_task
00443ed4 g       *ABS*	00000000 __CTOR_LIST__
00464000 g       *ABS*	00000000 __alt_stack_pointer
004413d4 g     F .text	00000088 alt_avalon_timer_sc_init
00443964 g     F .text	000000ac __clzsi2
00440ce4 g     F .text	000002fc altera_avalon_jtag_uart_write
004329d8 g       .text	00000000 restore_gp
004347cc g     F .text	00000004 __sfp_lock_acquire
00433770 g     F .text	000000f8 memchr
004382e8 g     F .text	00000054 OS_MemClr
00442164 g     F .text	000002f4 OSTaskStkInit
00434948 g     F .text	000002d0 _free_r
0043299c g       .text	00000000 context_restore
0043798c g     F .text	00000198 OS_EventTaskRdy
00442a0c g     F .text	000001a0 __call_exitprocs
0044781c g     O .bss	00000001 OSCPUUsage
00445bfc g     O .rwdata	00000004 __malloc_sbrk_base
004321e0 g     F .text	0000003c _start
00447854 g     O .bss	00000004 _alt_tick_rate
0043bc80 g     F .text	00000380 OSQPend
0043f8b0 g     F .text	00000174 OSTimeDly
004323d0 g     F .text	0000003c init_tlb
004477c0 g     O .bss	00000004 ct
00447858 g     O .bss	00000004 _alt_nticks
00435edc g     F .text	000000f4 read
004401b0 g     F .text	00000090 alt_sys_init
004329cc g       .text	00000000 set_gp
004428dc g     F .text	00000130 __register_exitproc
0044781d g     O .bss	00000001 OSTaskCtr
00441208 g     F .text	00000068 altera_avalon_mutex_unlock
0043fa24 g     F .text	00000244 OSTimeDlyHMSM
00432878 g     F .text	0000004c set_core_assignment
004328c4 g     F .text	00000094 set_core_assignment_table
00440898 g     F .text	00000068 altera_avalon_jtag_uart_close
00435500 g     F .text	00000028 __mulsi3
004441ac g       *ABS*	00000000 __ram_rwdata_start
00443ed4 g       *ABS*	00000000 __ram_rodata_start
0044785c g     O .bss	00000028 __malloc_current_mallinfo
00445c36 g     O .rwdata	00000002 OSEventMax
0043d45c g     F .text	00000194 OSSemPost
004373e0 g     F .text	00000188 OSSchedUnlock
00440240 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00442674 g     F .text	00000114 alt_get_fd
00447820 g     O .bss	00000004 OSMemFreeList
004375d4 g     F .text	00000104 OSStatInit
0043a5d8 g     F .text	000000f0 OSFlagQuery
00443d38 g     F .text	000000d0 __fpcmp_parts_d
00445c6c g     O .rwdata	00000002 OSTaskCreateExtEn
004351a8 g     F .text	00000064 _close_r
004327bc g     F .text	00000024 disable_fprint_task
00442860 g     F .text	0000007c memcmp
00437970 g     F .text	0000001c OS_Dummy
00440300 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0044ad38 g       *ABS*	00000000 __alt_stack_base
00440350 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00434194 g     F .text	00000174 __swsetup_r
00449124 g     O .bss	000001e0 OSQTbl
0044331c g     F .text	000001b4 __divdf3
004346d0 g     F .text	000000fc __sfp
004445ac g     O .rwdata	00000408 __malloc_av_
004347d8 g     F .text	00000004 __sinit_lock_release
00443038 g     F .text	000002e4 __muldf3
00447824 g     O .bss	00000004 OSTCBHighRdy
00434ffc g     F .text	00000054 __sread
00447828 g     O .bss	00000004 OSQFreeList
00442560 g     F .text	00000114 alt_find_file
004418a4 g     F .text	000000a0 alt_dev_llist_insert
004363b0 g     F .text	0000016c __malloc_lock
00436050 g     F .text	00000108 sbrk
004367c0 g     F .text	0000019c OSEventNameSet
00434308 g     F .text	000001e8 _fflush_r
0044782c g     O .bss	00000001 OSRdyGrp
00432548 g     F .text	00000064 reset_tlb
004325ac g     F .text	00000014 tlb_is_on
004477b4 g       *ABS*	00000000 __bss_start
00434f20 g     F .text	000000dc memset
004477c4 g     O .bss	00000001 err
0043240c g     F .text	00000120 main
004477e8 g     O .bss	00000004 alt_envp
004477c8 g     O .bss	00000004 __malloc_max_total_mem
0043252c g     F .text	0000000c disable_tlb
004402a0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00443f48 g     O .rodata	00000100 OSUnMapTbl
004327e0 g     F .text	00000020 fprint_reset_irq
00445c66 g     O .rwdata	00000002 OSSemEn
0043a194 g     F .text	00000444 OSFlagPost
00435134 g     F .text	00000008 __sclose
00464000 g       *ABS*	00000000 __alt_heap_limit
00435348 g     F .text	00000014 fclose
00437b24 g     F .text	00000108 OS_EventTaskWait
0044145c g     F .text	000000a8 alt_timestamp_start
0043875c g     F .text	000000c8 OS_TaskStatStkChk
0044aba8 g     O .bss	00000190 _atexit0
00441120 g     F .text	00000068 altera_avalon_mutex_lock
0043e7d4 g     F .text	00000208 OSTaskDelReq
00432fec g     F .text	00000784 _malloc_r
00445bec g     O .rwdata	00000004 PHYS_ADDR_TABLE
00445c18 g     O .rwdata	00000004 alt_errno
00437568 g     F .text	0000006c OSStart
00436350 g     F .text	00000060 __env_unlock
00434c18 g     F .text	000000a8 _fwalk
0043ee7c g     F .text	000002fc OSTaskResume
0043b248 g     F .text	00000114 OSMemQuery
00445c78 g     O .rwdata	00000002 OSTaskStatEn
00445c52 g     O .rwdata	00000002 OSMemMax
0043c3b8 g     F .text	000001f4 OSQPostFront
00443798 g     F .text	00000050 __divsi3
0044782d g     O .bss	00000003 OSRdyTbl
00445c2c g     O .rwdata	00000002 OSDebugEn
00444098 g     O .rodata	00000014 __thenan_df
0043480c g     F .text	0000013c _malloc_trim_r
00443ed4 g       *ABS*	00000000 __CTOR_END__
00445c44 g     O .rwdata	00000002 OSFlagNodeSize
00445c8c g     O .rwdata	00000002 OSTmrCfgMax
0043b5a0 g     F .text	0000027c OSQCreate
0043e9dc g     F .text	0000022c OSTaskNameGet
00443ed4 g       *ABS*	00000000 __flash_rodata_start
0043c5ac g     F .text	00000290 OSQPostOpt
004376d8 g     F .text	00000278 OSTimeTick
00445c74 g     O .rwdata	00000002 OSTaskMax
00443ed4 g       *ABS*	00000000 __DTOR_LIST__
0043cb54 g     F .text	0000012c OSSemCreate
00445c98 g     O .rwdata	00000002 OSTmrWheelSize
004477b4 g     O .bss	00000004 count
00445c6e g     O .rwdata	00000002 OSTaskDelEn
0043d5f0 g     F .text	00000144 OSSemQuery
0043b81c g     F .text	00000380 OSQDel
0043c000 g     F .text	000001cc OSQPendAbort
0044017c g     F .text	00000034 alt_irq_init
00435fd0 g     F .text	00000080 alt_release_fd
00445bf0 g     O .rwdata	00000004 TLB_ACTIVATE_REG
00432800 g     F .text	00000050 fprint_status
004440ac g     O .rodata	00000100 __clz_tab
00442814 g     F .text	00000014 atexit
0043513c g     F .text	0000006c _write_r
0043732c g     F .text	000000b4 OSSchedLock
004322b4 g     F .text	0000011c preemption_task
004390f0 g     F .text	00000180 OSFlagCreate
00445bf8 g     O .rwdata	00000004 _impure_ptr
004477e0 g     O .bss	00000004 alt_argc
0044784c g     O .bss	00000004 altera_avalon_timer_ts_base
004419a0 g     F .text	0000005c _do_dtors
00445c3e g     O .rwdata	00000002 OSEventMultiEn
00439270 g     F .text	00000320 OSFlagDel
00447830 g     O .bss	00000004 OSEventFreeList
00432020 g       .exceptions	00000000 alt_irq_entry
004398f0 g     F .text	00000810 OSFlagPend
00445c8a g     O .rwdata	00000002 OSTmrEn
004347f4 g     F .text	00000018 __fp_unlock_all
00445c04 g     O .rwdata	00000008 alt_fs_list
00438510 g     F .text	0000007c OS_StrCopy
00445c54 g     O .rwdata	00000002 OSMemNameSize
00442508 g     F .text	0000001c OSInitHookEnd
00432020 g       *ABS*	00000000 __ram_exceptions_start
00445c80 g     O .rwdata	00000002 OSTCBPrioTblMax
00441504 g     F .text	000001a0 alt_timestamp
00445c7c g     O .rwdata	00000002 OSTaskStatStkChkEn
00435770 g     F .text	00000050 alt_ic_isr_register
00445c50 g     O .rwdata	00000002 OSMemEn
00445c5a g     O .rwdata	00000002 OSMutexEn
00445cb0 g       *ABS*	00000000 _edata
0044ad38 g       *ABS*	00000000 _end
00447834 g     O .bss	00000001 OSIntNesting
004321e0 g       *ABS*	00000000 __ram_exceptions_end
00440900 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0043fc68 g     F .text	000002c8 OSTimeDlyResume
00439718 g     F .text	000001d8 OSFlagNameSet
0043f178 g     F .text	00000284 OSTaskStkChk
00435888 g     F .text	000000cc alt_ic_irq_disable
00445c56 g     O .rwdata	00000002 OSMemSize
00435050 g     F .text	00000088 __swrite
00445c00 g     O .rwdata	00000004 __malloc_trim_threshold
00442074 g     F .text	00000020 altera_nios2_qsys_irq_init
00447838 g     O .bss	00000004 OSTCBCur
00442828 g     F .text	00000038 exit
00445c58 g     O .rwdata	00000002 OSMemTblSize
00434cc0 g     F .text	000000b8 _fwalk_reent
004437e8 g     F .text	0000005c __modsi3
00464000 g       *ABS*	00000000 __alt_data_end
00432020 g     F .exceptions	00000000 alt_exception
004347d0 g     F .text	00000004 __sfp_lock_release
00437074 g     F .text	00000054 OSInit
0043f690 g     F .text	000001b0 OSTaskQuery
0043c9cc g     F .text	000000ac OS_QInit
0043858c g     F .text	00000054 OS_StrLen
0043afa4 g     F .text	00000174 OSMemNameSet
00445c72 g     O .rwdata	00000002 OSTaskProfileEn
0044783c g     O .bss	00000004 OSTime
00449304 g     O .bss	00000800 OSTaskIdleStk
00443e90 g     F .text	00000044 _exit
004416cc g     F .text	0000016c alt_alarm_start
00439590 g     F .text	00000188 OSFlagNameGet
0043ff30 g     F .text	00000090 OSTimeGet
00443854 g     F .text	00000110 __muldi3
00434d78 g     F .text	000001a8 __smakebuf_r
00432a7c g     F .text	0000008c strlen
00442498 g     F .text	0000001c OSTaskSwHook
00441d54 g     F .text	00000158 open
00449b04 g     O .bss	00000b40 OSEventTbl
004434d0 g     F .text	00000064 __gedf2
0044a644 g     O .bss	00000510 OSTCBTbl
0043d734 g     F .text	0000012c OSSemSet
00441a8c g     F .text	00000030 alt_icache_flush_all
00445be4 g     O .rwdata	00000004 LINE_VALID_REG
00445c1c g     O .rwdata	00000004 alt_priority_mask
0043cc80 g     F .text	00000320 OSSemDel
00447840 g     O .bss	00000004 OSFlagFreeList
004357c0 g     F .text	000000c8 alt_ic_irq_enable
00445c38 g     O .rwdata	00000002 OSEventNameSize
00447844 g     O .bss	00000001 OSStatRdy
004410fc g     F .text	00000024 altera_avalon_mutex_close
0044ab54 g     O .bss	00000054 OSTCBPrioTbl
00436298 g     F .text	000000b8 __env_lock
00445c7e g     O .rwdata	00000002 OSTaskSwHookEn
00442fd8 g     F .text	00000060 __subdf3
00445ca8 g     O .rwdata	00000008 alt_alarm_list
00445c46 g     O .rwdata	00000002 OSFlagWidth
00441944 g     F .text	0000005c _do_ctors
00432640 g     F .text	00000034 set_cputable_entry
00435578 g     F .text	000000cc close
004477f0 g     O .bss	00000004 alt_envsem
00447848 g     O .bss	00000004 OSIdleCtrRun
00437950 g     F .text	00000020 OSVersion
00445c90 g     O .rwdata	00000002 OSTmrCfgWheelSize
00435c1c g     F .text	00000080 alt_load
0043f840 g     F .text	00000070 OS_TaskStkClr
00443a10 g     F .text	00000224 __pack_d
00445c6a g     O .rwdata	00000002 OSTaskCreateEn
04200000 g       *ABS*	00000000 __alt_mem_processor1_0_scratchpad
00437f1c g     F .text	00000068 OS_EventWaitListInit
00442524 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
004347d4 g     F .text	00000004 __sinit_lock_acquire
004325e8 g     F .text	0000000c reset_enable
0043f3fc g     F .text	00000294 OSTaskSuspend
004385e0 g     F .text	00000088 OS_TaskIdle
00445c96 g     O .rwdata	00000002 OSTmrTblSize
0043c83c g     F .text	00000190 OSQQuery



Disassembly of section .entry:

00432000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  432000:	00810014 	movui	r2,1024
#endif

0:
    initi r2
  432004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  432008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  43200c:	00bffd16 	blt	zero,r2,432004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  432010:	004010f4 	movhi	at,67
    ori r1, r1, %lo(_start)
  432014:	08487814 	ori	at,at,8672
    jmp r1
  432018:	0800683a 	jmp	at
  43201c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

00432020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -80
  432020:	deffec04 	addi	sp,sp,-80

#endif

#endif

        stw   ra,  0(sp)
  432024:	dfc00015 	stw	ra,0(sp)
        movhi ra,  %hi(0x8100000)
  432028:	07c20434 	movhi	ra,2064
        ori   ra,  ra, 8
  43202c:	ffc00214 	ori	ra,ra,8
        ldw   ra,    0(ra)
  432030:	ffc00017 	ldw	ra,0(ra)
         /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  432034:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  432038:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  43203c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  432040:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  432044:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  432048:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  43204c:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  432050:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  432054:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  432058:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  43205c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  432060:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  432064:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  432068:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  43206c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  432070:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  432074:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  432078:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  43207c:	dbc01215 	stw	r15,72(sp)

        stw   gp,   76(sp)
  432080:	de801315 	stw	gp,76(sp)
        movhi gp, %hi(_gp)
  432084:	06801134 	movhi	gp,68
        ori gp, gp, %lo(_gp)
  432088:	d6b6f714 	ori	gp,gp,56284
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  43208c:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  432090:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  432094:	10000326 	beq	r2,zero,4320a4 <alt_exception+0x84>
        beq   r4, zero, .Lnot_irq
  432098:	20000226 	beq	r4,zero,4320a4 <alt_exception+0x84>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  43209c:	04321100 	call	432110 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  4320a0:	00000306 	br	4320b0 <alt_exception+0x90>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  4320a4:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  4320a8:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  4320ac:	003da03a 	break	0

        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */
        movhi ra,  %hi(0x8100000)
  4320b0:	07c20434 	movhi	ra,2064
        ori   ra,  ra, 12
  4320b4:	ffc00314 	ori	ra,ra,12
        ldw   ra,    0(ra)
  4320b8:	ffc00017 	ldw	ra,0(ra)
        ldw   r5,  68(sp)
  4320bc:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  4320c0:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  4320c4:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  4320c8:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  4320cc:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  4320d0:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  4320d4:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  4320d8:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  4320dc:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  4320e0:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  4320e4:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  4320e8:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  4320ec:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  4320f0:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  4320f4:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  4320f8:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  4320fc:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  432100:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  432104:	dbc01017 	ldw	r15,64(sp)
#endif
        ldw   gp,  76(sp)
        ldw   sp,  80(sp)

#else
        addi  sp, sp, 80
  432108:	dec01404 	addi	sp,sp,80

        /*
         * Return to the interrupted instruction.
         */

        eret
  43210c:	ef80083a 	eret

00432110 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  432110:	defff904 	addi	sp,sp,-28
  432114:	dfc00615 	stw	ra,24(sp)
  432118:	df000515 	stw	fp,20(sp)
  43211c:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  432120:	04370c80 	call	4370c8 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  432124:	0005313a 	rdctl	r2,ipending
  432128:	e0bffe15 	stw	r2,-8(fp)

  return active;
  43212c:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  432130:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  432134:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  432138:	00800044 	movi	r2,1
  43213c:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  432140:	e0fffb17 	ldw	r3,-20(fp)
  432144:	e0bffc17 	ldw	r2,-16(fp)
  432148:	1884703a 	and	r2,r3,r2
  43214c:	10001726 	beq	r2,zero,4321ac <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  432150:	00c01134 	movhi	r3,68
  432154:	18de2104 	addi	r3,r3,30852
  432158:	e0bffd17 	ldw	r2,-12(fp)
  43215c:	100490fa 	slli	r2,r2,3
  432160:	1885883a 	add	r2,r3,r2
  432164:	10c00017 	ldw	r3,0(r2)
  432168:	01001134 	movhi	r4,68
  43216c:	211e2104 	addi	r4,r4,30852
  432170:	e0bffd17 	ldw	r2,-12(fp)
  432174:	100490fa 	slli	r2,r2,3
  432178:	2085883a 	add	r2,r4,r2
  43217c:	10800104 	addi	r2,r2,4
  432180:	10800017 	ldw	r2,0(r2)
  432184:	1009883a 	mov	r4,r2
  432188:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  43218c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  432190:	0005313a 	rdctl	r2,ipending
  432194:	e0bfff15 	stw	r2,-4(fp)

  return active;
  432198:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  43219c:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  4321a0:	e0bffb17 	ldw	r2,-20(fp)
  4321a4:	103fe31e 	bne	r2,zero,432134 <alt_irq_handler+0x24>
  4321a8:	00000706 	br	4321c8 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  4321ac:	e0bffc17 	ldw	r2,-16(fp)
  4321b0:	1085883a 	add	r2,r2,r2
  4321b4:	e0bffc15 	stw	r2,-16(fp)
      i++;
  4321b8:	e0bffd17 	ldw	r2,-12(fp)
  4321bc:	10800044 	addi	r2,r2,1
  4321c0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  4321c4:	003fde06 	br	432140 <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  4321c8:	04371700 	call	437170 <OSIntExit>
}
  4321cc:	e037883a 	mov	sp,fp
  4321d0:	dfc00117 	ldw	ra,4(sp)
  4321d4:	df000017 	ldw	fp,0(sp)
  4321d8:	dec00204 	addi	sp,sp,8
  4321dc:	f800283a 	ret

Disassembly of section .text:

004321e0 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  4321e0:	06c011b4 	movhi	sp,70
    ori sp, sp, %lo(__alt_stack_pointer)
  4321e4:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
  4321e8:	06801134 	movhi	gp,68
    ori gp, gp, %lo(_gp)
  4321ec:	d6b6f714 	ori	gp,gp,56284
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  4321f0:	00801134 	movhi	r2,68
    ori r2, r2, %lo(__bss_start)
  4321f4:	109ded14 	ori	r2,r2,30644

    movhi r3, %hi(__bss_end)
  4321f8:	00c01134 	movhi	r3,68
    ori r3, r3, %lo(__bss_end)
  4321fc:	18eb4e14 	ori	r3,r3,44344

    beq r2, r3, 1f
  432200:	10c00326 	beq	r2,r3,432210 <_start+0x30>

0:
    stw zero, (r2)
  432204:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  432208:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  43220c:	10fffd36 	bltu	r2,r3,432204 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  432210:	0435c1c0 	call	435c1c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  432214:	0435dc00 	call	435dc0 <alt_main>

00432218 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  432218:	003fff06 	br	432218 <alt_after_alt_main>

0043221c <handle_cpu1_interrupt>:
 * If CPU1 interrupt goes off, we assume that it has been sent
 * by the monitor for now and that a task must be executed.
 * The identity of the task is retrieved from the shared_memory
 * using the CriticalFunctionPointers data structure. The task is then executed
 */
static void handle_cpu1_interrupt(void* context) {
  43221c:	defffc04 	addi	sp,sp,-16
  432220:	dfc00315 	stw	ra,12(sp)
  432224:	d9000215 	stw	r4,8(sp)
	unsigned short priority;
	altera_avalon_mutex_lock(mutex, 1);
  432228:	d0a6f817 	ldw	r2,-25632(gp)
  43222c:	1009883a 	mov	r4,r2
  432230:	01400044 	movi	r5,1
  432234:	04411200 	call	441120 <altera_avalon_mutex_lock>
	{

		CriticalFunctionPointers* cp = (CriticalFunctionPointers*)SHARED_MEMORY_BASE;
  432238:	00809434 	movhi	r2,592
  43223c:	d8800015 	stw	r2,0(sp)
		priority = cp->priority[1];
  432240:	d8800017 	ldw	r2,0(sp)
  432244:	1080038b 	ldhu	r2,14(r2)
  432248:	d880010d 	sth	r2,4(sp)
		*isr_1_ptr = 0;
  43224c:	d0a00017 	ldw	r2,-32768(gp)
  432250:	10000015 	stw	zero,0(r2)

	}
	altera_avalon_mutex_unlock(mutex);
  432254:	d0a6f817 	ldw	r2,-25632(gp)
  432258:	1009883a 	mov	r4,r2
  43225c:	04412080 	call	441208 <altera_avalon_mutex_unlock>
	if(priority == CRITICAL_TASK_PRIORITY)
  432260:	d880010b 	ldhu	r2,4(sp)
  432264:	10800158 	cmpnei	r2,r2,5
  432268:	1000031e 	bne	r2,zero,432278 <handle_cpu1_interrupt+0x5c>
		OSSemPost(mbox);
  43226c:	d0a6f717 	ldw	r2,-25636(gp)
  432270:	1009883a 	mov	r4,r2
  432274:	043d45c0 	call	43d45c <OSSemPost>

}
  432278:	dfc00317 	ldw	ra,12(sp)
  43227c:	dec00404 	addi	sp,sp,16
  432280:	f800283a 	ret

00432284 <init_cpu1_isr>:

static void init_cpu1_isr(void) {
  432284:	defffe04 	addi	sp,sp,-8
  432288:	dfc00115 	stw	ra,4(sp)
	alt_ic_isr_register(PROCESSOR1_0_CPU_IRQ_0_IRQ_INTERRUPT_CONTROLLER_ID,
  43228c:	d8000015 	stw	zero,0(sp)
  432290:	0009883a 	mov	r4,zero
  432294:	01400044 	movi	r5,1
  432298:	018010f4 	movhi	r6,67
  43229c:	31888704 	addi	r6,r6,8732
  4322a0:	000f883a 	mov	r7,zero
  4322a4:	04357700 	call	435770 <alt_ic_isr_register>
			PROCESSOR1_0_CPU_IRQ_0_IRQ, handle_cpu1_interrupt, (void*) NULL,
			(void*) NULL);
}
  4322a8:	dfc00117 	ldw	ra,4(sp)
  4322ac:	dec00204 	addi	sp,sp,8
  4322b0:	f800283a 	ret

004322b4 <preemption_task>:
 * There is one VERY important thing to note. When the critical task begins executing
 * the value of the stack pointer MUST be the same on both cores. This means that
 * the wrapper must have the same number of variables declared within its scope (i.e.
 * onto its stack) before calling the critical task (pt() in this example)
 */
void preemption_task(void* pdata){
  4322b4:	deffee04 	addi	sp,sp,-72
  4322b8:	dfc01115 	stw	ra,68(sp)
  4322bc:	d9001015 	stw	r4,64(sp)
	
  4322c0:	d8801017 	ldw	r2,64(sp)
  4322c4:	d8800215 	stw	r2,8(sp)
	CriticalFunctionPointers* cp =
				(CriticalFunctionPointers*) SHARED_MEMORY_BASE;
	pt = cp->task[1];

  4322c8:	d8800217 	ldw	r2,8(sp)
  4322cc:	10800017 	ldw	r2,0(r2)
  4322d0:	d8800315 	stw	r2,12(sp)
	while(1){
  4322d4:	d8800217 	ldw	r2,8(sp)
  4322d8:	10800104 	addi	r2,r2,4
  4322dc:	10800017 	ldw	r2,0(r2)
  4322e0:	d8800415 	stw	r2,16(sp)

		//Wait for the interrupt to begin transfer
		OSSemPend(mbox, 0, &err);

		int done = 0;
  4322e4:	d0a6f717 	ldw	r2,-25636(gp)
  4322e8:	1009883a 	mov	r4,r2
  4322ec:	000b883a 	mov	r5,zero
  4322f0:	d1a6fa04 	addi	r6,gp,-25624
  4322f4:	043cfa00 	call	43cfa0 <OSSemPend>
		int first = 0;
		//barrier function
  4322f8:	d8000015 	stw	zero,0(sp)
		CriticalFunctionPointers* cp =
  4322fc:	d8000115 	stw	zero,4(sp)
				(CriticalFunctionPointers*) SHARED_MEMORY_BASE;

  432300:	00809434 	movhi	r2,592
  432304:	d8800515 	stw	r2,20(sp)
		//This is a crude way of synchronizing the beginning of the task
		//on both cores
		while (done == 0) {
			altera_avalon_mutex_lock(mutex, 1); //Acquire the hardware mutex
			{
  432308:	00001606 	br	432364 <preemption_task+0xb0>
				if(first == 0){
  43230c:	d0a6f817 	ldw	r2,-25632(gp)
  432310:	1009883a 	mov	r4,r2
  432314:	01400044 	movi	r5,1
  432318:	04411200 	call	441120 <altera_avalon_mutex_lock>
					cp->checkout[1] = 1;
					first = 1;
  43231c:	d8800117 	ldw	r2,4(sp)
  432320:	1000051e 	bne	r2,zero,432338 <preemption_task+0x84>
				}
  432324:	d8800517 	ldw	r2,20(sp)
  432328:	00c00044 	movi	r3,1
  43232c:	10c00915 	stw	r3,36(r2)
				if( cp->checkout[0] == 1){
  432330:	00800044 	movi	r2,1
  432334:	d8800115 	stw	r2,4(sp)
					cp->checkout[0] = 0;
					done = 1;
  432338:	d8800517 	ldw	r2,20(sp)
  43233c:	10800817 	ldw	r2,32(r2)
  432340:	10800058 	cmpnei	r2,r2,1
  432344:	1000041e 	bne	r2,zero,432358 <preemption_task+0xa4>
				}
  432348:	d8800517 	ldw	r2,20(sp)
  43234c:	10000815 	stw	zero,32(r2)

  432350:	00800044 	movi	r2,1
  432354:	d8800015 	stw	r2,0(sp)
			}
			altera_avalon_mutex_unlock(mutex);
		}

  432358:	d0a6f817 	ldw	r2,-25632(gp)
  43235c:	1009883a 	mov	r4,r2
  432360:	04412080 	call	441208 <altera_avalon_mutex_unlock>

		//This is a crude way of synchronizing the beginning of the task
		//on both cores
		while (done == 0) {
			altera_avalon_mutex_lock(mutex, 1); //Acquire the hardware mutex
			{
  432364:	d8800017 	ldw	r2,0(sp)
  432368:	103fe826 	beq	r2,zero,43230c <preemption_task+0x58>
		}

		// Set default block size for fingerprinting
		fprint_set_block_size(cp->blocksize[1]);

		//Context switch is necessary to clear the callee saved registers
  43236c:	044145c0 	call	44145c <alt_timestamp_start>
  432370:	1000030e 	bge	r2,zero,432380 <preemption_task+0xcc>
		long registers[8];
		context_switch(registers);
  432374:	01001134 	movhi	r4,68
  432378:	210fb504 	addi	r4,r4,16084
  43237c:	0432a680 	call	432a68 <puts>

		//Set the global pointer in case of compilation issues related
		//to global variables
		set_gp();
		//call the critical task
  432380:	d8800804 	addi	r2,sp,32
  432384:	1009883a 	mov	r4,r2
  432388:	04329580 	call	432958 <context_switch>
		pt(cp->args[1]);
		//restore the original global pointer
		restore_gp();
		//Restore the callee saved registers
  43238c:	04329cc0 	call	4329cc <set_gp>
		context_restore(registers);
		//Get the end time
  432390:	d8800417 	ldw	r2,16(sp)
  432394:	d9000317 	ldw	r4,12(sp)
  432398:	103ee83a 	callr	r2
		alt_u64 t = alt_timestamp();
		//store the end time
  43239c:	04329d80 	call	4329d8 <restore_gp>
		cp->core_time[1] = t;
	}
  4323a0:	d8800804 	addi	r2,sp,32
  4323a4:	1009883a 	mov	r4,r2
  4323a8:	043299c0 	call	43299c <context_restore>
}

  4323ac:	04415040 	call	441504 <alt_timestamp>
  4323b0:	d8800615 	stw	r2,24(sp)
  4323b4:	d8c00715 	stw	r3,28(sp)

//Initialize the TLB. It uses 4k pages so only one line is necessary
  4323b8:	d8800517 	ldw	r2,20(sp)
  4323bc:	d8c00617 	ldw	r3,24(sp)
  4323c0:	10c01c15 	stw	r3,112(r2)
  4323c4:	d8c00717 	ldw	r3,28(sp)
  4323c8:	10c01d15 	stw	r3,116(r2)
void init_tlb(){
  4323cc:	003fc506 	br	4322e4 <preemption_task+0x30>

004323d0 <init_tlb>:
	set_cputable_entry(1, 0x00431000);
	set_spmtable_entry(1, 0x04203000);

	//Enable these 4 translations
	set_enable(0x2);
  4323d0:	deffff04 	addi	sp,sp,-4
  4323d4:	dfc00015 	stw	ra,0(sp)
}
  4323d8:	01000044 	movi	r4,1
  4323dc:	014010f4 	movhi	r5,67
  4323e0:	29440004 	addi	r5,r5,4096
  4323e4:	04326400 	call	432640 <set_cputable_entry>

  4323e8:	01000044 	movi	r4,1
  4323ec:	01410834 	movhi	r5,1056
  4323f0:	294c0004 	addi	r5,r5,12288
  4323f4:	043269c0 	call	43269c <set_spmtable_entry>
/*
 * Main
 */
  4323f8:	01000084 	movi	r4,2
  4323fc:	04325c00 	call	4325c0 <set_enable>
int main(void) {
	
  432400:	dfc00017 	ldw	ra,0(sp)
  432404:	dec00104 	addi	sp,sp,4
  432408:	f800283a 	ret

0043240c <main>:
	enable_tlb();
	printf("Hello from Nios II!\n");
	mutex = altera_avalon_mutex_open(MUTEX_0_NAME);	// Initialize the hardware mutex
	mbox = OSSemCreate(0);							// Initialize the message box
	CriticalFunctionPointers* cp = (CriticalFunctionPointers*)SHARED_MEMORY_BASE;

  43240c:	defff604 	addi	sp,sp,-40
  432410:	dfc00915 	stw	ra,36(sp)
	// Wait for monitor to be done initialization of shared variables before retrieving their values
	while(cp->init_complete == 0);
	init_cpu1_isr();								// Initialize the ISR
  432414:	04323d00 	call	4323d0 <init_tlb>

  432418:	04325380 	call	432538 <enable_tlb>
	// Set the task(only one in this example)
	int arg_5 = CRITICAL_TASK_PRIORITY;
  43241c:	01001134 	movhi	r4,68
  432420:	210fbd04 	addi	r4,r4,16116
  432424:	0432a680 	call	432a68 <puts>
	// OSTaskCreateExt(preemption_task, &arg_5, &critical_task_stk[TASK_STACKSIZE - 1],
  432428:	01001134 	movhi	r4,68
  43242c:	210fc204 	addi	r4,r4,16136
  432430:	04410ac0 	call	4410ac <altera_avalon_mutex_open>
  432434:	d0a6f815 	stw	r2,-25632(gp)
	// 				CRITICAL_TASK_PRIORITY, CRITICAL_TASK_PRIORITY,
  432438:	0009883a 	mov	r4,zero
  43243c:	043cb540 	call	43cb54 <OSSemCreate>
  432440:	d0a6f715 	stw	r2,-25636(gp)
	// 				critical_task_stk, TASK_STACKSIZE, NULL,0);
  432444:	00809434 	movhi	r2,592
  432448:	d8800515 	stw	r2,20(sp)

	// Signal that the core has finished initializing
	altera_avalon_mutex_lock(mutex, 1);				// Acquire the hardware mutex
  43244c:	0001883a 	nop
  432450:	d8800517 	ldw	r2,20(sp)
  432454:	10800717 	ldw	r2,28(r2)
  432458:	103ffd26 	beq	r2,zero,432450 <main+0x44>
	{
  43245c:	d0a6f817 	ldw	r2,-25632(gp)
  432460:	1009883a 	mov	r4,r2
  432464:	01400044 	movi	r5,1
  432468:	04411200 	call	441120 <altera_avalon_mutex_lock>
		cp->core_ready[1] = 1;
	}
	altera_avalon_mutex_unlock(mutex);				// Memory
	
  43246c:	d8800517 	ldw	r2,20(sp)
  432470:	10800117 	ldw	r2,4(r2)
  432474:	d0a6f915 	stw	r2,-25628(gp)
	// Start OS
  432478:	d8800517 	ldw	r2,20(sp)
  43247c:	10800217 	ldw	r2,8(r2)
  432480:	d8800615 	stw	r2,24(sp)
	OSStart();
	return 0;
  432484:	d0a6f817 	ldw	r2,-25632(gp)
  432488:	1009883a 	mov	r4,r2
  43248c:	04412080 	call	441208 <altera_avalon_mutex_unlock>
}
  432490:	04322840 	call	432284 <init_cpu1_isr>
  432494:	0100ffc4 	movi	r4,1023
  432498:	04328500 	call	432850 <fprint_set_block_size>
  43249c:	00800144 	movi	r2,5
  4324a0:	d8800715 	stw	r2,28(sp)
  4324a4:	d8800617 	ldw	r2,24(sp)
  4324a8:	d8800815 	stw	r2,32(sp)
  4324ac:	d8800704 	addi	r2,sp,28
  4324b0:	00c00144 	movi	r3,5
  4324b4:	d8c00015 	stw	r3,0(sp)
  4324b8:	00c10834 	movhi	r3,1056
  4324bc:	18c00004 	addi	r3,r3,0
  4324c0:	d8c00115 	stw	r3,4(sp)
  4324c4:	00c10004 	movi	r3,1024
  4324c8:	d8c00215 	stw	r3,8(sp)
  4324cc:	d8000315 	stw	zero,12(sp)
  4324d0:	d8000415 	stw	zero,16(sp)
  4324d4:	010010f4 	movhi	r4,67
  4324d8:	2108ad04 	addi	r4,r4,8884
  4324dc:	100b883a 	mov	r5,r2
  4324e0:	01810834 	movhi	r6,1056
  4324e4:	3183ff04 	addi	r6,r6,4092
  4324e8:	01c00144 	movi	r7,5
  4324ec:	043e0a40 	call	43e0a4 <OSTaskCreateExt>
  4324f0:	d0a6f817 	ldw	r2,-25632(gp)
  4324f4:	1009883a 	mov	r4,r2
  4324f8:	01400044 	movi	r5,1
  4324fc:	04411200 	call	441120 <altera_avalon_mutex_lock>
  432500:	d8800517 	ldw	r2,20(sp)
  432504:	00c00044 	movi	r3,1
  432508:	10c01315 	stw	r3,76(r2)
  43250c:	d0a6f817 	ldw	r2,-25632(gp)
  432510:	1009883a 	mov	r4,r2
  432514:	04412080 	call	441208 <altera_avalon_mutex_unlock>
  432518:	04375680 	call	437568 <OSStart>
  43251c:	0005883a 	mov	r2,zero
  432520:	dfc00917 	ldw	ra,36(sp)
  432524:	dec00a04 	addi	sp,sp,40
  432528:	f800283a 	ret

0043252c <disable_tlb>:
unsigned int *TLB_ACTIVATE_REG = (unsigned int*)(TLB_BASE + (TLB_SEL_OFFSET << 2));
/*
 * Disables the TLB by setting its control register to 0.
 */
void disable_tlb() {
	*TLB_ACTIVATE_REG = 0x00000000;
  43252c:	d0a00517 	ldw	r2,-32748(gp)
  432530:	10000015 	stw	zero,0(r2)
}
  432534:	f800283a 	ret

00432538 <enable_tlb>:

/*
 * Enables the TLB by setting its control register to a non-zero value.
 */
void enable_tlb() {
	*TLB_ACTIVATE_REG = 0x00001000;
  432538:	d0a00517 	ldw	r2,-32748(gp)
  43253c:	00c40004 	movi	r3,4096
  432540:	10c00015 	stw	r3,0(r2)
}
  432544:	f800283a 	ret

00432548 <reset_tlb>:

/*
 * Clears the entries in the CPU and SPM tables, starting with index 0
 * and ending before the position given by the 'count' variable.
 */
void reset_tlb(int count) {
  432548:	defffe04 	addi	sp,sp,-8
  43254c:	d9000115 	stw	r4,4(sp)
	int i = 0;
  432550:	d8000015 	stw	zero,0(sp)
	for(i = 0; i < count; i++) {
  432554:	d8000015 	stw	zero,0(sp)
  432558:	00000f06 	br	432598 <reset_tlb+0x50>
		*(VIRT_ADDR_TABLE + i) = 0;
  43255c:	d0e00317 	ldw	r3,-32756(gp)
  432560:	d8800017 	ldw	r2,0(sp)
  432564:	1085883a 	add	r2,r2,r2
  432568:	1085883a 	add	r2,r2,r2
  43256c:	1885883a 	add	r2,r3,r2
  432570:	10000015 	stw	zero,0(r2)
		*(PHYS_ADDR_TABLE + i) = 0;
  432574:	d0e00417 	ldw	r3,-32752(gp)
  432578:	d8800017 	ldw	r2,0(sp)
  43257c:	1085883a 	add	r2,r2,r2
  432580:	1085883a 	add	r2,r2,r2
  432584:	1885883a 	add	r2,r3,r2
  432588:	10000015 	stw	zero,0(r2)
 * Clears the entries in the CPU and SPM tables, starting with index 0
 * and ending before the position given by the 'count' variable.
 */
void reset_tlb(int count) {
	int i = 0;
	for(i = 0; i < count; i++) {
  43258c:	d8800017 	ldw	r2,0(sp)
  432590:	10800044 	addi	r2,r2,1
  432594:	d8800015 	stw	r2,0(sp)
  432598:	d8c00017 	ldw	r3,0(sp)
  43259c:	d8800117 	ldw	r2,4(sp)
  4325a0:	18bfee16 	blt	r3,r2,43255c <reset_tlb+0x14>
		*(VIRT_ADDR_TABLE + i) = 0;
		*(PHYS_ADDR_TABLE + i) = 0;
	}
}
  4325a4:	dec00204 	addi	sp,sp,8
  4325a8:	f800283a 	ret

004325ac <tlb_is_on>:

/*
 * Checks if the TLB is on or off.
 */
unsigned int tlb_is_on() {
	return (*TLB_ACTIVATE_REG != 0x00000000);
  4325ac:	d0a00517 	ldw	r2,-32748(gp)
  4325b0:	10800017 	ldw	r2,0(r2)
  4325b4:	1004c03a 	cmpne	r2,r2,zero
  4325b8:	10803fcc 	andi	r2,r2,255
}
  4325bc:	f800283a 	ret

004325c0 <set_enable>:

/*
 * Turns on the selected bits in the Enable register.
 * Does not affect any other bits in the register.
 */
void set_enable(unsigned int line) {
  4325c0:	deffff04 	addi	sp,sp,-4
  4325c4:	d9000015 	stw	r4,0(sp)
	*LINE_ENABLE_REG = *LINE_ENABLE_REG | line;
  4325c8:	d0a00117 	ldw	r2,-32764(gp)
  4325cc:	d0e00117 	ldw	r3,-32764(gp)
  4325d0:	19000017 	ldw	r4,0(r3)
  4325d4:	d8c00017 	ldw	r3,0(sp)
  4325d8:	20c6b03a 	or	r3,r4,r3
  4325dc:	10c00015 	stw	r3,0(r2)
}
  4325e0:	dec00104 	addi	sp,sp,4
  4325e4:	f800283a 	ret

004325e8 <reset_enable>:

/*
 * Turns off every bit in the Enable register.
 */
void reset_enable() {
	*LINE_ENABLE_REG = 0;
  4325e8:	d0a00117 	ldw	r2,-32764(gp)
  4325ec:	10000015 	stw	zero,0(r2)
}
  4325f0:	f800283a 	ret

004325f4 <get_enable>:

/*
 * Returns the contents of the Enable register as an unsigned integer.
 */
unsigned int get_enable() {
	return(*LINE_ENABLE_REG);
  4325f4:	d0a00117 	ldw	r2,-32764(gp)
  4325f8:	10800017 	ldw	r2,0(r2)
}
  4325fc:	f800283a 	ret

00432600 <set_valid>:

/*
 * Turns on the selected bits in the Valid register.
 * Does not affect any other bits in the register.
 */
void set_valid(unsigned int line) {
  432600:	deffff04 	addi	sp,sp,-4
  432604:	d9000015 	stw	r4,0(sp)
	*LINE_VALID_REG = *LINE_VALID_REG | line;
  432608:	d0a00217 	ldw	r2,-32760(gp)
  43260c:	d0e00217 	ldw	r3,-32760(gp)
  432610:	19000017 	ldw	r4,0(r3)
  432614:	d8c00017 	ldw	r3,0(sp)
  432618:	20c6b03a 	or	r3,r4,r3
  43261c:	10c00015 	stw	r3,0(r2)
}
  432620:	dec00104 	addi	sp,sp,4
  432624:	f800283a 	ret

00432628 <reset_valid>:

/*
 * Turns off every bit in the Valid register.
 */
void reset_valid() {
	*LINE_VALID_REG = 0;
  432628:	d0a00217 	ldw	r2,-32760(gp)
  43262c:	10000015 	stw	zero,0(r2)
}
  432630:	f800283a 	ret

00432634 <get_valid>:

/*
 * Returns the contents of the Valid register as an unsigned integer.
 */
unsigned int get_valid() {
	return(*LINE_VALID_REG);
  432634:	d0a00217 	ldw	r2,-32760(gp)
  432638:	10800017 	ldw	r2,0(r2)
}
  43263c:	f800283a 	ret

00432640 <set_cputable_entry>:
/*
 * Takes an address, and writes its tag to a specific entry in the CPU table, where
 *'index' is the position that will be written to, relative to the address pointed
 * to by the CTRL_2 pointer (i.e. index 0 of the CPU table).
 */
void set_cputable_entry(int index, unsigned int address) {
  432640:	defffe04 	addi	sp,sp,-8
  432644:	d9000015 	stw	r4,0(sp)
  432648:	d9400115 	stw	r5,4(sp)
	*(VIRT_ADDR_TABLE + index) = (address  >> PAGE_SIZE);
  43264c:	d0e00317 	ldw	r3,-32756(gp)
  432650:	d8800017 	ldw	r2,0(sp)
  432654:	1085883a 	add	r2,r2,r2
  432658:	1085883a 	add	r2,r2,r2
  43265c:	1885883a 	add	r2,r3,r2
  432660:	d8c00117 	ldw	r3,4(sp)
  432664:	1806d33a 	srli	r3,r3,12
  432668:	10c00015 	stw	r3,0(r2)

}
  43266c:	dec00204 	addi	sp,sp,8
  432670:	f800283a 	ret

00432674 <get_cputable_entry>:

/*
 * Reads the contents of the CPU table at the specified index, relative to the
 * address pointed to by the CTRL_2 pointer.
 */
unsigned int get_cputable_entry(int index) {
  432674:	deffff04 	addi	sp,sp,-4
  432678:	d9000015 	stw	r4,0(sp)
	return *(VIRT_ADDR_TABLE + index);
  43267c:	d0e00317 	ldw	r3,-32756(gp)
  432680:	d8800017 	ldw	r2,0(sp)
  432684:	1085883a 	add	r2,r2,r2
  432688:	1085883a 	add	r2,r2,r2
  43268c:	1885883a 	add	r2,r3,r2
  432690:	10800017 	ldw	r2,0(r2)
}
  432694:	dec00104 	addi	sp,sp,4
  432698:	f800283a 	ret

0043269c <set_spmtable_entry>:
/*
 * Takes an address, and writes its tag to a specific entry in the SPM table,
 * where 'index' is the position that will be written to, relative to the address
 * pointed to by the CTRL_3 pointer (i.e. index 0 of the SPM table).
 */
void set_spmtable_entry(int index, unsigned int address) {
  43269c:	defffe04 	addi	sp,sp,-8
  4326a0:	d9000015 	stw	r4,0(sp)
  4326a4:	d9400115 	stw	r5,4(sp)
	*(PHYS_ADDR_TABLE + index) = (address  >> PAGE_SIZE);
  4326a8:	d0e00417 	ldw	r3,-32752(gp)
  4326ac:	d8800017 	ldw	r2,0(sp)
  4326b0:	1085883a 	add	r2,r2,r2
  4326b4:	1085883a 	add	r2,r2,r2
  4326b8:	1885883a 	add	r2,r3,r2
  4326bc:	d8c00117 	ldw	r3,4(sp)
  4326c0:	1806d33a 	srli	r3,r3,12
  4326c4:	10c00015 	stw	r3,0(r2)
}
  4326c8:	dec00204 	addi	sp,sp,8
  4326cc:	f800283a 	ret

004326d0 <get_spmtable_entry>:

/*
 * Reads the contents of the SPM table at the specified index, relative to the
 * address pointed to by the CTRL_3 pointer.
 */
unsigned int get_spmtable_entry(int index) {
  4326d0:	deffff04 	addi	sp,sp,-4
  4326d4:	d9000015 	stw	r4,0(sp)
	return *(PHYS_ADDR_TABLE + index);
  4326d8:	d0e00417 	ldw	r3,-32752(gp)
  4326dc:	d8800017 	ldw	r2,0(sp)
  4326e0:	1085883a 	add	r2,r2,r2
  4326e4:	1085883a 	add	r2,r2,r2
  4326e8:	1885883a 	add	r2,r3,r2
  4326ec:	10800017 	ldw	r2,0(r2)
}
  4326f0:	dec00104 	addi	sp,sp,4
  4326f4:	f800283a 	ret

004326f8 <set_task_directory>:
//*********************************

#define COMPARATOR_BASE_ADDRESS CFPU_0_CSR_BASE
#define FPRINT_BASE_ADDRESS		0x8100000

void set_task_directory(Directory_Init_Struct* d){
  4326f8:	defffd04 	addi	sp,sp,-12
  4326fc:	d9000215 	stw	r4,8(sp)

	//Place the start pointer for the given task
	uint32_t* start = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
			+ CRC_DIRECTORY_START_BASE) + d->key + (d->core_id << 6);
  432700:	d8800217 	ldw	r2,8(sp)
  432704:	10c00217 	ldw	r3,8(r2)
  432708:	d8800217 	ldw	r2,8(sp)
  43270c:	10800317 	ldw	r2,12(r2)
  432710:	100491ba 	slli	r2,r2,6
  432714:	1885883a 	add	r2,r3,r2
  432718:	1085883a 	add	r2,r2,r2
  43271c:	1085883a 	add	r2,r2,r2
  432720:	1007883a 	mov	r3,r2
#define FPRINT_BASE_ADDRESS		0x8100000

void set_task_directory(Directory_Init_Struct* d){

	//Place the start pointer for the given task
	uint32_t* start = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
  432724:	00809034 	movhi	r2,576
  432728:	10801004 	addi	r2,r2,64
  43272c:	1885883a 	add	r2,r3,r2
  432730:	d8800015 	stw	r2,0(sp)
			+ CRC_DIRECTORY_START_BASE) + d->key + (d->core_id << 6);
	*start = d->start_ptr;
  432734:	d8800217 	ldw	r2,8(sp)
  432738:	10c00017 	ldw	r3,0(r2)
  43273c:	d8800017 	ldw	r2,0(sp)
  432740:	10c00015 	stw	r3,0(r2)
	//Place the end pointer for the given task
	uint32_t* end   = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
			+ CRC_DIRECTORY_END_BASE) + d->key + (d->core_id << 6);
  432744:	d8800217 	ldw	r2,8(sp)
  432748:	10c00217 	ldw	r3,8(r2)
  43274c:	d8800217 	ldw	r2,8(sp)
  432750:	10800317 	ldw	r2,12(r2)
  432754:	100491ba 	slli	r2,r2,6
  432758:	1885883a 	add	r2,r3,r2
  43275c:	1085883a 	add	r2,r2,r2
  432760:	1085883a 	add	r2,r2,r2
  432764:	1007883a 	mov	r3,r2
	//Place the start pointer for the given task
	uint32_t* start = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
			+ CRC_DIRECTORY_START_BASE) + d->key + (d->core_id << 6);
	*start = d->start_ptr;
	//Place the end pointer for the given task
	uint32_t* end   = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
  432768:	00809034 	movhi	r2,576
  43276c:	10802004 	addi	r2,r2,128
  432770:	1885883a 	add	r2,r3,r2
  432774:	d8800115 	stw	r2,4(sp)
			+ CRC_DIRECTORY_END_BASE) + d->key + (d->core_id << 6);
	*end = d->end_ptr;
  432778:	d8800217 	ldw	r2,8(sp)
  43277c:	10c00117 	ldw	r3,4(r2)
  432780:	d8800117 	ldw	r2,4(sp)
  432784:	10c00015 	stw	r3,0(r2)

}
  432788:	dec00304 	addi	sp,sp,12
  43278c:	f800283a 	ret

00432790 <enable_fprint_task>:


void enable_fprint_task(int task){
  432790:	defffe04 	addi	sp,sp,-8
  432794:	d9000115 	stw	r4,4(sp)
	//When enabling, the current state register
	//takes the key with a 1 in the MSB.
	uint32_t* fprint_currentstate = (uint32_t*)(FPRINT_BASE_ADDRESS \
  432798:	00820434 	movhi	r2,2064
  43279c:	d8800015 	stw	r2,0(sp)
											+ FPRINT_SPR_CURRENTSTATE);
	*fprint_currentstate = 0x10 | task;
  4327a0:	d8800117 	ldw	r2,4(sp)
  4327a4:	10800414 	ori	r2,r2,16
  4327a8:	1007883a 	mov	r3,r2
  4327ac:	d8800017 	ldw	r2,0(sp)
  4327b0:	10c00015 	stw	r3,0(r2)

}
  4327b4:	dec00204 	addi	sp,sp,8
  4327b8:	f800283a 	ret

004327bc <disable_fprint_task>:
void disable_fprint_task(int task){
  4327bc:	defffe04 	addi	sp,sp,-8
  4327c0:	d9000115 	stw	r4,4(sp)

	//When a task is checked in, the task number
	//must be rewritten to the current state register
	//with the MSB set to 0.
	uint32_t* fprint_currentstate = (uint32_t*)(FPRINT_BASE_ADDRESS \
  4327c4:	00820434 	movhi	r2,2064
  4327c8:	d8800015 	stw	r2,0(sp)
											+ FPRINT_SPR_CURRENTSTATE);
	*fprint_currentstate = task;
  4327cc:	d8c00117 	ldw	r3,4(sp)
  4327d0:	d8800017 	ldw	r2,0(sp)
  4327d4:	10c00015 	stw	r3,0(r2)

}
  4327d8:	dec00204 	addi	sp,sp,8
  4327dc:	f800283a 	ret

004327e0 <fprint_reset_irq>:
void fprint_reset_irq(void){
  4327e0:	deffff04 	addi	sp,sp,-4
	//In the case of a collision
	//Reset the exception register in the fingerprint unit.
	uint32_t* fprint_collision = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
  4327e4:	00809034 	movhi	r2,576
  4327e8:	10803004 	addi	r2,r2,192
  4327ec:	d8800015 	stw	r2,0(sp)
											+ COMPARATOR_EXCEPTION_OFFSET);
	*fprint_collision = 0;
  4327f0:	d8800017 	ldw	r2,0(sp)
  4327f4:	10000015 	stw	zero,0(r2)
}
  4327f8:	dec00104 	addi	sp,sp,4
  4327fc:	f800283a 	ret

00432800 <fprint_status>:

int fprint_status(Fprint_Status* fps){
  432800:	defffe04 	addi	sp,sp,-8
  432804:	d9000115 	stw	r4,4(sp)
		Fprint_Status* f = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
  432808:	00809034 	movhi	r2,576
  43280c:	10803004 	addi	r2,r2,192
  432810:	d8800015 	stw	r2,0(sp)
												+ COMPARATOR_EXCEPTION_OFFSET);
		fps->status_reg = f->status_reg;
  432814:	d8800017 	ldw	r2,0(sp)
  432818:	10c00017 	ldw	r3,0(r2)
  43281c:	d8800117 	ldw	r2,4(sp)
  432820:	10c00015 	stw	r3,0(r2)
		fps->successful_reg = f->successful_reg;
  432824:	d8800017 	ldw	r2,0(sp)
  432828:	10c00117 	ldw	r3,4(r2)
  43282c:	d8800117 	ldw	r2,4(sp)
  432830:	10c00115 	stw	r3,4(r2)
		fps->failed_reg = f->failed_reg;
  432834:	d8800017 	ldw	r2,0(sp)
  432838:	10c00217 	ldw	r3,8(r2)
  43283c:	d8800117 	ldw	r2,4(sp)
  432840:	10c00215 	stw	r3,8(r2)
		return 0;
  432844:	0005883a 	mov	r2,zero

}
  432848:	dec00204 	addi	sp,sp,8
  43284c:	f800283a 	ret

00432850 <fprint_set_block_size>:
//	int x = *fprint_collision;
//	return x;
//
//}

void fprint_set_block_size(int size){
  432850:	defffe04 	addi	sp,sp,-8
  432854:	d9000115 	stw	r4,4(sp)
	uint32_t* fprint_blocksize_reg = (uint32_t*)(FPRINT_BASE_ADDRESS \
  432858:	00820434 	movhi	r2,2064
  43285c:	10800404 	addi	r2,r2,16
  432860:	d8800015 	stw	r2,0(sp)
												+ 0x10);

	*fprint_blocksize_reg = size;
  432864:	d8c00117 	ldw	r3,4(sp)
  432868:	d8800017 	ldw	r2,0(sp)
  43286c:	10c00015 	stw	r3,0(r2)

}
  432870:	dec00204 	addi	sp,sp,8
  432874:	f800283a 	ret

00432878 <set_core_assignment>:

void set_core_assignment(int table_column, int core_id, int task_id){
  432878:	defffc04 	addi	sp,sp,-16
  43287c:	d9000115 	stw	r4,4(sp)
  432880:	d9400215 	stw	r5,8(sp)
  432884:	d9800315 	stw	r6,12(sp)
	uint32_t* fprint_core_entry = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
													+ (table_column << 8) + COMPARATOR_CORE_ASSIGNMENT_OFFSET);
  432888:	d8800117 	ldw	r2,4(sp)
  43288c:	1006923a 	slli	r3,r2,8
  432890:	00809034 	movhi	r2,576
  432894:	10803404 	addi	r2,r2,208
  432898:	1885883a 	add	r2,r3,r2
	*fprint_blocksize_reg = size;

}

void set_core_assignment(int table_column, int core_id, int task_id){
	uint32_t* fprint_core_entry = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
  43289c:	d8800015 	stw	r2,0(sp)
													+ (table_column << 8) + COMPARATOR_CORE_ASSIGNMENT_OFFSET);

    *fprint_core_entry = (task_id << 4) + core_id;
  4328a0:	d8800317 	ldw	r2,12(sp)
  4328a4:	1006913a 	slli	r3,r2,4
  4328a8:	d8800217 	ldw	r2,8(sp)
  4328ac:	1885883a 	add	r2,r3,r2
  4328b0:	1007883a 	mov	r3,r2
  4328b4:	d8800017 	ldw	r2,0(sp)
  4328b8:	10c00015 	stw	r3,0(r2)
}
  4328bc:	dec00404 	addi	sp,sp,16
  4328c0:	f800283a 	ret

004328c4 <set_core_assignment_table>:

void set_core_assignment_table(Core_Assignment_Table* ca){
  4328c4:	defffb04 	addi	sp,sp,-20
  4328c8:	dfc00415 	stw	ra,16(sp)
  4328cc:	d9000315 	stw	r4,12(sp)

	int i,j;
	for(i = 0; i < CA_TABLE_MAX_REDUNDANCY; i++){
  4328d0:	d8000015 	stw	zero,0(sp)
  4328d4:	00001a06 	br	432940 <set_core_assignment_table+0x7c>
		for(j = 0; j < CA_TABLE_NUM_TASKS; j++){
  4328d8:	d8000115 	stw	zero,4(sp)
  4328dc:	00001206 	br	432928 <set_core_assignment_table+0x64>
			uint32_t a = ca->table[i][j];
  4328e0:	d8c00317 	ldw	r3,12(sp)
  4328e4:	d8800017 	ldw	r2,0(sp)
  4328e8:	1008913a 	slli	r4,r2,4
  4328ec:	d8800117 	ldw	r2,4(sp)
  4328f0:	2085883a 	add	r2,r4,r2
  4328f4:	1085883a 	add	r2,r2,r2
  4328f8:	1085883a 	add	r2,r2,r2
  4328fc:	1885883a 	add	r2,r3,r2
  432900:	10800017 	ldw	r2,0(r2)
  432904:	d8800215 	stw	r2,8(sp)
			set_core_assignment(i,a,j);
  432908:	d8800217 	ldw	r2,8(sp)
  43290c:	d9000017 	ldw	r4,0(sp)
  432910:	100b883a 	mov	r5,r2
  432914:	d9800117 	ldw	r6,4(sp)
  432918:	04328780 	call	432878 <set_core_assignment>

void set_core_assignment_table(Core_Assignment_Table* ca){

	int i,j;
	for(i = 0; i < CA_TABLE_MAX_REDUNDANCY; i++){
		for(j = 0; j < CA_TABLE_NUM_TASKS; j++){
  43291c:	d8800117 	ldw	r2,4(sp)
  432920:	10800044 	addi	r2,r2,1
  432924:	d8800115 	stw	r2,4(sp)
  432928:	d8800117 	ldw	r2,4(sp)
  43292c:	10800410 	cmplti	r2,r2,16
  432930:	103feb1e 	bne	r2,zero,4328e0 <set_core_assignment_table+0x1c>
}

void set_core_assignment_table(Core_Assignment_Table* ca){

	int i,j;
	for(i = 0; i < CA_TABLE_MAX_REDUNDANCY; i++){
  432934:	d8800017 	ldw	r2,0(sp)
  432938:	10800044 	addi	r2,r2,1
  43293c:	d8800015 	stw	r2,0(sp)
  432940:	d8800017 	ldw	r2,0(sp)
  432944:	10800090 	cmplti	r2,r2,2
  432948:	103fe31e 	bne	r2,zero,4328d8 <set_core_assignment_table+0x14>
		for(j = 0; j < CA_TABLE_NUM_TASKS; j++){
			uint32_t a = ca->table[i][j];
			set_core_assignment(i,a,j);
		}
	}
}
  43294c:	dfc00417 	ldw	ra,16(sp)
  432950:	dec00504 	addi	sp,sp,20
  432954:	f800283a 	ret

00432958 <context_switch>:
	.text
	.globl context_switch

context_switch:
	 	stw   r16,  0(r4)
  432958:	24000015 	stw	r16,0(r4)
	 	stw   r17,  4(r4)
  43295c:	24400115 	stw	r17,4(r4)
	 	stw   r18,  8(r4)
  432960:	24800215 	stw	r18,8(r4)
	 	stw   r19,  12(r4)
  432964:	24c00315 	stw	r19,12(r4)
	 	stw   r20,  16(r4)
  432968:	25000415 	stw	r20,16(r4)
	 	stw   r21,  20(r4)
  43296c:	25400515 	stw	r21,20(r4)
	 	stw   r22,  24(r4)
  432970:	25800615 	stw	r22,24(r4)
	 	stw   r23,  28(r4)
  432974:	25c00715 	stw	r23,28(r4)

      	movi r16, 0
  432978:	04000004 	movi	r16,0
		movi r17, 0
  43297c:	04400004 	movi	r17,0
		movi r18, 0
  432980:	04800004 	movi	r18,0
		movi r19, 0
  432984:	04c00004 	movi	r19,0
		movi r20, 0
  432988:	05000004 	movi	r20,0
		movi r21, 0
  43298c:	05400004 	movi	r21,0
		movi r22, 0
  432990:	05800004 	movi	r22,0
		movi r23, 0
  432994:	05c00004 	movi	r23,0

		ret
  432998:	f800283a 	ret

0043299c <context_restore>:

	.globl context_restore

context_restore:
	 	ldw   r16,  0(r4)
  43299c:	24000017 	ldw	r16,0(r4)
        ldw   r17,  4(r4)
  4329a0:	24400117 	ldw	r17,4(r4)
        ldw   r18,  8(r4)
  4329a4:	24800217 	ldw	r18,8(r4)
        ldw   r19,  12(r4)
  4329a8:	24c00317 	ldw	r19,12(r4)
        ldw   r20,  16(r4)
  4329ac:	25000417 	ldw	r20,16(r4)
        ldw   r21,  20(r4)
  4329b0:	25400517 	ldw	r21,20(r4)
        ldw   r22,  24(r4)
  4329b4:	25800617 	ldw	r22,24(r4)
        ldw   r23,  28(r4)
  4329b8:	25c00717 	ldw	r23,28(r4)

		ret
  4329bc:	f800283a 	ret

004329c0 <get_gp>:
	.text
	.globl get_gp

get_gp:
    	movhi r2, %hi(_gp)
  4329c0:	00801134 	movhi	r2,68
    	ori r2, r2, %lo(_gp)
  4329c4:	10b6f714 	ori	r2,r2,56284
		ret
  4329c8:	f800283a 	ret

004329cc <set_gp>:
	.globl set_gp
set_gp:
	   	movhi r2,  0x0300
  4329cc:	0080c034 	movhi	r2,768
	   	ldw gp, 0(r2)
  4329d0:	16800017 	ldw	gp,0(r2)
		ret
  4329d4:	f800283a 	ret

004329d8 <restore_gp>:
	.globl restore_gp
restore_gp:
		movhi gp, %hi(_gp)
  4329d8:	06801134 	movhi	gp,68
		ori gp, gp, %lo(_gp)
  4329dc:	d6b6f714 	ori	gp,gp,56284
		ret
  4329e0:	f800283a 	ret

004329e4 <_puts_r>:
  4329e4:	defff604 	addi	sp,sp,-40
  4329e8:	dc400815 	stw	r17,32(sp)
  4329ec:	2023883a 	mov	r17,r4
  4329f0:	2809883a 	mov	r4,r5
  4329f4:	dc000715 	stw	r16,28(sp)
  4329f8:	dfc00915 	stw	ra,36(sp)
  4329fc:	2821883a 	mov	r16,r5
  432a00:	0432a7c0 	call	432a7c <strlen>
  432a04:	10c00044 	addi	r3,r2,1
  432a08:	d8800115 	stw	r2,4(sp)
  432a0c:	89400217 	ldw	r5,8(r17)
  432a10:	00801134 	movhi	r2,68
  432a14:	108fc604 	addi	r2,r2,16152
  432a18:	d8800215 	stw	r2,8(sp)
  432a1c:	00800044 	movi	r2,1
  432a20:	d8800315 	stw	r2,12(sp)
  432a24:	8809883a 	mov	r4,r17
  432a28:	00800084 	movi	r2,2
  432a2c:	d9800404 	addi	r6,sp,16
  432a30:	dc000015 	stw	r16,0(sp)
  432a34:	d8c00615 	stw	r3,24(sp)
  432a38:	dec00415 	stw	sp,16(sp)
  432a3c:	d8800515 	stw	r2,20(sp)
  432a40:	0432b080 	call	432b08 <__sfvwrite_r>
  432a44:	1000061e 	bne	r2,zero,432a60 <_puts_r+0x7c>
  432a48:	00800284 	movi	r2,10
  432a4c:	dfc00917 	ldw	ra,36(sp)
  432a50:	dc400817 	ldw	r17,32(sp)
  432a54:	dc000717 	ldw	r16,28(sp)
  432a58:	dec00a04 	addi	sp,sp,40
  432a5c:	f800283a 	ret
  432a60:	00bfffc4 	movi	r2,-1
  432a64:	003ff906 	br	432a4c <_puts_r+0x68>

00432a68 <puts>:
  432a68:	00801134 	movhi	r2,68
  432a6c:	1096fe04 	addi	r2,r2,23544
  432a70:	200b883a 	mov	r5,r4
  432a74:	11000017 	ldw	r4,0(r2)
  432a78:	04329e41 	jmpi	4329e4 <_puts_r>

00432a7c <strlen>:
  432a7c:	208000cc 	andi	r2,r4,3
  432a80:	10001f1e 	bne	r2,zero,432b00 <strlen+0x84>
  432a84:	20800017 	ldw	r2,0(r4)
  432a88:	01ffbff4 	movhi	r7,65279
  432a8c:	39ffbfc4 	addi	r7,r7,-257
  432a90:	01a02074 	movhi	r6,32897
  432a94:	31a02004 	addi	r6,r6,-32640
  432a98:	11c7883a 	add	r3,r2,r7
  432a9c:	0084303a 	nor	r2,zero,r2
  432aa0:	1886703a 	and	r3,r3,r2
  432aa4:	1986703a 	and	r3,r3,r6
  432aa8:	2005883a 	mov	r2,r4
  432aac:	1800101e 	bne	r3,zero,432af0 <strlen+0x74>
  432ab0:	10800104 	addi	r2,r2,4
  432ab4:	10c00017 	ldw	r3,0(r2)
  432ab8:	19cb883a 	add	r5,r3,r7
  432abc:	00c6303a 	nor	r3,zero,r3
  432ac0:	28c6703a 	and	r3,r5,r3
  432ac4:	1986703a 	and	r3,r3,r6
  432ac8:	1800091e 	bne	r3,zero,432af0 <strlen+0x74>
  432acc:	10800104 	addi	r2,r2,4
  432ad0:	10c00017 	ldw	r3,0(r2)
  432ad4:	19cb883a 	add	r5,r3,r7
  432ad8:	00c6303a 	nor	r3,zero,r3
  432adc:	28c6703a 	and	r3,r5,r3
  432ae0:	1986703a 	and	r3,r3,r6
  432ae4:	183ff226 	beq	r3,zero,432ab0 <strlen+0x34>
  432ae8:	00000106 	br	432af0 <strlen+0x74>
  432aec:	10800044 	addi	r2,r2,1
  432af0:	10c00007 	ldb	r3,0(r2)
  432af4:	183ffd1e 	bne	r3,zero,432aec <strlen+0x70>
  432af8:	1105c83a 	sub	r2,r2,r4
  432afc:	f800283a 	ret
  432b00:	2005883a 	mov	r2,r4
  432b04:	003ffa06 	br	432af0 <strlen+0x74>

00432b08 <__sfvwrite_r>:
  432b08:	30800217 	ldw	r2,8(r6)
  432b0c:	defff504 	addi	sp,sp,-44
  432b10:	dd400615 	stw	r21,24(sp)
  432b14:	dd000515 	stw	r20,20(sp)
  432b18:	dc000115 	stw	r16,4(sp)
  432b1c:	dfc00a15 	stw	ra,40(sp)
  432b20:	df000915 	stw	fp,36(sp)
  432b24:	ddc00815 	stw	r23,32(sp)
  432b28:	dd800715 	stw	r22,28(sp)
  432b2c:	dcc00415 	stw	r19,16(sp)
  432b30:	dc800315 	stw	r18,12(sp)
  432b34:	dc400215 	stw	r17,8(sp)
  432b38:	3029883a 	mov	r20,r6
  432b3c:	202b883a 	mov	r21,r4
  432b40:	2821883a 	mov	r16,r5
  432b44:	10002126 	beq	r2,zero,432bcc <__sfvwrite_r+0xc4>
  432b48:	2880030b 	ldhu	r2,12(r5)
  432b4c:	10c0020c 	andi	r3,r2,8
  432b50:	18ffffcc 	andi	r3,r3,65535
  432b54:	18e0001c 	xori	r3,r3,32768
  432b58:	18e00004 	addi	r3,r3,-32768
  432b5c:	18002826 	beq	r3,zero,432c00 <__sfvwrite_r+0xf8>
  432b60:	28c00417 	ldw	r3,16(r5)
  432b64:	18002626 	beq	r3,zero,432c00 <__sfvwrite_r+0xf8>
  432b68:	10c0008c 	andi	r3,r2,2
  432b6c:	18ffffcc 	andi	r3,r3,65535
  432b70:	18e0001c 	xori	r3,r3,32768
  432b74:	18e00004 	addi	r3,r3,-32768
  432b78:	a4400017 	ldw	r17,0(r20)
  432b7c:	18002b26 	beq	r3,zero,432c2c <__sfvwrite_r+0x124>
  432b80:	0027883a 	mov	r19,zero
  432b84:	0025883a 	mov	r18,zero
  432b88:	05810004 	movi	r22,1024
  432b8c:	980d883a 	mov	r6,r19
  432b90:	a809883a 	mov	r4,r21
  432b94:	90004f26 	beq	r18,zero,432cd4 <__sfvwrite_r+0x1cc>
  432b98:	900f883a 	mov	r7,r18
  432b9c:	81400717 	ldw	r5,28(r16)
  432ba0:	b480012e 	bgeu	r22,r18,432ba8 <__sfvwrite_r+0xa0>
  432ba4:	01c10004 	movi	r7,1024
  432ba8:	80800917 	ldw	r2,36(r16)
  432bac:	103ee83a 	callr	r2
  432bb0:	0080540e 	bge	zero,r2,432d04 <__sfvwrite_r+0x1fc>
  432bb4:	a0c00217 	ldw	r3,8(r20)
  432bb8:	98a7883a 	add	r19,r19,r2
  432bbc:	90a5c83a 	sub	r18,r18,r2
  432bc0:	1885c83a 	sub	r2,r3,r2
  432bc4:	a0800215 	stw	r2,8(r20)
  432bc8:	103ff01e 	bne	r2,zero,432b8c <__sfvwrite_r+0x84>
  432bcc:	0005883a 	mov	r2,zero
  432bd0:	dfc00a17 	ldw	ra,40(sp)
  432bd4:	df000917 	ldw	fp,36(sp)
  432bd8:	ddc00817 	ldw	r23,32(sp)
  432bdc:	dd800717 	ldw	r22,28(sp)
  432be0:	dd400617 	ldw	r21,24(sp)
  432be4:	dd000517 	ldw	r20,20(sp)
  432be8:	dcc00417 	ldw	r19,16(sp)
  432bec:	dc800317 	ldw	r18,12(sp)
  432bf0:	dc400217 	ldw	r17,8(sp)
  432bf4:	dc000117 	ldw	r16,4(sp)
  432bf8:	dec00b04 	addi	sp,sp,44
  432bfc:	f800283a 	ret
  432c00:	a809883a 	mov	r4,r21
  432c04:	800b883a 	mov	r5,r16
  432c08:	04341940 	call	434194 <__swsetup_r>
  432c0c:	1000f01e 	bne	r2,zero,432fd0 <__sfvwrite_r+0x4c8>
  432c10:	8080030b 	ldhu	r2,12(r16)
  432c14:	a4400017 	ldw	r17,0(r20)
  432c18:	10c0008c 	andi	r3,r2,2
  432c1c:	18ffffcc 	andi	r3,r3,65535
  432c20:	18e0001c 	xori	r3,r3,32768
  432c24:	18e00004 	addi	r3,r3,-32768
  432c28:	183fd51e 	bne	r3,zero,432b80 <__sfvwrite_r+0x78>
  432c2c:	10c0004c 	andi	r3,r2,1
  432c30:	002d883a 	mov	r22,zero
  432c34:	1800381e 	bne	r3,zero,432d18 <__sfvwrite_r+0x210>
  432c38:	0025883a 	mov	r18,zero
  432c3c:	90002126 	beq	r18,zero,432cc4 <__sfvwrite_r+0x1bc>
  432c40:	10c0800c 	andi	r3,r2,512
  432c44:	18ffffcc 	andi	r3,r3,65535
  432c48:	18e0001c 	xori	r3,r3,32768
  432c4c:	18e00004 	addi	r3,r3,-32768
  432c50:	84c00217 	ldw	r19,8(r16)
  432c54:	18006b26 	beq	r3,zero,432e04 <__sfvwrite_r+0x2fc>
  432c58:	980f883a 	mov	r7,r19
  432c5c:	94c08636 	bltu	r18,r19,432e78 <__sfvwrite_r+0x370>
  432c60:	10c1200c 	andi	r3,r2,1152
  432c64:	18009f1e 	bne	r3,zero,432ee4 <__sfvwrite_r+0x3dc>
  432c68:	81000017 	ldw	r4,0(r16)
  432c6c:	982f883a 	mov	r23,r19
  432c70:	9039883a 	mov	fp,r18
  432c74:	9027883a 	mov	r19,r18
  432c78:	380d883a 	mov	r6,r7
  432c7c:	b00b883a 	mov	r5,r22
  432c80:	d9c00015 	stw	r7,0(sp)
  432c84:	04339a80 	call	4339a8 <memmove>
  432c88:	d9c00017 	ldw	r7,0(sp)
  432c8c:	81000217 	ldw	r4,8(r16)
  432c90:	80800017 	ldw	r2,0(r16)
  432c94:	25efc83a 	sub	r23,r4,r23
  432c98:	11cf883a 	add	r7,r2,r7
  432c9c:	85c00215 	stw	r23,8(r16)
  432ca0:	81c00015 	stw	r7,0(r16)
  432ca4:	a0800217 	ldw	r2,8(r20)
  432ca8:	b72d883a 	add	r22,r22,fp
  432cac:	9725c83a 	sub	r18,r18,fp
  432cb0:	14e7c83a 	sub	r19,r2,r19
  432cb4:	a4c00215 	stw	r19,8(r20)
  432cb8:	983fc426 	beq	r19,zero,432bcc <__sfvwrite_r+0xc4>
  432cbc:	8080030b 	ldhu	r2,12(r16)
  432cc0:	903fdf1e 	bne	r18,zero,432c40 <__sfvwrite_r+0x138>
  432cc4:	8d800017 	ldw	r22,0(r17)
  432cc8:	8c800117 	ldw	r18,4(r17)
  432ccc:	8c400204 	addi	r17,r17,8
  432cd0:	003fda06 	br	432c3c <__sfvwrite_r+0x134>
  432cd4:	8cc00017 	ldw	r19,0(r17)
  432cd8:	8c800117 	ldw	r18,4(r17)
  432cdc:	8c400204 	addi	r17,r17,8
  432ce0:	003faa06 	br	432b8c <__sfvwrite_r+0x84>
  432ce4:	0433b340 	call	433b34 <_realloc_r>
  432ce8:	102f883a 	mov	r23,r2
  432cec:	10009f1e 	bne	r2,zero,432f6c <__sfvwrite_r+0x464>
  432cf0:	81400417 	ldw	r5,16(r16)
  432cf4:	a809883a 	mov	r4,r21
  432cf8:	04349480 	call	434948 <_free_r>
  432cfc:	00800304 	movi	r2,12
  432d00:	a8800015 	stw	r2,0(r21)
  432d04:	80c0030b 	ldhu	r3,12(r16)
  432d08:	00bfffc4 	movi	r2,-1
  432d0c:	18c01014 	ori	r3,r3,64
  432d10:	80c0030d 	sth	r3,12(r16)
  432d14:	003fae06 	br	432bd0 <__sfvwrite_r+0xc8>
  432d18:	0007883a 	mov	r3,zero
  432d1c:	0039883a 	mov	fp,zero
  432d20:	0025883a 	mov	r18,zero
  432d24:	90001e26 	beq	r18,zero,432da0 <__sfvwrite_r+0x298>
  432d28:	18006526 	beq	r3,zero,432ec0 <__sfvwrite_r+0x3b8>
  432d2c:	b02f883a 	mov	r23,r22
  432d30:	9580012e 	bgeu	r18,r22,432d38 <__sfvwrite_r+0x230>
  432d34:	902f883a 	mov	r23,r18
  432d38:	81000017 	ldw	r4,0(r16)
  432d3c:	80800417 	ldw	r2,16(r16)
  432d40:	84c00217 	ldw	r19,8(r16)
  432d44:	81c00517 	ldw	r7,20(r16)
  432d48:	1100022e 	bgeu	r2,r4,432d54 <__sfvwrite_r+0x24c>
  432d4c:	99e7883a 	add	r19,r19,r7
  432d50:	9dc01816 	blt	r19,r23,432db4 <__sfvwrite_r+0x2ac>
  432d54:	b9c03b16 	blt	r23,r7,432e44 <__sfvwrite_r+0x33c>
  432d58:	80800917 	ldw	r2,36(r16)
  432d5c:	81400717 	ldw	r5,28(r16)
  432d60:	a809883a 	mov	r4,r21
  432d64:	d8c00015 	stw	r3,0(sp)
  432d68:	e00d883a 	mov	r6,fp
  432d6c:	103ee83a 	callr	r2
  432d70:	1027883a 	mov	r19,r2
  432d74:	d8c00017 	ldw	r3,0(sp)
  432d78:	00bfe20e 	bge	zero,r2,432d04 <__sfvwrite_r+0x1fc>
  432d7c:	b4edc83a 	sub	r22,r22,r19
  432d80:	b0001a26 	beq	r22,zero,432dec <__sfvwrite_r+0x2e4>
  432d84:	a0800217 	ldw	r2,8(r20)
  432d88:	e4f9883a 	add	fp,fp,r19
  432d8c:	94e5c83a 	sub	r18,r18,r19
  432d90:	14e7c83a 	sub	r19,r2,r19
  432d94:	a4c00215 	stw	r19,8(r20)
  432d98:	983f8c26 	beq	r19,zero,432bcc <__sfvwrite_r+0xc4>
  432d9c:	903fe21e 	bne	r18,zero,432d28 <__sfvwrite_r+0x220>
  432da0:	8f000017 	ldw	fp,0(r17)
  432da4:	8c800117 	ldw	r18,4(r17)
  432da8:	0007883a 	mov	r3,zero
  432dac:	8c400204 	addi	r17,r17,8
  432db0:	003fdc06 	br	432d24 <__sfvwrite_r+0x21c>
  432db4:	e00b883a 	mov	r5,fp
  432db8:	980d883a 	mov	r6,r19
  432dbc:	d8c00015 	stw	r3,0(sp)
  432dc0:	04339a80 	call	4339a8 <memmove>
  432dc4:	80800017 	ldw	r2,0(r16)
  432dc8:	a809883a 	mov	r4,r21
  432dcc:	800b883a 	mov	r5,r16
  432dd0:	14c5883a 	add	r2,r2,r19
  432dd4:	80800015 	stw	r2,0(r16)
  432dd8:	04343080 	call	434308 <_fflush_r>
  432ddc:	d8c00017 	ldw	r3,0(sp)
  432de0:	103fc81e 	bne	r2,zero,432d04 <__sfvwrite_r+0x1fc>
  432de4:	b4edc83a 	sub	r22,r22,r19
  432de8:	b03fe61e 	bne	r22,zero,432d84 <__sfvwrite_r+0x27c>
  432dec:	a809883a 	mov	r4,r21
  432df0:	800b883a 	mov	r5,r16
  432df4:	04343080 	call	434308 <_fflush_r>
  432df8:	103fc21e 	bne	r2,zero,432d04 <__sfvwrite_r+0x1fc>
  432dfc:	0007883a 	mov	r3,zero
  432e00:	003fe006 	br	432d84 <__sfvwrite_r+0x27c>
  432e04:	81000017 	ldw	r4,0(r16)
  432e08:	80800417 	ldw	r2,16(r16)
  432e0c:	1100022e 	bgeu	r2,r4,432e18 <__sfvwrite_r+0x310>
  432e10:	9839883a 	mov	fp,r19
  432e14:	9c806036 	bltu	r19,r18,432f98 <__sfvwrite_r+0x490>
  432e18:	81c00517 	ldw	r7,20(r16)
  432e1c:	91c01c36 	bltu	r18,r7,432e90 <__sfvwrite_r+0x388>
  432e20:	80800917 	ldw	r2,36(r16)
  432e24:	81400717 	ldw	r5,28(r16)
  432e28:	a809883a 	mov	r4,r21
  432e2c:	b00d883a 	mov	r6,r22
  432e30:	103ee83a 	callr	r2
  432e34:	1027883a 	mov	r19,r2
  432e38:	00bfb20e 	bge	zero,r2,432d04 <__sfvwrite_r+0x1fc>
  432e3c:	1039883a 	mov	fp,r2
  432e40:	003f9806 	br	432ca4 <__sfvwrite_r+0x19c>
  432e44:	b80d883a 	mov	r6,r23
  432e48:	e00b883a 	mov	r5,fp
  432e4c:	d8c00015 	stw	r3,0(sp)
  432e50:	04339a80 	call	4339a8 <memmove>
  432e54:	80800217 	ldw	r2,8(r16)
  432e58:	81000017 	ldw	r4,0(r16)
  432e5c:	b827883a 	mov	r19,r23
  432e60:	15c5c83a 	sub	r2,r2,r23
  432e64:	25ef883a 	add	r23,r4,r23
  432e68:	80800215 	stw	r2,8(r16)
  432e6c:	85c00015 	stw	r23,0(r16)
  432e70:	d8c00017 	ldw	r3,0(sp)
  432e74:	003fc106 	br	432d7c <__sfvwrite_r+0x274>
  432e78:	81000017 	ldw	r4,0(r16)
  432e7c:	902f883a 	mov	r23,r18
  432e80:	9039883a 	mov	fp,r18
  432e84:	9027883a 	mov	r19,r18
  432e88:	900f883a 	mov	r7,r18
  432e8c:	003f7a06 	br	432c78 <__sfvwrite_r+0x170>
  432e90:	b00b883a 	mov	r5,r22
  432e94:	900d883a 	mov	r6,r18
  432e98:	04339a80 	call	4339a8 <memmove>
  432e9c:	80c00217 	ldw	r3,8(r16)
  432ea0:	80800017 	ldw	r2,0(r16)
  432ea4:	9027883a 	mov	r19,r18
  432ea8:	1c87c83a 	sub	r3,r3,r18
  432eac:	1485883a 	add	r2,r2,r18
  432eb0:	80c00215 	stw	r3,8(r16)
  432eb4:	80800015 	stw	r2,0(r16)
  432eb8:	9039883a 	mov	fp,r18
  432ebc:	003f7906 	br	432ca4 <__sfvwrite_r+0x19c>
  432ec0:	e009883a 	mov	r4,fp
  432ec4:	01400284 	movi	r5,10
  432ec8:	900d883a 	mov	r6,r18
  432ecc:	04337700 	call	433770 <memchr>
  432ed0:	10003c26 	beq	r2,zero,432fc4 <__sfvwrite_r+0x4bc>
  432ed4:	15800044 	addi	r22,r2,1
  432ed8:	b72dc83a 	sub	r22,r22,fp
  432edc:	00c00044 	movi	r3,1
  432ee0:	003f9206 	br	432d2c <__sfvwrite_r+0x224>
  432ee4:	81000517 	ldw	r4,20(r16)
  432ee8:	81400417 	ldw	r5,16(r16)
  432eec:	80c00017 	ldw	r3,0(r16)
  432ef0:	210d883a 	add	r6,r4,r4
  432ef4:	3109883a 	add	r4,r6,r4
  432ef8:	2026d7fa 	srli	r19,r4,31
  432efc:	1979c83a 	sub	fp,r3,r5
  432f00:	e1800044 	addi	r6,fp,1
  432f04:	9909883a 	add	r4,r19,r4
  432f08:	2027d07a 	srai	r19,r4,1
  432f0c:	3489883a 	add	r4,r6,r18
  432f10:	980d883a 	mov	r6,r19
  432f14:	9900022e 	bgeu	r19,r4,432f20 <__sfvwrite_r+0x418>
  432f18:	2027883a 	mov	r19,r4
  432f1c:	200d883a 	mov	r6,r4
  432f20:	1081000c 	andi	r2,r2,1024
  432f24:	10bfffcc 	andi	r2,r2,65535
  432f28:	10a0001c 	xori	r2,r2,32768
  432f2c:	10a00004 	addi	r2,r2,-32768
  432f30:	a809883a 	mov	r4,r21
  432f34:	103f6b26 	beq	r2,zero,432ce4 <__sfvwrite_r+0x1dc>
  432f38:	300b883a 	mov	r5,r6
  432f3c:	0432fec0 	call	432fec <_malloc_r>
  432f40:	102f883a 	mov	r23,r2
  432f44:	103f6d26 	beq	r2,zero,432cfc <__sfvwrite_r+0x1f4>
  432f48:	81400417 	ldw	r5,16(r16)
  432f4c:	1009883a 	mov	r4,r2
  432f50:	e00d883a 	mov	r6,fp
  432f54:	04338680 	call	433868 <memcpy>
  432f58:	8080030b 	ldhu	r2,12(r16)
  432f5c:	00fedfc4 	movi	r3,-1153
  432f60:	10c4703a 	and	r2,r2,r3
  432f64:	10802014 	ori	r2,r2,128
  432f68:	8080030d 	sth	r2,12(r16)
  432f6c:	bf09883a 	add	r4,r23,fp
  432f70:	9f07c83a 	sub	r3,r19,fp
  432f74:	85c00415 	stw	r23,16(r16)
  432f78:	84c00515 	stw	r19,20(r16)
  432f7c:	81000015 	stw	r4,0(r16)
  432f80:	902f883a 	mov	r23,r18
  432f84:	80c00215 	stw	r3,8(r16)
  432f88:	9039883a 	mov	fp,r18
  432f8c:	9027883a 	mov	r19,r18
  432f90:	900f883a 	mov	r7,r18
  432f94:	003f3806 	br	432c78 <__sfvwrite_r+0x170>
  432f98:	b00b883a 	mov	r5,r22
  432f9c:	980d883a 	mov	r6,r19
  432fa0:	04339a80 	call	4339a8 <memmove>
  432fa4:	80800017 	ldw	r2,0(r16)
  432fa8:	a809883a 	mov	r4,r21
  432fac:	800b883a 	mov	r5,r16
  432fb0:	14c5883a 	add	r2,r2,r19
  432fb4:	80800015 	stw	r2,0(r16)
  432fb8:	04343080 	call	434308 <_fflush_r>
  432fbc:	103f3926 	beq	r2,zero,432ca4 <__sfvwrite_r+0x19c>
  432fc0:	003f5006 	br	432d04 <__sfvwrite_r+0x1fc>
  432fc4:	95800044 	addi	r22,r18,1
  432fc8:	00c00044 	movi	r3,1
  432fcc:	003f5706 	br	432d2c <__sfvwrite_r+0x224>
  432fd0:	80c0030b 	ldhu	r3,12(r16)
  432fd4:	00bfffc4 	movi	r2,-1
  432fd8:	18c01014 	ori	r3,r3,64
  432fdc:	80c0030d 	sth	r3,12(r16)
  432fe0:	00c00244 	movi	r3,9
  432fe4:	a8c00015 	stw	r3,0(r21)
  432fe8:	003ef906 	br	432bd0 <__sfvwrite_r+0xc8>

00432fec <_malloc_r>:
  432fec:	defff604 	addi	sp,sp,-40
  432ff0:	dc800215 	stw	r18,8(sp)
  432ff4:	dfc00915 	stw	ra,36(sp)
  432ff8:	df000815 	stw	fp,32(sp)
  432ffc:	ddc00715 	stw	r23,28(sp)
  433000:	dd800615 	stw	r22,24(sp)
  433004:	dd400515 	stw	r21,20(sp)
  433008:	dd000415 	stw	r20,16(sp)
  43300c:	dcc00315 	stw	r19,12(sp)
  433010:	dc400115 	stw	r17,4(sp)
  433014:	dc000015 	stw	r16,0(sp)
  433018:	288002c4 	addi	r2,r5,11
  43301c:	00c00584 	movi	r3,22
  433020:	2025883a 	mov	r18,r4
  433024:	18802b2e 	bgeu	r3,r2,4330d4 <_malloc_r+0xe8>
  433028:	047ffe04 	movi	r17,-8
  43302c:	1462703a 	and	r17,r2,r17
  433030:	88002a16 	blt	r17,zero,4330dc <_malloc_r+0xf0>
  433034:	89402936 	bltu	r17,r5,4330dc <_malloc_r+0xf0>
  433038:	9009883a 	mov	r4,r18
  43303c:	04363b00 	call	4363b0 <__malloc_lock>
  433040:	00807dc4 	movi	r2,503
  433044:	14402936 	bltu	r2,r17,4330ec <_malloc_r+0x100>
  433048:	8808d0fa 	srli	r4,r17,3
  43304c:	04c01134 	movhi	r19,68
  433050:	9cd16b04 	addi	r19,r19,17836
  433054:	2105883a 	add	r2,r4,r4
  433058:	1085883a 	add	r2,r2,r2
  43305c:	1085883a 	add	r2,r2,r2
  433060:	9885883a 	add	r2,r19,r2
  433064:	14000317 	ldw	r16,12(r2)
  433068:	80815526 	beq	r16,r2,4335c0 <_malloc_r+0x5d4>
  43306c:	81000117 	ldw	r4,4(r16)
  433070:	00bfff04 	movi	r2,-4
  433074:	80c00317 	ldw	r3,12(r16)
  433078:	2084703a 	and	r2,r4,r2
  43307c:	8085883a 	add	r2,r16,r2
  433080:	11800117 	ldw	r6,4(r2)
  433084:	81400217 	ldw	r5,8(r16)
  433088:	9009883a 	mov	r4,r18
  43308c:	31800054 	ori	r6,r6,1
  433090:	11800115 	stw	r6,4(r2)
  433094:	28c00315 	stw	r3,12(r5)
  433098:	19400215 	stw	r5,8(r3)
  43309c:	043651c0 	call	43651c <__malloc_unlock>
  4330a0:	80800204 	addi	r2,r16,8
  4330a4:	dfc00917 	ldw	ra,36(sp)
  4330a8:	df000817 	ldw	fp,32(sp)
  4330ac:	ddc00717 	ldw	r23,28(sp)
  4330b0:	dd800617 	ldw	r22,24(sp)
  4330b4:	dd400517 	ldw	r21,20(sp)
  4330b8:	dd000417 	ldw	r20,16(sp)
  4330bc:	dcc00317 	ldw	r19,12(sp)
  4330c0:	dc800217 	ldw	r18,8(sp)
  4330c4:	dc400117 	ldw	r17,4(sp)
  4330c8:	dc000017 	ldw	r16,0(sp)
  4330cc:	dec00a04 	addi	sp,sp,40
  4330d0:	f800283a 	ret
  4330d4:	04400404 	movi	r17,16
  4330d8:	897fd72e 	bgeu	r17,r5,433038 <_malloc_r+0x4c>
  4330dc:	00800304 	movi	r2,12
  4330e0:	90800015 	stw	r2,0(r18)
  4330e4:	0005883a 	mov	r2,zero
  4330e8:	003fee06 	br	4330a4 <_malloc_r+0xb8>
  4330ec:	8808d27a 	srli	r4,r17,9
  4330f0:	20007126 	beq	r4,zero,4332b8 <_malloc_r+0x2cc>
  4330f4:	00800104 	movi	r2,4
  4330f8:	1100eb36 	bltu	r2,r4,4334a8 <_malloc_r+0x4bc>
  4330fc:	8808d1ba 	srli	r4,r17,6
  433100:	21000e04 	addi	r4,r4,56
  433104:	210b883a 	add	r5,r4,r4
  433108:	294b883a 	add	r5,r5,r5
  43310c:	294b883a 	add	r5,r5,r5
  433110:	04c01134 	movhi	r19,68
  433114:	9cd16b04 	addi	r19,r19,17836
  433118:	994b883a 	add	r5,r19,r5
  43311c:	2c000317 	ldw	r16,12(r5)
  433120:	2c000e26 	beq	r5,r16,43315c <_malloc_r+0x170>
  433124:	80c00117 	ldw	r3,4(r16)
  433128:	01ffff04 	movi	r7,-4
  43312c:	018003c4 	movi	r6,15
  433130:	19c6703a 	and	r3,r3,r7
  433134:	1c45c83a 	sub	r2,r3,r17
  433138:	30800716 	blt	r6,r2,433158 <_malloc_r+0x16c>
  43313c:	1000610e 	bge	r2,zero,4332c4 <_malloc_r+0x2d8>
  433140:	84000317 	ldw	r16,12(r16)
  433144:	2c000526 	beq	r5,r16,43315c <_malloc_r+0x170>
  433148:	80c00117 	ldw	r3,4(r16)
  43314c:	19c6703a 	and	r3,r3,r7
  433150:	1c45c83a 	sub	r2,r3,r17
  433154:	30bff90e 	bge	r6,r2,43313c <_malloc_r+0x150>
  433158:	213fffc4 	addi	r4,r4,-1
  43315c:	21000044 	addi	r4,r4,1
  433160:	9c000417 	ldw	r16,16(r19)
  433164:	00c01134 	movhi	r3,68
  433168:	18d16b04 	addi	r3,r3,17836
  43316c:	1a400204 	addi	r9,r3,8
  433170:	8240ff26 	beq	r16,r9,433570 <_malloc_r+0x584>
  433174:	81400117 	ldw	r5,4(r16)
  433178:	00bfff04 	movi	r2,-4
  43317c:	018003c4 	movi	r6,15
  433180:	2884703a 	and	r2,r5,r2
  433184:	144bc83a 	sub	r5,r2,r17
  433188:	3140ea16 	blt	r6,r5,433534 <_malloc_r+0x548>
  43318c:	1a400515 	stw	r9,20(r3)
  433190:	1a400415 	stw	r9,16(r3)
  433194:	2800570e 	bge	r5,zero,4332f4 <_malloc_r+0x308>
  433198:	01407fc4 	movi	r5,511
  43319c:	2880ca36 	bltu	r5,r2,4334c8 <_malloc_r+0x4dc>
  4331a0:	1004d0fa 	srli	r2,r2,3
  4331a4:	02000044 	movi	r8,1
  4331a8:	19c00117 	ldw	r7,4(r3)
  4331ac:	108b883a 	add	r5,r2,r2
  4331b0:	294b883a 	add	r5,r5,r5
  4331b4:	1005d0ba 	srai	r2,r2,2
  4331b8:	294b883a 	add	r5,r5,r5
  4331bc:	28cb883a 	add	r5,r5,r3
  4331c0:	29800217 	ldw	r6,8(r5)
  4331c4:	4084983a 	sll	r2,r8,r2
  4331c8:	81400315 	stw	r5,12(r16)
  4331cc:	81800215 	stw	r6,8(r16)
  4331d0:	11c4b03a 	or	r2,r2,r7
  4331d4:	18800115 	stw	r2,4(r3)
  4331d8:	2c000215 	stw	r16,8(r5)
  4331dc:	34000315 	stw	r16,12(r6)
  4331e0:	200bd0ba 	srai	r5,r4,2
  4331e4:	00c00044 	movi	r3,1
  4331e8:	194a983a 	sll	r5,r3,r5
  4331ec:	11404936 	bltu	r2,r5,433314 <_malloc_r+0x328>
  4331f0:	1146703a 	and	r3,r2,r5
  4331f4:	18000a1e 	bne	r3,zero,433220 <_malloc_r+0x234>
  4331f8:	00ffff04 	movi	r3,-4
  4331fc:	294b883a 	add	r5,r5,r5
  433200:	20c8703a 	and	r4,r4,r3
  433204:	1146703a 	and	r3,r2,r5
  433208:	21000104 	addi	r4,r4,4
  43320c:	1800041e 	bne	r3,zero,433220 <_malloc_r+0x234>
  433210:	294b883a 	add	r5,r5,r5
  433214:	1146703a 	and	r3,r2,r5
  433218:	21000104 	addi	r4,r4,4
  43321c:	183ffc26 	beq	r3,zero,433210 <_malloc_r+0x224>
  433220:	023fff04 	movi	r8,-4
  433224:	01c003c4 	movi	r7,15
  433228:	2105883a 	add	r2,r4,r4
  43322c:	1085883a 	add	r2,r2,r2
  433230:	1085883a 	add	r2,r2,r2
  433234:	9899883a 	add	r12,r19,r2
  433238:	62800304 	addi	r10,r12,12
  43323c:	2017883a 	mov	r11,r4
  433240:	54000017 	ldw	r16,0(r10)
  433244:	51bffd04 	addi	r6,r10,-12
  433248:	8180041e 	bne	r16,r6,43325c <_malloc_r+0x270>
  43324c:	0000ca06 	br	433578 <_malloc_r+0x58c>
  433250:	10001c0e 	bge	r2,zero,4332c4 <_malloc_r+0x2d8>
  433254:	84000317 	ldw	r16,12(r16)
  433258:	8180c726 	beq	r16,r6,433578 <_malloc_r+0x58c>
  43325c:	80c00117 	ldw	r3,4(r16)
  433260:	1a06703a 	and	r3,r3,r8
  433264:	1c45c83a 	sub	r2,r3,r17
  433268:	38bff90e 	bge	r7,r2,433250 <_malloc_r+0x264>
  43326c:	81000317 	ldw	r4,12(r16)
  433270:	81400217 	ldw	r5,8(r16)
  433274:	8447883a 	add	r3,r16,r17
  433278:	8c400054 	ori	r17,r17,1
  43327c:	29000315 	stw	r4,12(r5)
  433280:	21400215 	stw	r5,8(r4)
  433284:	84400115 	stw	r17,4(r16)
  433288:	1889883a 	add	r4,r3,r2
  43328c:	11400054 	ori	r5,r2,1
  433290:	98c00515 	stw	r3,20(r19)
  433294:	98c00415 	stw	r3,16(r19)
  433298:	20800015 	stw	r2,0(r4)
  43329c:	1a400315 	stw	r9,12(r3)
  4332a0:	1a400215 	stw	r9,8(r3)
  4332a4:	19400115 	stw	r5,4(r3)
  4332a8:	9009883a 	mov	r4,r18
  4332ac:	043651c0 	call	43651c <__malloc_unlock>
  4332b0:	80800204 	addi	r2,r16,8
  4332b4:	003f7b06 	br	4330a4 <_malloc_r+0xb8>
  4332b8:	8808d0fa 	srli	r4,r17,3
  4332bc:	210b883a 	add	r5,r4,r4
  4332c0:	003f9106 	br	433108 <_malloc_r+0x11c>
  4332c4:	80c7883a 	add	r3,r16,r3
  4332c8:	19400117 	ldw	r5,4(r3)
  4332cc:	80800317 	ldw	r2,12(r16)
  4332d0:	81000217 	ldw	r4,8(r16)
  4332d4:	29400054 	ori	r5,r5,1
  4332d8:	19400115 	stw	r5,4(r3)
  4332dc:	20800315 	stw	r2,12(r4)
  4332e0:	11000215 	stw	r4,8(r2)
  4332e4:	9009883a 	mov	r4,r18
  4332e8:	043651c0 	call	43651c <__malloc_unlock>
  4332ec:	80800204 	addi	r2,r16,8
  4332f0:	003f6c06 	br	4330a4 <_malloc_r+0xb8>
  4332f4:	8085883a 	add	r2,r16,r2
  4332f8:	10c00117 	ldw	r3,4(r2)
  4332fc:	9009883a 	mov	r4,r18
  433300:	18c00054 	ori	r3,r3,1
  433304:	10c00115 	stw	r3,4(r2)
  433308:	043651c0 	call	43651c <__malloc_unlock>
  43330c:	80800204 	addi	r2,r16,8
  433310:	003f6406 	br	4330a4 <_malloc_r+0xb8>
  433314:	9c000217 	ldw	r16,8(r19)
  433318:	00bfff04 	movi	r2,-4
  43331c:	85400117 	ldw	r21,4(r16)
  433320:	a8aa703a 	and	r21,r21,r2
  433324:	ac400336 	bltu	r21,r17,433334 <_malloc_r+0x348>
  433328:	ac45c83a 	sub	r2,r21,r17
  43332c:	00c003c4 	movi	r3,15
  433330:	18805316 	blt	r3,r2,433480 <_malloc_r+0x494>
  433334:	d5e6fd17 	ldw	r23,-25612(gp)
  433338:	d0e00817 	ldw	r3,-32736(gp)
  43333c:	00bfffc4 	movi	r2,-1
  433340:	8579883a 	add	fp,r16,r21
  433344:	8def883a 	add	r23,r17,r23
  433348:	1880d226 	beq	r3,r2,433694 <_malloc_r+0x6a8>
  43334c:	bdc403c4 	addi	r23,r23,4111
  433350:	00bc0004 	movi	r2,-4096
  433354:	b8ae703a 	and	r23,r23,r2
  433358:	9009883a 	mov	r4,r18
  43335c:	b80b883a 	mov	r5,r23
  433360:	04341300 	call	434130 <_sbrk_r>
  433364:	1029883a 	mov	r20,r2
  433368:	00bfffc4 	movi	r2,-1
  43336c:	a080d126 	beq	r20,r2,4336b4 <_malloc_r+0x6c8>
  433370:	a7009f36 	bltu	r20,fp,4335f0 <_malloc_r+0x604>
  433374:	05801134 	movhi	r22,68
  433378:	b59e1704 	addi	r22,r22,30812
  43337c:	b0800017 	ldw	r2,0(r22)
  433380:	b885883a 	add	r2,r23,r2
  433384:	b0800015 	stw	r2,0(r22)
  433388:	e500cf26 	beq	fp,r20,4336c8 <_malloc_r+0x6dc>
  43338c:	d1200817 	ldw	r4,-32736(gp)
  433390:	00ffffc4 	movi	r3,-1
  433394:	20c0e026 	beq	r4,r3,433718 <_malloc_r+0x72c>
  433398:	a739c83a 	sub	fp,r20,fp
  43339c:	1705883a 	add	r2,r2,fp
  4333a0:	b0800015 	stw	r2,0(r22)
  4333a4:	a08001cc 	andi	r2,r20,7
  4333a8:	1000a526 	beq	r2,zero,433640 <_malloc_r+0x654>
  4333ac:	a0a9c83a 	sub	r20,r20,r2
  4333b0:	00c40204 	movi	r3,4104
  4333b4:	a5000204 	addi	r20,r20,8
  4333b8:	1885c83a 	sub	r2,r3,r2
  4333bc:	a5c7883a 	add	r3,r20,r23
  4333c0:	18c3ffcc 	andi	r3,r3,4095
  4333c4:	10efc83a 	sub	r23,r2,r3
  4333c8:	9009883a 	mov	r4,r18
  4333cc:	b80b883a 	mov	r5,r23
  4333d0:	04341300 	call	434130 <_sbrk_r>
  4333d4:	00ffffc4 	movi	r3,-1
  4333d8:	10c0cc26 	beq	r2,r3,43370c <_malloc_r+0x720>
  4333dc:	1505c83a 	sub	r2,r2,r20
  4333e0:	b887883a 	add	r3,r23,r2
  4333e4:	18c00054 	ori	r3,r3,1
  4333e8:	b0800017 	ldw	r2,0(r22)
  4333ec:	9d000215 	stw	r20,8(r19)
  4333f0:	a0c00115 	stw	r3,4(r20)
  4333f4:	b885883a 	add	r2,r23,r2
  4333f8:	b0800015 	stw	r2,0(r22)
  4333fc:	84c00e26 	beq	r16,r19,433438 <_malloc_r+0x44c>
  433400:	00c003c4 	movi	r3,15
  433404:	1d40902e 	bgeu	r3,r21,433648 <_malloc_r+0x65c>
  433408:	ad7ffd04 	addi	r21,r21,-12
  43340c:	013ffe04 	movi	r4,-8
  433410:	a908703a 	and	r4,r21,r4
  433414:	810b883a 	add	r5,r16,r4
  433418:	01800144 	movi	r6,5
  43341c:	29800115 	stw	r6,4(r5)
  433420:	29800215 	stw	r6,8(r5)
  433424:	81400117 	ldw	r5,4(r16)
  433428:	2940004c 	andi	r5,r5,1
  43342c:	214ab03a 	or	r5,r4,r5
  433430:	81400115 	stw	r5,4(r16)
  433434:	1900ae36 	bltu	r3,r4,4336f0 <_malloc_r+0x704>
  433438:	d0e6fc17 	ldw	r3,-25616(gp)
  43343c:	1880012e 	bgeu	r3,r2,433444 <_malloc_r+0x458>
  433440:	d0a6fc15 	stw	r2,-25616(gp)
  433444:	d0e6fb17 	ldw	r3,-25620(gp)
  433448:	9c000217 	ldw	r16,8(r19)
  43344c:	1880012e 	bgeu	r3,r2,433454 <_malloc_r+0x468>
  433450:	d0a6fb15 	stw	r2,-25620(gp)
  433454:	80c00117 	ldw	r3,4(r16)
  433458:	00bfff04 	movi	r2,-4
  43345c:	1886703a 	and	r3,r3,r2
  433460:	1c45c83a 	sub	r2,r3,r17
  433464:	1c400236 	bltu	r3,r17,433470 <_malloc_r+0x484>
  433468:	00c003c4 	movi	r3,15
  43346c:	18800416 	blt	r3,r2,433480 <_malloc_r+0x494>
  433470:	9009883a 	mov	r4,r18
  433474:	043651c0 	call	43651c <__malloc_unlock>
  433478:	0005883a 	mov	r2,zero
  43347c:	003f0906 	br	4330a4 <_malloc_r+0xb8>
  433480:	88c00054 	ori	r3,r17,1
  433484:	10800054 	ori	r2,r2,1
  433488:	80c00115 	stw	r3,4(r16)
  43348c:	8463883a 	add	r17,r16,r17
  433490:	88800115 	stw	r2,4(r17)
  433494:	9009883a 	mov	r4,r18
  433498:	9c400215 	stw	r17,8(r19)
  43349c:	043651c0 	call	43651c <__malloc_unlock>
  4334a0:	80800204 	addi	r2,r16,8
  4334a4:	003eff06 	br	4330a4 <_malloc_r+0xb8>
  4334a8:	00800504 	movi	r2,20
  4334ac:	1100492e 	bgeu	r2,r4,4335d4 <_malloc_r+0x5e8>
  4334b0:	00801504 	movi	r2,84
  4334b4:	11005c36 	bltu	r2,r4,433628 <_malloc_r+0x63c>
  4334b8:	8808d33a 	srli	r4,r17,12
  4334bc:	21001b84 	addi	r4,r4,110
  4334c0:	210b883a 	add	r5,r4,r4
  4334c4:	003f1006 	br	433108 <_malloc_r+0x11c>
  4334c8:	1006d27a 	srli	r3,r2,9
  4334cc:	01400104 	movi	r5,4
  4334d0:	28c0432e 	bgeu	r5,r3,4335e0 <_malloc_r+0x5f4>
  4334d4:	01400504 	movi	r5,20
  4334d8:	28c07036 	bltu	r5,r3,43369c <_malloc_r+0x6b0>
  4334dc:	194016c4 	addi	r5,r3,91
  4334e0:	294d883a 	add	r6,r5,r5
  4334e4:	318d883a 	add	r6,r6,r6
  4334e8:	318d883a 	add	r6,r6,r6
  4334ec:	998d883a 	add	r6,r19,r6
  4334f0:	30c00217 	ldw	r3,8(r6)
  4334f4:	01c01134 	movhi	r7,68
  4334f8:	39d16b04 	addi	r7,r7,17836
  4334fc:	19805726 	beq	r3,r6,43365c <_malloc_r+0x670>
  433500:	01ffff04 	movi	r7,-4
  433504:	19400117 	ldw	r5,4(r3)
  433508:	29ca703a 	and	r5,r5,r7
  43350c:	1140022e 	bgeu	r2,r5,433518 <_malloc_r+0x52c>
  433510:	18c00217 	ldw	r3,8(r3)
  433514:	30fffb1e 	bne	r6,r3,433504 <_malloc_r+0x518>
  433518:	19400317 	ldw	r5,12(r3)
  43351c:	98800117 	ldw	r2,4(r19)
  433520:	81400315 	stw	r5,12(r16)
  433524:	80c00215 	stw	r3,8(r16)
  433528:	2c000215 	stw	r16,8(r5)
  43352c:	1c000315 	stw	r16,12(r3)
  433530:	003f2b06 	br	4331e0 <_malloc_r+0x1f4>
  433534:	8445883a 	add	r2,r16,r17
  433538:	8c400054 	ori	r17,r17,1
  43353c:	18800515 	stw	r2,20(r3)
  433540:	18800415 	stw	r2,16(r3)
  433544:	29000054 	ori	r4,r5,1
  433548:	1147883a 	add	r3,r2,r5
  43354c:	84400115 	stw	r17,4(r16)
  433550:	11000115 	stw	r4,4(r2)
  433554:	12400315 	stw	r9,12(r2)
  433558:	12400215 	stw	r9,8(r2)
  43355c:	19400015 	stw	r5,0(r3)
  433560:	9009883a 	mov	r4,r18
  433564:	043651c0 	call	43651c <__malloc_unlock>
  433568:	80800204 	addi	r2,r16,8
  43356c:	003ecd06 	br	4330a4 <_malloc_r+0xb8>
  433570:	18800117 	ldw	r2,4(r3)
  433574:	003f1a06 	br	4331e0 <_malloc_r+0x1f4>
  433578:	5ac00044 	addi	r11,r11,1
  43357c:	588000cc 	andi	r2,r11,3
  433580:	52800204 	addi	r10,r10,8
  433584:	103f2e1e 	bne	r2,zero,433240 <_malloc_r+0x254>
  433588:	20c000cc 	andi	r3,r4,3
  43358c:	60bffe04 	addi	r2,r12,-8
  433590:	18006f26 	beq	r3,zero,433750 <_malloc_r+0x764>
  433594:	63000017 	ldw	r12,0(r12)
  433598:	213fffc4 	addi	r4,r4,-1
  43359c:	60bffa26 	beq	r12,r2,433588 <_malloc_r+0x59c>
  4335a0:	98800117 	ldw	r2,4(r19)
  4335a4:	294b883a 	add	r5,r5,r5
  4335a8:	117f5a36 	bltu	r2,r5,433314 <_malloc_r+0x328>
  4335ac:	283f5926 	beq	r5,zero,433314 <_malloc_r+0x328>
  4335b0:	1146703a 	and	r3,r2,r5
  4335b4:	18001626 	beq	r3,zero,433610 <_malloc_r+0x624>
  4335b8:	5809883a 	mov	r4,r11
  4335bc:	003f1a06 	br	433228 <_malloc_r+0x23c>
  4335c0:	80800204 	addi	r2,r16,8
  4335c4:	84000517 	ldw	r16,20(r16)
  4335c8:	143ea81e 	bne	r2,r16,43306c <_malloc_r+0x80>
  4335cc:	21000084 	addi	r4,r4,2
  4335d0:	003ee306 	br	433160 <_malloc_r+0x174>
  4335d4:	210016c4 	addi	r4,r4,91
  4335d8:	210b883a 	add	r5,r4,r4
  4335dc:	003eca06 	br	433108 <_malloc_r+0x11c>
  4335e0:	100ad1ba 	srli	r5,r2,6
  4335e4:	29400e04 	addi	r5,r5,56
  4335e8:	294d883a 	add	r6,r5,r5
  4335ec:	003fbd06 	br	4334e4 <_malloc_r+0x4f8>
  4335f0:	84ff6026 	beq	r16,r19,433374 <_malloc_r+0x388>
  4335f4:	00801134 	movhi	r2,68
  4335f8:	10916b04 	addi	r2,r2,17836
  4335fc:	14000217 	ldw	r16,8(r2)
  433600:	00bfff04 	movi	r2,-4
  433604:	80c00117 	ldw	r3,4(r16)
  433608:	1886703a 	and	r3,r3,r2
  43360c:	003f9406 	br	433460 <_malloc_r+0x474>
  433610:	294b883a 	add	r5,r5,r5
  433614:	1146703a 	and	r3,r2,r5
  433618:	5ac00104 	addi	r11,r11,4
  43361c:	183ffc26 	beq	r3,zero,433610 <_malloc_r+0x624>
  433620:	5809883a 	mov	r4,r11
  433624:	003f0006 	br	433228 <_malloc_r+0x23c>
  433628:	00805504 	movi	r2,340
  43362c:	11001336 	bltu	r2,r4,43367c <_malloc_r+0x690>
  433630:	8808d3fa 	srli	r4,r17,15
  433634:	21001dc4 	addi	r4,r4,119
  433638:	210b883a 	add	r5,r4,r4
  43363c:	003eb206 	br	433108 <_malloc_r+0x11c>
  433640:	00840004 	movi	r2,4096
  433644:	003f5d06 	br	4333bc <_malloc_r+0x3d0>
  433648:	00800044 	movi	r2,1
  43364c:	a0800115 	stw	r2,4(r20)
  433650:	a021883a 	mov	r16,r20
  433654:	0007883a 	mov	r3,zero
  433658:	003f8106 	br	433460 <_malloc_r+0x474>
  43365c:	280bd0ba 	srai	r5,r5,2
  433660:	01800044 	movi	r6,1
  433664:	38800117 	ldw	r2,4(r7)
  433668:	314c983a 	sll	r6,r6,r5
  43366c:	180b883a 	mov	r5,r3
  433670:	3084b03a 	or	r2,r6,r2
  433674:	38800115 	stw	r2,4(r7)
  433678:	003fa906 	br	433520 <_malloc_r+0x534>
  43367c:	00815504 	movi	r2,1364
  433680:	11001836 	bltu	r2,r4,4336e4 <_malloc_r+0x6f8>
  433684:	8808d4ba 	srli	r4,r17,18
  433688:	21001f04 	addi	r4,r4,124
  43368c:	210b883a 	add	r5,r4,r4
  433690:	003e9d06 	br	433108 <_malloc_r+0x11c>
  433694:	bdc00404 	addi	r23,r23,16
  433698:	003f2f06 	br	433358 <_malloc_r+0x36c>
  43369c:	01401504 	movi	r5,84
  4336a0:	28c01f36 	bltu	r5,r3,433720 <_malloc_r+0x734>
  4336a4:	100ad33a 	srli	r5,r2,12
  4336a8:	29401b84 	addi	r5,r5,110
  4336ac:	294d883a 	add	r6,r5,r5
  4336b0:	003f8c06 	br	4334e4 <_malloc_r+0x4f8>
  4336b4:	9c000217 	ldw	r16,8(r19)
  4336b8:	00bfff04 	movi	r2,-4
  4336bc:	80c00117 	ldw	r3,4(r16)
  4336c0:	1886703a 	and	r3,r3,r2
  4336c4:	003f6606 	br	433460 <_malloc_r+0x474>
  4336c8:	e0c3ffcc 	andi	r3,fp,4095
  4336cc:	183f2f1e 	bne	r3,zero,43338c <_malloc_r+0x3a0>
  4336d0:	98c00217 	ldw	r3,8(r19)
  4336d4:	bd49883a 	add	r4,r23,r21
  4336d8:	21000054 	ori	r4,r4,1
  4336dc:	19000115 	stw	r4,4(r3)
  4336e0:	003f5506 	br	433438 <_malloc_r+0x44c>
  4336e4:	01403f04 	movi	r5,252
  4336e8:	01001f84 	movi	r4,126
  4336ec:	003e8606 	br	433108 <_malloc_r+0x11c>
  4336f0:	9009883a 	mov	r4,r18
  4336f4:	81400204 	addi	r5,r16,8
  4336f8:	04349480 	call	434948 <_free_r>
  4336fc:	00801134 	movhi	r2,68
  433700:	109e1704 	addi	r2,r2,30812
  433704:	10800017 	ldw	r2,0(r2)
  433708:	003f4b06 	br	433438 <_malloc_r+0x44c>
  43370c:	00c00044 	movi	r3,1
  433710:	002f883a 	mov	r23,zero
  433714:	003f3406 	br	4333e8 <_malloc_r+0x3fc>
  433718:	d5200815 	stw	r20,-32736(gp)
  43371c:	003f2106 	br	4333a4 <_malloc_r+0x3b8>
  433720:	01405504 	movi	r5,340
  433724:	28c00436 	bltu	r5,r3,433738 <_malloc_r+0x74c>
  433728:	100ad3fa 	srli	r5,r2,15
  43372c:	29401dc4 	addi	r5,r5,119
  433730:	294d883a 	add	r6,r5,r5
  433734:	003f6b06 	br	4334e4 <_malloc_r+0x4f8>
  433738:	01415504 	movi	r5,1364
  43373c:	28c00936 	bltu	r5,r3,433764 <_malloc_r+0x778>
  433740:	100ad4ba 	srli	r5,r2,18
  433744:	29401f04 	addi	r5,r5,124
  433748:	294d883a 	add	r6,r5,r5
  43374c:	003f6506 	br	4334e4 <_malloc_r+0x4f8>
  433750:	98800117 	ldw	r2,4(r19)
  433754:	0146303a 	nor	r3,zero,r5
  433758:	1884703a 	and	r2,r3,r2
  43375c:	98800115 	stw	r2,4(r19)
  433760:	003f9006 	br	4335a4 <_malloc_r+0x5b8>
  433764:	01803f04 	movi	r6,252
  433768:	01401f84 	movi	r5,126
  43376c:	003f5d06 	br	4334e4 <_malloc_r+0x4f8>

00433770 <memchr>:
  433770:	008000c4 	movi	r2,3
  433774:	29403fcc 	andi	r5,r5,255
  433778:	1180282e 	bgeu	r2,r6,43381c <memchr+0xac>
  43377c:	2086703a 	and	r3,r4,r2
  433780:	1800351e 	bne	r3,zero,433858 <memchr+0xe8>
  433784:	2816923a 	slli	r11,r5,8
  433788:	2093883a 	add	r9,r4,r2
  43378c:	22000084 	addi	r8,r4,2
  433790:	5957883a 	add	r11,r11,r5
  433794:	5816923a 	slli	r11,r11,8
  433798:	20c00044 	addi	r3,r4,1
  43379c:	037fbff4 	movhi	r13,65279
  4337a0:	6b7fbfc4 	addi	r13,r13,-257
  4337a4:	5957883a 	add	r11,r11,r5
  4337a8:	5816923a 	slli	r11,r11,8
  4337ac:	03202074 	movhi	r12,32897
  4337b0:	63202004 	addi	r12,r12,-32640
  4337b4:	101d883a 	mov	r14,r2
  4337b8:	5957883a 	add	r11,r11,r5
  4337bc:	21c00017 	ldw	r7,0(r4)
  4337c0:	31bfff04 	addi	r6,r6,-4
  4337c4:	1805883a 	mov	r2,r3
  4337c8:	3acef03a 	xor	r7,r7,r11
  4337cc:	3b55883a 	add	r10,r7,r13
  4337d0:	01ce303a 	nor	r7,zero,r7
  4337d4:	51ce703a 	and	r7,r10,r7
  4337d8:	3b0e703a 	and	r7,r7,r12
  4337dc:	38000a26 	beq	r7,zero,433808 <memchr+0x98>
  4337e0:	21c00003 	ldbu	r7,0(r4)
  4337e4:	39401e26 	beq	r7,r5,433860 <memchr+0xf0>
  4337e8:	19c00003 	ldbu	r7,0(r3)
  4337ec:	39401926 	beq	r7,r5,433854 <memchr+0xe4>
  4337f0:	41c00003 	ldbu	r7,0(r8)
  4337f4:	4005883a 	mov	r2,r8
  4337f8:	39401626 	beq	r7,r5,433854 <memchr+0xe4>
  4337fc:	49c00003 	ldbu	r7,0(r9)
  433800:	4805883a 	mov	r2,r9
  433804:	39401326 	beq	r7,r5,433854 <memchr+0xe4>
  433808:	21000104 	addi	r4,r4,4
  43380c:	4a400104 	addi	r9,r9,4
  433810:	42000104 	addi	r8,r8,4
  433814:	18c00104 	addi	r3,r3,4
  433818:	71bfe836 	bltu	r14,r6,4337bc <memchr+0x4c>
  43381c:	2005883a 	mov	r2,r4
  433820:	30000a26 	beq	r6,zero,43384c <memchr+0xdc>
  433824:	10c00003 	ldbu	r3,0(r2)
  433828:	19400a26 	beq	r3,r5,433854 <memchr+0xe4>
  43382c:	10c00044 	addi	r3,r2,1
  433830:	118d883a 	add	r6,r2,r6
  433834:	00000306 	br	433844 <memchr+0xd4>
  433838:	11000003 	ldbu	r4,0(r2)
  43383c:	18c00044 	addi	r3,r3,1
  433840:	21400426 	beq	r4,r5,433854 <memchr+0xe4>
  433844:	1805883a 	mov	r2,r3
  433848:	19bffb1e 	bne	r3,r6,433838 <memchr+0xc8>
  43384c:	0005883a 	mov	r2,zero
  433850:	f800283a 	ret
  433854:	f800283a 	ret
  433858:	2005883a 	mov	r2,r4
  43385c:	003ff106 	br	433824 <memchr+0xb4>
  433860:	2005883a 	mov	r2,r4
  433864:	f800283a 	ret

00433868 <memcpy>:
  433868:	defffb04 	addi	sp,sp,-20
  43386c:	dc000015 	stw	r16,0(sp)
  433870:	dfc00415 	stw	ra,16(sp)
  433874:	dcc00315 	stw	r19,12(sp)
  433878:	dc800215 	stw	r18,8(sp)
  43387c:	dc400115 	stw	r17,4(sp)
  433880:	00c003c4 	movi	r3,15
  433884:	2021883a 	mov	r16,r4
  433888:	3005883a 	mov	r2,r6
  43388c:	1980032e 	bgeu	r3,r6,43389c <memcpy+0x34>
  433890:	2906b03a 	or	r3,r5,r4
  433894:	18c000cc 	andi	r3,r3,3
  433898:	18001026 	beq	r3,zero,4338dc <memcpy+0x74>
  43389c:	8007883a 	mov	r3,r16
  4338a0:	288f883a 	add	r7,r5,r2
  4338a4:	10000526 	beq	r2,zero,4338bc <memcpy+0x54>
  4338a8:	29800003 	ldbu	r6,0(r5)
  4338ac:	18c00044 	addi	r3,r3,1
  4338b0:	29400044 	addi	r5,r5,1
  4338b4:	19bfffc5 	stb	r6,-1(r3)
  4338b8:	29fffb1e 	bne	r5,r7,4338a8 <memcpy+0x40>
  4338bc:	8005883a 	mov	r2,r16
  4338c0:	dfc00417 	ldw	ra,16(sp)
  4338c4:	dcc00317 	ldw	r19,12(sp)
  4338c8:	dc800217 	ldw	r18,8(sp)
  4338cc:	dc400117 	ldw	r17,4(sp)
  4338d0:	dc000017 	ldw	r16,0(sp)
  4338d4:	dec00504 	addi	sp,sp,20
  4338d8:	f800283a 	ret
  4338dc:	32bffc04 	addi	r10,r6,-16
  4338e0:	5014d13a 	srli	r10,r10,4
  4338e4:	20800404 	addi	r2,r4,16
  4338e8:	2007883a 	mov	r3,r4
  4338ec:	5008913a 	slli	r4,r10,4
  4338f0:	280f883a 	mov	r7,r5
  4338f4:	1105883a 	add	r2,r2,r4
  4338f8:	3a000017 	ldw	r8,0(r7)
  4338fc:	18c00404 	addi	r3,r3,16
  433900:	39c00404 	addi	r7,r7,16
  433904:	1a3ffc15 	stw	r8,-16(r3)
  433908:	3a3ffd17 	ldw	r8,-12(r7)
  43390c:	1a3ffd15 	stw	r8,-12(r3)
  433910:	3a3ffe17 	ldw	r8,-8(r7)
  433914:	1a3ffe15 	stw	r8,-8(r3)
  433918:	3a3fff17 	ldw	r8,-4(r7)
  43391c:	1a3fff15 	stw	r8,-4(r3)
  433920:	18bff51e 	bne	r3,r2,4338f8 <memcpy+0x90>
  433924:	52800044 	addi	r10,r10,1
  433928:	5014913a 	slli	r10,r10,4
  43392c:	308003cc 	andi	r2,r6,15
  433930:	010000c4 	movi	r4,3
  433934:	8287883a 	add	r3,r16,r10
  433938:	2a95883a 	add	r10,r5,r10
  43393c:	2080182e 	bgeu	r4,r2,4339a0 <memcpy+0x138>
  433940:	147fff04 	addi	r17,r2,-4
  433944:	8808d0ba 	srli	r4,r17,2
  433948:	1a400104 	addi	r9,r3,4
  43394c:	180d883a 	mov	r6,r3
  433950:	2105883a 	add	r2,r4,r4
  433954:	1085883a 	add	r2,r2,r2
  433958:	4893883a 	add	r9,r9,r2
  43395c:	500f883a 	mov	r7,r10
  433960:	3a000017 	ldw	r8,0(r7)
  433964:	31800104 	addi	r6,r6,4
  433968:	39c00104 	addi	r7,r7,4
  43396c:	323fff15 	stw	r8,-4(r6)
  433970:	327ffb1e 	bne	r6,r9,433960 <memcpy+0xf8>
  433974:	20800044 	addi	r2,r4,1
  433978:	1085883a 	add	r2,r2,r2
  43397c:	1085883a 	add	r2,r2,r2
  433980:	017fff04 	movi	r5,-4
  433984:	18a5883a 	add	r18,r3,r2
  433988:	50a7883a 	add	r19,r10,r2
  43398c:	04355000 	call	435500 <__mulsi3>
  433990:	1445883a 	add	r2,r2,r17
  433994:	980b883a 	mov	r5,r19
  433998:	9007883a 	mov	r3,r18
  43399c:	003fc006 	br	4338a0 <memcpy+0x38>
  4339a0:	500b883a 	mov	r5,r10
  4339a4:	003fbe06 	br	4338a0 <memcpy+0x38>

004339a8 <memmove>:
  4339a8:	defffb04 	addi	sp,sp,-20
  4339ac:	dc000015 	stw	r16,0(sp)
  4339b0:	dfc00415 	stw	ra,16(sp)
  4339b4:	dcc00315 	stw	r19,12(sp)
  4339b8:	dc800215 	stw	r18,8(sp)
  4339bc:	dc400115 	stw	r17,4(sp)
  4339c0:	2021883a 	mov	r16,r4
  4339c4:	300f883a 	mov	r7,r6
  4339c8:	2900122e 	bgeu	r5,r4,433a14 <memmove+0x6c>
  4339cc:	2987883a 	add	r3,r5,r6
  4339d0:	20c0102e 	bgeu	r4,r3,433a14 <memmove+0x6c>
  4339d4:	218b883a 	add	r5,r4,r6
  4339d8:	1989c83a 	sub	r4,r3,r6
  4339dc:	30000526 	beq	r6,zero,4339f4 <memmove+0x4c>
  4339e0:	18ffffc4 	addi	r3,r3,-1
  4339e4:	18800003 	ldbu	r2,0(r3)
  4339e8:	297fffc4 	addi	r5,r5,-1
  4339ec:	28800005 	stb	r2,0(r5)
  4339f0:	193ffb1e 	bne	r3,r4,4339e0 <memmove+0x38>
  4339f4:	8005883a 	mov	r2,r16
  4339f8:	dfc00417 	ldw	ra,16(sp)
  4339fc:	dcc00317 	ldw	r19,12(sp)
  433a00:	dc800217 	ldw	r18,8(sp)
  433a04:	dc400117 	ldw	r17,4(sp)
  433a08:	dc000017 	ldw	r16,0(sp)
  433a0c:	dec00504 	addi	sp,sp,20
  433a10:	f800283a 	ret
  433a14:	008003c4 	movi	r2,15
  433a18:	1180422e 	bgeu	r2,r6,433b24 <memmove+0x17c>
  433a1c:	2c04b03a 	or	r2,r5,r16
  433a20:	108000cc 	andi	r2,r2,3
  433a24:	10003f1e 	bne	r2,zero,433b24 <memmove+0x17c>
  433a28:	32bffc04 	addi	r10,r6,-16
  433a2c:	5014d13a 	srli	r10,r10,4
  433a30:	81000404 	addi	r4,r16,16
  433a34:	8007883a 	mov	r3,r16
  433a38:	5004913a 	slli	r2,r10,4
  433a3c:	280f883a 	mov	r7,r5
  433a40:	2089883a 	add	r4,r4,r2
  433a44:	38800017 	ldw	r2,0(r7)
  433a48:	18c00404 	addi	r3,r3,16
  433a4c:	39c00404 	addi	r7,r7,16
  433a50:	18bffc15 	stw	r2,-16(r3)
  433a54:	38bffd17 	ldw	r2,-12(r7)
  433a58:	18bffd15 	stw	r2,-12(r3)
  433a5c:	38bffe17 	ldw	r2,-8(r7)
  433a60:	18bffe15 	stw	r2,-8(r3)
  433a64:	38bfff17 	ldw	r2,-4(r7)
  433a68:	18bfff15 	stw	r2,-4(r3)
  433a6c:	193ff51e 	bne	r3,r4,433a44 <memmove+0x9c>
  433a70:	52800044 	addi	r10,r10,1
  433a74:	5014913a 	slli	r10,r10,4
  433a78:	31c003cc 	andi	r7,r6,15
  433a7c:	008000c4 	movi	r2,3
  433a80:	8287883a 	add	r3,r16,r10
  433a84:	2a95883a 	add	r10,r5,r10
  433a88:	11c0282e 	bgeu	r2,r7,433b2c <memmove+0x184>
  433a8c:	3c7fff04 	addi	r17,r7,-4
  433a90:	8808d0ba 	srli	r4,r17,2
  433a94:	1a400104 	addi	r9,r3,4
  433a98:	180d883a 	mov	r6,r3
  433a9c:	2105883a 	add	r2,r4,r4
  433aa0:	1085883a 	add	r2,r2,r2
  433aa4:	4893883a 	add	r9,r9,r2
  433aa8:	5005883a 	mov	r2,r10
  433aac:	12000017 	ldw	r8,0(r2)
  433ab0:	31800104 	addi	r6,r6,4
  433ab4:	10800104 	addi	r2,r2,4
  433ab8:	323fff15 	stw	r8,-4(r6)
  433abc:	327ffb1e 	bne	r6,r9,433aac <memmove+0x104>
  433ac0:	20800044 	addi	r2,r4,1
  433ac4:	1085883a 	add	r2,r2,r2
  433ac8:	1085883a 	add	r2,r2,r2
  433acc:	017fff04 	movi	r5,-4
  433ad0:	18a5883a 	add	r18,r3,r2
  433ad4:	50a7883a 	add	r19,r10,r2
  433ad8:	04355000 	call	435500 <__mulsi3>
  433adc:	144f883a 	add	r7,r2,r17
  433ae0:	980b883a 	mov	r5,r19
  433ae4:	9007883a 	mov	r3,r18
  433ae8:	383fc226 	beq	r7,zero,4339f4 <memmove+0x4c>
  433aec:	19cf883a 	add	r7,r3,r7
  433af0:	29800003 	ldbu	r6,0(r5)
  433af4:	18c00044 	addi	r3,r3,1
  433af8:	29400044 	addi	r5,r5,1
  433afc:	19bfffc5 	stb	r6,-1(r3)
  433b00:	19fffb1e 	bne	r3,r7,433af0 <memmove+0x148>
  433b04:	8005883a 	mov	r2,r16
  433b08:	dfc00417 	ldw	ra,16(sp)
  433b0c:	dcc00317 	ldw	r19,12(sp)
  433b10:	dc800217 	ldw	r18,8(sp)
  433b14:	dc400117 	ldw	r17,4(sp)
  433b18:	dc000017 	ldw	r16,0(sp)
  433b1c:	dec00504 	addi	sp,sp,20
  433b20:	f800283a 	ret
  433b24:	8007883a 	mov	r3,r16
  433b28:	003fef06 	br	433ae8 <memmove+0x140>
  433b2c:	500b883a 	mov	r5,r10
  433b30:	003fed06 	br	433ae8 <memmove+0x140>

00433b34 <_realloc_r>:
  433b34:	defff504 	addi	sp,sp,-44
  433b38:	dd400615 	stw	r21,24(sp)
  433b3c:	dc800315 	stw	r18,12(sp)
  433b40:	dc000115 	stw	r16,4(sp)
  433b44:	dfc00a15 	stw	ra,40(sp)
  433b48:	df000915 	stw	fp,36(sp)
  433b4c:	ddc00815 	stw	r23,32(sp)
  433b50:	dd800715 	stw	r22,28(sp)
  433b54:	dd000515 	stw	r20,20(sp)
  433b58:	dcc00415 	stw	r19,16(sp)
  433b5c:	dc400215 	stw	r17,8(sp)
  433b60:	2821883a 	mov	r16,r5
  433b64:	202b883a 	mov	r21,r4
  433b68:	3025883a 	mov	r18,r6
  433b6c:	28009626 	beq	r5,zero,433dc8 <_realloc_r+0x294>
  433b70:	04363b00 	call	4363b0 <__malloc_lock>
  433b74:	80bfff17 	ldw	r2,-4(r16)
  433b78:	04ffff04 	movi	r19,-4
  433b7c:	90c002c4 	addi	r3,r18,11
  433b80:	01000584 	movi	r4,22
  433b84:	85bffe04 	addi	r22,r16,-8
  433b88:	14e6703a 	and	r19,r2,r19
  433b8c:	20c0372e 	bgeu	r4,r3,433c6c <_realloc_r+0x138>
  433b90:	047ffe04 	movi	r17,-8
  433b94:	1c62703a 	and	r17,r3,r17
  433b98:	8807883a 	mov	r3,r17
  433b9c:	88005a16 	blt	r17,zero,433d08 <_realloc_r+0x1d4>
  433ba0:	8c805936 	bltu	r17,r18,433d08 <_realloc_r+0x1d4>
  433ba4:	98c0340e 	bge	r19,r3,433c78 <_realloc_r+0x144>
  433ba8:	07001134 	movhi	fp,68
  433bac:	e7116b04 	addi	fp,fp,17836
  433bb0:	e1400217 	ldw	r5,8(fp)
  433bb4:	b4c9883a 	add	r4,r22,r19
  433bb8:	29009026 	beq	r5,r4,433dfc <_realloc_r+0x2c8>
  433bbc:	21800117 	ldw	r6,4(r4)
  433bc0:	01ffff84 	movi	r7,-2
  433bc4:	31ce703a 	and	r7,r6,r7
  433bc8:	21cf883a 	add	r7,r4,r7
  433bcc:	39c00117 	ldw	r7,4(r7)
  433bd0:	39c0004c 	andi	r7,r7,1
  433bd4:	38004326 	beq	r7,zero,433ce4 <_realloc_r+0x1b0>
  433bd8:	000d883a 	mov	r6,zero
  433bdc:	0009883a 	mov	r4,zero
  433be0:	1080004c 	andi	r2,r2,1
  433be4:	10005a1e 	bne	r2,zero,433d50 <_realloc_r+0x21c>
  433be8:	85fffe17 	ldw	r23,-8(r16)
  433bec:	00bfff04 	movi	r2,-4
  433bf0:	b5efc83a 	sub	r23,r22,r23
  433bf4:	b9c00117 	ldw	r7,4(r23)
  433bf8:	388e703a 	and	r7,r7,r2
  433bfc:	3ccf883a 	add	r7,r7,r19
  433c00:	20005226 	beq	r4,zero,433d4c <_realloc_r+0x218>
  433c04:	31e9883a 	add	r20,r6,r7
  433c08:	2140c726 	beq	r4,r5,433f28 <_realloc_r+0x3f4>
  433c0c:	a0c04f16 	blt	r20,r3,433d4c <_realloc_r+0x218>
  433c10:	20800317 	ldw	r2,12(r4)
  433c14:	20c00217 	ldw	r3,8(r4)
  433c18:	99bfff04 	addi	r6,r19,-4
  433c1c:	01000904 	movi	r4,36
  433c20:	18800315 	stw	r2,12(r3)
  433c24:	10c00215 	stw	r3,8(r2)
  433c28:	b8c00217 	ldw	r3,8(r23)
  433c2c:	b8800317 	ldw	r2,12(r23)
  433c30:	bc800204 	addi	r18,r23,8
  433c34:	18800315 	stw	r2,12(r3)
  433c38:	10c00215 	stw	r3,8(r2)
  433c3c:	2180ed36 	bltu	r4,r6,433ff4 <_realloc_r+0x4c0>
  433c40:	008004c4 	movi	r2,19
  433c44:	11809b2e 	bgeu	r2,r6,433eb4 <_realloc_r+0x380>
  433c48:	80800017 	ldw	r2,0(r16)
  433c4c:	b8800215 	stw	r2,8(r23)
  433c50:	80800117 	ldw	r2,4(r16)
  433c54:	b8800315 	stw	r2,12(r23)
  433c58:	008006c4 	movi	r2,27
  433c5c:	1180f936 	bltu	r2,r6,434044 <_realloc_r+0x510>
  433c60:	b8800404 	addi	r2,r23,16
  433c64:	80c00204 	addi	r3,r16,8
  433c68:	00009406 	br	433ebc <_realloc_r+0x388>
  433c6c:	00c00404 	movi	r3,16
  433c70:	1823883a 	mov	r17,r3
  433c74:	003fca06 	br	433ba0 <_realloc_r+0x6c>
  433c78:	9829883a 	mov	r20,r19
  433c7c:	a447c83a 	sub	r3,r20,r17
  433c80:	010003c4 	movi	r4,15
  433c84:	1080004c 	andi	r2,r2,1
  433c88:	20c02336 	bltu	r4,r3,433d18 <_realloc_r+0x1e4>
  433c8c:	1504b03a 	or	r2,r2,r20
  433c90:	b0800115 	stw	r2,4(r22)
  433c94:	b52d883a 	add	r22,r22,r20
  433c98:	b0800117 	ldw	r2,4(r22)
  433c9c:	10800054 	ori	r2,r2,1
  433ca0:	b0800115 	stw	r2,4(r22)
  433ca4:	a809883a 	mov	r4,r21
  433ca8:	043651c0 	call	43651c <__malloc_unlock>
  433cac:	8025883a 	mov	r18,r16
  433cb0:	9005883a 	mov	r2,r18
  433cb4:	dfc00a17 	ldw	ra,40(sp)
  433cb8:	df000917 	ldw	fp,36(sp)
  433cbc:	ddc00817 	ldw	r23,32(sp)
  433cc0:	dd800717 	ldw	r22,28(sp)
  433cc4:	dd400617 	ldw	r21,24(sp)
  433cc8:	dd000517 	ldw	r20,20(sp)
  433ccc:	dcc00417 	ldw	r19,16(sp)
  433cd0:	dc800317 	ldw	r18,12(sp)
  433cd4:	dc400217 	ldw	r17,8(sp)
  433cd8:	dc000117 	ldw	r16,4(sp)
  433cdc:	dec00b04 	addi	sp,sp,44
  433ce0:	f800283a 	ret
  433ce4:	01ffff04 	movi	r7,-4
  433ce8:	31cc703a 	and	r6,r6,r7
  433cec:	34e9883a 	add	r20,r6,r19
  433cf0:	a0ffbb16 	blt	r20,r3,433be0 <_realloc_r+0xac>
  433cf4:	20c00317 	ldw	r3,12(r4)
  433cf8:	21000217 	ldw	r4,8(r4)
  433cfc:	20c00315 	stw	r3,12(r4)
  433d00:	19000215 	stw	r4,8(r3)
  433d04:	003fdd06 	br	433c7c <_realloc_r+0x148>
  433d08:	00800304 	movi	r2,12
  433d0c:	a8800015 	stw	r2,0(r21)
  433d10:	0025883a 	mov	r18,zero
  433d14:	003fe606 	br	433cb0 <_realloc_r+0x17c>
  433d18:	1444b03a 	or	r2,r2,r17
  433d1c:	b0800115 	stw	r2,4(r22)
  433d20:	b44b883a 	add	r5,r22,r17
  433d24:	18800054 	ori	r2,r3,1
  433d28:	28800115 	stw	r2,4(r5)
  433d2c:	28c7883a 	add	r3,r5,r3
  433d30:	18800117 	ldw	r2,4(r3)
  433d34:	a809883a 	mov	r4,r21
  433d38:	29400204 	addi	r5,r5,8
  433d3c:	10800054 	ori	r2,r2,1
  433d40:	18800115 	stw	r2,4(r3)
  433d44:	04349480 	call	434948 <_free_r>
  433d48:	003fd606 	br	433ca4 <_realloc_r+0x170>
  433d4c:	38c0330e 	bge	r7,r3,433e1c <_realloc_r+0x2e8>
  433d50:	900b883a 	mov	r5,r18
  433d54:	a809883a 	mov	r4,r21
  433d58:	0432fec0 	call	432fec <_malloc_r>
  433d5c:	1025883a 	mov	r18,r2
  433d60:	10001626 	beq	r2,zero,433dbc <_realloc_r+0x288>
  433d64:	80bfff17 	ldw	r2,-4(r16)
  433d68:	00ffff84 	movi	r3,-2
  433d6c:	913ffe04 	addi	r4,r18,-8
  433d70:	10c6703a 	and	r3,r2,r3
  433d74:	b0c7883a 	add	r3,r22,r3
  433d78:	20c09926 	beq	r4,r3,433fe0 <_realloc_r+0x4ac>
  433d7c:	99bfff04 	addi	r6,r19,-4
  433d80:	00800904 	movi	r2,36
  433d84:	11806436 	bltu	r2,r6,433f18 <_realloc_r+0x3e4>
  433d88:	00c004c4 	movi	r3,19
  433d8c:	19804036 	bltu	r3,r6,433e90 <_realloc_r+0x35c>
  433d90:	9005883a 	mov	r2,r18
  433d94:	8007883a 	mov	r3,r16
  433d98:	19000017 	ldw	r4,0(r3)
  433d9c:	11000015 	stw	r4,0(r2)
  433da0:	19000117 	ldw	r4,4(r3)
  433da4:	11000115 	stw	r4,4(r2)
  433da8:	18c00217 	ldw	r3,8(r3)
  433dac:	10c00215 	stw	r3,8(r2)
  433db0:	a809883a 	mov	r4,r21
  433db4:	800b883a 	mov	r5,r16
  433db8:	04349480 	call	434948 <_free_r>
  433dbc:	a809883a 	mov	r4,r21
  433dc0:	043651c0 	call	43651c <__malloc_unlock>
  433dc4:	003fba06 	br	433cb0 <_realloc_r+0x17c>
  433dc8:	300b883a 	mov	r5,r6
  433dcc:	dfc00a17 	ldw	ra,40(sp)
  433dd0:	df000917 	ldw	fp,36(sp)
  433dd4:	ddc00817 	ldw	r23,32(sp)
  433dd8:	dd800717 	ldw	r22,28(sp)
  433ddc:	dd400617 	ldw	r21,24(sp)
  433de0:	dd000517 	ldw	r20,20(sp)
  433de4:	dcc00417 	ldw	r19,16(sp)
  433de8:	dc800317 	ldw	r18,12(sp)
  433dec:	dc400217 	ldw	r17,8(sp)
  433df0:	dc000117 	ldw	r16,4(sp)
  433df4:	dec00b04 	addi	sp,sp,44
  433df8:	0432fec1 	jmpi	432fec <_malloc_r>
  433dfc:	29800117 	ldw	r6,4(r5)
  433e00:	013fff04 	movi	r4,-4
  433e04:	89c00404 	addi	r7,r17,16
  433e08:	310c703a 	and	r6,r6,r4
  433e0c:	34c9883a 	add	r4,r6,r19
  433e10:	21c0340e 	bge	r4,r7,433ee4 <_realloc_r+0x3b0>
  433e14:	2809883a 	mov	r4,r5
  433e18:	003f7106 	br	433be0 <_realloc_r+0xac>
  433e1c:	b8800317 	ldw	r2,12(r23)
  433e20:	b8c00217 	ldw	r3,8(r23)
  433e24:	99bfff04 	addi	r6,r19,-4
  433e28:	01000904 	movi	r4,36
  433e2c:	18800315 	stw	r2,12(r3)
  433e30:	10c00215 	stw	r3,8(r2)
  433e34:	bc800204 	addi	r18,r23,8
  433e38:	21807836 	bltu	r4,r6,43401c <_realloc_r+0x4e8>
  433e3c:	008004c4 	movi	r2,19
  433e40:	1180732e 	bgeu	r2,r6,434010 <_realloc_r+0x4dc>
  433e44:	80800017 	ldw	r2,0(r16)
  433e48:	b8800215 	stw	r2,8(r23)
  433e4c:	80800117 	ldw	r2,4(r16)
  433e50:	b8800315 	stw	r2,12(r23)
  433e54:	008006c4 	movi	r2,27
  433e58:	11808936 	bltu	r2,r6,434080 <_realloc_r+0x54c>
  433e5c:	b8800404 	addi	r2,r23,16
  433e60:	80c00204 	addi	r3,r16,8
  433e64:	19000017 	ldw	r4,0(r3)
  433e68:	9021883a 	mov	r16,r18
  433e6c:	3829883a 	mov	r20,r7
  433e70:	11000015 	stw	r4,0(r2)
  433e74:	19000117 	ldw	r4,4(r3)
  433e78:	b82d883a 	mov	r22,r23
  433e7c:	11000115 	stw	r4,4(r2)
  433e80:	18c00217 	ldw	r3,8(r3)
  433e84:	10c00215 	stw	r3,8(r2)
  433e88:	b8800117 	ldw	r2,4(r23)
  433e8c:	003f7b06 	br	433c7c <_realloc_r+0x148>
  433e90:	80c00017 	ldw	r3,0(r16)
  433e94:	90c00015 	stw	r3,0(r18)
  433e98:	80c00117 	ldw	r3,4(r16)
  433e9c:	90c00115 	stw	r3,4(r18)
  433ea0:	00c006c4 	movi	r3,27
  433ea4:	19804636 	bltu	r3,r6,433fc0 <_realloc_r+0x48c>
  433ea8:	90800204 	addi	r2,r18,8
  433eac:	80c00204 	addi	r3,r16,8
  433eb0:	003fb906 	br	433d98 <_realloc_r+0x264>
  433eb4:	9005883a 	mov	r2,r18
  433eb8:	8007883a 	mov	r3,r16
  433ebc:	19000017 	ldw	r4,0(r3)
  433ec0:	9021883a 	mov	r16,r18
  433ec4:	b82d883a 	mov	r22,r23
  433ec8:	11000015 	stw	r4,0(r2)
  433ecc:	19000117 	ldw	r4,4(r3)
  433ed0:	11000115 	stw	r4,4(r2)
  433ed4:	18c00217 	ldw	r3,8(r3)
  433ed8:	10c00215 	stw	r3,8(r2)
  433edc:	b8800117 	ldw	r2,4(r23)
  433ee0:	003f6606 	br	433c7c <_realloc_r+0x148>
  433ee4:	2445c83a 	sub	r2,r4,r17
  433ee8:	b46d883a 	add	r22,r22,r17
  433eec:	10800054 	ori	r2,r2,1
  433ef0:	b0800115 	stw	r2,4(r22)
  433ef4:	80bfff17 	ldw	r2,-4(r16)
  433ef8:	a809883a 	mov	r4,r21
  433efc:	e5800215 	stw	r22,8(fp)
  433f00:	1080004c 	andi	r2,r2,1
  433f04:	88a2b03a 	or	r17,r17,r2
  433f08:	847fff15 	stw	r17,-4(r16)
  433f0c:	043651c0 	call	43651c <__malloc_unlock>
  433f10:	8025883a 	mov	r18,r16
  433f14:	003f6606 	br	433cb0 <_realloc_r+0x17c>
  433f18:	9009883a 	mov	r4,r18
  433f1c:	800b883a 	mov	r5,r16
  433f20:	04339a80 	call	4339a8 <memmove>
  433f24:	003fa206 	br	433db0 <_realloc_r+0x27c>
  433f28:	88800404 	addi	r2,r17,16
  433f2c:	a0bf8716 	blt	r20,r2,433d4c <_realloc_r+0x218>
  433f30:	b8800317 	ldw	r2,12(r23)
  433f34:	b8c00217 	ldw	r3,8(r23)
  433f38:	99bfff04 	addi	r6,r19,-4
  433f3c:	01000904 	movi	r4,36
  433f40:	18800315 	stw	r2,12(r3)
  433f44:	10c00215 	stw	r3,8(r2)
  433f48:	bc800204 	addi	r18,r23,8
  433f4c:	21806536 	bltu	r4,r6,4340e4 <_realloc_r+0x5b0>
  433f50:	008004c4 	movi	r2,19
  433f54:	1180592e 	bgeu	r2,r6,4340bc <_realloc_r+0x588>
  433f58:	80800017 	ldw	r2,0(r16)
  433f5c:	b8800215 	stw	r2,8(r23)
  433f60:	80800117 	ldw	r2,4(r16)
  433f64:	b8800315 	stw	r2,12(r23)
  433f68:	008006c4 	movi	r2,27
  433f6c:	11806136 	bltu	r2,r6,4340f4 <_realloc_r+0x5c0>
  433f70:	b8800404 	addi	r2,r23,16
  433f74:	80c00204 	addi	r3,r16,8
  433f78:	19000017 	ldw	r4,0(r3)
  433f7c:	11000015 	stw	r4,0(r2)
  433f80:	19000117 	ldw	r4,4(r3)
  433f84:	11000115 	stw	r4,4(r2)
  433f88:	18c00217 	ldw	r3,8(r3)
  433f8c:	10c00215 	stw	r3,8(r2)
  433f90:	a447c83a 	sub	r3,r20,r17
  433f94:	bc45883a 	add	r2,r23,r17
  433f98:	18c00054 	ori	r3,r3,1
  433f9c:	10c00115 	stw	r3,4(r2)
  433fa0:	b8c00117 	ldw	r3,4(r23)
  433fa4:	e0800215 	stw	r2,8(fp)
  433fa8:	a809883a 	mov	r4,r21
  433fac:	1880004c 	andi	r2,r3,1
  433fb0:	88a2b03a 	or	r17,r17,r2
  433fb4:	bc400115 	stw	r17,4(r23)
  433fb8:	043651c0 	call	43651c <__malloc_unlock>
  433fbc:	003f3c06 	br	433cb0 <_realloc_r+0x17c>
  433fc0:	80c00217 	ldw	r3,8(r16)
  433fc4:	90c00215 	stw	r3,8(r18)
  433fc8:	80c00317 	ldw	r3,12(r16)
  433fcc:	90c00315 	stw	r3,12(r18)
  433fd0:	30802426 	beq	r6,r2,434064 <_realloc_r+0x530>
  433fd4:	90800404 	addi	r2,r18,16
  433fd8:	80c00404 	addi	r3,r16,16
  433fdc:	003f6e06 	br	433d98 <_realloc_r+0x264>
  433fe0:	953fff17 	ldw	r20,-4(r18)
  433fe4:	00ffff04 	movi	r3,-4
  433fe8:	a0e8703a 	and	r20,r20,r3
  433fec:	a4e9883a 	add	r20,r20,r19
  433ff0:	003f2206 	br	433c7c <_realloc_r+0x148>
  433ff4:	800b883a 	mov	r5,r16
  433ff8:	9009883a 	mov	r4,r18
  433ffc:	04339a80 	call	4339a8 <memmove>
  434000:	9021883a 	mov	r16,r18
  434004:	b8800117 	ldw	r2,4(r23)
  434008:	b82d883a 	mov	r22,r23
  43400c:	003f1b06 	br	433c7c <_realloc_r+0x148>
  434010:	9005883a 	mov	r2,r18
  434014:	8007883a 	mov	r3,r16
  434018:	003f9206 	br	433e64 <_realloc_r+0x330>
  43401c:	800b883a 	mov	r5,r16
  434020:	9009883a 	mov	r4,r18
  434024:	d9c00015 	stw	r7,0(sp)
  434028:	04339a80 	call	4339a8 <memmove>
  43402c:	d9c00017 	ldw	r7,0(sp)
  434030:	9021883a 	mov	r16,r18
  434034:	b8800117 	ldw	r2,4(r23)
  434038:	3829883a 	mov	r20,r7
  43403c:	b82d883a 	mov	r22,r23
  434040:	003f0e06 	br	433c7c <_realloc_r+0x148>
  434044:	80800217 	ldw	r2,8(r16)
  434048:	b8800415 	stw	r2,16(r23)
  43404c:	80800317 	ldw	r2,12(r16)
  434050:	b8800515 	stw	r2,20(r23)
  434054:	31001226 	beq	r6,r4,4340a0 <_realloc_r+0x56c>
  434058:	b8800604 	addi	r2,r23,24
  43405c:	80c00404 	addi	r3,r16,16
  434060:	003f9606 	br	433ebc <_realloc_r+0x388>
  434064:	81000417 	ldw	r4,16(r16)
  434068:	90800604 	addi	r2,r18,24
  43406c:	80c00604 	addi	r3,r16,24
  434070:	91000415 	stw	r4,16(r18)
  434074:	81000517 	ldw	r4,20(r16)
  434078:	91000515 	stw	r4,20(r18)
  43407c:	003f4606 	br	433d98 <_realloc_r+0x264>
  434080:	80800217 	ldw	r2,8(r16)
  434084:	b8800415 	stw	r2,16(r23)
  434088:	80800317 	ldw	r2,12(r16)
  43408c:	b8800515 	stw	r2,20(r23)
  434090:	31000d26 	beq	r6,r4,4340c8 <_realloc_r+0x594>
  434094:	b8800604 	addi	r2,r23,24
  434098:	80c00404 	addi	r3,r16,16
  43409c:	003f7106 	br	433e64 <_realloc_r+0x330>
  4340a0:	81000417 	ldw	r4,16(r16)
  4340a4:	b8800804 	addi	r2,r23,32
  4340a8:	80c00604 	addi	r3,r16,24
  4340ac:	b9000615 	stw	r4,24(r23)
  4340b0:	81000517 	ldw	r4,20(r16)
  4340b4:	b9000715 	stw	r4,28(r23)
  4340b8:	003f8006 	br	433ebc <_realloc_r+0x388>
  4340bc:	9005883a 	mov	r2,r18
  4340c0:	8007883a 	mov	r3,r16
  4340c4:	003fac06 	br	433f78 <_realloc_r+0x444>
  4340c8:	81000417 	ldw	r4,16(r16)
  4340cc:	b8800804 	addi	r2,r23,32
  4340d0:	80c00604 	addi	r3,r16,24
  4340d4:	b9000615 	stw	r4,24(r23)
  4340d8:	81000517 	ldw	r4,20(r16)
  4340dc:	b9000715 	stw	r4,28(r23)
  4340e0:	003f6006 	br	433e64 <_realloc_r+0x330>
  4340e4:	9009883a 	mov	r4,r18
  4340e8:	800b883a 	mov	r5,r16
  4340ec:	04339a80 	call	4339a8 <memmove>
  4340f0:	003fa706 	br	433f90 <_realloc_r+0x45c>
  4340f4:	80800217 	ldw	r2,8(r16)
  4340f8:	b8800415 	stw	r2,16(r23)
  4340fc:	80800317 	ldw	r2,12(r16)
  434100:	b8800515 	stw	r2,20(r23)
  434104:	31000326 	beq	r6,r4,434114 <_realloc_r+0x5e0>
  434108:	b8800604 	addi	r2,r23,24
  43410c:	80c00404 	addi	r3,r16,16
  434110:	003f9906 	br	433f78 <_realloc_r+0x444>
  434114:	81000417 	ldw	r4,16(r16)
  434118:	b8800804 	addi	r2,r23,32
  43411c:	80c00604 	addi	r3,r16,24
  434120:	b9000615 	stw	r4,24(r23)
  434124:	81000517 	ldw	r4,20(r16)
  434128:	b9000715 	stw	r4,28(r23)
  43412c:	003f9206 	br	433f78 <_realloc_r+0x444>

00434130 <_sbrk_r>:
  434130:	defffd04 	addi	sp,sp,-12
  434134:	dc400115 	stw	r17,4(sp)
  434138:	dc000015 	stw	r16,0(sp)
  43413c:	2023883a 	mov	r17,r4
  434140:	04001134 	movhi	r16,68
  434144:	841df504 	addi	r16,r16,30676
  434148:	2809883a 	mov	r4,r5
  43414c:	dfc00215 	stw	ra,8(sp)
  434150:	80000015 	stw	zero,0(r16)
  434154:	04360500 	call	436050 <sbrk>
  434158:	00ffffc4 	movi	r3,-1
  43415c:	10c00526 	beq	r2,r3,434174 <_sbrk_r+0x44>
  434160:	dfc00217 	ldw	ra,8(sp)
  434164:	dc400117 	ldw	r17,4(sp)
  434168:	dc000017 	ldw	r16,0(sp)
  43416c:	dec00304 	addi	sp,sp,12
  434170:	f800283a 	ret
  434174:	80c00017 	ldw	r3,0(r16)
  434178:	183ff926 	beq	r3,zero,434160 <_sbrk_r+0x30>
  43417c:	88c00015 	stw	r3,0(r17)
  434180:	dfc00217 	ldw	ra,8(sp)
  434184:	dc400117 	ldw	r17,4(sp)
  434188:	dc000017 	ldw	r16,0(sp)
  43418c:	dec00304 	addi	sp,sp,12
  434190:	f800283a 	ret

00434194 <__swsetup_r>:
  434194:	00801134 	movhi	r2,68
  434198:	1096fe04 	addi	r2,r2,23544
  43419c:	10800017 	ldw	r2,0(r2)
  4341a0:	defffd04 	addi	sp,sp,-12
  4341a4:	dc400115 	stw	r17,4(sp)
  4341a8:	dc000015 	stw	r16,0(sp)
  4341ac:	dfc00215 	stw	ra,8(sp)
  4341b0:	2023883a 	mov	r17,r4
  4341b4:	2821883a 	mov	r16,r5
  4341b8:	10000226 	beq	r2,zero,4341c4 <__swsetup_r+0x30>
  4341bc:	10c00e17 	ldw	r3,56(r2)
  4341c0:	18003d26 	beq	r3,zero,4342b8 <__swsetup_r+0x124>
  4341c4:	8080030b 	ldhu	r2,12(r16)
  4341c8:	10c0020c 	andi	r3,r2,8
  4341cc:	18ffffcc 	andi	r3,r3,65535
  4341d0:	18e0001c 	xori	r3,r3,32768
  4341d4:	18e00004 	addi	r3,r3,-32768
  4341d8:	18001226 	beq	r3,zero,434224 <__swsetup_r+0x90>
  4341dc:	80c00417 	ldw	r3,16(r16)
  4341e0:	18001f26 	beq	r3,zero,434260 <__swsetup_r+0xcc>
  4341e4:	1100004c 	andi	r4,r2,1
  4341e8:	2000261e 	bne	r4,zero,434284 <__swsetup_r+0xf0>
  4341ec:	1080008c 	andi	r2,r2,2
  4341f0:	10bfffcc 	andi	r2,r2,65535
  4341f4:	10a0001c 	xori	r2,r2,32768
  4341f8:	10a00004 	addi	r2,r2,-32768
  4341fc:	1000311e 	bne	r2,zero,4342c4 <__swsetup_r+0x130>
  434200:	80800517 	ldw	r2,20(r16)
  434204:	80800215 	stw	r2,8(r16)
  434208:	18002326 	beq	r3,zero,434298 <__swsetup_r+0x104>
  43420c:	0005883a 	mov	r2,zero
  434210:	dfc00217 	ldw	ra,8(sp)
  434214:	dc400117 	ldw	r17,4(sp)
  434218:	dc000017 	ldw	r16,0(sp)
  43421c:	dec00304 	addi	sp,sp,12
  434220:	f800283a 	ret
  434224:	10c0040c 	andi	r3,r2,16
  434228:	18ffffcc 	andi	r3,r3,65535
  43422c:	18e0001c 	xori	r3,r3,32768
  434230:	18e00004 	addi	r3,r3,-32768
  434234:	18001e26 	beq	r3,zero,4342b0 <__swsetup_r+0x11c>
  434238:	10c0010c 	andi	r3,r2,4
  43423c:	18ffffcc 	andi	r3,r3,65535
  434240:	18e0001c 	xori	r3,r3,32768
  434244:	18e00004 	addi	r3,r3,-32768
  434248:	1800211e 	bne	r3,zero,4342d0 <__swsetup_r+0x13c>
  43424c:	80c00417 	ldw	r3,16(r16)
  434250:	11400214 	ori	r5,r2,8
  434254:	8140030d 	sth	r5,12(r16)
  434258:	2805883a 	mov	r2,r5
  43425c:	183fe11e 	bne	r3,zero,4341e4 <__swsetup_r+0x50>
  434260:	1140a00c 	andi	r5,r2,640
  434264:	01008004 	movi	r4,512
  434268:	293fde26 	beq	r5,r4,4341e4 <__swsetup_r+0x50>
  43426c:	8809883a 	mov	r4,r17
  434270:	800b883a 	mov	r5,r16
  434274:	0434d780 	call	434d78 <__smakebuf_r>
  434278:	8080030b 	ldhu	r2,12(r16)
  43427c:	80c00417 	ldw	r3,16(r16)
  434280:	003fd806 	br	4341e4 <__swsetup_r+0x50>
  434284:	80800517 	ldw	r2,20(r16)
  434288:	80000215 	stw	zero,8(r16)
  43428c:	0085c83a 	sub	r2,zero,r2
  434290:	80800615 	stw	r2,24(r16)
  434294:	183fdd1e 	bne	r3,zero,43420c <__swsetup_r+0x78>
  434298:	8080030b 	ldhu	r2,12(r16)
  43429c:	1080200c 	andi	r2,r2,128
  4342a0:	10bfffcc 	andi	r2,r2,65535
  4342a4:	10a0001c 	xori	r2,r2,32768
  4342a8:	10a00004 	addi	r2,r2,-32768
  4342ac:	103fd826 	beq	r2,zero,434210 <__swsetup_r+0x7c>
  4342b0:	00bfffc4 	movi	r2,-1
  4342b4:	003fd606 	br	434210 <__swsetup_r+0x7c>
  4342b8:	1009883a 	mov	r4,r2
  4342bc:	04345c40 	call	4345c4 <__sinit>
  4342c0:	003fc006 	br	4341c4 <__swsetup_r+0x30>
  4342c4:	0005883a 	mov	r2,zero
  4342c8:	80800215 	stw	r2,8(r16)
  4342cc:	003fce06 	br	434208 <__swsetup_r+0x74>
  4342d0:	81400c17 	ldw	r5,48(r16)
  4342d4:	28000626 	beq	r5,zero,4342f0 <__swsetup_r+0x15c>
  4342d8:	80c01004 	addi	r3,r16,64
  4342dc:	28c00326 	beq	r5,r3,4342ec <__swsetup_r+0x158>
  4342e0:	8809883a 	mov	r4,r17
  4342e4:	04349480 	call	434948 <_free_r>
  4342e8:	8080030b 	ldhu	r2,12(r16)
  4342ec:	80000c15 	stw	zero,48(r16)
  4342f0:	80c00417 	ldw	r3,16(r16)
  4342f4:	013ff6c4 	movi	r4,-37
  4342f8:	2084703a 	and	r2,r4,r2
  4342fc:	80000115 	stw	zero,4(r16)
  434300:	80c00015 	stw	r3,0(r16)
  434304:	003fd206 	br	434250 <__swsetup_r+0xbc>

00434308 <_fflush_r>:
  434308:	defffb04 	addi	sp,sp,-20
  43430c:	dcc00315 	stw	r19,12(sp)
  434310:	dc400115 	stw	r17,4(sp)
  434314:	dfc00415 	stw	ra,16(sp)
  434318:	dc800215 	stw	r18,8(sp)
  43431c:	dc000015 	stw	r16,0(sp)
  434320:	2027883a 	mov	r19,r4
  434324:	2823883a 	mov	r17,r5
  434328:	20000226 	beq	r4,zero,434334 <_fflush_r+0x2c>
  43432c:	20800e17 	ldw	r2,56(r4)
  434330:	10005726 	beq	r2,zero,434490 <_fflush_r+0x188>
  434334:	8880030b 	ldhu	r2,12(r17)
  434338:	10c0020c 	andi	r3,r2,8
  43433c:	18ffffcc 	andi	r3,r3,65535
  434340:	18e0001c 	xori	r3,r3,32768
  434344:	18e00004 	addi	r3,r3,-32768
  434348:	1800311e 	bne	r3,zero,434410 <_fflush_r+0x108>
  43434c:	89000117 	ldw	r4,4(r17)
  434350:	10c20014 	ori	r3,r2,2048
  434354:	88c0030d 	sth	r3,12(r17)
  434358:	180b883a 	mov	r5,r3
  43435c:	0100520e 	bge	zero,r4,4344a8 <_fflush_r+0x1a0>
  434360:	88c00a17 	ldw	r3,40(r17)
  434364:	18002226 	beq	r3,zero,4343f0 <_fflush_r+0xe8>
  434368:	1084000c 	andi	r2,r2,4096
  43436c:	10bfffcc 	andi	r2,r2,65535
  434370:	10a0001c 	xori	r2,r2,32768
  434374:	10a00004 	addi	r2,r2,-32768
  434378:	10004e26 	beq	r2,zero,4344b4 <_fflush_r+0x1ac>
  43437c:	8c001417 	ldw	r16,80(r17)
  434380:	2940010c 	andi	r5,r5,4
  434384:	297fffcc 	andi	r5,r5,65535
  434388:	2960001c 	xori	r5,r5,32768
  43438c:	29600004 	addi	r5,r5,-32768
  434390:	28000626 	beq	r5,zero,4343ac <_fflush_r+0xa4>
  434394:	89000117 	ldw	r4,4(r17)
  434398:	88800c17 	ldw	r2,48(r17)
  43439c:	8121c83a 	sub	r16,r16,r4
  4343a0:	10000226 	beq	r2,zero,4343ac <_fflush_r+0xa4>
  4343a4:	88800f17 	ldw	r2,60(r17)
  4343a8:	80a1c83a 	sub	r16,r16,r2
  4343ac:	89400717 	ldw	r5,28(r17)
  4343b0:	9809883a 	mov	r4,r19
  4343b4:	800d883a 	mov	r6,r16
  4343b8:	000f883a 	mov	r7,zero
  4343bc:	183ee83a 	callr	r3
  4343c0:	8080281e 	bne	r16,r2,434464 <_fflush_r+0x15c>
  4343c4:	8880030b 	ldhu	r2,12(r17)
  4343c8:	88c00417 	ldw	r3,16(r17)
  4343cc:	88000115 	stw	zero,4(r17)
  4343d0:	113dffcc 	andi	r4,r2,63487
  4343d4:	1084000c 	andi	r2,r2,4096
  4343d8:	10bfffcc 	andi	r2,r2,65535
  4343dc:	10a0001c 	xori	r2,r2,32768
  4343e0:	8900030d 	sth	r4,12(r17)
  4343e4:	88c00015 	stw	r3,0(r17)
  4343e8:	10a00004 	addi	r2,r2,-32768
  4343ec:	10002c1e 	bne	r2,zero,4344a0 <_fflush_r+0x198>
  4343f0:	0005883a 	mov	r2,zero
  4343f4:	dfc00417 	ldw	ra,16(sp)
  4343f8:	dcc00317 	ldw	r19,12(sp)
  4343fc:	dc800217 	ldw	r18,8(sp)
  434400:	dc400117 	ldw	r17,4(sp)
  434404:	dc000017 	ldw	r16,0(sp)
  434408:	dec00504 	addi	sp,sp,20
  43440c:	f800283a 	ret
  434410:	8c800417 	ldw	r18,16(r17)
  434414:	903ff626 	beq	r18,zero,4343f0 <_fflush_r+0xe8>
  434418:	8c000017 	ldw	r16,0(r17)
  43441c:	108000cc 	andi	r2,r2,3
  434420:	8c800015 	stw	r18,0(r17)
  434424:	84a1c83a 	sub	r16,r16,r18
  434428:	10001b1e 	bne	r2,zero,434498 <_fflush_r+0x190>
  43442c:	88800517 	ldw	r2,20(r17)
  434430:	88800215 	stw	r2,8(r17)
  434434:	04000316 	blt	zero,r16,434444 <_fflush_r+0x13c>
  434438:	003fed06 	br	4343f0 <_fflush_r+0xe8>
  43443c:	90a5883a 	add	r18,r18,r2
  434440:	043feb0e 	bge	zero,r16,4343f0 <_fflush_r+0xe8>
  434444:	88800917 	ldw	r2,36(r17)
  434448:	89400717 	ldw	r5,28(r17)
  43444c:	800f883a 	mov	r7,r16
  434450:	900d883a 	mov	r6,r18
  434454:	9809883a 	mov	r4,r19
  434458:	103ee83a 	callr	r2
  43445c:	80a1c83a 	sub	r16,r16,r2
  434460:	00bff616 	blt	zero,r2,43443c <_fflush_r+0x134>
  434464:	88c0030b 	ldhu	r3,12(r17)
  434468:	00bfffc4 	movi	r2,-1
  43446c:	18c01014 	ori	r3,r3,64
  434470:	88c0030d 	sth	r3,12(r17)
  434474:	dfc00417 	ldw	ra,16(sp)
  434478:	dcc00317 	ldw	r19,12(sp)
  43447c:	dc800217 	ldw	r18,8(sp)
  434480:	dc400117 	ldw	r17,4(sp)
  434484:	dc000017 	ldw	r16,0(sp)
  434488:	dec00504 	addi	sp,sp,20
  43448c:	f800283a 	ret
  434490:	04345c40 	call	4345c4 <__sinit>
  434494:	003fa706 	br	434334 <_fflush_r+0x2c>
  434498:	0005883a 	mov	r2,zero
  43449c:	003fe406 	br	434430 <_fflush_r+0x128>
  4344a0:	8c001415 	stw	r16,80(r17)
  4344a4:	003fd206 	br	4343f0 <_fflush_r+0xe8>
  4344a8:	88c00f17 	ldw	r3,60(r17)
  4344ac:	00ffac16 	blt	zero,r3,434360 <_fflush_r+0x58>
  4344b0:	003fcf06 	br	4343f0 <_fflush_r+0xe8>
  4344b4:	89400717 	ldw	r5,28(r17)
  4344b8:	9809883a 	mov	r4,r19
  4344bc:	000d883a 	mov	r6,zero
  4344c0:	01c00044 	movi	r7,1
  4344c4:	183ee83a 	callr	r3
  4344c8:	1021883a 	mov	r16,r2
  4344cc:	00bfffc4 	movi	r2,-1
  4344d0:	80800326 	beq	r16,r2,4344e0 <_fflush_r+0x1d8>
  4344d4:	8940030b 	ldhu	r5,12(r17)
  4344d8:	88c00a17 	ldw	r3,40(r17)
  4344dc:	003fa806 	br	434380 <_fflush_r+0x78>
  4344e0:	98c00017 	ldw	r3,0(r19)
  4344e4:	00800744 	movi	r2,29
  4344e8:	18bfde1e 	bne	r3,r2,434464 <_fflush_r+0x15c>
  4344ec:	003fc006 	br	4343f0 <_fflush_r+0xe8>

004344f0 <fflush>:
  4344f0:	200b883a 	mov	r5,r4
  4344f4:	20000426 	beq	r4,zero,434508 <fflush+0x18>
  4344f8:	00801134 	movhi	r2,68
  4344fc:	1096fe04 	addi	r2,r2,23544
  434500:	11000017 	ldw	r4,0(r2)
  434504:	04343081 	jmpi	434308 <_fflush_r>
  434508:	00801134 	movhi	r2,68
  43450c:	1096fd04 	addi	r2,r2,23540
  434510:	11000017 	ldw	r4,0(r2)
  434514:	014010f4 	movhi	r5,67
  434518:	2950c204 	addi	r5,r5,17160
  43451c:	0434cc01 	jmpi	434cc0 <_fwalk_reent>

00434520 <__fp_lock>:
  434520:	0005883a 	mov	r2,zero
  434524:	f800283a 	ret

00434528 <__fp_unlock>:
  434528:	0005883a 	mov	r2,zero
  43452c:	f800283a 	ret

00434530 <_cleanup_r>:
  434530:	014010f4 	movhi	r5,67
  434534:	2954d204 	addi	r5,r5,21320
  434538:	0434c181 	jmpi	434c18 <_fwalk>

0043453c <__sfmoreglue>:
  43453c:	defffc04 	addi	sp,sp,-16
  434540:	dc800215 	stw	r18,8(sp)
  434544:	2825883a 	mov	r18,r5
  434548:	dc000015 	stw	r16,0(sp)
  43454c:	01401704 	movi	r5,92
  434550:	2021883a 	mov	r16,r4
  434554:	9009883a 	mov	r4,r18
  434558:	dfc00315 	stw	ra,12(sp)
  43455c:	dc400115 	stw	r17,4(sp)
  434560:	04355000 	call	435500 <__mulsi3>
  434564:	8009883a 	mov	r4,r16
  434568:	11400304 	addi	r5,r2,12
  43456c:	1023883a 	mov	r17,r2
  434570:	0432fec0 	call	432fec <_malloc_r>
  434574:	1021883a 	mov	r16,r2
  434578:	10000726 	beq	r2,zero,434598 <__sfmoreglue+0x5c>
  43457c:	11000304 	addi	r4,r2,12
  434580:	10000015 	stw	zero,0(r2)
  434584:	14800115 	stw	r18,4(r2)
  434588:	11000215 	stw	r4,8(r2)
  43458c:	000b883a 	mov	r5,zero
  434590:	880d883a 	mov	r6,r17
  434594:	0434f200 	call	434f20 <memset>
  434598:	8005883a 	mov	r2,r16
  43459c:	dfc00317 	ldw	ra,12(sp)
  4345a0:	dc800217 	ldw	r18,8(sp)
  4345a4:	dc400117 	ldw	r17,4(sp)
  4345a8:	dc000017 	ldw	r16,0(sp)
  4345ac:	dec00404 	addi	sp,sp,16
  4345b0:	f800283a 	ret

004345b4 <_cleanup>:
  4345b4:	00801134 	movhi	r2,68
  4345b8:	1096fd04 	addi	r2,r2,23540
  4345bc:	11000017 	ldw	r4,0(r2)
  4345c0:	04345301 	jmpi	434530 <_cleanup_r>

004345c4 <__sinit>:
  4345c4:	20800e17 	ldw	r2,56(r4)
  4345c8:	1000401e 	bne	r2,zero,4346cc <__sinit+0x108>
  4345cc:	21400117 	ldw	r5,4(r4)
  4345d0:	018010f4 	movhi	r6,67
  4345d4:	31914c04 	addi	r6,r6,17712
  4345d8:	20c00217 	ldw	r3,8(r4)
  4345dc:	21800f15 	stw	r6,60(r4)
  4345e0:	2080bb04 	addi	r2,r4,748
  4345e4:	02400044 	movi	r9,1
  4345e8:	018000c4 	movi	r6,3
  4345ec:	2180b915 	stw	r6,740(r4)
  4345f0:	2080ba15 	stw	r2,744(r4)
  4345f4:	22400e15 	stw	r9,56(r4)
  4345f8:	20800317 	ldw	r2,12(r4)
  4345fc:	2000b815 	stw	zero,736(r4)
  434600:	020010f4 	movhi	r8,67
  434604:	4213ff04 	addi	r8,r8,20476
  434608:	01c010f4 	movhi	r7,67
  43460c:	39d41404 	addi	r7,r7,20560
  434610:	018010f4 	movhi	r6,67
  434614:	31943604 	addi	r6,r6,20696
  434618:	010010f4 	movhi	r4,67
  43461c:	21144d04 	addi	r4,r4,20788
  434620:	02800104 	movi	r10,4
  434624:	28000015 	stw	zero,0(r5)
  434628:	28000115 	stw	zero,4(r5)
  43462c:	28000215 	stw	zero,8(r5)
  434630:	2a80030d 	sth	r10,12(r5)
  434634:	2800038d 	sth	zero,14(r5)
  434638:	28000415 	stw	zero,16(r5)
  43463c:	28000515 	stw	zero,20(r5)
  434640:	28000615 	stw	zero,24(r5)
  434644:	29400715 	stw	r5,28(r5)
  434648:	2a000815 	stw	r8,32(r5)
  43464c:	29c00915 	stw	r7,36(r5)
  434650:	29800a15 	stw	r6,40(r5)
  434654:	29000b15 	stw	r4,44(r5)
  434658:	01400284 	movi	r5,10
  43465c:	18000015 	stw	zero,0(r3)
  434660:	18000115 	stw	zero,4(r3)
  434664:	18000215 	stw	zero,8(r3)
  434668:	1940030d 	sth	r5,12(r3)
  43466c:	1a40038d 	sth	r9,14(r3)
  434670:	18000415 	stw	zero,16(r3)
  434674:	18000515 	stw	zero,20(r3)
  434678:	18000615 	stw	zero,24(r3)
  43467c:	18c00715 	stw	r3,28(r3)
  434680:	1a000815 	stw	r8,32(r3)
  434684:	19c00915 	stw	r7,36(r3)
  434688:	19800a15 	stw	r6,40(r3)
  43468c:	19000b15 	stw	r4,44(r3)
  434690:	00c00484 	movi	r3,18
  434694:	10c0030d 	sth	r3,12(r2)
  434698:	00c00084 	movi	r3,2
  43469c:	10000015 	stw	zero,0(r2)
  4346a0:	10000115 	stw	zero,4(r2)
  4346a4:	10000215 	stw	zero,8(r2)
  4346a8:	10c0038d 	sth	r3,14(r2)
  4346ac:	10000415 	stw	zero,16(r2)
  4346b0:	10000515 	stw	zero,20(r2)
  4346b4:	10000615 	stw	zero,24(r2)
  4346b8:	10800715 	stw	r2,28(r2)
  4346bc:	12000815 	stw	r8,32(r2)
  4346c0:	11c00915 	stw	r7,36(r2)
  4346c4:	11800a15 	stw	r6,40(r2)
  4346c8:	11000b15 	stw	r4,44(r2)
  4346cc:	f800283a 	ret

004346d0 <__sfp>:
  4346d0:	defffc04 	addi	sp,sp,-16
  4346d4:	00801134 	movhi	r2,68
  4346d8:	1096fd04 	addi	r2,r2,23540
  4346dc:	dc400115 	stw	r17,4(sp)
  4346e0:	14400017 	ldw	r17,0(r2)
  4346e4:	dc800215 	stw	r18,8(sp)
  4346e8:	dfc00315 	stw	ra,12(sp)
  4346ec:	88800e17 	ldw	r2,56(r17)
  4346f0:	dc000015 	stw	r16,0(sp)
  4346f4:	2025883a 	mov	r18,r4
  4346f8:	10002826 	beq	r2,zero,43479c <__sfp+0xcc>
  4346fc:	8c40b804 	addi	r17,r17,736
  434700:	043fffc4 	movi	r16,-1
  434704:	89400117 	ldw	r5,4(r17)
  434708:	88800217 	ldw	r2,8(r17)
  43470c:	297fffc4 	addi	r5,r5,-1
  434710:	28000a16 	blt	r5,zero,43473c <__sfp+0x6c>
  434714:	10c0030f 	ldh	r3,12(r2)
  434718:	18000c26 	beq	r3,zero,43474c <__sfp+0x7c>
  43471c:	10c01a04 	addi	r3,r2,104
  434720:	00000206 	br	43472c <__sfp+0x5c>
  434724:	19bfe90f 	ldh	r6,-92(r3)
  434728:	30000826 	beq	r6,zero,43474c <__sfp+0x7c>
  43472c:	297fffc4 	addi	r5,r5,-1
  434730:	18bffd04 	addi	r2,r3,-12
  434734:	18c01704 	addi	r3,r3,92
  434738:	2c3ffa1e 	bne	r5,r16,434724 <__sfp+0x54>
  43473c:	88800017 	ldw	r2,0(r17)
  434740:	10001926 	beq	r2,zero,4347a8 <__sfp+0xd8>
  434744:	1023883a 	mov	r17,r2
  434748:	003fee06 	br	434704 <__sfp+0x34>
  43474c:	00ffffc4 	movi	r3,-1
  434750:	10c0038d 	sth	r3,14(r2)
  434754:	00c00044 	movi	r3,1
  434758:	10c0030d 	sth	r3,12(r2)
  43475c:	10000015 	stw	zero,0(r2)
  434760:	10000215 	stw	zero,8(r2)
  434764:	10000115 	stw	zero,4(r2)
  434768:	10000415 	stw	zero,16(r2)
  43476c:	10000515 	stw	zero,20(r2)
  434770:	10000615 	stw	zero,24(r2)
  434774:	10000c15 	stw	zero,48(r2)
  434778:	10000d15 	stw	zero,52(r2)
  43477c:	10001115 	stw	zero,68(r2)
  434780:	10001215 	stw	zero,72(r2)
  434784:	dfc00317 	ldw	ra,12(sp)
  434788:	dc800217 	ldw	r18,8(sp)
  43478c:	dc400117 	ldw	r17,4(sp)
  434790:	dc000017 	ldw	r16,0(sp)
  434794:	dec00404 	addi	sp,sp,16
  434798:	f800283a 	ret
  43479c:	8809883a 	mov	r4,r17
  4347a0:	04345c40 	call	4345c4 <__sinit>
  4347a4:	003fd506 	br	4346fc <__sfp+0x2c>
  4347a8:	9009883a 	mov	r4,r18
  4347ac:	01400104 	movi	r5,4
  4347b0:	043453c0 	call	43453c <__sfmoreglue>
  4347b4:	88800015 	stw	r2,0(r17)
  4347b8:	103fe21e 	bne	r2,zero,434744 <__sfp+0x74>
  4347bc:	00800304 	movi	r2,12
  4347c0:	90800015 	stw	r2,0(r18)
  4347c4:	0005883a 	mov	r2,zero
  4347c8:	003fee06 	br	434784 <__sfp+0xb4>

004347cc <__sfp_lock_acquire>:
  4347cc:	f800283a 	ret

004347d0 <__sfp_lock_release>:
  4347d0:	f800283a 	ret

004347d4 <__sinit_lock_acquire>:
  4347d4:	f800283a 	ret

004347d8 <__sinit_lock_release>:
  4347d8:	f800283a 	ret

004347dc <__fp_lock_all>:
  4347dc:	00801134 	movhi	r2,68
  4347e0:	1096fe04 	addi	r2,r2,23544
  4347e4:	11000017 	ldw	r4,0(r2)
  4347e8:	014010f4 	movhi	r5,67
  4347ec:	29514804 	addi	r5,r5,17696
  4347f0:	0434c181 	jmpi	434c18 <_fwalk>

004347f4 <__fp_unlock_all>:
  4347f4:	00801134 	movhi	r2,68
  4347f8:	1096fe04 	addi	r2,r2,23544
  4347fc:	11000017 	ldw	r4,0(r2)
  434800:	014010f4 	movhi	r5,67
  434804:	29514a04 	addi	r5,r5,17704
  434808:	0434c181 	jmpi	434c18 <_fwalk>

0043480c <_malloc_trim_r>:
  43480c:	defffb04 	addi	sp,sp,-20
  434810:	dcc00315 	stw	r19,12(sp)
  434814:	dc800215 	stw	r18,8(sp)
  434818:	dc400115 	stw	r17,4(sp)
  43481c:	dc000015 	stw	r16,0(sp)
  434820:	2827883a 	mov	r19,r5
  434824:	dfc00415 	stw	ra,16(sp)
  434828:	04401134 	movhi	r17,68
  43482c:	8c516b04 	addi	r17,r17,17836
  434830:	2021883a 	mov	r16,r4
  434834:	04363b00 	call	4363b0 <__malloc_lock>
  434838:	88800217 	ldw	r2,8(r17)
  43483c:	14800117 	ldw	r18,4(r2)
  434840:	00bfff04 	movi	r2,-4
  434844:	90a4703a 	and	r18,r18,r2
  434848:	9083fbc4 	addi	r2,r18,4079
  43484c:	14e7c83a 	sub	r19,r2,r19
  434850:	9826d33a 	srli	r19,r19,12
  434854:	0083ffc4 	movi	r2,4095
  434858:	9cffffc4 	addi	r19,r19,-1
  43485c:	9826933a 	slli	r19,r19,12
  434860:	14c0060e 	bge	r2,r19,43487c <_malloc_trim_r+0x70>
  434864:	8009883a 	mov	r4,r16
  434868:	000b883a 	mov	r5,zero
  43486c:	04341300 	call	434130 <_sbrk_r>
  434870:	88c00217 	ldw	r3,8(r17)
  434874:	1c87883a 	add	r3,r3,r18
  434878:	10c00a26 	beq	r2,r3,4348a4 <_malloc_trim_r+0x98>
  43487c:	8009883a 	mov	r4,r16
  434880:	043651c0 	call	43651c <__malloc_unlock>
  434884:	0005883a 	mov	r2,zero
  434888:	dfc00417 	ldw	ra,16(sp)
  43488c:	dcc00317 	ldw	r19,12(sp)
  434890:	dc800217 	ldw	r18,8(sp)
  434894:	dc400117 	ldw	r17,4(sp)
  434898:	dc000017 	ldw	r16,0(sp)
  43489c:	dec00504 	addi	sp,sp,20
  4348a0:	f800283a 	ret
  4348a4:	8009883a 	mov	r4,r16
  4348a8:	04cbc83a 	sub	r5,zero,r19
  4348ac:	04341300 	call	434130 <_sbrk_r>
  4348b0:	00ffffc4 	movi	r3,-1
  4348b4:	10c01326 	beq	r2,r3,434904 <_malloc_trim_r+0xf8>
  4348b8:	00801134 	movhi	r2,68
  4348bc:	109e1704 	addi	r2,r2,30812
  4348c0:	11000017 	ldw	r4,0(r2)
  4348c4:	88c00217 	ldw	r3,8(r17)
  4348c8:	94e5c83a 	sub	r18,r18,r19
  4348cc:	94800054 	ori	r18,r18,1
  4348d0:	24e7c83a 	sub	r19,r4,r19
  4348d4:	1c800115 	stw	r18,4(r3)
  4348d8:	8009883a 	mov	r4,r16
  4348dc:	14c00015 	stw	r19,0(r2)
  4348e0:	043651c0 	call	43651c <__malloc_unlock>
  4348e4:	00800044 	movi	r2,1
  4348e8:	dfc00417 	ldw	ra,16(sp)
  4348ec:	dcc00317 	ldw	r19,12(sp)
  4348f0:	dc800217 	ldw	r18,8(sp)
  4348f4:	dc400117 	ldw	r17,4(sp)
  4348f8:	dc000017 	ldw	r16,0(sp)
  4348fc:	dec00504 	addi	sp,sp,20
  434900:	f800283a 	ret
  434904:	8009883a 	mov	r4,r16
  434908:	000b883a 	mov	r5,zero
  43490c:	04341300 	call	434130 <_sbrk_r>
  434910:	88c00217 	ldw	r3,8(r17)
  434914:	014003c4 	movi	r5,15
  434918:	10c9c83a 	sub	r4,r2,r3
  43491c:	293fd70e 	bge	r5,r4,43487c <_malloc_trim_r+0x70>
  434920:	01401134 	movhi	r5,68
  434924:	2956ff04 	addi	r5,r5,23548
  434928:	29400017 	ldw	r5,0(r5)
  43492c:	21000054 	ori	r4,r4,1
  434930:	19000115 	stw	r4,4(r3)
  434934:	1145c83a 	sub	r2,r2,r5
  434938:	01401134 	movhi	r5,68
  43493c:	295e1704 	addi	r5,r5,30812
  434940:	28800015 	stw	r2,0(r5)
  434944:	003fcd06 	br	43487c <_malloc_trim_r+0x70>

00434948 <_free_r>:
  434948:	defffd04 	addi	sp,sp,-12
  43494c:	dc400115 	stw	r17,4(sp)
  434950:	dc000015 	stw	r16,0(sp)
  434954:	dfc00215 	stw	ra,8(sp)
  434958:	2821883a 	mov	r16,r5
  43495c:	2023883a 	mov	r17,r4
  434960:	28004b26 	beq	r5,zero,434a90 <_free_r+0x148>
  434964:	04363b00 	call	4363b0 <__malloc_lock>
  434968:	823fff17 	ldw	r8,-4(r16)
  43496c:	00bfff84 	movi	r2,-2
  434970:	81bffe04 	addi	r6,r16,-8
  434974:	4084703a 	and	r2,r8,r2
  434978:	3087883a 	add	r3,r6,r2
  43497c:	01401134 	movhi	r5,68
  434980:	29516b04 	addi	r5,r5,17836
  434984:	1a400117 	ldw	r9,4(r3)
  434988:	29000217 	ldw	r4,8(r5)
  43498c:	01ffff04 	movi	r7,-4
  434990:	49ce703a 	and	r7,r9,r7
  434994:	20c06526 	beq	r4,r3,434b2c <_free_r+0x1e4>
  434998:	19c00115 	stw	r7,4(r3)
  43499c:	4200004c 	andi	r8,r8,1
  4349a0:	40003026 	beq	r8,zero,434a64 <_free_r+0x11c>
  4349a4:	0009883a 	mov	r4,zero
  4349a8:	19d1883a 	add	r8,r3,r7
  4349ac:	42000117 	ldw	r8,4(r8)
  4349b0:	4200004c 	andi	r8,r8,1
  4349b4:	4000061e 	bne	r8,zero,4349d0 <_free_r+0x88>
  4349b8:	11c5883a 	add	r2,r2,r7
  4349bc:	19c00217 	ldw	r7,8(r3)
  4349c0:	20004e26 	beq	r4,zero,434afc <_free_r+0x1b4>
  4349c4:	18c00317 	ldw	r3,12(r3)
  4349c8:	38c00315 	stw	r3,12(r7)
  4349cc:	19c00215 	stw	r7,8(r3)
  4349d0:	11c00054 	ori	r7,r2,1
  4349d4:	3087883a 	add	r3,r6,r2
  4349d8:	31c00115 	stw	r7,4(r6)
  4349dc:	18800015 	stw	r2,0(r3)
  4349e0:	20001a1e 	bne	r4,zero,434a4c <_free_r+0x104>
  4349e4:	00c07fc4 	movi	r3,511
  4349e8:	18802e2e 	bgeu	r3,r2,434aa4 <_free_r+0x15c>
  4349ec:	1006d27a 	srli	r3,r2,9
  4349f0:	01000104 	movi	r4,4
  4349f4:	20c06636 	bltu	r4,r3,434b90 <_free_r+0x248>
  4349f8:	1008d1ba 	srli	r4,r2,6
  4349fc:	21000e04 	addi	r4,r4,56
  434a00:	210f883a 	add	r7,r4,r4
  434a04:	39cf883a 	add	r7,r7,r7
  434a08:	39cf883a 	add	r7,r7,r7
  434a0c:	29cf883a 	add	r7,r5,r7
  434a10:	38c00217 	ldw	r3,8(r7)
  434a14:	01401134 	movhi	r5,68
  434a18:	29516b04 	addi	r5,r5,17836
  434a1c:	19c06126 	beq	r3,r7,434ba4 <_free_r+0x25c>
  434a20:	013fff04 	movi	r4,-4
  434a24:	19400117 	ldw	r5,4(r3)
  434a28:	290a703a 	and	r5,r5,r4
  434a2c:	1140022e 	bgeu	r2,r5,434a38 <_free_r+0xf0>
  434a30:	18c00217 	ldw	r3,8(r3)
  434a34:	38fffb1e 	bne	r7,r3,434a24 <_free_r+0xdc>
  434a38:	18800317 	ldw	r2,12(r3)
  434a3c:	30800315 	stw	r2,12(r6)
  434a40:	30c00215 	stw	r3,8(r6)
  434a44:	11800215 	stw	r6,8(r2)
  434a48:	19800315 	stw	r6,12(r3)
  434a4c:	8809883a 	mov	r4,r17
  434a50:	dfc00217 	ldw	ra,8(sp)
  434a54:	dc400117 	ldw	r17,4(sp)
  434a58:	dc000017 	ldw	r16,0(sp)
  434a5c:	dec00304 	addi	sp,sp,12
  434a60:	043651c1 	jmpi	43651c <__malloc_unlock>
  434a64:	813ffe17 	ldw	r4,-8(r16)
  434a68:	2a400204 	addi	r9,r5,8
  434a6c:	310dc83a 	sub	r6,r6,r4
  434a70:	32000217 	ldw	r8,8(r6)
  434a74:	1105883a 	add	r2,r2,r4
  434a78:	42404326 	beq	r8,r9,434b88 <_free_r+0x240>
  434a7c:	32400317 	ldw	r9,12(r6)
  434a80:	0009883a 	mov	r4,zero
  434a84:	42400315 	stw	r9,12(r8)
  434a88:	4a000215 	stw	r8,8(r9)
  434a8c:	003fc606 	br	4349a8 <_free_r+0x60>
  434a90:	dfc00217 	ldw	ra,8(sp)
  434a94:	dc400117 	ldw	r17,4(sp)
  434a98:	dc000017 	ldw	r16,0(sp)
  434a9c:	dec00304 	addi	sp,sp,12
  434aa0:	f800283a 	ret
  434aa4:	1004d0fa 	srli	r2,r2,3
  434aa8:	02000044 	movi	r8,1
  434aac:	29c00117 	ldw	r7,4(r5)
  434ab0:	1087883a 	add	r3,r2,r2
  434ab4:	18c7883a 	add	r3,r3,r3
  434ab8:	1005d0ba 	srai	r2,r2,2
  434abc:	18c7883a 	add	r3,r3,r3
  434ac0:	28c7883a 	add	r3,r5,r3
  434ac4:	19000217 	ldw	r4,8(r3)
  434ac8:	4084983a 	sll	r2,r8,r2
  434acc:	30c00315 	stw	r3,12(r6)
  434ad0:	31000215 	stw	r4,8(r6)
  434ad4:	11c4b03a 	or	r2,r2,r7
  434ad8:	21800315 	stw	r6,12(r4)
  434adc:	8809883a 	mov	r4,r17
  434ae0:	28800115 	stw	r2,4(r5)
  434ae4:	19800215 	stw	r6,8(r3)
  434ae8:	dfc00217 	ldw	ra,8(sp)
  434aec:	dc400117 	ldw	r17,4(sp)
  434af0:	dc000017 	ldw	r16,0(sp)
  434af4:	dec00304 	addi	sp,sp,12
  434af8:	043651c1 	jmpi	43651c <__malloc_unlock>
  434afc:	02001134 	movhi	r8,68
  434b00:	42116d04 	addi	r8,r8,17844
  434b04:	3a3faf1e 	bne	r7,r8,4349c4 <_free_r+0x7c>
  434b08:	29800515 	stw	r6,20(r5)
  434b0c:	29800415 	stw	r6,16(r5)
  434b10:	11000054 	ori	r4,r2,1
  434b14:	3087883a 	add	r3,r6,r2
  434b18:	31c00315 	stw	r7,12(r6)
  434b1c:	31c00215 	stw	r7,8(r6)
  434b20:	31000115 	stw	r4,4(r6)
  434b24:	18800015 	stw	r2,0(r3)
  434b28:	003fc806 	br	434a4c <_free_r+0x104>
  434b2c:	4200004c 	andi	r8,r8,1
  434b30:	3885883a 	add	r2,r7,r2
  434b34:	4000071e 	bne	r8,zero,434b54 <_free_r+0x20c>
  434b38:	81fffe17 	ldw	r7,-8(r16)
  434b3c:	31cdc83a 	sub	r6,r6,r7
  434b40:	30c00317 	ldw	r3,12(r6)
  434b44:	31000217 	ldw	r4,8(r6)
  434b48:	11c5883a 	add	r2,r2,r7
  434b4c:	20c00315 	stw	r3,12(r4)
  434b50:	19000215 	stw	r4,8(r3)
  434b54:	00c01134 	movhi	r3,68
  434b58:	18d70004 	addi	r3,r3,23552
  434b5c:	18c00017 	ldw	r3,0(r3)
  434b60:	11000054 	ori	r4,r2,1
  434b64:	31000115 	stw	r4,4(r6)
  434b68:	29800215 	stw	r6,8(r5)
  434b6c:	10ffb736 	bltu	r2,r3,434a4c <_free_r+0x104>
  434b70:	00801134 	movhi	r2,68
  434b74:	109df404 	addi	r2,r2,30672
  434b78:	11400017 	ldw	r5,0(r2)
  434b7c:	8809883a 	mov	r4,r17
  434b80:	043480c0 	call	43480c <_malloc_trim_r>
  434b84:	003fb106 	br	434a4c <_free_r+0x104>
  434b88:	01000044 	movi	r4,1
  434b8c:	003f8606 	br	4349a8 <_free_r+0x60>
  434b90:	01000504 	movi	r4,20
  434b94:	20c00b36 	bltu	r4,r3,434bc4 <_free_r+0x27c>
  434b98:	190016c4 	addi	r4,r3,91
  434b9c:	210f883a 	add	r7,r4,r4
  434ba0:	003f9806 	br	434a04 <_free_r+0xbc>
  434ba4:	2009d0ba 	srai	r4,r4,2
  434ba8:	00800044 	movi	r2,1
  434bac:	29c00117 	ldw	r7,4(r5)
  434bb0:	1108983a 	sll	r4,r2,r4
  434bb4:	1805883a 	mov	r2,r3
  434bb8:	21c8b03a 	or	r4,r4,r7
  434bbc:	29000115 	stw	r4,4(r5)
  434bc0:	003f9e06 	br	434a3c <_free_r+0xf4>
  434bc4:	01001504 	movi	r4,84
  434bc8:	20c00436 	bltu	r4,r3,434bdc <_free_r+0x294>
  434bcc:	1008d33a 	srli	r4,r2,12
  434bd0:	21001b84 	addi	r4,r4,110
  434bd4:	210f883a 	add	r7,r4,r4
  434bd8:	003f8a06 	br	434a04 <_free_r+0xbc>
  434bdc:	01005504 	movi	r4,340
  434be0:	20c00436 	bltu	r4,r3,434bf4 <_free_r+0x2ac>
  434be4:	1008d3fa 	srli	r4,r2,15
  434be8:	21001dc4 	addi	r4,r4,119
  434bec:	210f883a 	add	r7,r4,r4
  434bf0:	003f8406 	br	434a04 <_free_r+0xbc>
  434bf4:	01015504 	movi	r4,1364
  434bf8:	20c00436 	bltu	r4,r3,434c0c <_free_r+0x2c4>
  434bfc:	1008d4ba 	srli	r4,r2,18
  434c00:	21001f04 	addi	r4,r4,124
  434c04:	210f883a 	add	r7,r4,r4
  434c08:	003f7e06 	br	434a04 <_free_r+0xbc>
  434c0c:	01c03f04 	movi	r7,252
  434c10:	01001f84 	movi	r4,126
  434c14:	003f7b06 	br	434a04 <_free_r+0xbc>

00434c18 <_fwalk>:
  434c18:	defff904 	addi	sp,sp,-28
  434c1c:	dcc00315 	stw	r19,12(sp)
  434c20:	24c0b804 	addi	r19,r4,736
  434c24:	dd400515 	stw	r21,20(sp)
  434c28:	dd000415 	stw	r20,16(sp)
  434c2c:	dfc00615 	stw	ra,24(sp)
  434c30:	dc800215 	stw	r18,8(sp)
  434c34:	dc400115 	stw	r17,4(sp)
  434c38:	dc000015 	stw	r16,0(sp)
  434c3c:	282b883a 	mov	r21,r5
  434c40:	0029883a 	mov	r20,zero
  434c44:	04347cc0 	call	4347cc <__sfp_lock_acquire>
  434c48:	98001226 	beq	r19,zero,434c94 <_fwalk+0x7c>
  434c4c:	04bfffc4 	movi	r18,-1
  434c50:	9c400117 	ldw	r17,4(r19)
  434c54:	9c000217 	ldw	r16,8(r19)
  434c58:	8c7fffc4 	addi	r17,r17,-1
  434c5c:	88000b16 	blt	r17,zero,434c8c <_fwalk+0x74>
  434c60:	84000304 	addi	r16,r16,12
  434c64:	80c0000f 	ldh	r3,0(r16)
  434c68:	8c7fffc4 	addi	r17,r17,-1
  434c6c:	813ffd04 	addi	r4,r16,-12
  434c70:	18000426 	beq	r3,zero,434c84 <_fwalk+0x6c>
  434c74:	80c0008f 	ldh	r3,2(r16)
  434c78:	1c800226 	beq	r3,r18,434c84 <_fwalk+0x6c>
  434c7c:	a83ee83a 	callr	r21
  434c80:	a0a8b03a 	or	r20,r20,r2
  434c84:	84001704 	addi	r16,r16,92
  434c88:	8cbff61e 	bne	r17,r18,434c64 <_fwalk+0x4c>
  434c8c:	9cc00017 	ldw	r19,0(r19)
  434c90:	983fef1e 	bne	r19,zero,434c50 <_fwalk+0x38>
  434c94:	04347d00 	call	4347d0 <__sfp_lock_release>
  434c98:	a005883a 	mov	r2,r20
  434c9c:	dfc00617 	ldw	ra,24(sp)
  434ca0:	dd400517 	ldw	r21,20(sp)
  434ca4:	dd000417 	ldw	r20,16(sp)
  434ca8:	dcc00317 	ldw	r19,12(sp)
  434cac:	dc800217 	ldw	r18,8(sp)
  434cb0:	dc400117 	ldw	r17,4(sp)
  434cb4:	dc000017 	ldw	r16,0(sp)
  434cb8:	dec00704 	addi	sp,sp,28
  434cbc:	f800283a 	ret

00434cc0 <_fwalk_reent>:
  434cc0:	defff804 	addi	sp,sp,-32
  434cc4:	dcc00315 	stw	r19,12(sp)
  434cc8:	24c0b804 	addi	r19,r4,736
  434ccc:	dd800615 	stw	r22,24(sp)
  434cd0:	dd400515 	stw	r21,20(sp)
  434cd4:	dd000415 	stw	r20,16(sp)
  434cd8:	dfc00715 	stw	ra,28(sp)
  434cdc:	dc800215 	stw	r18,8(sp)
  434ce0:	dc400115 	stw	r17,4(sp)
  434ce4:	dc000015 	stw	r16,0(sp)
  434ce8:	2029883a 	mov	r20,r4
  434cec:	282b883a 	mov	r21,r5
  434cf0:	002d883a 	mov	r22,zero
  434cf4:	04347cc0 	call	4347cc <__sfp_lock_acquire>
  434cf8:	98001326 	beq	r19,zero,434d48 <_fwalk_reent+0x88>
  434cfc:	04bfffc4 	movi	r18,-1
  434d00:	9c400117 	ldw	r17,4(r19)
  434d04:	9c000217 	ldw	r16,8(r19)
  434d08:	8c7fffc4 	addi	r17,r17,-1
  434d0c:	88000c16 	blt	r17,zero,434d40 <_fwalk_reent+0x80>
  434d10:	84000304 	addi	r16,r16,12
  434d14:	80c0000f 	ldh	r3,0(r16)
  434d18:	8c7fffc4 	addi	r17,r17,-1
  434d1c:	817ffd04 	addi	r5,r16,-12
  434d20:	18000526 	beq	r3,zero,434d38 <_fwalk_reent+0x78>
  434d24:	80c0008f 	ldh	r3,2(r16)
  434d28:	a009883a 	mov	r4,r20
  434d2c:	1c800226 	beq	r3,r18,434d38 <_fwalk_reent+0x78>
  434d30:	a83ee83a 	callr	r21
  434d34:	b0acb03a 	or	r22,r22,r2
  434d38:	84001704 	addi	r16,r16,92
  434d3c:	8cbff51e 	bne	r17,r18,434d14 <_fwalk_reent+0x54>
  434d40:	9cc00017 	ldw	r19,0(r19)
  434d44:	983fee1e 	bne	r19,zero,434d00 <_fwalk_reent+0x40>
  434d48:	04347d00 	call	4347d0 <__sfp_lock_release>
  434d4c:	b005883a 	mov	r2,r22
  434d50:	dfc00717 	ldw	ra,28(sp)
  434d54:	dd800617 	ldw	r22,24(sp)
  434d58:	dd400517 	ldw	r21,20(sp)
  434d5c:	dd000417 	ldw	r20,16(sp)
  434d60:	dcc00317 	ldw	r19,12(sp)
  434d64:	dc800217 	ldw	r18,8(sp)
  434d68:	dc400117 	ldw	r17,4(sp)
  434d6c:	dc000017 	ldw	r16,0(sp)
  434d70:	dec00804 	addi	sp,sp,32
  434d74:	f800283a 	ret

00434d78 <__smakebuf_r>:
  434d78:	2880030b 	ldhu	r2,12(r5)
  434d7c:	deffed04 	addi	sp,sp,-76
  434d80:	dc401015 	stw	r17,64(sp)
  434d84:	10c0008c 	andi	r3,r2,2
  434d88:	18ffffcc 	andi	r3,r3,65535
  434d8c:	18e0001c 	xori	r3,r3,32768
  434d90:	dc000f15 	stw	r16,60(sp)
  434d94:	dfc01215 	stw	ra,72(sp)
  434d98:	dc801115 	stw	r18,68(sp)
  434d9c:	18e00004 	addi	r3,r3,-32768
  434da0:	2821883a 	mov	r16,r5
  434da4:	2023883a 	mov	r17,r4
  434da8:	1800381e 	bne	r3,zero,434e8c <__smakebuf_r+0x114>
  434dac:	2940038f 	ldh	r5,14(r5)
  434db0:	28002d16 	blt	r5,zero,434e68 <__smakebuf_r+0xf0>
  434db4:	d80d883a 	mov	r6,sp
  434db8:	043535c0 	call	43535c <_fstat_r>
  434dbc:	10002916 	blt	r2,zero,434e64 <__smakebuf_r+0xec>
  434dc0:	d8800117 	ldw	r2,4(sp)
  434dc4:	00e00014 	movui	r3,32768
  434dc8:	10bc000c 	andi	r2,r2,61440
  434dcc:	10c03c26 	beq	r2,r3,434ec0 <__smakebuf_r+0x148>
  434dd0:	80c0030b 	ldhu	r3,12(r16)
  434dd4:	18c20014 	ori	r3,r3,2048
  434dd8:	80c0030d 	sth	r3,12(r16)
  434ddc:	00c80004 	movi	r3,8192
  434de0:	10c00c1e 	bne	r2,r3,434e14 <__smakebuf_r+0x9c>
  434de4:	8140038f 	ldh	r5,14(r16)
  434de8:	8809883a 	mov	r4,r17
  434dec:	04353c40 	call	4353c4 <_isatty_r>
  434df0:	10000826 	beq	r2,zero,434e14 <__smakebuf_r+0x9c>
  434df4:	80c0030b 	ldhu	r3,12(r16)
  434df8:	808010c4 	addi	r2,r16,67
  434dfc:	80800015 	stw	r2,0(r16)
  434e00:	18c00054 	ori	r3,r3,1
  434e04:	80800415 	stw	r2,16(r16)
  434e08:	00800044 	movi	r2,1
  434e0c:	80c0030d 	sth	r3,12(r16)
  434e10:	80800515 	stw	r2,20(r16)
  434e14:	04810004 	movi	r18,1024
  434e18:	8809883a 	mov	r4,r17
  434e1c:	900b883a 	mov	r5,r18
  434e20:	0432fec0 	call	432fec <_malloc_r>
  434e24:	10003026 	beq	r2,zero,434ee8 <__smakebuf_r+0x170>
  434e28:	80c0030b 	ldhu	r3,12(r16)
  434e2c:	010010f4 	movhi	r4,67
  434e30:	21114c04 	addi	r4,r4,17712
  434e34:	89000f15 	stw	r4,60(r17)
  434e38:	18c02014 	ori	r3,r3,128
  434e3c:	80c0030d 	sth	r3,12(r16)
  434e40:	80800015 	stw	r2,0(r16)
  434e44:	80800415 	stw	r2,16(r16)
  434e48:	84800515 	stw	r18,20(r16)
  434e4c:	dfc01217 	ldw	ra,72(sp)
  434e50:	dc801117 	ldw	r18,68(sp)
  434e54:	dc401017 	ldw	r17,64(sp)
  434e58:	dc000f17 	ldw	r16,60(sp)
  434e5c:	dec01304 	addi	sp,sp,76
  434e60:	f800283a 	ret
  434e64:	8080030b 	ldhu	r2,12(r16)
  434e68:	10c0200c 	andi	r3,r2,128
  434e6c:	18ffffcc 	andi	r3,r3,65535
  434e70:	18e0001c 	xori	r3,r3,32768
  434e74:	18e00004 	addi	r3,r3,-32768
  434e78:	18000f1e 	bne	r3,zero,434eb8 <__smakebuf_r+0x140>
  434e7c:	04810004 	movi	r18,1024
  434e80:	10820014 	ori	r2,r2,2048
  434e84:	8080030d 	sth	r2,12(r16)
  434e88:	003fe306 	br	434e18 <__smakebuf_r+0xa0>
  434e8c:	288010c4 	addi	r2,r5,67
  434e90:	28800015 	stw	r2,0(r5)
  434e94:	28800415 	stw	r2,16(r5)
  434e98:	00800044 	movi	r2,1
  434e9c:	28800515 	stw	r2,20(r5)
  434ea0:	dfc01217 	ldw	ra,72(sp)
  434ea4:	dc801117 	ldw	r18,68(sp)
  434ea8:	dc401017 	ldw	r17,64(sp)
  434eac:	dc000f17 	ldw	r16,60(sp)
  434eb0:	dec01304 	addi	sp,sp,76
  434eb4:	f800283a 	ret
  434eb8:	04801004 	movi	r18,64
  434ebc:	003ff006 	br	434e80 <__smakebuf_r+0x108>
  434ec0:	81000a17 	ldw	r4,40(r16)
  434ec4:	00c010f4 	movhi	r3,67
  434ec8:	18d43604 	addi	r3,r3,20696
  434ecc:	20ffc01e 	bne	r4,r3,434dd0 <__smakebuf_r+0x58>
  434ed0:	8080030b 	ldhu	r2,12(r16)
  434ed4:	00c10004 	movi	r3,1024
  434ed8:	80c01315 	stw	r3,76(r16)
  434edc:	10c4b03a 	or	r2,r2,r3
  434ee0:	8080030d 	sth	r2,12(r16)
  434ee4:	003fcb06 	br	434e14 <__smakebuf_r+0x9c>
  434ee8:	8080030b 	ldhu	r2,12(r16)
  434eec:	10c0800c 	andi	r3,r2,512
  434ef0:	18ffffcc 	andi	r3,r3,65535
  434ef4:	18e0001c 	xori	r3,r3,32768
  434ef8:	18e00004 	addi	r3,r3,-32768
  434efc:	183fd31e 	bne	r3,zero,434e4c <__smakebuf_r+0xd4>
  434f00:	10800094 	ori	r2,r2,2
  434f04:	80c010c4 	addi	r3,r16,67
  434f08:	8080030d 	sth	r2,12(r16)
  434f0c:	00800044 	movi	r2,1
  434f10:	80c00015 	stw	r3,0(r16)
  434f14:	80c00415 	stw	r3,16(r16)
  434f18:	80800515 	stw	r2,20(r16)
  434f1c:	003fcb06 	br	434e4c <__smakebuf_r+0xd4>

00434f20 <memset>:
  434f20:	00c000c4 	movi	r3,3
  434f24:	2005883a 	mov	r2,r4
  434f28:	29403fcc 	andi	r5,r5,255
  434f2c:	19802d2e 	bgeu	r3,r6,434fe4 <memset+0xc4>
  434f30:	20c6703a 	and	r3,r4,r3
  434f34:	18002e1e 	bne	r3,zero,434ff0 <memset+0xd0>
  434f38:	2806923a 	slli	r3,r5,8
  434f3c:	010003c4 	movi	r4,15
  434f40:	3011883a 	mov	r8,r6
  434f44:	1946b03a 	or	r3,r3,r5
  434f48:	180e943a 	slli	r7,r3,16
  434f4c:	38ceb03a 	or	r7,r7,r3
  434f50:	1007883a 	mov	r3,r2
  434f54:	21800f2e 	bgeu	r4,r6,434f94 <memset+0x74>
  434f58:	19c00015 	stw	r7,0(r3)
  434f5c:	19c00115 	stw	r7,4(r3)
  434f60:	19c00215 	stw	r7,8(r3)
  434f64:	19c00315 	stw	r7,12(r3)
  434f68:	423ffc04 	addi	r8,r8,-16
  434f6c:	18c00404 	addi	r3,r3,16
  434f70:	223ff936 	bltu	r4,r8,434f58 <memset+0x38>
  434f74:	30fffc04 	addi	r3,r6,-16
  434f78:	1806d13a 	srli	r3,r3,4
  434f7c:	318003cc 	andi	r6,r6,15
  434f80:	010000c4 	movi	r4,3
  434f84:	18c00044 	addi	r3,r3,1
  434f88:	1806913a 	slli	r3,r3,4
  434f8c:	10c7883a 	add	r3,r2,r3
  434f90:	21800e2e 	bgeu	r4,r6,434fcc <memset+0xac>
  434f94:	1813883a 	mov	r9,r3
  434f98:	3011883a 	mov	r8,r6
  434f9c:	010000c4 	movi	r4,3
  434fa0:	49c00015 	stw	r7,0(r9)
  434fa4:	423fff04 	addi	r8,r8,-4
  434fa8:	4a400104 	addi	r9,r9,4
  434fac:	223ffc36 	bltu	r4,r8,434fa0 <memset+0x80>
  434fb0:	313fff04 	addi	r4,r6,-4
  434fb4:	2008d0ba 	srli	r4,r4,2
  434fb8:	318000cc 	andi	r6,r6,3
  434fbc:	21000044 	addi	r4,r4,1
  434fc0:	2109883a 	add	r4,r4,r4
  434fc4:	2109883a 	add	r4,r4,r4
  434fc8:	1907883a 	add	r3,r3,r4
  434fcc:	30000a26 	beq	r6,zero,434ff8 <memset+0xd8>
  434fd0:	198d883a 	add	r6,r3,r6
  434fd4:	19400005 	stb	r5,0(r3)
  434fd8:	18c00044 	addi	r3,r3,1
  434fdc:	19bffd1e 	bne	r3,r6,434fd4 <memset+0xb4>
  434fe0:	f800283a 	ret
  434fe4:	2007883a 	mov	r3,r4
  434fe8:	303ff91e 	bne	r6,zero,434fd0 <memset+0xb0>
  434fec:	00000206 	br	434ff8 <memset+0xd8>
  434ff0:	2007883a 	mov	r3,r4
  434ff4:	003ff606 	br	434fd0 <memset+0xb0>
  434ff8:	f800283a 	ret

00434ffc <__sread>:
  434ffc:	defffe04 	addi	sp,sp,-8
  435000:	dc000015 	stw	r16,0(sp)
  435004:	2821883a 	mov	r16,r5
  435008:	2940038f 	ldh	r5,14(r5)
  43500c:	dfc00115 	stw	ra,4(sp)
  435010:	04354940 	call	435494 <_read_r>
  435014:	10000716 	blt	r2,zero,435034 <__sread+0x38>
  435018:	80c01417 	ldw	r3,80(r16)
  43501c:	1887883a 	add	r3,r3,r2
  435020:	80c01415 	stw	r3,80(r16)
  435024:	dfc00117 	ldw	ra,4(sp)
  435028:	dc000017 	ldw	r16,0(sp)
  43502c:	dec00204 	addi	sp,sp,8
  435030:	f800283a 	ret
  435034:	80c0030b 	ldhu	r3,12(r16)
  435038:	18fbffcc 	andi	r3,r3,61439
  43503c:	80c0030d 	sth	r3,12(r16)
  435040:	dfc00117 	ldw	ra,4(sp)
  435044:	dc000017 	ldw	r16,0(sp)
  435048:	dec00204 	addi	sp,sp,8
  43504c:	f800283a 	ret

00435050 <__swrite>:
  435050:	2880030b 	ldhu	r2,12(r5)
  435054:	defffb04 	addi	sp,sp,-20
  435058:	dcc00315 	stw	r19,12(sp)
  43505c:	10c0400c 	andi	r3,r2,256
  435060:	18ffffcc 	andi	r3,r3,65535
  435064:	18e0001c 	xori	r3,r3,32768
  435068:	dc800215 	stw	r18,8(sp)
  43506c:	dc400115 	stw	r17,4(sp)
  435070:	dc000015 	stw	r16,0(sp)
  435074:	dfc00415 	stw	ra,16(sp)
  435078:	18e00004 	addi	r3,r3,-32768
  43507c:	2821883a 	mov	r16,r5
  435080:	2027883a 	mov	r19,r4
  435084:	3025883a 	mov	r18,r6
  435088:	3823883a 	mov	r17,r7
  43508c:	18000526 	beq	r3,zero,4350a4 <__swrite+0x54>
  435090:	2940038f 	ldh	r5,14(r5)
  435094:	000d883a 	mov	r6,zero
  435098:	01c00084 	movi	r7,2
  43509c:	04354280 	call	435428 <_lseek_r>
  4350a0:	8080030b 	ldhu	r2,12(r16)
  4350a4:	8140038f 	ldh	r5,14(r16)
  4350a8:	10bbffcc 	andi	r2,r2,61439
  4350ac:	9809883a 	mov	r4,r19
  4350b0:	900d883a 	mov	r6,r18
  4350b4:	880f883a 	mov	r7,r17
  4350b8:	8080030d 	sth	r2,12(r16)
  4350bc:	dfc00417 	ldw	ra,16(sp)
  4350c0:	dcc00317 	ldw	r19,12(sp)
  4350c4:	dc800217 	ldw	r18,8(sp)
  4350c8:	dc400117 	ldw	r17,4(sp)
  4350cc:	dc000017 	ldw	r16,0(sp)
  4350d0:	dec00504 	addi	sp,sp,20
  4350d4:	043513c1 	jmpi	43513c <_write_r>

004350d8 <__sseek>:
  4350d8:	defffe04 	addi	sp,sp,-8
  4350dc:	dc000015 	stw	r16,0(sp)
  4350e0:	2821883a 	mov	r16,r5
  4350e4:	2940038f 	ldh	r5,14(r5)
  4350e8:	dfc00115 	stw	ra,4(sp)
  4350ec:	04354280 	call	435428 <_lseek_r>
  4350f0:	00ffffc4 	movi	r3,-1
  4350f4:	10c00826 	beq	r2,r3,435118 <__sseek+0x40>
  4350f8:	80c0030b 	ldhu	r3,12(r16)
  4350fc:	80801415 	stw	r2,80(r16)
  435100:	18c40014 	ori	r3,r3,4096
  435104:	80c0030d 	sth	r3,12(r16)
  435108:	dfc00117 	ldw	ra,4(sp)
  43510c:	dc000017 	ldw	r16,0(sp)
  435110:	dec00204 	addi	sp,sp,8
  435114:	f800283a 	ret
  435118:	80c0030b 	ldhu	r3,12(r16)
  43511c:	18fbffcc 	andi	r3,r3,61439
  435120:	80c0030d 	sth	r3,12(r16)
  435124:	dfc00117 	ldw	ra,4(sp)
  435128:	dc000017 	ldw	r16,0(sp)
  43512c:	dec00204 	addi	sp,sp,8
  435130:	f800283a 	ret

00435134 <__sclose>:
  435134:	2940038f 	ldh	r5,14(r5)
  435138:	04351a81 	jmpi	4351a8 <_close_r>

0043513c <_write_r>:
  43513c:	defffd04 	addi	sp,sp,-12
  435140:	dc400115 	stw	r17,4(sp)
  435144:	dc000015 	stw	r16,0(sp)
  435148:	2023883a 	mov	r17,r4
  43514c:	04001134 	movhi	r16,68
  435150:	841df504 	addi	r16,r16,30676
  435154:	2809883a 	mov	r4,r5
  435158:	300b883a 	mov	r5,r6
  43515c:	380d883a 	mov	r6,r7
  435160:	dfc00215 	stw	ra,8(sp)
  435164:	80000015 	stw	zero,0(r16)
  435168:	04361a80 	call	4361a8 <write>
  43516c:	00ffffc4 	movi	r3,-1
  435170:	10c00526 	beq	r2,r3,435188 <_write_r+0x4c>
  435174:	dfc00217 	ldw	ra,8(sp)
  435178:	dc400117 	ldw	r17,4(sp)
  43517c:	dc000017 	ldw	r16,0(sp)
  435180:	dec00304 	addi	sp,sp,12
  435184:	f800283a 	ret
  435188:	80c00017 	ldw	r3,0(r16)
  43518c:	183ff926 	beq	r3,zero,435174 <_write_r+0x38>
  435190:	88c00015 	stw	r3,0(r17)
  435194:	dfc00217 	ldw	ra,8(sp)
  435198:	dc400117 	ldw	r17,4(sp)
  43519c:	dc000017 	ldw	r16,0(sp)
  4351a0:	dec00304 	addi	sp,sp,12
  4351a4:	f800283a 	ret

004351a8 <_close_r>:
  4351a8:	defffd04 	addi	sp,sp,-12
  4351ac:	dc400115 	stw	r17,4(sp)
  4351b0:	dc000015 	stw	r16,0(sp)
  4351b4:	2023883a 	mov	r17,r4
  4351b8:	04001134 	movhi	r16,68
  4351bc:	841df504 	addi	r16,r16,30676
  4351c0:	2809883a 	mov	r4,r5
  4351c4:	dfc00215 	stw	ra,8(sp)
  4351c8:	80000015 	stw	zero,0(r16)
  4351cc:	04355780 	call	435578 <close>
  4351d0:	00ffffc4 	movi	r3,-1
  4351d4:	10c00526 	beq	r2,r3,4351ec <_close_r+0x44>
  4351d8:	dfc00217 	ldw	ra,8(sp)
  4351dc:	dc400117 	ldw	r17,4(sp)
  4351e0:	dc000017 	ldw	r16,0(sp)
  4351e4:	dec00304 	addi	sp,sp,12
  4351e8:	f800283a 	ret
  4351ec:	80c00017 	ldw	r3,0(r16)
  4351f0:	183ff926 	beq	r3,zero,4351d8 <_close_r+0x30>
  4351f4:	88c00015 	stw	r3,0(r17)
  4351f8:	dfc00217 	ldw	ra,8(sp)
  4351fc:	dc400117 	ldw	r17,4(sp)
  435200:	dc000017 	ldw	r16,0(sp)
  435204:	dec00304 	addi	sp,sp,12
  435208:	f800283a 	ret

0043520c <_fclose_r>:
  43520c:	defffc04 	addi	sp,sp,-16
  435210:	dc400115 	stw	r17,4(sp)
  435214:	dc000015 	stw	r16,0(sp)
  435218:	dfc00315 	stw	ra,12(sp)
  43521c:	dc800215 	stw	r18,8(sp)
  435220:	2821883a 	mov	r16,r5
  435224:	2023883a 	mov	r17,r4
  435228:	28003426 	beq	r5,zero,4352fc <_fclose_r+0xf0>
  43522c:	04347cc0 	call	4347cc <__sfp_lock_acquire>
  435230:	88000226 	beq	r17,zero,43523c <_fclose_r+0x30>
  435234:	88800e17 	ldw	r2,56(r17)
  435238:	10003826 	beq	r2,zero,43531c <_fclose_r+0x110>
  43523c:	8080030f 	ldh	r2,12(r16)
  435240:	10002526 	beq	r2,zero,4352d8 <_fclose_r+0xcc>
  435244:	8809883a 	mov	r4,r17
  435248:	800b883a 	mov	r5,r16
  43524c:	04343080 	call	434308 <_fflush_r>
  435250:	1025883a 	mov	r18,r2
  435254:	80800b17 	ldw	r2,44(r16)
  435258:	10000426 	beq	r2,zero,43526c <_fclose_r+0x60>
  43525c:	81400717 	ldw	r5,28(r16)
  435260:	8809883a 	mov	r4,r17
  435264:	103ee83a 	callr	r2
  435268:	10003516 	blt	r2,zero,435340 <_fclose_r+0x134>
  43526c:	8080030b 	ldhu	r2,12(r16)
  435270:	1080200c 	andi	r2,r2,128
  435274:	10bfffcc 	andi	r2,r2,65535
  435278:	10a0001c 	xori	r2,r2,32768
  43527c:	10a00004 	addi	r2,r2,-32768
  435280:	10002b1e 	bne	r2,zero,435330 <_fclose_r+0x124>
  435284:	81400c17 	ldw	r5,48(r16)
  435288:	28000526 	beq	r5,zero,4352a0 <_fclose_r+0x94>
  43528c:	80801004 	addi	r2,r16,64
  435290:	28800226 	beq	r5,r2,43529c <_fclose_r+0x90>
  435294:	8809883a 	mov	r4,r17
  435298:	04349480 	call	434948 <_free_r>
  43529c:	80000c15 	stw	zero,48(r16)
  4352a0:	81401117 	ldw	r5,68(r16)
  4352a4:	28000326 	beq	r5,zero,4352b4 <_fclose_r+0xa8>
  4352a8:	8809883a 	mov	r4,r17
  4352ac:	04349480 	call	434948 <_free_r>
  4352b0:	80001115 	stw	zero,68(r16)
  4352b4:	8000030d 	sth	zero,12(r16)
  4352b8:	04347d00 	call	4347d0 <__sfp_lock_release>
  4352bc:	9005883a 	mov	r2,r18
  4352c0:	dfc00317 	ldw	ra,12(sp)
  4352c4:	dc800217 	ldw	r18,8(sp)
  4352c8:	dc400117 	ldw	r17,4(sp)
  4352cc:	dc000017 	ldw	r16,0(sp)
  4352d0:	dec00404 	addi	sp,sp,16
  4352d4:	f800283a 	ret
  4352d8:	04347d00 	call	4347d0 <__sfp_lock_release>
  4352dc:	0025883a 	mov	r18,zero
  4352e0:	9005883a 	mov	r2,r18
  4352e4:	dfc00317 	ldw	ra,12(sp)
  4352e8:	dc800217 	ldw	r18,8(sp)
  4352ec:	dc400117 	ldw	r17,4(sp)
  4352f0:	dc000017 	ldw	r16,0(sp)
  4352f4:	dec00404 	addi	sp,sp,16
  4352f8:	f800283a 	ret
  4352fc:	0025883a 	mov	r18,zero
  435300:	9005883a 	mov	r2,r18
  435304:	dfc00317 	ldw	ra,12(sp)
  435308:	dc800217 	ldw	r18,8(sp)
  43530c:	dc400117 	ldw	r17,4(sp)
  435310:	dc000017 	ldw	r16,0(sp)
  435314:	dec00404 	addi	sp,sp,16
  435318:	f800283a 	ret
  43531c:	8809883a 	mov	r4,r17
  435320:	04345c40 	call	4345c4 <__sinit>
  435324:	8080030f 	ldh	r2,12(r16)
  435328:	103fc61e 	bne	r2,zero,435244 <_fclose_r+0x38>
  43532c:	003fea06 	br	4352d8 <_fclose_r+0xcc>
  435330:	81400417 	ldw	r5,16(r16)
  435334:	8809883a 	mov	r4,r17
  435338:	04349480 	call	434948 <_free_r>
  43533c:	003fd106 	br	435284 <_fclose_r+0x78>
  435340:	04bfffc4 	movi	r18,-1
  435344:	003fc906 	br	43526c <_fclose_r+0x60>

00435348 <fclose>:
  435348:	00801134 	movhi	r2,68
  43534c:	1096fe04 	addi	r2,r2,23544
  435350:	200b883a 	mov	r5,r4
  435354:	11000017 	ldw	r4,0(r2)
  435358:	043520c1 	jmpi	43520c <_fclose_r>

0043535c <_fstat_r>:
  43535c:	defffd04 	addi	sp,sp,-12
  435360:	dc400115 	stw	r17,4(sp)
  435364:	dc000015 	stw	r16,0(sp)
  435368:	2023883a 	mov	r17,r4
  43536c:	04001134 	movhi	r16,68
  435370:	841df504 	addi	r16,r16,30676
  435374:	2809883a 	mov	r4,r5
  435378:	300b883a 	mov	r5,r6
  43537c:	dfc00215 	stw	ra,8(sp)
  435380:	80000015 	stw	zero,0(r16)
  435384:	04356c00 	call	4356c0 <fstat>
  435388:	00ffffc4 	movi	r3,-1
  43538c:	10c00526 	beq	r2,r3,4353a4 <_fstat_r+0x48>
  435390:	dfc00217 	ldw	ra,8(sp)
  435394:	dc400117 	ldw	r17,4(sp)
  435398:	dc000017 	ldw	r16,0(sp)
  43539c:	dec00304 	addi	sp,sp,12
  4353a0:	f800283a 	ret
  4353a4:	80c00017 	ldw	r3,0(r16)
  4353a8:	183ff926 	beq	r3,zero,435390 <_fstat_r+0x34>
  4353ac:	88c00015 	stw	r3,0(r17)
  4353b0:	dfc00217 	ldw	ra,8(sp)
  4353b4:	dc400117 	ldw	r17,4(sp)
  4353b8:	dc000017 	ldw	r16,0(sp)
  4353bc:	dec00304 	addi	sp,sp,12
  4353c0:	f800283a 	ret

004353c4 <_isatty_r>:
  4353c4:	defffd04 	addi	sp,sp,-12
  4353c8:	dc400115 	stw	r17,4(sp)
  4353cc:	dc000015 	stw	r16,0(sp)
  4353d0:	2023883a 	mov	r17,r4
  4353d4:	04001134 	movhi	r16,68
  4353d8:	841df504 	addi	r16,r16,30676
  4353dc:	2809883a 	mov	r4,r5
  4353e0:	dfc00215 	stw	ra,8(sp)
  4353e4:	80000015 	stw	zero,0(r16)
  4353e8:	0435b0c0 	call	435b0c <isatty>
  4353ec:	00ffffc4 	movi	r3,-1
  4353f0:	10c00526 	beq	r2,r3,435408 <_isatty_r+0x44>
  4353f4:	dfc00217 	ldw	ra,8(sp)
  4353f8:	dc400117 	ldw	r17,4(sp)
  4353fc:	dc000017 	ldw	r16,0(sp)
  435400:	dec00304 	addi	sp,sp,12
  435404:	f800283a 	ret
  435408:	80c00017 	ldw	r3,0(r16)
  43540c:	183ff926 	beq	r3,zero,4353f4 <_isatty_r+0x30>
  435410:	88c00015 	stw	r3,0(r17)
  435414:	dfc00217 	ldw	ra,8(sp)
  435418:	dc400117 	ldw	r17,4(sp)
  43541c:	dc000017 	ldw	r16,0(sp)
  435420:	dec00304 	addi	sp,sp,12
  435424:	f800283a 	ret

00435428 <_lseek_r>:
  435428:	defffd04 	addi	sp,sp,-12
  43542c:	dc400115 	stw	r17,4(sp)
  435430:	dc000015 	stw	r16,0(sp)
  435434:	2023883a 	mov	r17,r4
  435438:	04001134 	movhi	r16,68
  43543c:	841df504 	addi	r16,r16,30676
  435440:	2809883a 	mov	r4,r5
  435444:	300b883a 	mov	r5,r6
  435448:	380d883a 	mov	r6,r7
  43544c:	dfc00215 	stw	ra,8(sp)
  435450:	80000015 	stw	zero,0(r16)
  435454:	0435cec0 	call	435cec <lseek>
  435458:	00ffffc4 	movi	r3,-1
  43545c:	10c00526 	beq	r2,r3,435474 <_lseek_r+0x4c>
  435460:	dfc00217 	ldw	ra,8(sp)
  435464:	dc400117 	ldw	r17,4(sp)
  435468:	dc000017 	ldw	r16,0(sp)
  43546c:	dec00304 	addi	sp,sp,12
  435470:	f800283a 	ret
  435474:	80c00017 	ldw	r3,0(r16)
  435478:	183ff926 	beq	r3,zero,435460 <_lseek_r+0x38>
  43547c:	88c00015 	stw	r3,0(r17)
  435480:	dfc00217 	ldw	ra,8(sp)
  435484:	dc400117 	ldw	r17,4(sp)
  435488:	dc000017 	ldw	r16,0(sp)
  43548c:	dec00304 	addi	sp,sp,12
  435490:	f800283a 	ret

00435494 <_read_r>:
  435494:	defffd04 	addi	sp,sp,-12
  435498:	dc400115 	stw	r17,4(sp)
  43549c:	dc000015 	stw	r16,0(sp)
  4354a0:	2023883a 	mov	r17,r4
  4354a4:	04001134 	movhi	r16,68
  4354a8:	841df504 	addi	r16,r16,30676
  4354ac:	2809883a 	mov	r4,r5
  4354b0:	300b883a 	mov	r5,r6
  4354b4:	380d883a 	mov	r6,r7
  4354b8:	dfc00215 	stw	ra,8(sp)
  4354bc:	80000015 	stw	zero,0(r16)
  4354c0:	0435edc0 	call	435edc <read>
  4354c4:	00ffffc4 	movi	r3,-1
  4354c8:	10c00526 	beq	r2,r3,4354e0 <_read_r+0x4c>
  4354cc:	dfc00217 	ldw	ra,8(sp)
  4354d0:	dc400117 	ldw	r17,4(sp)
  4354d4:	dc000017 	ldw	r16,0(sp)
  4354d8:	dec00304 	addi	sp,sp,12
  4354dc:	f800283a 	ret
  4354e0:	80c00017 	ldw	r3,0(r16)
  4354e4:	183ff926 	beq	r3,zero,4354cc <_read_r+0x38>
  4354e8:	88c00015 	stw	r3,0(r17)
  4354ec:	dfc00217 	ldw	ra,8(sp)
  4354f0:	dc400117 	ldw	r17,4(sp)
  4354f4:	dc000017 	ldw	r16,0(sp)
  4354f8:	dec00304 	addi	sp,sp,12
  4354fc:	f800283a 	ret

00435500 <__mulsi3>:
  435500:	0005883a 	mov	r2,zero
  435504:	20000726 	beq	r4,zero,435524 <__mulsi3+0x24>
  435508:	20c0004c 	andi	r3,r4,1
  43550c:	2008d07a 	srli	r4,r4,1
  435510:	18000126 	beq	r3,zero,435518 <__mulsi3+0x18>
  435514:	1145883a 	add	r2,r2,r5
  435518:	294b883a 	add	r5,r5,r5
  43551c:	203ffa1e 	bne	r4,zero,435508 <__mulsi3+0x8>
  435520:	f800283a 	ret
  435524:	f800283a 	ret

00435528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  435528:	defffe04 	addi	sp,sp,-8
  43552c:	dfc00115 	stw	ra,4(sp)
  435530:	df000015 	stw	fp,0(sp)
  435534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  435538:	00801134 	movhi	r2,68
  43553c:	10970604 	addi	r2,r2,23576
  435540:	10800017 	ldw	r2,0(r2)
  435544:	10000526 	beq	r2,zero,43555c <alt_get_errno+0x34>
  435548:	00801134 	movhi	r2,68
  43554c:	10970604 	addi	r2,r2,23576
  435550:	10800017 	ldw	r2,0(r2)
  435554:	103ee83a 	callr	r2
  435558:	00000206 	br	435564 <alt_get_errno+0x3c>
  43555c:	00801134 	movhi	r2,68
  435560:	109df504 	addi	r2,r2,30676
}
  435564:	e037883a 	mov	sp,fp
  435568:	dfc00117 	ldw	ra,4(sp)
  43556c:	df000017 	ldw	fp,0(sp)
  435570:	dec00204 	addi	sp,sp,8
  435574:	f800283a 	ret

00435578 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  435578:	defffb04 	addi	sp,sp,-20
  43557c:	dfc00415 	stw	ra,16(sp)
  435580:	df000315 	stw	fp,12(sp)
  435584:	df000304 	addi	fp,sp,12
  435588:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  43558c:	e0bfff17 	ldw	r2,-4(fp)
  435590:	10000716 	blt	r2,zero,4355b0 <close+0x38>
  435594:	e13fff17 	ldw	r4,-4(fp)
  435598:	01400304 	movi	r5,12
  43559c:	04355000 	call	435500 <__mulsi3>
  4355a0:	00c01134 	movhi	r3,68
  4355a4:	18d27704 	addi	r3,r3,18908
  4355a8:	10c5883a 	add	r2,r2,r3
  4355ac:	00000106 	br	4355b4 <close+0x3c>
  4355b0:	0005883a 	mov	r2,zero
  4355b4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  4355b8:	e0bffd17 	ldw	r2,-12(fp)
  4355bc:	10001826 	beq	r2,zero,435620 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  4355c0:	e0bffd17 	ldw	r2,-12(fp)
  4355c4:	10800017 	ldw	r2,0(r2)
  4355c8:	10800417 	ldw	r2,16(r2)
  4355cc:	10000626 	beq	r2,zero,4355e8 <close+0x70>
  4355d0:	e0bffd17 	ldw	r2,-12(fp)
  4355d4:	10800017 	ldw	r2,0(r2)
  4355d8:	10800417 	ldw	r2,16(r2)
  4355dc:	e13ffd17 	ldw	r4,-12(fp)
  4355e0:	103ee83a 	callr	r2
  4355e4:	00000106 	br	4355ec <close+0x74>
  4355e8:	0005883a 	mov	r2,zero
  4355ec:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  4355f0:	e13fff17 	ldw	r4,-4(fp)
  4355f4:	0435fd00 	call	435fd0 <alt_release_fd>
    if (rval < 0)
  4355f8:	e0bffe17 	ldw	r2,-8(fp)
  4355fc:	1000060e 	bge	r2,zero,435618 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  435600:	04355280 	call	435528 <alt_get_errno>
  435604:	e0fffe17 	ldw	r3,-8(fp)
  435608:	00c7c83a 	sub	r3,zero,r3
  43560c:	10c00015 	stw	r3,0(r2)
      return -1;
  435610:	00bfffc4 	movi	r2,-1
  435614:	00000606 	br	435630 <close+0xb8>
    }
    return 0;
  435618:	0005883a 	mov	r2,zero
  43561c:	00000406 	br	435630 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  435620:	04355280 	call	435528 <alt_get_errno>
  435624:	00c01444 	movi	r3,81
  435628:	10c00015 	stw	r3,0(r2)
    return -1;
  43562c:	00bfffc4 	movi	r2,-1
  }
}
  435630:	e037883a 	mov	sp,fp
  435634:	dfc00117 	ldw	ra,4(sp)
  435638:	df000017 	ldw	fp,0(sp)
  43563c:	dec00204 	addi	sp,sp,8
  435640:	f800283a 	ret

00435644 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  435644:	defffc04 	addi	sp,sp,-16
  435648:	df000315 	stw	fp,12(sp)
  43564c:	df000304 	addi	fp,sp,12
  435650:	e13ffd15 	stw	r4,-12(fp)
  435654:	e17ffe15 	stw	r5,-8(fp)
  435658:	e1bfff15 	stw	r6,-4(fp)
  return len;
  43565c:	e0bfff17 	ldw	r2,-4(fp)
}
  435660:	e037883a 	mov	sp,fp
  435664:	df000017 	ldw	fp,0(sp)
  435668:	dec00104 	addi	sp,sp,4
  43566c:	f800283a 	ret

00435670 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  435670:	defffe04 	addi	sp,sp,-8
  435674:	dfc00115 	stw	ra,4(sp)
  435678:	df000015 	stw	fp,0(sp)
  43567c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  435680:	00801134 	movhi	r2,68
  435684:	10970604 	addi	r2,r2,23576
  435688:	10800017 	ldw	r2,0(r2)
  43568c:	10000526 	beq	r2,zero,4356a4 <alt_get_errno+0x34>
  435690:	00801134 	movhi	r2,68
  435694:	10970604 	addi	r2,r2,23576
  435698:	10800017 	ldw	r2,0(r2)
  43569c:	103ee83a 	callr	r2
  4356a0:	00000206 	br	4356ac <alt_get_errno+0x3c>
  4356a4:	00801134 	movhi	r2,68
  4356a8:	109df504 	addi	r2,r2,30676
}
  4356ac:	e037883a 	mov	sp,fp
  4356b0:	dfc00117 	ldw	ra,4(sp)
  4356b4:	df000017 	ldw	fp,0(sp)
  4356b8:	dec00204 	addi	sp,sp,8
  4356bc:	f800283a 	ret

004356c0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  4356c0:	defffb04 	addi	sp,sp,-20
  4356c4:	dfc00415 	stw	ra,16(sp)
  4356c8:	df000315 	stw	fp,12(sp)
  4356cc:	df000304 	addi	fp,sp,12
  4356d0:	e13ffe15 	stw	r4,-8(fp)
  4356d4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  4356d8:	e0bffe17 	ldw	r2,-8(fp)
  4356dc:	10000716 	blt	r2,zero,4356fc <fstat+0x3c>
  4356e0:	e13ffe17 	ldw	r4,-8(fp)
  4356e4:	01400304 	movi	r5,12
  4356e8:	04355000 	call	435500 <__mulsi3>
  4356ec:	00c01134 	movhi	r3,68
  4356f0:	18d27704 	addi	r3,r3,18908
  4356f4:	10c5883a 	add	r2,r2,r3
  4356f8:	00000106 	br	435700 <fstat+0x40>
  4356fc:	0005883a 	mov	r2,zero
  435700:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  435704:	e0bffd17 	ldw	r2,-12(fp)
  435708:	10001026 	beq	r2,zero,43574c <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  43570c:	e0bffd17 	ldw	r2,-12(fp)
  435710:	10800017 	ldw	r2,0(r2)
  435714:	10800817 	ldw	r2,32(r2)
  435718:	10000726 	beq	r2,zero,435738 <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
  43571c:	e0bffd17 	ldw	r2,-12(fp)
  435720:	10800017 	ldw	r2,0(r2)
  435724:	10800817 	ldw	r2,32(r2)
  435728:	e13ffd17 	ldw	r4,-12(fp)
  43572c:	e17fff17 	ldw	r5,-4(fp)
  435730:	103ee83a 	callr	r2
  435734:	00000906 	br	43575c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  435738:	e0bfff17 	ldw	r2,-4(fp)
  43573c:	00c80004 	movi	r3,8192
  435740:	10c00115 	stw	r3,4(r2)
      return 0;
  435744:	0005883a 	mov	r2,zero
  435748:	00000406 	br	43575c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  43574c:	04356700 	call	435670 <alt_get_errno>
  435750:	00c01444 	movi	r3,81
  435754:	10c00015 	stw	r3,0(r2)
    return -1;
  435758:	00bfffc4 	movi	r2,-1
  }
}
  43575c:	e037883a 	mov	sp,fp
  435760:	dfc00117 	ldw	ra,4(sp)
  435764:	df000017 	ldw	fp,0(sp)
  435768:	dec00204 	addi	sp,sp,8
  43576c:	f800283a 	ret

00435770 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  435770:	defff904 	addi	sp,sp,-28
  435774:	dfc00615 	stw	ra,24(sp)
  435778:	df000515 	stw	fp,20(sp)
  43577c:	df000504 	addi	fp,sp,20
  435780:	e13ffc15 	stw	r4,-16(fp)
  435784:	e17ffd15 	stw	r5,-12(fp)
  435788:	e1bffe15 	stw	r6,-8(fp)
  43578c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  435790:	e0800217 	ldw	r2,8(fp)
  435794:	d8800015 	stw	r2,0(sp)
  435798:	e13ffc17 	ldw	r4,-16(fp)
  43579c:	e17ffd17 	ldw	r5,-12(fp)
  4357a0:	e1bffe17 	ldw	r6,-8(fp)
  4357a4:	e1ffff17 	ldw	r7,-4(fp)
  4357a8:	04359a00 	call	4359a0 <alt_iic_isr_register>
}  
  4357ac:	e037883a 	mov	sp,fp
  4357b0:	dfc00117 	ldw	ra,4(sp)
  4357b4:	df000017 	ldw	fp,0(sp)
  4357b8:	dec00204 	addi	sp,sp,8
  4357bc:	f800283a 	ret

004357c0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  4357c0:	defff804 	addi	sp,sp,-32
  4357c4:	df000715 	stw	fp,28(sp)
  4357c8:	df000704 	addi	fp,sp,28
  4357cc:	e13ffe15 	stw	r4,-8(fp)
  4357d0:	e17fff15 	stw	r5,-4(fp)
  4357d4:	e0bfff17 	ldw	r2,-4(fp)
  4357d8:	e0bff915 	stw	r2,-28(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4357dc:	0005303a 	rdctl	r2,status
  4357e0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4357e4:	e0fffa17 	ldw	r3,-24(fp)
  4357e8:	00bfff84 	movi	r2,-2
  4357ec:	1884703a 	and	r2,r3,r2
  4357f0:	1001703a 	wrctl	status,r2
  
  return context;
  4357f4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  4357f8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active |= (1 << id);
  4357fc:	e0bff917 	ldw	r2,-28(fp)
  435800:	00c00044 	movi	r3,1
  435804:	1884983a 	sll	r2,r3,r2
  435808:	1007883a 	mov	r3,r2
  43580c:	00801134 	movhi	r2,68
  435810:	109df704 	addi	r2,r2,30684
  435814:	10800017 	ldw	r2,0(r2)
  435818:	1886b03a 	or	r3,r3,r2
  43581c:	00801134 	movhi	r2,68
  435820:	109df704 	addi	r2,r2,30684
  435824:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  435828:	00801134 	movhi	r2,68
  43582c:	109df704 	addi	r2,r2,30684
  435830:	10800017 	ldw	r2,0(r2)
  435834:	100170fa 	wrctl	ienable,r2
  435838:	e0bffb17 	ldw	r2,-20(fp)
  43583c:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  435840:	0005303a 	rdctl	r2,status
  435844:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  435848:	e0fffd17 	ldw	r3,-12(fp)
  43584c:	00bfff84 	movi	r2,-2
  435850:	1884703a 	and	r2,r3,r2
  435854:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  435858:	e0bffc17 	ldw	r2,-16(fp)
  43585c:	1080004c 	andi	r2,r2,1
  435860:	e0fffd17 	ldw	r3,-12(fp)
  435864:	1884b03a 	or	r2,r3,r2
  435868:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43586c:	e0bffd17 	ldw	r2,-12(fp)
  435870:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  435874:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  435878:	e037883a 	mov	sp,fp
  43587c:	df000017 	ldw	fp,0(sp)
  435880:	dec00104 	addi	sp,sp,4
  435884:	f800283a 	ret

00435888 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  435888:	defff804 	addi	sp,sp,-32
  43588c:	df000715 	stw	fp,28(sp)
  435890:	df000704 	addi	fp,sp,28
  435894:	e13ffe15 	stw	r4,-8(fp)
  435898:	e17fff15 	stw	r5,-4(fp)
  43589c:	e0bfff17 	ldw	r2,-4(fp)
  4358a0:	e0bff915 	stw	r2,-28(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4358a4:	0005303a 	rdctl	r2,status
  4358a8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4358ac:	e0fffa17 	ldw	r3,-24(fp)
  4358b0:	00bfff84 	movi	r2,-2
  4358b4:	1884703a 	and	r2,r3,r2
  4358b8:	1001703a 	wrctl	status,r2
  
  return context;
  4358bc:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  4358c0:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  4358c4:	e0bff917 	ldw	r2,-28(fp)
  4358c8:	00c00044 	movi	r3,1
  4358cc:	1884983a 	sll	r2,r3,r2
  4358d0:	0084303a 	nor	r2,zero,r2
  4358d4:	1007883a 	mov	r3,r2
  4358d8:	00801134 	movhi	r2,68
  4358dc:	109df704 	addi	r2,r2,30684
  4358e0:	10800017 	ldw	r2,0(r2)
  4358e4:	1886703a 	and	r3,r3,r2
  4358e8:	00801134 	movhi	r2,68
  4358ec:	109df704 	addi	r2,r2,30684
  4358f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  4358f4:	00801134 	movhi	r2,68
  4358f8:	109df704 	addi	r2,r2,30684
  4358fc:	10800017 	ldw	r2,0(r2)
  435900:	100170fa 	wrctl	ienable,r2
  435904:	e0bffb17 	ldw	r2,-20(fp)
  435908:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43590c:	0005303a 	rdctl	r2,status
  435910:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  435914:	e0fffd17 	ldw	r3,-12(fp)
  435918:	00bfff84 	movi	r2,-2
  43591c:	1884703a 	and	r2,r3,r2
  435920:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  435924:	e0bffc17 	ldw	r2,-16(fp)
  435928:	1080004c 	andi	r2,r2,1
  43592c:	e0fffd17 	ldw	r3,-12(fp)
  435930:	1884b03a 	or	r2,r3,r2
  435934:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  435938:	e0bffd17 	ldw	r2,-12(fp)
  43593c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  435940:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  435944:	e037883a 	mov	sp,fp
  435948:	df000017 	ldw	fp,0(sp)
  43594c:	dec00104 	addi	sp,sp,4
  435950:	f800283a 	ret

00435954 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  435954:	defffc04 	addi	sp,sp,-16
  435958:	df000315 	stw	fp,12(sp)
  43595c:	df000304 	addi	fp,sp,12
  435960:	e13ffe15 	stw	r4,-8(fp)
  435964:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  435968:	000530fa 	rdctl	r2,ienable
  43596c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  435970:	e0bfff17 	ldw	r2,-4(fp)
  435974:	00c00044 	movi	r3,1
  435978:	1884983a 	sll	r2,r3,r2
  43597c:	1007883a 	mov	r3,r2
  435980:	e0bffd17 	ldw	r2,-12(fp)
  435984:	1884703a 	and	r2,r3,r2
  435988:	1004c03a 	cmpne	r2,r2,zero
  43598c:	10803fcc 	andi	r2,r2,255
}
  435990:	e037883a 	mov	sp,fp
  435994:	df000017 	ldw	fp,0(sp)
  435998:	dec00104 	addi	sp,sp,4
  43599c:	f800283a 	ret

004359a0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  4359a0:	defff404 	addi	sp,sp,-48
  4359a4:	dfc00b15 	stw	ra,44(sp)
  4359a8:	df000a15 	stw	fp,40(sp)
  4359ac:	df000a04 	addi	fp,sp,40
  4359b0:	e13ffc15 	stw	r4,-16(fp)
  4359b4:	e17ffd15 	stw	r5,-12(fp)
  4359b8:	e1bffe15 	stw	r6,-8(fp)
  4359bc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  4359c0:	00bffa84 	movi	r2,-22
  4359c4:	e0bff615 	stw	r2,-40(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  4359c8:	e0bffd17 	ldw	r2,-12(fp)
  4359cc:	e0bff715 	stw	r2,-36(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  4359d0:	e0bff717 	ldw	r2,-36(fp)
  4359d4:	10800808 	cmpgei	r2,r2,32
  4359d8:	1000321e 	bne	r2,zero,435aa4 <alt_iic_isr_register+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4359dc:	0005303a 	rdctl	r2,status
  4359e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4359e4:	e0fff917 	ldw	r3,-28(fp)
  4359e8:	00bfff84 	movi	r2,-2
  4359ec:	1884703a 	and	r2,r3,r2
  4359f0:	1001703a 	wrctl	status,r2
  
  return context;
  4359f4:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  4359f8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  4359fc:	00c01134 	movhi	r3,68
  435a00:	18de2104 	addi	r3,r3,30852
  435a04:	e0bff717 	ldw	r2,-36(fp)
  435a08:	100490fa 	slli	r2,r2,3
  435a0c:	1885883a 	add	r2,r3,r2
  435a10:	e0fffe17 	ldw	r3,-8(fp)
  435a14:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  435a18:	00c01134 	movhi	r3,68
  435a1c:	18de2104 	addi	r3,r3,30852
  435a20:	e0bff717 	ldw	r2,-36(fp)
  435a24:	100490fa 	slli	r2,r2,3
  435a28:	1885883a 	add	r2,r3,r2
  435a2c:	10800104 	addi	r2,r2,4
  435a30:	e0ffff17 	ldw	r3,-4(fp)
  435a34:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  435a38:	e0bffe17 	ldw	r2,-8(fp)
  435a3c:	10000526 	beq	r2,zero,435a54 <alt_iic_isr_register+0xb4>
  435a40:	e0bff717 	ldw	r2,-36(fp)
  435a44:	e13ffc17 	ldw	r4,-16(fp)
  435a48:	100b883a 	mov	r5,r2
  435a4c:	04357c00 	call	4357c0 <alt_ic_irq_enable>
  435a50:	00000406 	br	435a64 <alt_iic_isr_register+0xc4>
  435a54:	e0bff717 	ldw	r2,-36(fp)
  435a58:	e13ffc17 	ldw	r4,-16(fp)
  435a5c:	100b883a 	mov	r5,r2
  435a60:	04358880 	call	435888 <alt_ic_irq_disable>
  435a64:	e0bff615 	stw	r2,-40(fp)
  435a68:	e0bff817 	ldw	r2,-32(fp)
  435a6c:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  435a70:	0005303a 	rdctl	r2,status
  435a74:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  435a78:	e0fffb17 	ldw	r3,-20(fp)
  435a7c:	00bfff84 	movi	r2,-2
  435a80:	1884703a 	and	r2,r3,r2
  435a84:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  435a88:	e0bffa17 	ldw	r2,-24(fp)
  435a8c:	1080004c 	andi	r2,r2,1
  435a90:	e0fffb17 	ldw	r3,-20(fp)
  435a94:	1884b03a 	or	r2,r3,r2
  435a98:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  435a9c:	e0bffb17 	ldw	r2,-20(fp)
  435aa0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  435aa4:	e0bff617 	ldw	r2,-40(fp)
}
  435aa8:	e037883a 	mov	sp,fp
  435aac:	dfc00117 	ldw	ra,4(sp)
  435ab0:	df000017 	ldw	fp,0(sp)
  435ab4:	dec00204 	addi	sp,sp,8
  435ab8:	f800283a 	ret

00435abc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  435abc:	defffe04 	addi	sp,sp,-8
  435ac0:	dfc00115 	stw	ra,4(sp)
  435ac4:	df000015 	stw	fp,0(sp)
  435ac8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  435acc:	00801134 	movhi	r2,68
  435ad0:	10970604 	addi	r2,r2,23576
  435ad4:	10800017 	ldw	r2,0(r2)
  435ad8:	10000526 	beq	r2,zero,435af0 <alt_get_errno+0x34>
  435adc:	00801134 	movhi	r2,68
  435ae0:	10970604 	addi	r2,r2,23576
  435ae4:	10800017 	ldw	r2,0(r2)
  435ae8:	103ee83a 	callr	r2
  435aec:	00000206 	br	435af8 <alt_get_errno+0x3c>
  435af0:	00801134 	movhi	r2,68
  435af4:	109df504 	addi	r2,r2,30676
}
  435af8:	e037883a 	mov	sp,fp
  435afc:	dfc00117 	ldw	ra,4(sp)
  435b00:	df000017 	ldw	fp,0(sp)
  435b04:	dec00204 	addi	sp,sp,8
  435b08:	f800283a 	ret

00435b0c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  435b0c:	deffed04 	addi	sp,sp,-76
  435b10:	dfc01215 	stw	ra,72(sp)
  435b14:	df001115 	stw	fp,68(sp)
  435b18:	df001104 	addi	fp,sp,68
  435b1c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  435b20:	e0bfff17 	ldw	r2,-4(fp)
  435b24:	10000716 	blt	r2,zero,435b44 <isatty+0x38>
  435b28:	e13fff17 	ldw	r4,-4(fp)
  435b2c:	01400304 	movi	r5,12
  435b30:	04355000 	call	435500 <__mulsi3>
  435b34:	00c01134 	movhi	r3,68
  435b38:	18d27704 	addi	r3,r3,18908
  435b3c:	10c5883a 	add	r2,r2,r3
  435b40:	00000106 	br	435b48 <isatty+0x3c>
  435b44:	0005883a 	mov	r2,zero
  435b48:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  435b4c:	e0bfef17 	ldw	r2,-68(fp)
  435b50:	10000e26 	beq	r2,zero,435b8c <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  435b54:	e0bfef17 	ldw	r2,-68(fp)
  435b58:	10800017 	ldw	r2,0(r2)
  435b5c:	10800817 	ldw	r2,32(r2)
  435b60:	1000021e 	bne	r2,zero,435b6c <isatty+0x60>
    {
      return 1;
  435b64:	00800044 	movi	r2,1
  435b68:	00000c06 	br	435b9c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  435b6c:	e0bff004 	addi	r2,fp,-64
  435b70:	e13fff17 	ldw	r4,-4(fp)
  435b74:	100b883a 	mov	r5,r2
  435b78:	04356c00 	call	4356c0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  435b7c:	e0bff117 	ldw	r2,-60(fp)
  435b80:	10880020 	cmpeqi	r2,r2,8192
  435b84:	10803fcc 	andi	r2,r2,255
  435b88:	00000406 	br	435b9c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  435b8c:	0435abc0 	call	435abc <alt_get_errno>
  435b90:	00c01444 	movi	r3,81
  435b94:	10c00015 	stw	r3,0(r2)
    return 0;
  435b98:	0005883a 	mov	r2,zero
  }
}
  435b9c:	e037883a 	mov	sp,fp
  435ba0:	dfc00117 	ldw	ra,4(sp)
  435ba4:	df000017 	ldw	fp,0(sp)
  435ba8:	dec00204 	addi	sp,sp,8
  435bac:	f800283a 	ret

00435bb0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  435bb0:	defffc04 	addi	sp,sp,-16
  435bb4:	df000315 	stw	fp,12(sp)
  435bb8:	df000304 	addi	fp,sp,12
  435bbc:	e13ffd15 	stw	r4,-12(fp)
  435bc0:	e17ffe15 	stw	r5,-8(fp)
  435bc4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  435bc8:	e0fffe17 	ldw	r3,-8(fp)
  435bcc:	e0bffd17 	ldw	r2,-12(fp)
  435bd0:	18800e26 	beq	r3,r2,435c0c <alt_load_section+0x5c>
  {
    while( to != end )
  435bd4:	00000a06 	br	435c00 <alt_load_section+0x50>
    {
      *to++ = *from++;
  435bd8:	e0bffd17 	ldw	r2,-12(fp)
  435bdc:	10c00017 	ldw	r3,0(r2)
  435be0:	e0bffe17 	ldw	r2,-8(fp)
  435be4:	10c00015 	stw	r3,0(r2)
  435be8:	e0bffe17 	ldw	r2,-8(fp)
  435bec:	10800104 	addi	r2,r2,4
  435bf0:	e0bffe15 	stw	r2,-8(fp)
  435bf4:	e0bffd17 	ldw	r2,-12(fp)
  435bf8:	10800104 	addi	r2,r2,4
  435bfc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  435c00:	e0fffe17 	ldw	r3,-8(fp)
  435c04:	e0bfff17 	ldw	r2,-4(fp)
  435c08:	18bff31e 	bne	r3,r2,435bd8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  435c0c:	e037883a 	mov	sp,fp
  435c10:	df000017 	ldw	fp,0(sp)
  435c14:	dec00104 	addi	sp,sp,4
  435c18:	f800283a 	ret

00435c1c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  435c1c:	defffe04 	addi	sp,sp,-8
  435c20:	dfc00115 	stw	ra,4(sp)
  435c24:	df000015 	stw	fp,0(sp)
  435c28:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  435c2c:	01001134 	movhi	r4,68
  435c30:	21172c04 	addi	r4,r4,23728
  435c34:	01401134 	movhi	r5,68
  435c38:	29506b04 	addi	r5,r5,16812
  435c3c:	01801134 	movhi	r6,68
  435c40:	31972c04 	addi	r6,r6,23728
  435c44:	0435bb00 	call	435bb0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  435c48:	010010f4 	movhi	r4,67
  435c4c:	21080804 	addi	r4,r4,8224
  435c50:	014010f4 	movhi	r5,67
  435c54:	29480804 	addi	r5,r5,8224
  435c58:	018010f4 	movhi	r6,67
  435c5c:	31887804 	addi	r6,r6,8672
  435c60:	0435bb00 	call	435bb0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  435c64:	01001134 	movhi	r4,68
  435c68:	210fb504 	addi	r4,r4,16084
  435c6c:	01401134 	movhi	r5,68
  435c70:	294fb504 	addi	r5,r5,16084
  435c74:	01801134 	movhi	r6,68
  435c78:	31906b04 	addi	r6,r6,16812
  435c7c:	0435bb00 	call	435bb0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  435c80:	04418380 	call	441838 <alt_dcache_flush_all>
  alt_icache_flush_all();
  435c84:	0441a8c0 	call	441a8c <alt_icache_flush_all>
}
  435c88:	e037883a 	mov	sp,fp
  435c8c:	dfc00117 	ldw	ra,4(sp)
  435c90:	df000017 	ldw	fp,0(sp)
  435c94:	dec00204 	addi	sp,sp,8
  435c98:	f800283a 	ret

00435c9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  435c9c:	defffe04 	addi	sp,sp,-8
  435ca0:	dfc00115 	stw	ra,4(sp)
  435ca4:	df000015 	stw	fp,0(sp)
  435ca8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  435cac:	00801134 	movhi	r2,68
  435cb0:	10970604 	addi	r2,r2,23576
  435cb4:	10800017 	ldw	r2,0(r2)
  435cb8:	10000526 	beq	r2,zero,435cd0 <alt_get_errno+0x34>
  435cbc:	00801134 	movhi	r2,68
  435cc0:	10970604 	addi	r2,r2,23576
  435cc4:	10800017 	ldw	r2,0(r2)
  435cc8:	103ee83a 	callr	r2
  435ccc:	00000206 	br	435cd8 <alt_get_errno+0x3c>
  435cd0:	00801134 	movhi	r2,68
  435cd4:	109df504 	addi	r2,r2,30676
}
  435cd8:	e037883a 	mov	sp,fp
  435cdc:	dfc00117 	ldw	ra,4(sp)
  435ce0:	df000017 	ldw	fp,0(sp)
  435ce4:	dec00204 	addi	sp,sp,8
  435ce8:	f800283a 	ret

00435cec <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  435cec:	defff904 	addi	sp,sp,-28
  435cf0:	dfc00615 	stw	ra,24(sp)
  435cf4:	df000515 	stw	fp,20(sp)
  435cf8:	df000504 	addi	fp,sp,20
  435cfc:	e13ffd15 	stw	r4,-12(fp)
  435d00:	e17ffe15 	stw	r5,-8(fp)
  435d04:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  435d08:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  435d0c:	e0bffd17 	ldw	r2,-12(fp)
  435d10:	10000716 	blt	r2,zero,435d30 <lseek+0x44>
  435d14:	e13ffd17 	ldw	r4,-12(fp)
  435d18:	01400304 	movi	r5,12
  435d1c:	04355000 	call	435500 <__mulsi3>
  435d20:	00c01134 	movhi	r3,68
  435d24:	18d27704 	addi	r3,r3,18908
  435d28:	10c5883a 	add	r2,r2,r3
  435d2c:	00000106 	br	435d34 <lseek+0x48>
  435d30:	0005883a 	mov	r2,zero
  435d34:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  435d38:	e0bffc17 	ldw	r2,-16(fp)
  435d3c:	10001026 	beq	r2,zero,435d80 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  435d40:	e0bffc17 	ldw	r2,-16(fp)
  435d44:	10800017 	ldw	r2,0(r2)
  435d48:	10800717 	ldw	r2,28(r2)
  435d4c:	10000926 	beq	r2,zero,435d74 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  435d50:	e0bffc17 	ldw	r2,-16(fp)
  435d54:	10800017 	ldw	r2,0(r2)
  435d58:	10800717 	ldw	r2,28(r2)
  435d5c:	e13ffc17 	ldw	r4,-16(fp)
  435d60:	e17ffe17 	ldw	r5,-8(fp)
  435d64:	e1bfff17 	ldw	r6,-4(fp)
  435d68:	103ee83a 	callr	r2
  435d6c:	e0bffb15 	stw	r2,-20(fp)
  435d70:	00000506 	br	435d88 <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  435d74:	00bfde84 	movi	r2,-134
  435d78:	e0bffb15 	stw	r2,-20(fp)
  435d7c:	00000206 	br	435d88 <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
  435d80:	00bfebc4 	movi	r2,-81
  435d84:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  435d88:	e0bffb17 	ldw	r2,-20(fp)
  435d8c:	1000060e 	bge	r2,zero,435da8 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  435d90:	0435c9c0 	call	435c9c <alt_get_errno>
  435d94:	e0fffb17 	ldw	r3,-20(fp)
  435d98:	00c7c83a 	sub	r3,zero,r3
  435d9c:	10c00015 	stw	r3,0(r2)
    rc = -1;
  435da0:	00bfffc4 	movi	r2,-1
  435da4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  435da8:	e0bffb17 	ldw	r2,-20(fp)
}
  435dac:	e037883a 	mov	sp,fp
  435db0:	dfc00117 	ldw	ra,4(sp)
  435db4:	df000017 	ldw	fp,0(sp)
  435db8:	dec00204 	addi	sp,sp,8
  435dbc:	f800283a 	ret

00435dc0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  435dc0:	defffb04 	addi	sp,sp,-20
  435dc4:	dfc00415 	stw	ra,16(sp)
  435dc8:	df000315 	stw	fp,12(sp)
  435dcc:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  435dd0:	0009883a 	mov	r4,zero
  435dd4:	044017c0 	call	44017c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  435dd8:	04370740 	call	437074 <OSInit>
  435ddc:	01000044 	movi	r4,1
  435de0:	043cb540 	call	43cb54 <OSSemCreate>
  435de4:	00c01134 	movhi	r3,68
  435de8:	18ddfc04 	addi	r3,r3,30704
  435dec:	18800015 	stw	r2,0(r3)
  435df0:	01000044 	movi	r4,1
  435df4:	043cb540 	call	43cb54 <OSSemCreate>
  435df8:	00c01134 	movhi	r3,68
  435dfc:	18ddfe04 	addi	r3,r3,30712
  435e00:	18800015 	stw	r2,0(r3)
  435e04:	00801134 	movhi	r2,68
  435e08:	109df604 	addi	r2,r2,30680
  435e0c:	e0bffe15 	stw	r2,-8(fp)
  435e10:	00800044 	movi	r2,1
  435e14:	e0bfff0d 	sth	r2,-4(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  435e18:	e0bfff0b 	ldhu	r2,-4(fp)
  435e1c:	1009883a 	mov	r4,r2
  435e20:	043cb540 	call	43cb54 <OSSemCreate>
  435e24:	e0fffe17 	ldw	r3,-8(fp)
  435e28:	18800015 	stw	r2,0(r3)
  return *sem ? 0 : -1;
  435e2c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  435e30:	04401b00 	call	4401b0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  435e34:	01001134 	movhi	r4,68
  435e38:	210fcb04 	addi	r4,r4,16172
  435e3c:	01401134 	movhi	r5,68
  435e40:	294fcb04 	addi	r5,r5,16172
  435e44:	01801134 	movhi	r6,68
  435e48:	318fcb04 	addi	r6,r6,16172
  435e4c:	0441b9c0 	call	441b9c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  435e50:	04419440 	call	441944 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  435e54:	01001134 	movhi	r4,68
  435e58:	21066804 	addi	r4,r4,6560
  435e5c:	04428140 	call	442814 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  435e60:	d1270117 	ldw	r4,-25596(gp)
  435e64:	d0e70217 	ldw	r3,-25592(gp)
  435e68:	d0a70317 	ldw	r2,-25588(gp)
  435e6c:	180b883a 	mov	r5,r3
  435e70:	100d883a 	mov	r6,r2
  435e74:	043240c0 	call	43240c <main>
  435e78:	e0bffd15 	stw	r2,-12(fp)
  close(STDOUT_FILENO);
  435e7c:	01000044 	movi	r4,1
  435e80:	04355780 	call	435578 <close>
  exit (result);
  435e84:	e13ffd17 	ldw	r4,-12(fp)
  435e88:	04428280 	call	442828 <exit>

00435e8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  435e8c:	defffe04 	addi	sp,sp,-8
  435e90:	dfc00115 	stw	ra,4(sp)
  435e94:	df000015 	stw	fp,0(sp)
  435e98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  435e9c:	00801134 	movhi	r2,68
  435ea0:	10970604 	addi	r2,r2,23576
  435ea4:	10800017 	ldw	r2,0(r2)
  435ea8:	10000526 	beq	r2,zero,435ec0 <alt_get_errno+0x34>
  435eac:	00801134 	movhi	r2,68
  435eb0:	10970604 	addi	r2,r2,23576
  435eb4:	10800017 	ldw	r2,0(r2)
  435eb8:	103ee83a 	callr	r2
  435ebc:	00000206 	br	435ec8 <alt_get_errno+0x3c>
  435ec0:	00801134 	movhi	r2,68
  435ec4:	109df504 	addi	r2,r2,30676
}
  435ec8:	e037883a 	mov	sp,fp
  435ecc:	dfc00117 	ldw	ra,4(sp)
  435ed0:	df000017 	ldw	fp,0(sp)
  435ed4:	dec00204 	addi	sp,sp,8
  435ed8:	f800283a 	ret

00435edc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  435edc:	defff904 	addi	sp,sp,-28
  435ee0:	dfc00615 	stw	ra,24(sp)
  435ee4:	df000515 	stw	fp,20(sp)
  435ee8:	df000504 	addi	fp,sp,20
  435eec:	e13ffd15 	stw	r4,-12(fp)
  435ef0:	e17ffe15 	stw	r5,-8(fp)
  435ef4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  435ef8:	e0bffd17 	ldw	r2,-12(fp)
  435efc:	10000716 	blt	r2,zero,435f1c <read+0x40>
  435f00:	e13ffd17 	ldw	r4,-12(fp)
  435f04:	01400304 	movi	r5,12
  435f08:	04355000 	call	435500 <__mulsi3>
  435f0c:	00c01134 	movhi	r3,68
  435f10:	18d27704 	addi	r3,r3,18908
  435f14:	10c5883a 	add	r2,r2,r3
  435f18:	00000106 	br	435f20 <read+0x44>
  435f1c:	0005883a 	mov	r2,zero
  435f20:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  435f24:	e0bffb17 	ldw	r2,-20(fp)
  435f28:	10002026 	beq	r2,zero,435fac <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  435f2c:	e0bffb17 	ldw	r2,-20(fp)
  435f30:	10800217 	ldw	r2,8(r2)
  435f34:	108000cc 	andi	r2,r2,3
  435f38:	10800060 	cmpeqi	r2,r2,1
  435f3c:	1000171e 	bne	r2,zero,435f9c <read+0xc0>
        (fd->dev->read))
  435f40:	e0bffb17 	ldw	r2,-20(fp)
  435f44:	10800017 	ldw	r2,0(r2)
  435f48:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  435f4c:	10001326 	beq	r2,zero,435f9c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  435f50:	e0bffb17 	ldw	r2,-20(fp)
  435f54:	10800017 	ldw	r2,0(r2)
  435f58:	10c00517 	ldw	r3,20(r2)
  435f5c:	e0bfff17 	ldw	r2,-4(fp)
  435f60:	e13ffb17 	ldw	r4,-20(fp)
  435f64:	e17ffe17 	ldw	r5,-8(fp)
  435f68:	100d883a 	mov	r6,r2
  435f6c:	183ee83a 	callr	r3
  435f70:	e0bffc15 	stw	r2,-16(fp)
  435f74:	e0bffc17 	ldw	r2,-16(fp)
  435f78:	1000060e 	bge	r2,zero,435f94 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  435f7c:	0435e8c0 	call	435e8c <alt_get_errno>
  435f80:	e0fffc17 	ldw	r3,-16(fp)
  435f84:	00c7c83a 	sub	r3,zero,r3
  435f88:	10c00015 	stw	r3,0(r2)
          return -1;
  435f8c:	00bfffc4 	movi	r2,-1
  435f90:	00000a06 	br	435fbc <read+0xe0>
        }
        return rval;
  435f94:	e0bffc17 	ldw	r2,-16(fp)
  435f98:	00000806 	br	435fbc <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  435f9c:	0435e8c0 	call	435e8c <alt_get_errno>
  435fa0:	00c00344 	movi	r3,13
  435fa4:	10c00015 	stw	r3,0(r2)
  435fa8:	00000306 	br	435fb8 <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  435fac:	0435e8c0 	call	435e8c <alt_get_errno>
  435fb0:	00c01444 	movi	r3,81
  435fb4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  435fb8:	00bfffc4 	movi	r2,-1
}
  435fbc:	e037883a 	mov	sp,fp
  435fc0:	dfc00117 	ldw	ra,4(sp)
  435fc4:	df000017 	ldw	fp,0(sp)
  435fc8:	dec00204 	addi	sp,sp,8
  435fcc:	f800283a 	ret

00435fd0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  435fd0:	defffc04 	addi	sp,sp,-16
  435fd4:	dfc00315 	stw	ra,12(sp)
  435fd8:	df000215 	stw	fp,8(sp)
  435fdc:	dc000115 	stw	r16,4(sp)
  435fe0:	df000104 	addi	fp,sp,4
  435fe4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  435fe8:	e0bfff17 	ldw	r2,-4(fp)
  435fec:	108000d0 	cmplti	r2,r2,3
  435ff0:	1000111e 	bne	r2,zero,436038 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  435ff4:	04001134 	movhi	r16,68
  435ff8:	84127704 	addi	r16,r16,18908
  435ffc:	e0bfff17 	ldw	r2,-4(fp)
  436000:	1009883a 	mov	r4,r2
  436004:	01400304 	movi	r5,12
  436008:	04355000 	call	435500 <__mulsi3>
  43600c:	8085883a 	add	r2,r16,r2
  436010:	10800204 	addi	r2,r2,8
  436014:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  436018:	04001134 	movhi	r16,68
  43601c:	84127704 	addi	r16,r16,18908
  436020:	e0bfff17 	ldw	r2,-4(fp)
  436024:	1009883a 	mov	r4,r2
  436028:	01400304 	movi	r5,12
  43602c:	04355000 	call	435500 <__mulsi3>
  436030:	8085883a 	add	r2,r16,r2
  436034:	10000015 	stw	zero,0(r2)
  }
}
  436038:	e037883a 	mov	sp,fp
  43603c:	dfc00217 	ldw	ra,8(sp)
  436040:	df000117 	ldw	fp,4(sp)
  436044:	dc000017 	ldw	r16,0(sp)
  436048:	dec00304 	addi	sp,sp,12
  43604c:	f800283a 	ret

00436050 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  436050:	defff704 	addi	sp,sp,-36
  436054:	df000815 	stw	fp,32(sp)
  436058:	df000804 	addi	fp,sp,32
  43605c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  436060:	0005303a 	rdctl	r2,status
  436064:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  436068:	e0fffa17 	ldw	r3,-24(fp)
  43606c:	00bfff84 	movi	r2,-2
  436070:	1884703a 	and	r2,r3,r2
  436074:	1001703a 	wrctl	status,r2
  
  return context;
  436078:	e0bffa17 	ldw	r2,-24(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  43607c:	e0bff815 	stw	r2,-32(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  436080:	d0a01117 	ldw	r2,-32700(gp)
  436084:	10c000c4 	addi	r3,r2,3
  436088:	00bfff04 	movi	r2,-4
  43608c:	1884703a 	and	r2,r3,r2
  436090:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  436094:	d0e01117 	ldw	r3,-32700(gp)
  436098:	e0bfff17 	ldw	r2,-4(fp)
  43609c:	1885883a 	add	r2,r3,r2
  4360a0:	00c011b4 	movhi	r3,70
  4360a4:	18d00004 	addi	r3,r3,16384
  4360a8:	1880112e 	bgeu	r3,r2,4360f0 <sbrk+0xa0>
  4360ac:	e0bff817 	ldw	r2,-32(fp)
  4360b0:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4360b4:	0005303a 	rdctl	r2,status
  4360b8:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4360bc:	e0fffc17 	ldw	r3,-16(fp)
  4360c0:	00bfff84 	movi	r2,-2
  4360c4:	1884703a 	and	r2,r3,r2
  4360c8:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4360cc:	e0bffb17 	ldw	r2,-20(fp)
  4360d0:	1080004c 	andi	r2,r2,1
  4360d4:	e0fffc17 	ldw	r3,-16(fp)
  4360d8:	1884b03a 	or	r2,r3,r2
  4360dc:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  4360e0:	e0bffc17 	ldw	r2,-16(fp)
  4360e4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  4360e8:	00bfffc4 	movi	r2,-1
  4360ec:	00001606 	br	436148 <sbrk+0xf8>
  }
#endif

  prev_heap_end = heap_end; 
  4360f0:	d0a01117 	ldw	r2,-32700(gp)
  4360f4:	e0bff915 	stw	r2,-28(fp)
  heap_end += incr; 
  4360f8:	d0e01117 	ldw	r3,-32700(gp)
  4360fc:	e0bfff17 	ldw	r2,-4(fp)
  436100:	1885883a 	add	r2,r3,r2
  436104:	d0a01115 	stw	r2,-32700(gp)
  436108:	e0bff817 	ldw	r2,-32(fp)
  43610c:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  436110:	0005303a 	rdctl	r2,status
  436114:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  436118:	e0fffe17 	ldw	r3,-8(fp)
  43611c:	00bfff84 	movi	r2,-2
  436120:	1884703a 	and	r2,r3,r2
  436124:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  436128:	e0bffd17 	ldw	r2,-12(fp)
  43612c:	1080004c 	andi	r2,r2,1
  436130:	e0fffe17 	ldw	r3,-8(fp)
  436134:	1884b03a 	or	r2,r3,r2
  436138:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  43613c:	e0bffe17 	ldw	r2,-8(fp)
  436140:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  436144:	e0bff917 	ldw	r2,-28(fp)
} 
  436148:	e037883a 	mov	sp,fp
  43614c:	df000017 	ldw	fp,0(sp)
  436150:	dec00104 	addi	sp,sp,4
  436154:	f800283a 	ret

00436158 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  436158:	defffe04 	addi	sp,sp,-8
  43615c:	dfc00115 	stw	ra,4(sp)
  436160:	df000015 	stw	fp,0(sp)
  436164:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  436168:	00801134 	movhi	r2,68
  43616c:	10970604 	addi	r2,r2,23576
  436170:	10800017 	ldw	r2,0(r2)
  436174:	10000526 	beq	r2,zero,43618c <alt_get_errno+0x34>
  436178:	00801134 	movhi	r2,68
  43617c:	10970604 	addi	r2,r2,23576
  436180:	10800017 	ldw	r2,0(r2)
  436184:	103ee83a 	callr	r2
  436188:	00000206 	br	436194 <alt_get_errno+0x3c>
  43618c:	00801134 	movhi	r2,68
  436190:	109df504 	addi	r2,r2,30676
}
  436194:	e037883a 	mov	sp,fp
  436198:	dfc00117 	ldw	ra,4(sp)
  43619c:	df000017 	ldw	fp,0(sp)
  4361a0:	dec00204 	addi	sp,sp,8
  4361a4:	f800283a 	ret

004361a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  4361a8:	defff904 	addi	sp,sp,-28
  4361ac:	dfc00615 	stw	ra,24(sp)
  4361b0:	df000515 	stw	fp,20(sp)
  4361b4:	df000504 	addi	fp,sp,20
  4361b8:	e13ffd15 	stw	r4,-12(fp)
  4361bc:	e17ffe15 	stw	r5,-8(fp)
  4361c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  4361c4:	e0bffd17 	ldw	r2,-12(fp)
  4361c8:	10000716 	blt	r2,zero,4361e8 <write+0x40>
  4361cc:	e13ffd17 	ldw	r4,-12(fp)
  4361d0:	01400304 	movi	r5,12
  4361d4:	04355000 	call	435500 <__mulsi3>
  4361d8:	00c01134 	movhi	r3,68
  4361dc:	18d27704 	addi	r3,r3,18908
  4361e0:	10c5883a 	add	r2,r2,r3
  4361e4:	00000106 	br	4361ec <write+0x44>
  4361e8:	0005883a 	mov	r2,zero
  4361ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  4361f0:	e0bffb17 	ldw	r2,-20(fp)
  4361f4:	10001f26 	beq	r2,zero,436274 <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  4361f8:	e0bffb17 	ldw	r2,-20(fp)
  4361fc:	10800217 	ldw	r2,8(r2)
  436200:	108000cc 	andi	r2,r2,3
  436204:	10001726 	beq	r2,zero,436264 <write+0xbc>
  436208:	e0bffb17 	ldw	r2,-20(fp)
  43620c:	10800017 	ldw	r2,0(r2)
  436210:	10800617 	ldw	r2,24(r2)
  436214:	10001326 	beq	r2,zero,436264 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  436218:	e0bffb17 	ldw	r2,-20(fp)
  43621c:	10800017 	ldw	r2,0(r2)
  436220:	10c00617 	ldw	r3,24(r2)
  436224:	e0bfff17 	ldw	r2,-4(fp)
  436228:	e13ffb17 	ldw	r4,-20(fp)
  43622c:	e17ffe17 	ldw	r5,-8(fp)
  436230:	100d883a 	mov	r6,r2
  436234:	183ee83a 	callr	r3
  436238:	e0bffc15 	stw	r2,-16(fp)
  43623c:	e0bffc17 	ldw	r2,-16(fp)
  436240:	1000060e 	bge	r2,zero,43625c <write+0xb4>
      {
        ALT_ERRNO = -rval;
  436244:	04361580 	call	436158 <alt_get_errno>
  436248:	e0fffc17 	ldw	r3,-16(fp)
  43624c:	00c7c83a 	sub	r3,zero,r3
  436250:	10c00015 	stw	r3,0(r2)
        return -1;
  436254:	00bfffc4 	movi	r2,-1
  436258:	00000a06 	br	436284 <write+0xdc>
      }
      return rval;
  43625c:	e0bffc17 	ldw	r2,-16(fp)
  436260:	00000806 	br	436284 <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
  436264:	04361580 	call	436158 <alt_get_errno>
  436268:	00c00344 	movi	r3,13
  43626c:	10c00015 	stw	r3,0(r2)
  436270:	00000306 	br	436280 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  436274:	04361580 	call	436158 <alt_get_errno>
  436278:	00c01444 	movi	r3,81
  43627c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  436280:	00bfffc4 	movi	r2,-1
}
  436284:	e037883a 	mov	sp,fp
  436288:	dfc00117 	ldw	ra,4(sp)
  43628c:	df000017 	ldw	fp,0(sp)
  436290:	dec00204 	addi	sp,sp,8
  436294:	f800283a 	ret

00436298 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  436298:	deffdf04 	addi	sp,sp,-132
  43629c:	dfc02015 	stw	ra,128(sp)
  4362a0:	df001f15 	stw	fp,124(sp)
  4362a4:	df001f04 	addi	fp,sp,124
  4362a8:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  4362ac:	e0bfe204 	addi	r2,fp,-120
  4362b0:	01003fc4 	movi	r4,255
  4362b4:	100b883a 	mov	r5,r2
  4362b8:	043f6900 	call	43f690 <OSTaskQuery>
  4362bc:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  4362c0:	e0bffe83 	ldbu	r2,-6(fp)
  4362c4:	10803fcc 	andi	r2,r2,255
  4362c8:	10001c1e 	bne	r2,zero,43633c <__env_lock+0xa4>
    return;

  id = tcb.OSTCBPrio;
  4362cc:	e0bfee83 	ldbu	r2,-70(fp)
  4362d0:	10803fcc 	andi	r2,r2,255
  4362d4:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  4362d8:	d0e70517 	ldw	r3,-25580(gp)
  4362dc:	e0bffd04 	addi	r2,fp,-12
  4362e0:	1809883a 	mov	r4,r3
  4362e4:	100b883a 	mov	r5,r2
  4362e8:	043d5f00 	call	43d5f0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  4362ec:	e0bffe43 	ldbu	r2,-7(fp)
  4362f0:	10803fcc 	andi	r2,r2,255
  4362f4:	10000726 	beq	r2,zero,436314 <__env_lock+0x7c>
  4362f8:	d0a01217 	ldw	r2,-32696(gp)
  4362fc:	e0ffe117 	ldw	r3,-124(fp)
  436300:	1880041e 	bne	r3,r2,436314 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
  436304:	d0a70417 	ldw	r2,-25584(gp)
  436308:	10800044 	addi	r2,r2,1
  43630c:	d0a70415 	stw	r2,-25584(gp)
  436310:	00000a06 	br	43633c <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  436314:	d0e70517 	ldw	r3,-25580(gp)
  436318:	e0bffe84 	addi	r2,fp,-6
  43631c:	1809883a 	mov	r4,r3
  436320:	000b883a 	mov	r5,zero
  436324:	100d883a 	mov	r6,r2
  436328:	043cfa00 	call	43cfa0 <OSSemPend>
    locks  = 1;
  43632c:	00800044 	movi	r2,1
  436330:	d0a70415 	stw	r2,-25584(gp)
    lockid = id;
  436334:	e0bfe117 	ldw	r2,-124(fp)
  436338:	d0a01215 	stw	r2,-32696(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  43633c:	e037883a 	mov	sp,fp
  436340:	dfc00117 	ldw	ra,4(sp)
  436344:	df000017 	ldw	fp,0(sp)
  436348:	dec00204 	addi	sp,sp,8
  43634c:	f800283a 	ret

00436350 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  436350:	defffd04 	addi	sp,sp,-12
  436354:	dfc00215 	stw	ra,8(sp)
  436358:	df000115 	stw	fp,4(sp)
  43635c:	df000104 	addi	fp,sp,4
  436360:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  436364:	d0a70417 	ldw	r2,-25584(gp)
  436368:	10000b26 	beq	r2,zero,436398 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  43636c:	d0a70417 	ldw	r2,-25584(gp)
  436370:	10bfffc4 	addi	r2,r2,-1
  436374:	d0a70415 	stw	r2,-25584(gp)
  436378:	d0a70417 	ldw	r2,-25584(gp)
  43637c:	1000071e 	bne	r2,zero,43639c <__env_unlock+0x4c>
  {
    lockid = -1;
  436380:	00bfffc4 	movi	r2,-1
  436384:	d0a01215 	stw	r2,-32696(gp)
    OSSemPost( alt_envsem );
  436388:	d0a70517 	ldw	r2,-25580(gp)
  43638c:	1009883a 	mov	r4,r2
  436390:	043d45c0 	call	43d45c <OSSemPost>
  436394:	00000106 	br	43639c <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
  436398:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  43639c:	e037883a 	mov	sp,fp
  4363a0:	dfc00117 	ldw	ra,4(sp)
  4363a4:	df000017 	ldw	fp,0(sp)
  4363a8:	dec00204 	addi	sp,sp,8
  4363ac:	f800283a 	ret

004363b0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  4363b0:	deffd904 	addi	sp,sp,-156
  4363b4:	dfc02615 	stw	ra,152(sp)
  4363b8:	df002515 	stw	fp,148(sp)
  4363bc:	df002504 	addi	fp,sp,148
  4363c0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  4363c4:	e03fdb15 	stw	zero,-148(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  4363c8:	00801134 	movhi	r2,68
  4363cc:	109dff44 	addi	r2,r2,30717
  4363d0:	10800003 	ldbu	r2,0(r2)
  4363d4:	10803fcc 	andi	r2,r2,255
  4363d8:	10800058 	cmpnei	r2,r2,1
  4363dc:	10004a1e 	bne	r2,zero,436508 <__malloc_lock+0x158>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  4363e0:	e0bfe204 	addi	r2,fp,-120
  4363e4:	01003fc4 	movi	r4,255
  4363e8:	100b883a 	mov	r5,r2
  4363ec:	043f6900 	call	43f690 <OSTaskQuery>
  4363f0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  4363f4:	e0bffe83 	ldbu	r2,-6(fp)
  4363f8:	10803fcc 	andi	r2,r2,255
  4363fc:	1000421e 	bne	r2,zero,436508 <__malloc_lock+0x158>
    return;

  id = tcb.OSTCBPrio;
  436400:	e0bfee83 	ldbu	r2,-70(fp)
  436404:	10803fcc 	andi	r2,r2,255
  436408:	e0bfdc15 	stw	r2,-144(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  43640c:	d0e70717 	ldw	r3,-25572(gp)
  436410:	e0bffd04 	addi	r2,fp,-12
  436414:	1809883a 	mov	r4,r3
  436418:	100b883a 	mov	r5,r2
  43641c:	043d5f00 	call	43d5f0 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  436420:	0005303a 	rdctl	r2,status
  436424:	e0bfdd15 	stw	r2,-140(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  436428:	e0ffdd17 	ldw	r3,-140(fp)
  43642c:	00bfff84 	movi	r2,-2
  436430:	1884703a 	and	r2,r3,r2
  436434:	1001703a 	wrctl	status,r2
  
  return context;
  436438:	e0bfdd17 	ldw	r2,-140(fp)
  
  OS_ENTER_CRITICAL();
  43643c:	e0bfdb15 	stw	r2,-148(fp)

  if( !semdata.OSCnt && id == lockid ) 
  436440:	e0bffd0b 	ldhu	r2,-12(fp)
  436444:	10bfffcc 	andi	r2,r2,65535
  436448:	1000161e 	bne	r2,zero,4364a4 <__malloc_lock+0xf4>
  43644c:	d0a01317 	ldw	r2,-32692(gp)
  436450:	e0ffdc17 	ldw	r3,-144(fp)
  436454:	1880131e 	bne	r3,r2,4364a4 <__malloc_lock+0xf4>
  {
    /* we do; just count the recursion */
    locks++;
  436458:	d0a70617 	ldw	r2,-25576(gp)
  43645c:	10800044 	addi	r2,r2,1
  436460:	d0a70615 	stw	r2,-25576(gp)
  436464:	e0bfdb17 	ldw	r2,-148(fp)
  436468:	e0bfde15 	stw	r2,-136(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43646c:	0005303a 	rdctl	r2,status
  436470:	e0bfdf15 	stw	r2,-132(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  436474:	e0ffdf17 	ldw	r3,-132(fp)
  436478:	00bfff84 	movi	r2,-2
  43647c:	1884703a 	and	r2,r3,r2
  436480:	e0bfdf15 	stw	r2,-132(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  436484:	e0bfde17 	ldw	r2,-136(fp)
  436488:	1080004c 	andi	r2,r2,1
  43648c:	e0ffdf17 	ldw	r3,-132(fp)
  436490:	1884b03a 	or	r2,r3,r2
  436494:	e0bfdf15 	stw	r2,-132(fp)
  
  NIOS2_WRITE_STATUS (status);
  436498:	e0bfdf17 	ldw	r2,-132(fp)
  43649c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
  4364a0:	00001906 	br	436508 <__malloc_lock+0x158>
  4364a4:	e0bfdb17 	ldw	r2,-148(fp)
  4364a8:	e0bfe015 	stw	r2,-128(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4364ac:	0005303a 	rdctl	r2,status
  4364b0:	e0bfe115 	stw	r2,-124(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4364b4:	e0ffe117 	ldw	r3,-124(fp)
  4364b8:	00bfff84 	movi	r2,-2
  4364bc:	1884703a 	and	r2,r3,r2
  4364c0:	e0bfe115 	stw	r2,-124(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4364c4:	e0bfe017 	ldw	r2,-128(fp)
  4364c8:	1080004c 	andi	r2,r2,1
  4364cc:	e0ffe117 	ldw	r3,-124(fp)
  4364d0:	1884b03a 	or	r2,r3,r2
  4364d4:	e0bfe115 	stw	r2,-124(fp)
  
  NIOS2_WRITE_STATUS (status);
  4364d8:	e0bfe117 	ldw	r2,-124(fp)
  4364dc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  4364e0:	d0e70717 	ldw	r3,-25572(gp)
  4364e4:	e0bffe84 	addi	r2,fp,-6
  4364e8:	1809883a 	mov	r4,r3
  4364ec:	000b883a 	mov	r5,zero
  4364f0:	100d883a 	mov	r6,r2
  4364f4:	043cfa00 	call	43cfa0 <OSSemPend>
    locks  = 1;
  4364f8:	00800044 	movi	r2,1
  4364fc:	d0a70615 	stw	r2,-25576(gp)
    lockid = id;
  436500:	e0bfdc17 	ldw	r2,-144(fp)
  436504:	d0a01315 	stw	r2,-32692(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  436508:	e037883a 	mov	sp,fp
  43650c:	dfc00117 	ldw	ra,4(sp)
  436510:	df000017 	ldw	fp,0(sp)
  436514:	dec00204 	addi	sp,sp,8
  436518:	f800283a 	ret

0043651c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  43651c:	defff504 	addi	sp,sp,-44
  436520:	dfc00a15 	stw	ra,40(sp)
  436524:	df000915 	stw	fp,36(sp)
  436528:	df000904 	addi	fp,sp,36
  43652c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  436530:	e03ff715 	stw	zero,-36(fp)
#endif 

  if (OSRunning != OS_TRUE)
  436534:	00801134 	movhi	r2,68
  436538:	109dff44 	addi	r2,r2,30717
  43653c:	10800003 	ldbu	r2,0(r2)
  436540:	10803fcc 	andi	r2,r2,255
  436544:	10800060 	cmpeqi	r2,r2,1
  436548:	10004426 	beq	r2,zero,43665c <__malloc_unlock+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43654c:	0005303a 	rdctl	r2,status
  436550:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  436554:	e0fff817 	ldw	r3,-32(fp)
  436558:	00bfff84 	movi	r2,-2
  43655c:	1884703a 	and	r2,r3,r2
  436560:	1001703a 	wrctl	status,r2
  
  return context;
  436564:	e0bff817 	ldw	r2,-32(fp)
      return;

  OS_ENTER_CRITICAL();
  436568:	e0bff715 	stw	r2,-36(fp)
  if (locks == 0)
  43656c:	d0a70617 	ldw	r2,-25576(gp)
  436570:	1000101e 	bne	r2,zero,4365b4 <__malloc_unlock+0x98>
  436574:	e0bff717 	ldw	r2,-36(fp)
  436578:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43657c:	0005303a 	rdctl	r2,status
  436580:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  436584:	e0fffa17 	ldw	r3,-24(fp)
  436588:	00bfff84 	movi	r2,-2
  43658c:	1884703a 	and	r2,r3,r2
  436590:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  436594:	e0bff917 	ldw	r2,-28(fp)
  436598:	1080004c 	andi	r2,r2,1
  43659c:	e0fffa17 	ldw	r3,-24(fp)
  4365a0:	1884b03a 	or	r2,r3,r2
  4365a4:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  4365a8:	e0bffa17 	ldw	r2,-24(fp)
  4365ac:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  4365b0:	00002b06 	br	436660 <__malloc_unlock+0x144>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  4365b4:	d0a70617 	ldw	r2,-25576(gp)
  4365b8:	10bfffc4 	addi	r2,r2,-1
  4365bc:	d0a70615 	stw	r2,-25576(gp)
  4365c0:	d0a70617 	ldw	r2,-25576(gp)
  4365c4:	1000151e 	bne	r2,zero,43661c <__malloc_unlock+0x100>
  {
    lockid = -1;
  4365c8:	00bfffc4 	movi	r2,-1
  4365cc:	d0a01315 	stw	r2,-32692(gp)
  4365d0:	e0bff717 	ldw	r2,-36(fp)
  4365d4:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4365d8:	0005303a 	rdctl	r2,status
  4365dc:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4365e0:	e0fffc17 	ldw	r3,-16(fp)
  4365e4:	00bfff84 	movi	r2,-2
  4365e8:	1884703a 	and	r2,r3,r2
  4365ec:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4365f0:	e0bffb17 	ldw	r2,-20(fp)
  4365f4:	1080004c 	andi	r2,r2,1
  4365f8:	e0fffc17 	ldw	r3,-16(fp)
  4365fc:	1884b03a 	or	r2,r3,r2
  436600:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  436604:	e0bffc17 	ldw	r2,-16(fp)
  436608:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  43660c:	d0a70717 	ldw	r2,-25572(gp)
  436610:	1009883a 	mov	r4,r2
  436614:	043d45c0 	call	43d45c <OSSemPost>
  436618:	00001106 	br	436660 <__malloc_unlock+0x144>
  43661c:	e0bff717 	ldw	r2,-36(fp)
  436620:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  436624:	0005303a 	rdctl	r2,status
  436628:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43662c:	e0fffe17 	ldw	r3,-8(fp)
  436630:	00bfff84 	movi	r2,-2
  436634:	1884703a 	and	r2,r3,r2
  436638:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43663c:	e0bffd17 	ldw	r2,-12(fp)
  436640:	1080004c 	andi	r2,r2,1
  436644:	e0fffe17 	ldw	r3,-8(fp)
  436648:	1884b03a 	or	r2,r3,r2
  43664c:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  436650:	e0bffe17 	ldw	r2,-8(fp)
  436654:	1001703a 	wrctl	status,r2
  436658:	00000106 	br	436660 <__malloc_unlock+0x144>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
  43665c:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  436660:	e037883a 	mov	sp,fp
  436664:	dfc00117 	ldw	ra,4(sp)
  436668:	df000017 	ldw	fp,0(sp)
  43666c:	dec00204 	addi	sp,sp,8
  436670:	f800283a 	ret

00436674 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  436674:	defff604 	addi	sp,sp,-40
  436678:	dfc00915 	stw	ra,36(sp)
  43667c:	df000815 	stw	fp,32(sp)
  436680:	df000804 	addi	fp,sp,32
  436684:	e13ffd15 	stw	r4,-12(fp)
  436688:	e17ffe15 	stw	r5,-8(fp)
  43668c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  436690:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  436694:	e0bfff17 	ldw	r2,-4(fp)
  436698:	1000021e 	bne	r2,zero,4366a4 <OSEventNameGet+0x30>
        return (0);
  43669c:	0005883a 	mov	r2,zero
  4366a0:	00004206 	br	4367ac <OSEventNameGet+0x138>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  4366a4:	e0bffd17 	ldw	r2,-12(fp)
  4366a8:	1000051e 	bne	r2,zero,4366c0 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  4366ac:	e0bfff17 	ldw	r2,-4(fp)
  4366b0:	00c00104 	movi	r3,4
  4366b4:	10c00005 	stb	r3,0(r2)
        return (0);
  4366b8:	0005883a 	mov	r2,zero
  4366bc:	00003b06 	br	4367ac <OSEventNameGet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  4366c0:	e0bffe17 	ldw	r2,-8(fp)
  4366c4:	1000051e 	bne	r2,zero,4366dc <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  4366c8:	e0bfff17 	ldw	r2,-4(fp)
  4366cc:	00c00304 	movi	r3,12
  4366d0:	10c00005 	stb	r3,0(r2)
        return (0);
  4366d4:	0005883a 	mov	r2,zero
  4366d8:	00003406 	br	4367ac <OSEventNameGet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  4366dc:	d0a71603 	ldbu	r2,-25512(gp)
  4366e0:	10803fcc 	andi	r2,r2,255
  4366e4:	10000526 	beq	r2,zero,4366fc <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
  4366e8:	e0bfff17 	ldw	r2,-4(fp)
  4366ec:	00c00444 	movi	r3,17
  4366f0:	10c00005 	stb	r3,0(r2)
        return (0);
  4366f4:	0005883a 	mov	r2,zero
  4366f8:	00002c06 	br	4367ac <OSEventNameGet+0x138>
    }
    switch (pevent->OSEventType) {
  4366fc:	e0bffd17 	ldw	r2,-12(fp)
  436700:	10800003 	ldbu	r2,0(r2)
  436704:	10803fcc 	andi	r2,r2,255
  436708:	10bfffc4 	addi	r2,r2,-1
  43670c:	10800128 	cmpgeui	r2,r2,4
  436710:	1000221e 	bne	r2,zero,43679c <OSEventNameGet+0x128>
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  436714:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  436718:	0005303a 	rdctl	r2,status
  43671c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  436720:	e0fffa17 	ldw	r3,-24(fp)
  436724:	00bfff84 	movi	r2,-2
  436728:	1884703a 	and	r2,r3,r2
  43672c:	1001703a 	wrctl	status,r2
  
  return context;
  436730:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  436734:	e0bff815 	stw	r2,-32(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  436738:	e0bffd17 	ldw	r2,-12(fp)
  43673c:	10800384 	addi	r2,r2,14
  436740:	e13ffe17 	ldw	r4,-8(fp)
  436744:	100b883a 	mov	r5,r2
  436748:	04385100 	call	438510 <OS_StrCopy>
  43674c:	e0bff905 	stb	r2,-28(fp)
  436750:	e0bff817 	ldw	r2,-32(fp)
  436754:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  436758:	0005303a 	rdctl	r2,status
  43675c:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  436760:	e0fffc17 	ldw	r3,-16(fp)
  436764:	00bfff84 	movi	r2,-2
  436768:	1884703a 	and	r2,r3,r2
  43676c:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  436770:	e0bffb17 	ldw	r2,-20(fp)
  436774:	1080004c 	andi	r2,r2,1
  436778:	e0fffc17 	ldw	r3,-16(fp)
  43677c:	1884b03a 	or	r2,r3,r2
  436780:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  436784:	e0bffc17 	ldw	r2,-16(fp)
  436788:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  43678c:	e0bfff17 	ldw	r2,-4(fp)
  436790:	10000005 	stb	zero,0(r2)
    return (len);
  436794:	e0bff903 	ldbu	r2,-28(fp)
  436798:	00000406 	br	4367ac <OSEventNameGet+0x138>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  43679c:	e0bfff17 	ldw	r2,-4(fp)
  4367a0:	00c00044 	movi	r3,1
  4367a4:	10c00005 	stb	r3,0(r2)
             return (0);
  4367a8:	0005883a 	mov	r2,zero
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  4367ac:	e037883a 	mov	sp,fp
  4367b0:	dfc00117 	ldw	ra,4(sp)
  4367b4:	df000017 	ldw	fp,0(sp)
  4367b8:	dec00204 	addi	sp,sp,8
  4367bc:	f800283a 	ret

004367c0 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  4367c0:	defff404 	addi	sp,sp,-48
  4367c4:	dfc00b15 	stw	ra,44(sp)
  4367c8:	df000a15 	stw	fp,40(sp)
  4367cc:	df000a04 	addi	fp,sp,40
  4367d0:	e13ffd15 	stw	r4,-12(fp)
  4367d4:	e17ffe15 	stw	r5,-8(fp)
  4367d8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  4367dc:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  4367e0:	e0bfff17 	ldw	r2,-4(fp)
  4367e4:	10005726 	beq	r2,zero,436944 <OSEventNameSet+0x184>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  4367e8:	e0bffd17 	ldw	r2,-12(fp)
  4367ec:	1000041e 	bne	r2,zero,436800 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  4367f0:	e0bfff17 	ldw	r2,-4(fp)
  4367f4:	00c00104 	movi	r3,4
  4367f8:	10c00005 	stb	r3,0(r2)
        return;
  4367fc:	00005206 	br	436948 <OSEventNameSet+0x188>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  436800:	e0bffe17 	ldw	r2,-8(fp)
  436804:	1000041e 	bne	r2,zero,436818 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  436808:	e0bfff17 	ldw	r2,-4(fp)
  43680c:	00c00304 	movi	r3,12
  436810:	10c00005 	stb	r3,0(r2)
        return;
  436814:	00004c06 	br	436948 <OSEventNameSet+0x188>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  436818:	d0a71603 	ldbu	r2,-25512(gp)
  43681c:	10803fcc 	andi	r2,r2,255
  436820:	10000426 	beq	r2,zero,436834 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  436824:	e0bfff17 	ldw	r2,-4(fp)
  436828:	00c00484 	movi	r3,18
  43682c:	10c00005 	stb	r3,0(r2)
        return;
  436830:	00004506 	br	436948 <OSEventNameSet+0x188>
    }
    switch (pevent->OSEventType) {
  436834:	e0bffd17 	ldw	r2,-12(fp)
  436838:	10800003 	ldbu	r2,0(r2)
  43683c:	10803fcc 	andi	r2,r2,255
  436840:	10bfffc4 	addi	r2,r2,-1
  436844:	10800128 	cmpgeui	r2,r2,4
  436848:	1000101e 	bne	r2,zero,43688c <OSEventNameSet+0xcc>
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  43684c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  436850:	0005303a 	rdctl	r2,status
  436854:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  436858:	e0fff817 	ldw	r3,-32(fp)
  43685c:	00bfff84 	movi	r2,-2
  436860:	1884703a 	and	r2,r3,r2
  436864:	1001703a 	wrctl	status,r2
  
  return context;
  436868:	e0bff817 	ldw	r2,-32(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  43686c:	e0bff615 	stw	r2,-40(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  436870:	e13ffe17 	ldw	r4,-8(fp)
  436874:	043858c0 	call	43858c <OS_StrLen>
  436878:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  43687c:	e0bff703 	ldbu	r2,-36(fp)
  436880:	10800830 	cmpltui	r2,r2,32
  436884:	1000181e 	bne	r2,zero,4368e8 <OSEventNameSet+0x128>
  436888:	00000406 	br	43689c <OSEventNameSet+0xdc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  43688c:	e0bfff17 	ldw	r2,-4(fp)
  436890:	00c00044 	movi	r3,1
  436894:	10c00005 	stb	r3,0(r2)
             return;
  436898:	00002b06 	br	436948 <OSEventNameSet+0x188>
  43689c:	e0bff617 	ldw	r2,-40(fp)
  4368a0:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4368a4:	0005303a 	rdctl	r2,status
  4368a8:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4368ac:	e0fffa17 	ldw	r3,-24(fp)
  4368b0:	00bfff84 	movi	r2,-2
  4368b4:	1884703a 	and	r2,r3,r2
  4368b8:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4368bc:	e0bff917 	ldw	r2,-28(fp)
  4368c0:	1080004c 	andi	r2,r2,1
  4368c4:	e0fffa17 	ldw	r3,-24(fp)
  4368c8:	1884b03a 	or	r2,r3,r2
  4368cc:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  4368d0:	e0bffa17 	ldw	r2,-24(fp)
  4368d4:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  4368d8:	e0bfff17 	ldw	r2,-4(fp)
  4368dc:	00c002c4 	movi	r3,11
  4368e0:	10c00005 	stb	r3,0(r2)
        return;
  4368e4:	00001806 	br	436948 <OSEventNameSet+0x188>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  4368e8:	e0bffd17 	ldw	r2,-12(fp)
  4368ec:	10800384 	addi	r2,r2,14
  4368f0:	1009883a 	mov	r4,r2
  4368f4:	e17ffe17 	ldw	r5,-8(fp)
  4368f8:	04385100 	call	438510 <OS_StrCopy>
  4368fc:	e0bff617 	ldw	r2,-40(fp)
  436900:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  436904:	0005303a 	rdctl	r2,status
  436908:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43690c:	e0fffc17 	ldw	r3,-16(fp)
  436910:	00bfff84 	movi	r2,-2
  436914:	1884703a 	and	r2,r3,r2
  436918:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43691c:	e0bffb17 	ldw	r2,-20(fp)
  436920:	1080004c 	andi	r2,r2,1
  436924:	e0fffc17 	ldw	r3,-16(fp)
  436928:	1884b03a 	or	r2,r3,r2
  43692c:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  436930:	e0bffc17 	ldw	r2,-16(fp)
  436934:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  436938:	e0bfff17 	ldw	r2,-4(fp)
  43693c:	10000005 	stb	zero,0(r2)
  436940:	00000106 	br	436948 <OSEventNameSet+0x188>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  436944:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  436948:	e037883a 	mov	sp,fp
  43694c:	dfc00117 	ldw	ra,4(sp)
  436950:	df000017 	ldw	fp,0(sp)
  436954:	dec00204 	addi	sp,sp,8
  436958:	f800283a 	ret

0043695c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  43695c:	deffe804 	addi	sp,sp,-96
  436960:	dfc01715 	stw	ra,92(sp)
  436964:	df001615 	stw	fp,88(sp)
  436968:	df001604 	addi	fp,sp,88
  43696c:	e13ffc15 	stw	r4,-16(fp)
  436970:	e17ffd15 	stw	r5,-12(fp)
  436974:	e1bffe15 	stw	r6,-8(fp)
  436978:	3805883a 	mov	r2,r7
  43697c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  436980:	e03fee15 	stw	zero,-72(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  436984:	e0800217 	ldw	r2,8(fp)
  436988:	1000021e 	bne	r2,zero,436994 <OSEventPendMulti+0x38>
        return (0);
  43698c:	0005883a 	mov	r2,zero
  436990:	0001b306 	br	437060 <OSEventPendMulti+0x704>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  436994:	e0bffc17 	ldw	r2,-16(fp)
  436998:	1000051e 	bne	r2,zero,4369b0 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
  43699c:	e0800217 	ldw	r2,8(fp)
  4369a0:	00c00104 	movi	r3,4
  4369a4:	10c00005 	stb	r3,0(r2)
        return (0);
  4369a8:	0005883a 	mov	r2,zero
  4369ac:	0001ac06 	br	437060 <OSEventPendMulti+0x704>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  4369b0:	e0bffd17 	ldw	r2,-12(fp)
  4369b4:	1000051e 	bne	r2,zero,4369cc <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
  4369b8:	e0800217 	ldw	r2,8(fp)
  4369bc:	00c00104 	movi	r3,4
  4369c0:	10c00005 	stb	r3,0(r2)
        return (0);
  4369c4:	0005883a 	mov	r2,zero
  4369c8:	0001a506 	br	437060 <OSEventPendMulti+0x704>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  4369cc:	e0bffe17 	ldw	r2,-8(fp)
  4369d0:	1000051e 	bne	r2,zero,4369e8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
  4369d4:	e0800217 	ldw	r2,8(fp)
  4369d8:	00c00104 	movi	r3,4
  4369dc:	10c00005 	stb	r3,0(r2)
        return (0);
  4369e0:	0005883a 	mov	r2,zero
  4369e4:	00019e06 	br	437060 <OSEventPendMulti+0x704>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  4369e8:	e0bffd17 	ldw	r2,-12(fp)
  4369ec:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  4369f0:	e0bffc17 	ldw	r2,-16(fp)
  4369f4:	e0bfea15 	stw	r2,-88(fp)
    pevent      = *pevents;
  4369f8:	e0bfea17 	ldw	r2,-88(fp)
  4369fc:	10800017 	ldw	r2,0(r2)
  436a00:	e0bfeb15 	stw	r2,-84(fp)
    while  (pevent != (OS_EVENT *)0) {
  436a04:	00001906 	br	436a6c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  436a08:	e0bfeb17 	ldw	r2,-84(fp)
  436a0c:	10800003 	ldbu	r2,0(r2)
  436a10:	10803fcc 	andi	r2,r2,255
  436a14:	10c000a0 	cmpeqi	r3,r2,2
  436a18:	1800091e 	bne	r3,zero,436a40 <OSEventPendMulti+0xe4>
  436a1c:	10c000e0 	cmpeqi	r3,r2,3
  436a20:	1800091e 	bne	r3,zero,436a48 <OSEventPendMulti+0xec>
  436a24:	10800060 	cmpeqi	r2,r2,1
  436a28:	1000091e 	bne	r2,zero,436a50 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  436a2c:	e0800217 	ldw	r2,8(fp)
  436a30:	00c00044 	movi	r3,1
  436a34:	10c00005 	stb	r3,0(r2)
                 return (0);
  436a38:	0005883a 	mov	r2,zero
  436a3c:	00018806 	br	437060 <OSEventPendMulti+0x704>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
  436a40:	0001883a 	nop
  436a44:	00000306 	br	436a54 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
  436a48:	0001883a 	nop
  436a4c:	00000106 	br	436a54 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
  436a50:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
  436a54:	e0bfea17 	ldw	r2,-88(fp)
  436a58:	10800104 	addi	r2,r2,4
  436a5c:	e0bfea15 	stw	r2,-88(fp)
        pevent = *pevents;
  436a60:	e0bfea17 	ldw	r2,-88(fp)
  436a64:	10800017 	ldw	r2,0(r2)
  436a68:	e0bfeb15 	stw	r2,-84(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  436a6c:	e0bfeb17 	ldw	r2,-84(fp)
  436a70:	103fe51e 	bne	r2,zero,436a08 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  436a74:	d0a71603 	ldbu	r2,-25512(gp)
  436a78:	10803fcc 	andi	r2,r2,255
  436a7c:	10000526 	beq	r2,zero,436a94 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  436a80:	e0800217 	ldw	r2,8(fp)
  436a84:	00c00084 	movi	r3,2
  436a88:	10c00005 	stb	r3,0(r2)
        return (0);
  436a8c:	0005883a 	mov	r2,zero
  436a90:	00017306 	br	437060 <OSEventPendMulti+0x704>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  436a94:	d0a70803 	ldbu	r2,-25568(gp)
  436a98:	10803fcc 	andi	r2,r2,255
  436a9c:	10000526 	beq	r2,zero,436ab4 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  436aa0:	e0800217 	ldw	r2,8(fp)
  436aa4:	00c00344 	movi	r3,13
  436aa8:	10c00005 	stb	r3,0(r2)
        return (0);
  436aac:	0005883a 	mov	r2,zero
  436ab0:	00016b06 	br	437060 <OSEventPendMulti+0x704>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  436ab4:	0005303a 	rdctl	r2,status
  436ab8:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  436abc:	e0fff017 	ldw	r3,-64(fp)
  436ac0:	00bfff84 	movi	r2,-2
  436ac4:	1884703a 	and	r2,r3,r2
  436ac8:	1001703a 	wrctl	status,r2
  
  return context;
  436acc:	e0bff017 	ldw	r2,-64(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  436ad0:	e0bfee15 	stw	r2,-72(fp)
    events_rdy     =  OS_FALSE;
  436ad4:	e03fec05 	stb	zero,-80(fp)
    events_rdy_nbr =  0;
  436ad8:	e03fec8d 	sth	zero,-78(fp)
    events_stat    =  OS_STAT_RDY;
  436adc:	e03fed05 	stb	zero,-76(fp)
    pevents        =  pevents_pend;
  436ae0:	e0bffc17 	ldw	r2,-16(fp)
  436ae4:	e0bfea15 	stw	r2,-88(fp)
    pevent         = *pevents;
  436ae8:	e0bfea17 	ldw	r2,-88(fp)
  436aec:	10800017 	ldw	r2,0(r2)
  436af0:	e0bfeb15 	stw	r2,-84(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  436af4:	00009206 	br	436d40 <OSEventPendMulti+0x3e4>
        switch (pevent->OSEventType) {
  436af8:	e0bfeb17 	ldw	r2,-84(fp)
  436afc:	10800003 	ldbu	r2,0(r2)
  436b00:	10803fcc 	andi	r2,r2,255
  436b04:	10c000a0 	cmpeqi	r3,r2,2
  436b08:	1800401e 	bne	r3,zero,436c0c <OSEventPendMulti+0x2b0>
  436b0c:	10c000e0 	cmpeqi	r3,r2,3
  436b10:	1800031e 	bne	r3,zero,436b20 <OSEventPendMulti+0x1c4>
  436b14:	10800060 	cmpeqi	r2,r2,1
  436b18:	1000201e 	bne	r2,zero,436b9c <OSEventPendMulti+0x240>
  436b1c:	00006c06 	br	436cd0 <OSEventPendMulti+0x374>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  436b20:	e0bfeb17 	ldw	r2,-84(fp)
  436b24:	1080020b 	ldhu	r2,8(r2)
  436b28:	10bfffcc 	andi	r2,r2,65535
  436b2c:	10001726 	beq	r2,zero,436b8c <OSEventPendMulti+0x230>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  436b30:	e0bfeb17 	ldw	r2,-84(fp)
  436b34:	1080020b 	ldhu	r2,8(r2)
  436b38:	10bfffc4 	addi	r2,r2,-1
  436b3c:	1007883a 	mov	r3,r2
  436b40:	e0bfeb17 	ldw	r2,-84(fp)
  436b44:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  436b48:	e0bffd17 	ldw	r2,-12(fp)
  436b4c:	e0ffeb17 	ldw	r3,-84(fp)
  436b50:	10c00015 	stw	r3,0(r2)
  436b54:	e0bffd17 	ldw	r2,-12(fp)
  436b58:	10800104 	addi	r2,r2,4
  436b5c:	e0bffd15 	stw	r2,-12(fp)
                      events_rdy   =  OS_TRUE;
  436b60:	00800044 	movi	r2,1
  436b64:	e0bfec05 	stb	r2,-80(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  436b68:	e0bffe17 	ldw	r2,-8(fp)
  436b6c:	10000015 	stw	zero,0(r2)
  436b70:	e0bffe17 	ldw	r2,-8(fp)
  436b74:	10800104 	addi	r2,r2,4
  436b78:	e0bffe15 	stw	r2,-8(fp)
                      events_rdy_nbr++;
  436b7c:	e0bfec8b 	ldhu	r2,-78(fp)
  436b80:	10800044 	addi	r2,r2,1
  436b84:	e0bfec8d 	sth	r2,-78(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
  436b88:	00006706 	br	436d28 <OSEventPendMulti+0x3cc>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  436b8c:	e0bfed03 	ldbu	r2,-76(fp)
  436b90:	10800054 	ori	r2,r2,1
  436b94:	e0bfed05 	stb	r2,-76(fp)
                 }
                 break;
  436b98:	00006306 	br	436d28 <OSEventPendMulti+0x3cc>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  436b9c:	e0bfeb17 	ldw	r2,-84(fp)
  436ba0:	10800117 	ldw	r2,4(r2)
  436ba4:	10001526 	beq	r2,zero,436bfc <OSEventPendMulti+0x2a0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  436ba8:	e0bfeb17 	ldw	r2,-84(fp)
  436bac:	10c00117 	ldw	r3,4(r2)
  436bb0:	e0bffe17 	ldw	r2,-8(fp)
  436bb4:	10c00015 	stw	r3,0(r2)
  436bb8:	e0bffe17 	ldw	r2,-8(fp)
  436bbc:	10800104 	addi	r2,r2,4
  436bc0:	e0bffe15 	stw	r2,-8(fp)
                     pevent->OSEventPtr  = (void *)0;
  436bc4:	e0bfeb17 	ldw	r2,-84(fp)
  436bc8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  436bcc:	e0bffd17 	ldw	r2,-12(fp)
  436bd0:	e0ffeb17 	ldw	r3,-84(fp)
  436bd4:	10c00015 	stw	r3,0(r2)
  436bd8:	e0bffd17 	ldw	r2,-12(fp)
  436bdc:	10800104 	addi	r2,r2,4
  436be0:	e0bffd15 	stw	r2,-12(fp)
                      events_rdy         =  OS_TRUE;
  436be4:	00800044 	movi	r2,1
  436be8:	e0bfec05 	stb	r2,-80(fp)
                      events_rdy_nbr++;
  436bec:	e0bfec8b 	ldhu	r2,-78(fp)
  436bf0:	10800044 	addi	r2,r2,1
  436bf4:	e0bfec8d 	sth	r2,-78(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
  436bf8:	00004b06 	br	436d28 <OSEventPendMulti+0x3cc>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  436bfc:	e0bfed03 	ldbu	r2,-76(fp)
  436c00:	10800094 	ori	r2,r2,2
  436c04:	e0bfed05 	stb	r2,-76(fp)
                 }
                 break;
  436c08:	00004706 	br	436d28 <OSEventPendMulti+0x3cc>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  436c0c:	e0bfeb17 	ldw	r2,-84(fp)
  436c10:	10800117 	ldw	r2,4(r2)
  436c14:	e0bfef15 	stw	r2,-68(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  436c18:	e0bfef17 	ldw	r2,-68(fp)
  436c1c:	1080058b 	ldhu	r2,22(r2)
  436c20:	10bfffcc 	andi	r2,r2,65535
  436c24:	10002626 	beq	r2,zero,436cc0 <OSEventPendMulti+0x364>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  436c28:	e0bfef17 	ldw	r2,-68(fp)
  436c2c:	10800417 	ldw	r2,16(r2)
  436c30:	11000017 	ldw	r4,0(r2)
  436c34:	e0fffe17 	ldw	r3,-8(fp)
  436c38:	19000015 	stw	r4,0(r3)
  436c3c:	e0fffe17 	ldw	r3,-8(fp)
  436c40:	18c00104 	addi	r3,r3,4
  436c44:	e0fffe15 	stw	r3,-8(fp)
  436c48:	10c00104 	addi	r3,r2,4
  436c4c:	e0bfef17 	ldw	r2,-68(fp)
  436c50:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  436c54:	e0bfef17 	ldw	r2,-68(fp)
  436c58:	10c00417 	ldw	r3,16(r2)
  436c5c:	e0bfef17 	ldw	r2,-68(fp)
  436c60:	10800217 	ldw	r2,8(r2)
  436c64:	1880041e 	bne	r3,r2,436c78 <OSEventPendMulti+0x31c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  436c68:	e0bfef17 	ldw	r2,-68(fp)
  436c6c:	10c00117 	ldw	r3,4(r2)
  436c70:	e0bfef17 	ldw	r2,-68(fp)
  436c74:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  436c78:	e0bfef17 	ldw	r2,-68(fp)
  436c7c:	1080058b 	ldhu	r2,22(r2)
  436c80:	10bfffc4 	addi	r2,r2,-1
  436c84:	1007883a 	mov	r3,r2
  436c88:	e0bfef17 	ldw	r2,-68(fp)
  436c8c:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  436c90:	e0bffd17 	ldw	r2,-12(fp)
  436c94:	e0ffeb17 	ldw	r3,-84(fp)
  436c98:	10c00015 	stw	r3,0(r2)
  436c9c:	e0bffd17 	ldw	r2,-12(fp)
  436ca0:	10800104 	addi	r2,r2,4
  436ca4:	e0bffd15 	stw	r2,-12(fp)
                      events_rdy   = OS_TRUE;
  436ca8:	00800044 	movi	r2,1
  436cac:	e0bfec05 	stb	r2,-80(fp)
                      events_rdy_nbr++;
  436cb0:	e0bfec8b 	ldhu	r2,-78(fp)
  436cb4:	10800044 	addi	r2,r2,1
  436cb8:	e0bfec8d 	sth	r2,-78(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
  436cbc:	00001a06 	br	436d28 <OSEventPendMulti+0x3cc>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  436cc0:	e0bfed03 	ldbu	r2,-76(fp)
  436cc4:	10800114 	ori	r2,r2,4
  436cc8:	e0bfed05 	stb	r2,-76(fp)
                 }
                 break;
  436ccc:	00001606 	br	436d28 <OSEventPendMulti+0x3cc>
  436cd0:	e0bfee17 	ldw	r2,-72(fp)
  436cd4:	e0bff115 	stw	r2,-60(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  436cd8:	0005303a 	rdctl	r2,status
  436cdc:	e0bff215 	stw	r2,-56(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  436ce0:	e0fff217 	ldw	r3,-56(fp)
  436ce4:	00bfff84 	movi	r2,-2
  436ce8:	1884703a 	and	r2,r3,r2
  436cec:	e0bff215 	stw	r2,-56(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  436cf0:	e0bff117 	ldw	r2,-60(fp)
  436cf4:	1080004c 	andi	r2,r2,1
  436cf8:	e0fff217 	ldw	r3,-56(fp)
  436cfc:	1884b03a 	or	r2,r3,r2
  436d00:	e0bff215 	stw	r2,-56(fp)
  
  NIOS2_WRITE_STATUS (status);
  436d04:	e0bff217 	ldw	r2,-56(fp)
  436d08:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  436d0c:	e0bffd17 	ldw	r2,-12(fp)
  436d10:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  436d14:	e0800217 	ldw	r2,8(fp)
  436d18:	00c00044 	movi	r3,1
  436d1c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
  436d20:	e0bfec8b 	ldhu	r2,-78(fp)
  436d24:	0000ce06 	br	437060 <OSEventPendMulti+0x704>
        }
        pevents++;
  436d28:	e0bfea17 	ldw	r2,-88(fp)
  436d2c:	10800104 	addi	r2,r2,4
  436d30:	e0bfea15 	stw	r2,-88(fp)
        pevent = *pevents;
  436d34:	e0bfea17 	ldw	r2,-88(fp)
  436d38:	10800017 	ldw	r2,0(r2)
  436d3c:	e0bfeb15 	stw	r2,-84(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  436d40:	e0bfeb17 	ldw	r2,-84(fp)
  436d44:	103f6c1e 	bne	r2,zero,436af8 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  436d48:	e0bfec03 	ldbu	r2,-80(fp)
  436d4c:	10800058 	cmpnei	r2,r2,1
  436d50:	1000151e 	bne	r2,zero,436da8 <OSEventPendMulti+0x44c>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  436d54:	e0bffd17 	ldw	r2,-12(fp)
  436d58:	10000015 	stw	zero,0(r2)
  436d5c:	e0bfee17 	ldw	r2,-72(fp)
  436d60:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  436d64:	0005303a 	rdctl	r2,status
  436d68:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  436d6c:	e0fff417 	ldw	r3,-48(fp)
  436d70:	00bfff84 	movi	r2,-2
  436d74:	1884703a 	and	r2,r3,r2
  436d78:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  436d7c:	e0bff317 	ldw	r2,-52(fp)
  436d80:	1080004c 	andi	r2,r2,1
  436d84:	e0fff417 	ldw	r3,-48(fp)
  436d88:	1884b03a 	or	r2,r3,r2
  436d8c:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
  436d90:	e0bff417 	ldw	r2,-48(fp)
  436d94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  436d98:	e0800217 	ldw	r2,8(fp)
  436d9c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  436da0:	e0bfec8b 	ldhu	r2,-78(fp)
  436da4:	0000ae06 	br	437060 <OSEventPendMulti+0x704>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  436da8:	d0a71717 	ldw	r2,-25508(gp)
  436dac:	d0e71717 	ldw	r3,-25508(gp)
  436db0:	19000c03 	ldbu	r4,48(r3)
  436db4:	e0ffed03 	ldbu	r3,-76(fp)
  436db8:	20c6b03a 	or	r3,r4,r3
  436dbc:	1809883a 	mov	r4,r3
  436dc0:	00ffe004 	movi	r3,-128
  436dc4:	20c6b03a 	or	r3,r4,r3
  436dc8:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  436dcc:	d0a71717 	ldw	r2,-25508(gp)
  436dd0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  436dd4:	d0a71717 	ldw	r2,-25508(gp)
  436dd8:	e0ffff0b 	ldhu	r3,-4(fp)
  436ddc:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  436de0:	e13ffc17 	ldw	r4,-16(fp)
  436de4:	0437c2c0 	call	437c2c <OS_EventTaskWaitMulti>
  436de8:	e0bfee17 	ldw	r2,-72(fp)
  436dec:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  436df0:	0005303a 	rdctl	r2,status
  436df4:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  436df8:	e0fff617 	ldw	r3,-40(fp)
  436dfc:	00bfff84 	movi	r2,-2
  436e00:	1884703a 	and	r2,r3,r2
  436e04:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  436e08:	e0bff517 	ldw	r2,-44(fp)
  436e0c:	1080004c 	andi	r2,r2,1
  436e10:	e0fff617 	ldw	r3,-40(fp)
  436e14:	1884b03a 	or	r2,r3,r2
  436e18:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  436e1c:	e0bff617 	ldw	r2,-40(fp)
  436e20:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  436e24:	04383a80 	call	4383a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  436e28:	0005303a 	rdctl	r2,status
  436e2c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  436e30:	e0fff717 	ldw	r3,-36(fp)
  436e34:	00bfff84 	movi	r2,-2
  436e38:	1884703a 	and	r2,r3,r2
  436e3c:	1001703a 	wrctl	status,r2
  
  return context;
  436e40:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  436e44:	e0bfee15 	stw	r2,-72(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  436e48:	d0a71717 	ldw	r2,-25508(gp)
  436e4c:	10800c43 	ldbu	r2,49(r2)
  436e50:	10803fcc 	andi	r2,r2,255
  436e54:	10000226 	beq	r2,zero,436e60 <OSEventPendMulti+0x504>
  436e58:	108000a0 	cmpeqi	r2,r2,2
  436e5c:	10001926 	beq	r2,zero,436ec4 <OSEventPendMulti+0x568>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  436e60:	d0a71717 	ldw	r2,-25508(gp)
  436e64:	10800717 	ldw	r2,28(r2)
  436e68:	e0bfeb15 	stw	r2,-84(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  436e6c:	e0bfeb17 	ldw	r2,-84(fp)
  436e70:	10000c26 	beq	r2,zero,436ea4 <OSEventPendMulti+0x548>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  436e74:	e0bffd17 	ldw	r2,-12(fp)
  436e78:	e0ffeb17 	ldw	r3,-84(fp)
  436e7c:	10c00015 	stw	r3,0(r2)
  436e80:	e0bffd17 	ldw	r2,-12(fp)
  436e84:	10800104 	addi	r2,r2,4
  436e88:	e0bffd15 	stw	r2,-12(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  436e8c:	e0bffd17 	ldw	r2,-12(fp)
  436e90:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  436e94:	e0bfec8b 	ldhu	r2,-78(fp)
  436e98:	10800044 	addi	r2,r2,1
  436e9c:	e0bfec8d 	sth	r2,-78(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
  436ea0:	00000d06 	br	436ed8 <OSEventPendMulti+0x57c>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  436ea4:	d0a71717 	ldw	r2,-25508(gp)
  436ea8:	00c00044 	movi	r3,1
  436eac:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  436eb0:	d0a71717 	ldw	r2,-25508(gp)
  436eb4:	1009883a 	mov	r4,r2
  436eb8:	e17ffc17 	ldw	r5,-16(fp)
  436ebc:	0437e240 	call	437e24 <OS_EventTaskRemoveMulti>
             }
			 break;
  436ec0:	00000506 	br	436ed8 <OSEventPendMulti+0x57c>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  436ec4:	d0a71717 	ldw	r2,-25508(gp)
  436ec8:	1009883a 	mov	r4,r2
  436ecc:	e17ffc17 	ldw	r5,-16(fp)
  436ed0:	0437e240 	call	437e24 <OS_EventTaskRemoveMulti>
             break;
  436ed4:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
  436ed8:	d0a71717 	ldw	r2,-25508(gp)
  436edc:	10800c43 	ldbu	r2,49(r2)
  436ee0:	10803fcc 	andi	r2,r2,255
  436ee4:	10000326 	beq	r2,zero,436ef4 <OSEventPendMulti+0x598>
  436ee8:	108000a0 	cmpeqi	r2,r2,2
  436eec:	1000301e 	bne	r2,zero,436fb0 <OSEventPendMulti+0x654>
  436ef0:	00003806 	br	436fd4 <OSEventPendMulti+0x678>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  436ef4:	e0bfeb17 	ldw	r2,-84(fp)
  436ef8:	10800003 	ldbu	r2,0(r2)
  436efc:	10803fcc 	andi	r2,r2,255
  436f00:	0080120e 	bge	zero,r2,436f4c <OSEventPendMulti+0x5f0>
  436f04:	10c000d0 	cmplti	r3,r2,3
  436f08:	1800081e 	bne	r3,zero,436f2c <OSEventPendMulti+0x5d0>
  436f0c:	108000e0 	cmpeqi	r2,r2,3
  436f10:	10000e26 	beq	r2,zero,436f4c <OSEventPendMulti+0x5f0>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  436f14:	e0bffe17 	ldw	r2,-8(fp)
  436f18:	10000015 	stw	zero,0(r2)
  436f1c:	e0bffe17 	ldw	r2,-8(fp)
  436f20:	10800104 	addi	r2,r2,4
  436f24:	e0bffe15 	stw	r2,-8(fp)
                      break;
  436f28:	00001e06 	br	436fa4 <OSEventPendMulti+0x648>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  436f2c:	d0a71717 	ldw	r2,-25508(gp)
  436f30:	10c00917 	ldw	r3,36(r2)
  436f34:	e0bffe17 	ldw	r2,-8(fp)
  436f38:	10c00015 	stw	r3,0(r2)
  436f3c:	e0bffe17 	ldw	r2,-8(fp)
  436f40:	10800104 	addi	r2,r2,4
  436f44:	e0bffe15 	stw	r2,-8(fp)
                      break;
  436f48:	00001606 	br	436fa4 <OSEventPendMulti+0x648>
  436f4c:	e0bfee17 	ldw	r2,-72(fp)
  436f50:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  436f54:	0005303a 	rdctl	r2,status
  436f58:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  436f5c:	e0fff917 	ldw	r3,-28(fp)
  436f60:	00bfff84 	movi	r2,-2
  436f64:	1884703a 	and	r2,r3,r2
  436f68:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  436f6c:	e0bff817 	ldw	r2,-32(fp)
  436f70:	1080004c 	andi	r2,r2,1
  436f74:	e0fff917 	ldw	r3,-28(fp)
  436f78:	1884b03a 	or	r2,r3,r2
  436f7c:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  436f80:	e0bff917 	ldw	r2,-28(fp)
  436f84:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  436f88:	e0bffd17 	ldw	r2,-12(fp)
  436f8c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  436f90:	e0800217 	ldw	r2,8(fp)
  436f94:	00c00044 	movi	r3,1
  436f98:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
  436f9c:	e0bfec8b 	ldhu	r2,-78(fp)
  436fa0:	00002f06 	br	437060 <OSEventPendMulti+0x704>
             }
            *perr = OS_ERR_NONE;
  436fa4:	e0800217 	ldw	r2,8(fp)
  436fa8:	10000005 	stb	zero,0(r2)
             break;
  436fac:	00001206 	br	436ff8 <OSEventPendMulti+0x69c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  436fb0:	e0bffe17 	ldw	r2,-8(fp)
  436fb4:	10000015 	stw	zero,0(r2)
  436fb8:	e0bffe17 	ldw	r2,-8(fp)
  436fbc:	10800104 	addi	r2,r2,4
  436fc0:	e0bffe15 	stw	r2,-8(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  436fc4:	e0800217 	ldw	r2,8(fp)
  436fc8:	00c00384 	movi	r3,14
  436fcc:	10c00005 	stb	r3,0(r2)
             break;
  436fd0:	00000906 	br	436ff8 <OSEventPendMulti+0x69c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  436fd4:	e0bffe17 	ldw	r2,-8(fp)
  436fd8:	10000015 	stw	zero,0(r2)
  436fdc:	e0bffe17 	ldw	r2,-8(fp)
  436fe0:	10800104 	addi	r2,r2,4
  436fe4:	e0bffe15 	stw	r2,-8(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  436fe8:	e0800217 	ldw	r2,8(fp)
  436fec:	00c00284 	movi	r3,10
  436ff0:	10c00005 	stb	r3,0(r2)
             break;
  436ff4:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  436ff8:	d0a71717 	ldw	r2,-25508(gp)
  436ffc:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  437000:	d0a71717 	ldw	r2,-25508(gp)
  437004:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  437008:	d0a71717 	ldw	r2,-25508(gp)
  43700c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  437010:	d0a71717 	ldw	r2,-25508(gp)
  437014:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  437018:	d0a71717 	ldw	r2,-25508(gp)
  43701c:	10000915 	stw	zero,36(r2)
  437020:	e0bfee17 	ldw	r2,-72(fp)
  437024:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  437028:	0005303a 	rdctl	r2,status
  43702c:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  437030:	e0fffb17 	ldw	r3,-20(fp)
  437034:	00bfff84 	movi	r2,-2
  437038:	1884703a 	and	r2,r3,r2
  43703c:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  437040:	e0bffa17 	ldw	r2,-24(fp)
  437044:	1080004c 	andi	r2,r2,1
  437048:	e0fffb17 	ldw	r3,-20(fp)
  43704c:	1884b03a 	or	r2,r3,r2
  437050:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  437054:	e0bffb17 	ldw	r2,-20(fp)
  437058:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  43705c:	e0bfec8b 	ldhu	r2,-78(fp)
}
  437060:	e037883a 	mov	sp,fp
  437064:	dfc00117 	ldw	ra,4(sp)
  437068:	df000017 	ldw	fp,0(sp)
  43706c:	dec00204 	addi	sp,sp,8
  437070:	f800283a 	ret

00437074 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  437074:	defffe04 	addi	sp,sp,-8
  437078:	dfc00115 	stw	ra,4(sp)
  43707c:	df000015 	stw	fp,0(sp)
  437080:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  437084:	04424ec0 	call	4424ec <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  437088:	04380600 	call	438060 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  43708c:	04380a40 	call	4380a4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  437090:	04382080 	call	438208 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  437094:	0437f840 	call	437f84 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  437098:	043a8880 	call	43a888 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  43709c:	043b35c0 	call	43b35c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  4370a0:	043c9cc0 	call	43c9cc <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  4370a4:	04381100 	call	438110 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  4370a8:	043818c0 	call	43818c <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  4370ac:	04425080 	call	442508 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  4370b0:	0438b800 	call	438b80 <OSDebugInit>
#endif
}
  4370b4:	e037883a 	mov	sp,fp
  4370b8:	dfc00117 	ldw	ra,4(sp)
  4370bc:	df000017 	ldw	fp,0(sp)
  4370c0:	dec00204 	addi	sp,sp,8
  4370c4:	f800283a 	ret

004370c8 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  4370c8:	defffb04 	addi	sp,sp,-20
  4370cc:	df000415 	stw	fp,16(sp)
  4370d0:	df000404 	addi	fp,sp,16
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  4370d4:	e03ffc15 	stw	zero,-16(fp)
#endif

    if (OSRunning == OS_TRUE) {
  4370d8:	d0a70843 	ldbu	r2,-25567(gp)
  4370dc:	10803fcc 	andi	r2,r2,255
  4370e0:	10800058 	cmpnei	r2,r2,1
  4370e4:	10001e1e 	bne	r2,zero,437160 <OSIntEnter+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4370e8:	0005303a 	rdctl	r2,status
  4370ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4370f0:	e0fffd17 	ldw	r3,-12(fp)
  4370f4:	00bfff84 	movi	r2,-2
  4370f8:	1884703a 	and	r2,r3,r2
  4370fc:	1001703a 	wrctl	status,r2
  
  return context;
  437100:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
  437104:	e0bffc15 	stw	r2,-16(fp)
        if (OSIntNesting < 255u) {
  437108:	d0a71603 	ldbu	r2,-25512(gp)
  43710c:	10803fcc 	andi	r2,r2,255
  437110:	10803fe0 	cmpeqi	r2,r2,255
  437114:	1000031e 	bne	r2,zero,437124 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  437118:	d0a71603 	ldbu	r2,-25512(gp)
  43711c:	10800044 	addi	r2,r2,1
  437120:	d0a71605 	stb	r2,-25512(gp)
  437124:	e0bffc17 	ldw	r2,-16(fp)
  437128:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43712c:	0005303a 	rdctl	r2,status
  437130:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  437134:	e0ffff17 	ldw	r3,-4(fp)
  437138:	00bfff84 	movi	r2,-2
  43713c:	1884703a 	and	r2,r3,r2
  437140:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  437144:	e0bffe17 	ldw	r2,-8(fp)
  437148:	1080004c 	andi	r2,r2,1
  43714c:	e0ffff17 	ldw	r3,-4(fp)
  437150:	1884b03a 	or	r2,r3,r2
  437154:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  437158:	e0bfff17 	ldw	r2,-4(fp)
  43715c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  437160:	e037883a 	mov	sp,fp
  437164:	df000017 	ldw	fp,0(sp)
  437168:	dec00104 	addi	sp,sp,4
  43716c:	f800283a 	ret

00437170 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  437170:	defff604 	addi	sp,sp,-40
  437174:	dfc00915 	stw	ra,36(sp)
  437178:	df000815 	stw	fp,32(sp)
  43717c:	df000804 	addi	fp,sp,32
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  437180:	e03ff815 	stw	zero,-32(fp)
#endif



    if (OSRunning == OS_TRUE) {
  437184:	d0a70843 	ldbu	r2,-25567(gp)
  437188:	10803fcc 	andi	r2,r2,255
  43718c:	10800058 	cmpnei	r2,r2,1
  437190:	1000611e 	bne	r2,zero,437318 <OSIntExit+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  437194:	0005303a 	rdctl	r2,status
  437198:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43719c:	e0fffd17 	ldw	r3,-12(fp)
  4371a0:	00bfff84 	movi	r2,-2
  4371a4:	1884703a 	and	r2,r3,r2
  4371a8:	1001703a 	wrctl	status,r2
  
  return context;
  4371ac:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
  4371b0:	e0bff815 	stw	r2,-32(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  4371b4:	d0a71603 	ldbu	r2,-25512(gp)
  4371b8:	10803fcc 	andi	r2,r2,255
  4371bc:	10000326 	beq	r2,zero,4371cc <OSIntExit+0x5c>
            OSIntNesting--;
  4371c0:	d0a71603 	ldbu	r2,-25512(gp)
  4371c4:	10bfffc4 	addi	r2,r2,-1
  4371c8:	d0a71605 	stb	r2,-25512(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  4371cc:	d0a71603 	ldbu	r2,-25512(gp)
  4371d0:	10803fcc 	andi	r2,r2,255
  4371d4:	1000411e 	bne	r2,zero,4372dc <OSIntExit+0x16c>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  4371d8:	d0a70803 	ldbu	r2,-25568(gp)
  4371dc:	10803fcc 	andi	r2,r2,255
  4371e0:	10003e1e 	bne	r2,zero,4372dc <OSIntExit+0x16c>
                OS_SchedNew();
  4371e4:	04384a00 	call	4384a0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  4371e8:	d0e70a03 	ldbu	r3,-25560(gp)
  4371ec:	d0a70a43 	ldbu	r2,-25559(gp)
  4371f0:	18c03fcc 	andi	r3,r3,255
  4371f4:	10803fcc 	andi	r2,r2,255
  4371f8:	18803826 	beq	r3,r2,4372dc <OSIntExit+0x16c>
                	//preemption is occuring.
                	//pause the task in the fingerprint unit

                	//Is this a critical task?
                	//Here we pause the task
                	if(OSPrioCur < 16){
  4371fc:	d0a70a43 	ldbu	r2,-25559(gp)
  437200:	10803fcc 	andi	r2,r2,255
  437204:	10800428 	cmpgeui	r2,r2,16
  437208:	10000f1e 	bne	r2,zero,437248 <OSIntExit+0xd8>

                		INT32U* fprint_pause_reg = (INT32U*)(0x8100000 \
  43720c:	00820434 	movhi	r2,2064
  437210:	10800104 	addi	r2,r2,4
  437214:	e0bff915 	stw	r2,-28(fp)
                												+ 4);
                		INT32U x = *fprint_pause_reg;
  437218:	e0bff917 	ldw	r2,-28(fp)
  43721c:	10800017 	ldw	r2,0(r2)
  437220:	e0bffa15 	stw	r2,-24(fp)
                		*fprint_pause_reg = x | (1 << OSPrioCur);
  437224:	d0a70a43 	ldbu	r2,-25559(gp)
  437228:	10803fcc 	andi	r2,r2,255
  43722c:	00c00044 	movi	r3,1
  437230:	1884983a 	sll	r2,r3,r2
  437234:	1007883a 	mov	r3,r2
  437238:	e0bffa17 	ldw	r2,-24(fp)
  43723c:	1886b03a 	or	r3,r3,r2
  437240:	e0bff917 	ldw	r2,-28(fp)
  437244:	10c00015 	stw	r3,0(r2)


                	}

                	OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  437248:	d0a70a03 	ldbu	r2,-25560(gp)
  43724c:	10803fcc 	andi	r2,r2,255
  437250:	00c01174 	movhi	r3,69
  437254:	18ead504 	addi	r3,r3,-21676
  437258:	1085883a 	add	r2,r2,r2
  43725c:	1085883a 	add	r2,r2,r2
  437260:	1885883a 	add	r2,r3,r2
  437264:	10800017 	ldw	r2,0(r2)
  437268:	d0a71215 	stw	r2,-25528(gp)

#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  43726c:	d0a71217 	ldw	r2,-25528(gp)
  437270:	10c00e17 	ldw	r3,56(r2)
  437274:	18c00044 	addi	r3,r3,1
  437278:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  43727c:	d0a70d17 	ldw	r2,-25548(gp)
  437280:	10800044 	addi	r2,r2,1
  437284:	d0a70d15 	stw	r2,-25548(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  437288:	04420940 	call	442094 <OSCtxSw>

                    //Here is where we resume the task
                    if(OSPrioCur < 16){
  43728c:	d0a70a43 	ldbu	r2,-25559(gp)
  437290:	10803fcc 	andi	r2,r2,255
  437294:	10800428 	cmpgeui	r2,r2,16
  437298:	1000101e 	bne	r2,zero,4372dc <OSIntExit+0x16c>

                    	INT32U* fprint_pause_reg = (INT32U*)(0x8100000 \
  43729c:	00820434 	movhi	r2,2064
  4372a0:	10800104 	addi	r2,r2,4
  4372a4:	e0bffb15 	stw	r2,-20(fp)
                                    							+ 4);
                    	INT32U x = *fprint_pause_reg;
  4372a8:	e0bffb17 	ldw	r2,-20(fp)
  4372ac:	10800017 	ldw	r2,0(r2)
  4372b0:	e0bffc15 	stw	r2,-16(fp)
                    	*fprint_pause_reg = x & ~(1 << OSPrioCur);
  4372b4:	d0a70a43 	ldbu	r2,-25559(gp)
  4372b8:	10803fcc 	andi	r2,r2,255
  4372bc:	00c00044 	movi	r3,1
  4372c0:	1884983a 	sll	r2,r3,r2
  4372c4:	0084303a 	nor	r2,zero,r2
  4372c8:	1007883a 	mov	r3,r2
  4372cc:	e0bffc17 	ldw	r2,-16(fp)
  4372d0:	1886703a 	and	r3,r3,r2
  4372d4:	e0bffb17 	ldw	r2,-20(fp)
  4372d8:	10c00015 	stw	r3,0(r2)
  4372dc:	e0bff817 	ldw	r2,-32(fp)
  4372e0:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4372e4:	0005303a 	rdctl	r2,status
  4372e8:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4372ec:	e0ffff17 	ldw	r3,-4(fp)
  4372f0:	00bfff84 	movi	r2,-2
  4372f4:	1884703a 	and	r2,r3,r2
  4372f8:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4372fc:	e0bffe17 	ldw	r2,-8(fp)
  437300:	1080004c 	andi	r2,r2,1
  437304:	e0ffff17 	ldw	r3,-4(fp)
  437308:	1884b03a 	or	r2,r3,r2
  43730c:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  437310:	e0bfff17 	ldw	r2,-4(fp)
  437314:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  437318:	e037883a 	mov	sp,fp
  43731c:	dfc00117 	ldw	ra,4(sp)
  437320:	df000017 	ldw	fp,0(sp)
  437324:	dec00204 	addi	sp,sp,8
  437328:	f800283a 	ret

0043732c <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  43732c:	defffb04 	addi	sp,sp,-20
  437330:	df000415 	stw	fp,16(sp)
  437334:	df000404 	addi	fp,sp,16
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  437338:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  43733c:	d0a70843 	ldbu	r2,-25567(gp)
  437340:	10803fcc 	andi	r2,r2,255
  437344:	10800058 	cmpnei	r2,r2,1
  437348:	1000211e 	bne	r2,zero,4373d0 <OSSchedLock+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43734c:	0005303a 	rdctl	r2,status
  437350:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  437354:	e0fffd17 	ldw	r3,-12(fp)
  437358:	00bfff84 	movi	r2,-2
  43735c:	1884703a 	and	r2,r3,r2
  437360:	1001703a 	wrctl	status,r2
  
  return context;
  437364:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
  437368:	e0bffc15 	stw	r2,-16(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  43736c:	d0a71603 	ldbu	r2,-25512(gp)
  437370:	10803fcc 	andi	r2,r2,255
  437374:	1000071e 	bne	r2,zero,437394 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  437378:	d0a70803 	ldbu	r2,-25568(gp)
  43737c:	10803fcc 	andi	r2,r2,255
  437380:	10803fe0 	cmpeqi	r2,r2,255
  437384:	1000031e 	bne	r2,zero,437394 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  437388:	d0a70803 	ldbu	r2,-25568(gp)
  43738c:	10800044 	addi	r2,r2,1
  437390:	d0a70805 	stb	r2,-25568(gp)
  437394:	e0bffc17 	ldw	r2,-16(fp)
  437398:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43739c:	0005303a 	rdctl	r2,status
  4373a0:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4373a4:	e0ffff17 	ldw	r3,-4(fp)
  4373a8:	00bfff84 	movi	r2,-2
  4373ac:	1884703a 	and	r2,r3,r2
  4373b0:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4373b4:	e0bffe17 	ldw	r2,-8(fp)
  4373b8:	1080004c 	andi	r2,r2,1
  4373bc:	e0ffff17 	ldw	r3,-4(fp)
  4373c0:	1884b03a 	or	r2,r3,r2
  4373c4:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  4373c8:	e0bfff17 	ldw	r2,-4(fp)
  4373cc:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  4373d0:	e037883a 	mov	sp,fp
  4373d4:	df000017 	ldw	fp,0(sp)
  4373d8:	dec00104 	addi	sp,sp,4
  4373dc:	f800283a 	ret

004373e0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  4373e0:	defff404 	addi	sp,sp,-48
  4373e4:	dfc00b15 	stw	ra,44(sp)
  4373e8:	df000a15 	stw	fp,40(sp)
  4373ec:	df000a04 	addi	fp,sp,40
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  4373f0:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  4373f4:	d0a70843 	ldbu	r2,-25567(gp)
  4373f8:	10803fcc 	andi	r2,r2,255
  4373fc:	10800058 	cmpnei	r2,r2,1
  437400:	1000541e 	bne	r2,zero,437554 <OSSchedUnlock+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  437404:	0005303a 	rdctl	r2,status
  437408:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43740c:	e0fff717 	ldw	r3,-36(fp)
  437410:	00bfff84 	movi	r2,-2
  437414:	1884703a 	and	r2,r3,r2
  437418:	1001703a 	wrctl	status,r2
  
  return context;
  43741c:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  437420:	e0bff615 	stw	r2,-40(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  437424:	d0a70803 	ldbu	r2,-25568(gp)
  437428:	10803fcc 	andi	r2,r2,255
  43742c:	10003a26 	beq	r2,zero,437518 <OSSchedUnlock+0x138>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  437430:	d0a70803 	ldbu	r2,-25568(gp)
  437434:	10bfffc4 	addi	r2,r2,-1
  437438:	d0a70805 	stb	r2,-25568(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  43743c:	d0a70803 	ldbu	r2,-25568(gp)
  437440:	10803fcc 	andi	r2,r2,255
  437444:	1000241e 	bne	r2,zero,4374d8 <OSSchedUnlock+0xf8>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  437448:	d0a71603 	ldbu	r2,-25512(gp)
  43744c:	10803fcc 	andi	r2,r2,255
  437450:	1000111e 	bne	r2,zero,437498 <OSSchedUnlock+0xb8>
  437454:	e0bff617 	ldw	r2,-40(fp)
  437458:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43745c:	0005303a 	rdctl	r2,status
  437460:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  437464:	e0fff917 	ldw	r3,-28(fp)
  437468:	00bfff84 	movi	r2,-2
  43746c:	1884703a 	and	r2,r3,r2
  437470:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  437474:	e0bff817 	ldw	r2,-32(fp)
  437478:	1080004c 	andi	r2,r2,1
  43747c:	e0fff917 	ldw	r3,-28(fp)
  437480:	1884b03a 	or	r2,r3,r2
  437484:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  437488:	e0bff917 	ldw	r2,-28(fp)
  43748c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  437490:	04383a80 	call	4383a8 <OS_Sched>
  437494:	00002f06 	br	437554 <OSSchedUnlock+0x174>
  437498:	e0bff617 	ldw	r2,-40(fp)
  43749c:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4374a0:	0005303a 	rdctl	r2,status
  4374a4:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4374a8:	e0fffb17 	ldw	r3,-20(fp)
  4374ac:	00bfff84 	movi	r2,-2
  4374b0:	1884703a 	and	r2,r3,r2
  4374b4:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4374b8:	e0bffa17 	ldw	r2,-24(fp)
  4374bc:	1080004c 	andi	r2,r2,1
  4374c0:	e0fffb17 	ldw	r3,-20(fp)
  4374c4:	1884b03a 	or	r2,r3,r2
  4374c8:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  4374cc:	e0bffb17 	ldw	r2,-20(fp)
  4374d0:	1001703a 	wrctl	status,r2
  4374d4:	00001f06 	br	437554 <OSSchedUnlock+0x174>
  4374d8:	e0bff617 	ldw	r2,-40(fp)
  4374dc:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4374e0:	0005303a 	rdctl	r2,status
  4374e4:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4374e8:	e0fffd17 	ldw	r3,-12(fp)
  4374ec:	00bfff84 	movi	r2,-2
  4374f0:	1884703a 	and	r2,r3,r2
  4374f4:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4374f8:	e0bffc17 	ldw	r2,-16(fp)
  4374fc:	1080004c 	andi	r2,r2,1
  437500:	e0fffd17 	ldw	r3,-12(fp)
  437504:	1884b03a 	or	r2,r3,r2
  437508:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43750c:	e0bffd17 	ldw	r2,-12(fp)
  437510:	1001703a 	wrctl	status,r2
  437514:	00000f06 	br	437554 <OSSchedUnlock+0x174>
  437518:	e0bff617 	ldw	r2,-40(fp)
  43751c:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  437520:	0005303a 	rdctl	r2,status
  437524:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  437528:	e0ffff17 	ldw	r3,-4(fp)
  43752c:	00bfff84 	movi	r2,-2
  437530:	1884703a 	and	r2,r3,r2
  437534:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  437538:	e0bffe17 	ldw	r2,-8(fp)
  43753c:	1080004c 	andi	r2,r2,1
  437540:	e0ffff17 	ldw	r3,-4(fp)
  437544:	1884b03a 	or	r2,r3,r2
  437548:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  43754c:	e0bfff17 	ldw	r2,-4(fp)
  437550:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  437554:	e037883a 	mov	sp,fp
  437558:	dfc00117 	ldw	ra,4(sp)
  43755c:	df000017 	ldw	fp,0(sp)
  437560:	dec00204 	addi	sp,sp,8
  437564:	f800283a 	ret

00437568 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  437568:	defffe04 	addi	sp,sp,-8
  43756c:	dfc00115 	stw	ra,4(sp)
  437570:	df000015 	stw	fp,0(sp)
  437574:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  437578:	d0a70843 	ldbu	r2,-25567(gp)
  43757c:	10803fcc 	andi	r2,r2,255
  437580:	10000f1e 	bne	r2,zero,4375c0 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  437584:	04384a00 	call	4384a0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  437588:	d0a70a03 	ldbu	r2,-25560(gp)
  43758c:	d0a70a45 	stb	r2,-25559(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  437590:	d0a70a03 	ldbu	r2,-25560(gp)
  437594:	10803fcc 	andi	r2,r2,255
  437598:	00c01174 	movhi	r3,69
  43759c:	18ead504 	addi	r3,r3,-21676
  4375a0:	1085883a 	add	r2,r2,r2
  4375a4:	1085883a 	add	r2,r2,r2
  4375a8:	1885883a 	add	r2,r3,r2
  4375ac:	10800017 	ldw	r2,0(r2)
  4375b0:	d0a71215 	stw	r2,-25528(gp)
        OSTCBCur      = OSTCBHighRdy;
  4375b4:	d0a71217 	ldw	r2,-25528(gp)
  4375b8:	d0a71715 	stw	r2,-25508(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  4375bc:	04421200 	call	442120 <OSStartHighRdy>
    }
}
  4375c0:	e037883a 	mov	sp,fp
  4375c4:	dfc00117 	ldw	ra,4(sp)
  4375c8:	df000017 	ldw	fp,0(sp)
  4375cc:	dec00204 	addi	sp,sp,8
  4375d0:	f800283a 	ret

004375d4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  4375d4:	defff704 	addi	sp,sp,-36
  4375d8:	dfc00815 	stw	ra,32(sp)
  4375dc:	df000715 	stw	fp,28(sp)
  4375e0:	df000704 	addi	fp,sp,28
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  4375e4:	e03ff915 	stw	zero,-28(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  4375e8:	01000084 	movi	r4,2
  4375ec:	043f8b00 	call	43f8b0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4375f0:	0005303a 	rdctl	r2,status
  4375f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4375f8:	e0fffa17 	ldw	r3,-24(fp)
  4375fc:	00bfff84 	movi	r2,-2
  437600:	1884703a 	and	r2,r3,r2
  437604:	1001703a 	wrctl	status,r2
  
  return context;
  437608:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
  43760c:	e0bff915 	stw	r2,-28(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  437610:	d0270915 	stw	zero,-25564(gp)
  437614:	e0bff917 	ldw	r2,-28(fp)
  437618:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43761c:	0005303a 	rdctl	r2,status
  437620:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  437624:	e0fffc17 	ldw	r3,-16(fp)
  437628:	00bfff84 	movi	r2,-2
  43762c:	1884703a 	and	r2,r3,r2
  437630:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  437634:	e0bffb17 	ldw	r2,-20(fp)
  437638:	1080004c 	andi	r2,r2,1
  43763c:	e0fffc17 	ldw	r3,-16(fp)
  437640:	1884b03a 	or	r2,r3,r2
  437644:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  437648:	e0bffc17 	ldw	r2,-16(fp)
  43764c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  437650:	01000284 	movi	r4,10
  437654:	043f8b00 	call	43f8b0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  437658:	0005303a 	rdctl	r2,status
  43765c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  437660:	e0fffd17 	ldw	r3,-12(fp)
  437664:	00bfff84 	movi	r2,-2
  437668:	1884703a 	and	r2,r3,r2
  43766c:	1001703a 	wrctl	status,r2
  
  return context;
  437670:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
  437674:	e0bff915 	stw	r2,-28(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  437678:	d0a70917 	ldw	r2,-25564(gp)
  43767c:	d0a70e15 	stw	r2,-25544(gp)
    OSStatRdy    = OS_TRUE;
  437680:	00800044 	movi	r2,1
  437684:	d0a71a05 	stb	r2,-25496(gp)
  437688:	e0bff917 	ldw	r2,-28(fp)
  43768c:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  437690:	0005303a 	rdctl	r2,status
  437694:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  437698:	e0ffff17 	ldw	r3,-4(fp)
  43769c:	00bfff84 	movi	r2,-2
  4376a0:	1884703a 	and	r2,r3,r2
  4376a4:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4376a8:	e0bffe17 	ldw	r2,-8(fp)
  4376ac:	1080004c 	andi	r2,r2,1
  4376b0:	e0ffff17 	ldw	r3,-4(fp)
  4376b4:	1884b03a 	or	r2,r3,r2
  4376b8:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  4376bc:	e0bfff17 	ldw	r2,-4(fp)
  4376c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  4376c4:	e037883a 	mov	sp,fp
  4376c8:	dfc00117 	ldw	ra,4(sp)
  4376cc:	df000017 	ldw	fp,0(sp)
  4376d0:	dec00204 	addi	sp,sp,8
  4376d4:	f800283a 	ret

004376d8 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  4376d8:	defff504 	addi	sp,sp,-44
  4376dc:	dfc00a15 	stw	ra,40(sp)
  4376e0:	df000915 	stw	fp,36(sp)
  4376e4:	df000904 	addi	fp,sp,36
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  4376e8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  4376ec:	04424d00 	call	4424d0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4376f0:	0005303a 	rdctl	r2,status
  4376f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4376f8:	e0fffa17 	ldw	r3,-24(fp)
  4376fc:	00bfff84 	movi	r2,-2
  437700:	1884703a 	and	r2,r3,r2
  437704:	1001703a 	wrctl	status,r2
  
  return context;
  437708:	e0bffa17 	ldw	r2,-24(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  43770c:	e0bff915 	stw	r2,-28(fp)
    OSTime++;
  437710:	d0a71817 	ldw	r2,-25504(gp)
  437714:	10800044 	addi	r2,r2,1
  437718:	d0a71815 	stw	r2,-25504(gp)
  43771c:	e0bff917 	ldw	r2,-28(fp)
  437720:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  437724:	0005303a 	rdctl	r2,status
  437728:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43772c:	e0fffc17 	ldw	r3,-16(fp)
  437730:	00bfff84 	movi	r2,-2
  437734:	1884703a 	and	r2,r3,r2
  437738:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43773c:	e0bffb17 	ldw	r2,-20(fp)
  437740:	1080004c 	andi	r2,r2,1
  437744:	e0fffc17 	ldw	r3,-16(fp)
  437748:	1884b03a 	or	r2,r3,r2
  43774c:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  437750:	e0bffc17 	ldw	r2,-16(fp)
  437754:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  437758:	d0a70843 	ldbu	r2,-25567(gp)
  43775c:	10803fcc 	andi	r2,r2,255
  437760:	10800058 	cmpnei	r2,r2,1
  437764:	1000751e 	bne	r2,zero,43793c <OSTimeTick+0x264>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  437768:	d0a70c03 	ldbu	r2,-25552(gp)
  43776c:	10803fcc 	andi	r2,r2,255
  437770:	10c00060 	cmpeqi	r3,r2,1
  437774:	1800061e 	bne	r3,zero,437790 <OSTimeTick+0xb8>
  437778:	10c000a0 	cmpeqi	r3,r2,2
  43777c:	1800061e 	bne	r3,zero,437798 <OSTimeTick+0xc0>
  437780:	10000a1e 	bne	r2,zero,4377ac <OSTimeTick+0xd4>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  437784:	00800044 	movi	r2,1
  437788:	e0bff805 	stb	r2,-32(fp)
                 break;
  43778c:	00000b06 	br	4377bc <OSTimeTick+0xe4>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  437790:	e03ff805 	stb	zero,-32(fp)
                 break;
  437794:	00000906 	br	4377bc <OSTimeTick+0xe4>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  437798:	00800044 	movi	r2,1
  43779c:	e0bff805 	stb	r2,-32(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  4377a0:	00800044 	movi	r2,1
  4377a4:	d0a70c05 	stb	r2,-25552(gp)
                 break;
  4377a8:	00000406 	br	4377bc <OSTimeTick+0xe4>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  4377ac:	00800044 	movi	r2,1
  4377b0:	e0bff805 	stb	r2,-32(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  4377b4:	d0270c05 	stb	zero,-25552(gp)
                 break;
  4377b8:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  4377bc:	e0bff803 	ldbu	r2,-32(fp)
  4377c0:	10005d26 	beq	r2,zero,437938 <OSTimeTick+0x260>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  4377c4:	d0a70b17 	ldw	r2,-25556(gp)
  4377c8:	e0bff715 	stw	r2,-36(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  4377cc:	00005406 	br	437920 <OSTimeTick+0x248>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4377d0:	0005303a 	rdctl	r2,status
  4377d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4377d8:	e0fffd17 	ldw	r3,-12(fp)
  4377dc:	00bfff84 	movi	r2,-2
  4377e0:	1884703a 	and	r2,r3,r2
  4377e4:	1001703a 	wrctl	status,r2
  
  return context;
  4377e8:	e0bffd17 	ldw	r2,-12(fp)
            OS_ENTER_CRITICAL();
  4377ec:	e0bff915 	stw	r2,-28(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  4377f0:	e0bff717 	ldw	r2,-36(fp)
  4377f4:	10800b8b 	ldhu	r2,46(r2)
  4377f8:	10bfffcc 	andi	r2,r2,65535
  4377fc:	10003626 	beq	r2,zero,4378d8 <OSTimeTick+0x200>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  437800:	e0bff717 	ldw	r2,-36(fp)
  437804:	10800b8b 	ldhu	r2,46(r2)
  437808:	10bfffc4 	addi	r2,r2,-1
  43780c:	1007883a 	mov	r3,r2
  437810:	e0bff717 	ldw	r2,-36(fp)
  437814:	10c00b8d 	sth	r3,46(r2)
  437818:	e0bff717 	ldw	r2,-36(fp)
  43781c:	10800b8b 	ldhu	r2,46(r2)
  437820:	10bfffcc 	andi	r2,r2,65535
  437824:	10002c1e 	bne	r2,zero,4378d8 <OSTimeTick+0x200>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  437828:	e0bff717 	ldw	r2,-36(fp)
  43782c:	10800c03 	ldbu	r2,48(r2)
  437830:	10803fcc 	andi	r2,r2,255
  437834:	10800dcc 	andi	r2,r2,55
  437838:	10000b26 	beq	r2,zero,437868 <OSTimeTick+0x190>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  43783c:	e0bff717 	ldw	r2,-36(fp)
  437840:	10c00c03 	ldbu	r3,48(r2)
  437844:	00bff204 	movi	r2,-56
  437848:	1884703a 	and	r2,r3,r2
  43784c:	1007883a 	mov	r3,r2
  437850:	e0bff717 	ldw	r2,-36(fp)
  437854:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  437858:	e0bff717 	ldw	r2,-36(fp)
  43785c:	00c00044 	movi	r3,1
  437860:	10c00c45 	stb	r3,49(r2)
  437864:	00000206 	br	437870 <OSTimeTick+0x198>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  437868:	e0bff717 	ldw	r2,-36(fp)
  43786c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  437870:	e0bff717 	ldw	r2,-36(fp)
  437874:	10800c03 	ldbu	r2,48(r2)
  437878:	10803fcc 	andi	r2,r2,255
  43787c:	1080020c 	andi	r2,r2,8
  437880:	1000151e 	bne	r2,zero,4378d8 <OSTimeTick+0x200>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  437884:	e0bff717 	ldw	r2,-36(fp)
  437888:	10c00d83 	ldbu	r3,54(r2)
  43788c:	d0a71403 	ldbu	r2,-25520(gp)
  437890:	1884b03a 	or	r2,r3,r2
  437894:	d0a71405 	stb	r2,-25520(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  437898:	e0bff717 	ldw	r2,-36(fp)
  43789c:	10800d03 	ldbu	r2,52(r2)
  4378a0:	11003fcc 	andi	r4,r2,255
  4378a4:	e0bff717 	ldw	r2,-36(fp)
  4378a8:	10800d03 	ldbu	r2,52(r2)
  4378ac:	10c03fcc 	andi	r3,r2,255
  4378b0:	d0a71444 	addi	r2,gp,-25519
  4378b4:	1885883a 	add	r2,r3,r2
  4378b8:	10c00003 	ldbu	r3,0(r2)
  4378bc:	e0bff717 	ldw	r2,-36(fp)
  4378c0:	10800d43 	ldbu	r2,53(r2)
  4378c4:	1884b03a 	or	r2,r3,r2
  4378c8:	1007883a 	mov	r3,r2
  4378cc:	d0a71444 	addi	r2,gp,-25519
  4378d0:	2085883a 	add	r2,r4,r2
  4378d4:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  4378d8:	e0bff717 	ldw	r2,-36(fp)
  4378dc:	10800517 	ldw	r2,20(r2)
  4378e0:	e0bff715 	stw	r2,-36(fp)
  4378e4:	e0bff917 	ldw	r2,-28(fp)
  4378e8:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4378ec:	0005303a 	rdctl	r2,status
  4378f0:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4378f4:	e0ffff17 	ldw	r3,-4(fp)
  4378f8:	00bfff84 	movi	r2,-2
  4378fc:	1884703a 	and	r2,r3,r2
  437900:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  437904:	e0bffe17 	ldw	r2,-8(fp)
  437908:	1080004c 	andi	r2,r2,1
  43790c:	e0ffff17 	ldw	r3,-4(fp)
  437910:	1884b03a 	or	r2,r3,r2
  437914:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  437918:	e0bfff17 	ldw	r2,-4(fp)
  43791c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  437920:	e0bff717 	ldw	r2,-36(fp)
  437924:	10800c83 	ldbu	r2,50(r2)
  437928:	10803fcc 	andi	r2,r2,255
  43792c:	10800518 	cmpnei	r2,r2,20
  437930:	103fa71e 	bne	r2,zero,4377d0 <OSTimeTick+0xf8>
  437934:	00000106 	br	43793c <OSTimeTick+0x264>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
  437938:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  43793c:	e037883a 	mov	sp,fp
  437940:	dfc00117 	ldw	ra,4(sp)
  437944:	df000017 	ldw	fp,0(sp)
  437948:	dec00204 	addi	sp,sp,8
  43794c:	f800283a 	ret

00437950 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  437950:	deffff04 	addi	sp,sp,-4
  437954:	df000015 	stw	fp,0(sp)
  437958:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  43795c:	00804784 	movi	r2,286
}
  437960:	e037883a 	mov	sp,fp
  437964:	df000017 	ldw	fp,0(sp)
  437968:	dec00104 	addi	sp,sp,4
  43796c:	f800283a 	ret

00437970 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  437970:	deffff04 	addi	sp,sp,-4
  437974:	df000015 	stw	fp,0(sp)
  437978:	d839883a 	mov	fp,sp
}
  43797c:	e037883a 	mov	sp,fp
  437980:	df000017 	ldw	fp,0(sp)
  437984:	dec00104 	addi	sp,sp,4
  437988:	f800283a 	ret

0043798c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  43798c:	defff804 	addi	sp,sp,-32
  437990:	dfc00715 	stw	ra,28(sp)
  437994:	df000615 	stw	fp,24(sp)
  437998:	df000604 	addi	fp,sp,24
  43799c:	e13ffc15 	stw	r4,-16(fp)
  4379a0:	e17ffd15 	stw	r5,-12(fp)
  4379a4:	3007883a 	mov	r3,r6
  4379a8:	3805883a 	mov	r2,r7
  4379ac:	e0fffe05 	stb	r3,-8(fp)
  4379b0:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  4379b4:	e0bffc17 	ldw	r2,-16(fp)
  4379b8:	10800283 	ldbu	r2,10(r2)
  4379bc:	10803fcc 	andi	r2,r2,255
  4379c0:	00c01134 	movhi	r3,68
  4379c4:	18cfd204 	addi	r3,r3,16200
  4379c8:	1885883a 	add	r2,r3,r2
  4379cc:	10800003 	ldbu	r2,0(r2)
  4379d0:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  4379d4:	e0bffa03 	ldbu	r2,-24(fp)
  4379d8:	e0fffc17 	ldw	r3,-16(fp)
  4379dc:	1885883a 	add	r2,r3,r2
  4379e0:	10800204 	addi	r2,r2,8
  4379e4:	108000c3 	ldbu	r2,3(r2)
  4379e8:	10803fcc 	andi	r2,r2,255
  4379ec:	00c01134 	movhi	r3,68
  4379f0:	18cfd204 	addi	r3,r3,16200
  4379f4:	1885883a 	add	r2,r3,r2
  4379f8:	10800003 	ldbu	r2,0(r2)
  4379fc:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  437a00:	e0bffa03 	ldbu	r2,-24(fp)
  437a04:	100490fa 	slli	r2,r2,3
  437a08:	1007883a 	mov	r3,r2
  437a0c:	e0bffa43 	ldbu	r2,-23(fp)
  437a10:	1885883a 	add	r2,r3,r2
  437a14:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  437a18:	e0bffa83 	ldbu	r2,-22(fp)
  437a1c:	00c01174 	movhi	r3,69
  437a20:	18ead504 	addi	r3,r3,-21676
  437a24:	1085883a 	add	r2,r2,r2
  437a28:	1085883a 	add	r2,r2,r2
  437a2c:	1885883a 	add	r2,r3,r2
  437a30:	10800017 	ldw	r2,0(r2)
  437a34:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  437a38:	e0bffb17 	ldw	r2,-20(fp)
  437a3c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  437a40:	e0bffb17 	ldw	r2,-20(fp)
  437a44:	e0fffd17 	ldw	r3,-12(fp)
  437a48:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  437a4c:	e0bffb17 	ldw	r2,-20(fp)
  437a50:	10800c03 	ldbu	r2,48(r2)
  437a54:	1007883a 	mov	r3,r2
  437a58:	e0bffe03 	ldbu	r2,-8(fp)
  437a5c:	0084303a 	nor	r2,zero,r2
  437a60:	1884703a 	and	r2,r3,r2
  437a64:	1007883a 	mov	r3,r2
  437a68:	e0bffb17 	ldw	r2,-20(fp)
  437a6c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  437a70:	e0bffb17 	ldw	r2,-20(fp)
  437a74:	e0ffff03 	ldbu	r3,-4(fp)
  437a78:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  437a7c:	e0bffb17 	ldw	r2,-20(fp)
  437a80:	10800c03 	ldbu	r2,48(r2)
  437a84:	10803fcc 	andi	r2,r2,255
  437a88:	1080020c 	andi	r2,r2,8
  437a8c:	1000111e 	bne	r2,zero,437ad4 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  437a90:	e0bffb17 	ldw	r2,-20(fp)
  437a94:	10c00d83 	ldbu	r3,54(r2)
  437a98:	d0a71403 	ldbu	r2,-25520(gp)
  437a9c:	1884b03a 	or	r2,r3,r2
  437aa0:	d0a71405 	stb	r2,-25520(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  437aa4:	e13ffa03 	ldbu	r4,-24(fp)
  437aa8:	e0fffa03 	ldbu	r3,-24(fp)
  437aac:	d0a71444 	addi	r2,gp,-25519
  437ab0:	1885883a 	add	r2,r3,r2
  437ab4:	10c00003 	ldbu	r3,0(r2)
  437ab8:	e0bffb17 	ldw	r2,-20(fp)
  437abc:	10800d43 	ldbu	r2,53(r2)
  437ac0:	1884b03a 	or	r2,r3,r2
  437ac4:	1007883a 	mov	r3,r2
  437ac8:	d0a71444 	addi	r2,gp,-25519
  437acc:	2085883a 	add	r2,r4,r2
  437ad0:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  437ad4:	e13ffb17 	ldw	r4,-20(fp)
  437ad8:	e17ffc17 	ldw	r5,-16(fp)
  437adc:	0437d740 	call	437d74 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  437ae0:	e0bffb17 	ldw	r2,-20(fp)
  437ae4:	10800817 	ldw	r2,32(r2)
  437ae8:	10000826 	beq	r2,zero,437b0c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  437aec:	e0bffb17 	ldw	r2,-20(fp)
  437af0:	10800817 	ldw	r2,32(r2)
  437af4:	e13ffb17 	ldw	r4,-20(fp)
  437af8:	100b883a 	mov	r5,r2
  437afc:	0437e240 	call	437e24 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  437b00:	e0bffb17 	ldw	r2,-20(fp)
  437b04:	e0fffc17 	ldw	r3,-16(fp)
  437b08:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
  437b0c:	e0bffa83 	ldbu	r2,-22(fp)
}
  437b10:	e037883a 	mov	sp,fp
  437b14:	dfc00117 	ldw	ra,4(sp)
  437b18:	df000017 	ldw	fp,0(sp)
  437b1c:	dec00204 	addi	sp,sp,8
  437b20:	f800283a 	ret

00437b24 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  437b24:	defffd04 	addi	sp,sp,-12
  437b28:	df000215 	stw	fp,8(sp)
  437b2c:	df000204 	addi	fp,sp,8
  437b30:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  437b34:	d0a71717 	ldw	r2,-25508(gp)
  437b38:	e0ffff17 	ldw	r3,-4(fp)
  437b3c:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  437b40:	d0a71717 	ldw	r2,-25508(gp)
  437b44:	10800d03 	ldbu	r2,52(r2)
  437b48:	10803fcc 	andi	r2,r2,255
  437b4c:	d0e71717 	ldw	r3,-25508(gp)
  437b50:	18c00d03 	ldbu	r3,52(r3)
  437b54:	18c03fcc 	andi	r3,r3,255
  437b58:	e13fff17 	ldw	r4,-4(fp)
  437b5c:	20c7883a 	add	r3,r4,r3
  437b60:	18c00204 	addi	r3,r3,8
  437b64:	190000c3 	ldbu	r4,3(r3)
  437b68:	d0e71717 	ldw	r3,-25508(gp)
  437b6c:	18c00d43 	ldbu	r3,53(r3)
  437b70:	20c6b03a 	or	r3,r4,r3
  437b74:	e13fff17 	ldw	r4,-4(fp)
  437b78:	2085883a 	add	r2,r4,r2
  437b7c:	10800204 	addi	r2,r2,8
  437b80:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  437b84:	e0bfff17 	ldw	r2,-4(fp)
  437b88:	10c00283 	ldbu	r3,10(r2)
  437b8c:	d0a71717 	ldw	r2,-25508(gp)
  437b90:	10800d83 	ldbu	r2,54(r2)
  437b94:	1884b03a 	or	r2,r3,r2
  437b98:	1007883a 	mov	r3,r2
  437b9c:	e0bfff17 	ldw	r2,-4(fp)
  437ba0:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  437ba4:	d0a71717 	ldw	r2,-25508(gp)
  437ba8:	10800d03 	ldbu	r2,52(r2)
  437bac:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  437bb0:	e13ffe03 	ldbu	r4,-8(fp)
  437bb4:	e0fffe03 	ldbu	r3,-8(fp)
  437bb8:	d0a71444 	addi	r2,gp,-25519
  437bbc:	1885883a 	add	r2,r3,r2
  437bc0:	10800003 	ldbu	r2,0(r2)
  437bc4:	1007883a 	mov	r3,r2
  437bc8:	d0a71717 	ldw	r2,-25508(gp)
  437bcc:	10800d43 	ldbu	r2,53(r2)
  437bd0:	0084303a 	nor	r2,zero,r2
  437bd4:	1884703a 	and	r2,r3,r2
  437bd8:	1007883a 	mov	r3,r2
  437bdc:	d0a71444 	addi	r2,gp,-25519
  437be0:	2085883a 	add	r2,r4,r2
  437be4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  437be8:	e0fffe03 	ldbu	r3,-8(fp)
  437bec:	d0a71444 	addi	r2,gp,-25519
  437bf0:	1885883a 	add	r2,r3,r2
  437bf4:	10800003 	ldbu	r2,0(r2)
  437bf8:	10803fcc 	andi	r2,r2,255
  437bfc:	1000071e 	bne	r2,zero,437c1c <OS_EventTaskWait+0xf8>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  437c00:	d0a71717 	ldw	r2,-25508(gp)
  437c04:	10800d83 	ldbu	r2,54(r2)
  437c08:	0084303a 	nor	r2,zero,r2
  437c0c:	1007883a 	mov	r3,r2
  437c10:	d0a71403 	ldbu	r2,-25520(gp)
  437c14:	1884703a 	and	r2,r3,r2
  437c18:	d0a71405 	stb	r2,-25520(gp)
    }
}
  437c1c:	e037883a 	mov	sp,fp
  437c20:	df000017 	ldw	fp,0(sp)
  437c24:	dec00104 	addi	sp,sp,4
  437c28:	f800283a 	ret

00437c2c <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  437c2c:	defffb04 	addi	sp,sp,-20
  437c30:	df000415 	stw	fp,16(sp)
  437c34:	df000404 	addi	fp,sp,16
  437c38:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  437c3c:	d0a71717 	ldw	r2,-25508(gp)
  437c40:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  437c44:	d0a71717 	ldw	r2,-25508(gp)
  437c48:	e0ffff17 	ldw	r3,-4(fp)
  437c4c:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
  437c50:	e0bfff17 	ldw	r2,-4(fp)
  437c54:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
  437c58:	e0bffc17 	ldw	r2,-16(fp)
  437c5c:	10800017 	ldw	r2,0(r2)
  437c60:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  437c64:	00001f06 	br	437ce4 <OS_EventTaskWaitMulti+0xb8>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  437c68:	d0a71717 	ldw	r2,-25508(gp)
  437c6c:	10800d03 	ldbu	r2,52(r2)
  437c70:	10803fcc 	andi	r2,r2,255
  437c74:	d0e71717 	ldw	r3,-25508(gp)
  437c78:	18c00d03 	ldbu	r3,52(r3)
  437c7c:	18c03fcc 	andi	r3,r3,255
  437c80:	e13ffd17 	ldw	r4,-12(fp)
  437c84:	20c7883a 	add	r3,r4,r3
  437c88:	18c00204 	addi	r3,r3,8
  437c8c:	190000c3 	ldbu	r4,3(r3)
  437c90:	d0e71717 	ldw	r3,-25508(gp)
  437c94:	18c00d43 	ldbu	r3,53(r3)
  437c98:	20c6b03a 	or	r3,r4,r3
  437c9c:	e13ffd17 	ldw	r4,-12(fp)
  437ca0:	2085883a 	add	r2,r4,r2
  437ca4:	10800204 	addi	r2,r2,8
  437ca8:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  437cac:	e0bffd17 	ldw	r2,-12(fp)
  437cb0:	10c00283 	ldbu	r3,10(r2)
  437cb4:	d0a71717 	ldw	r2,-25508(gp)
  437cb8:	10800d83 	ldbu	r2,54(r2)
  437cbc:	1884b03a 	or	r2,r3,r2
  437cc0:	1007883a 	mov	r3,r2
  437cc4:	e0bffd17 	ldw	r2,-12(fp)
  437cc8:	10c00285 	stb	r3,10(r2)
        pevents++;
  437ccc:	e0bffc17 	ldw	r2,-16(fp)
  437cd0:	10800104 	addi	r2,r2,4
  437cd4:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
  437cd8:	e0bffc17 	ldw	r2,-16(fp)
  437cdc:	10800017 	ldw	r2,0(r2)
  437ce0:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  437ce4:	e0bffd17 	ldw	r2,-12(fp)
  437ce8:	103fdf1e 	bne	r2,zero,437c68 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  437cec:	d0a71717 	ldw	r2,-25508(gp)
  437cf0:	10800d03 	ldbu	r2,52(r2)
  437cf4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  437cf8:	e13ffe03 	ldbu	r4,-8(fp)
  437cfc:	e0fffe03 	ldbu	r3,-8(fp)
  437d00:	d0a71444 	addi	r2,gp,-25519
  437d04:	1885883a 	add	r2,r3,r2
  437d08:	10800003 	ldbu	r2,0(r2)
  437d0c:	1007883a 	mov	r3,r2
  437d10:	d0a71717 	ldw	r2,-25508(gp)
  437d14:	10800d43 	ldbu	r2,53(r2)
  437d18:	0084303a 	nor	r2,zero,r2
  437d1c:	1884703a 	and	r2,r3,r2
  437d20:	1007883a 	mov	r3,r2
  437d24:	d0a71444 	addi	r2,gp,-25519
  437d28:	2085883a 	add	r2,r4,r2
  437d2c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  437d30:	e0fffe03 	ldbu	r3,-8(fp)
  437d34:	d0a71444 	addi	r2,gp,-25519
  437d38:	1885883a 	add	r2,r3,r2
  437d3c:	10800003 	ldbu	r2,0(r2)
  437d40:	10803fcc 	andi	r2,r2,255
  437d44:	1000071e 	bne	r2,zero,437d64 <OS_EventTaskWaitMulti+0x138>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  437d48:	d0a71717 	ldw	r2,-25508(gp)
  437d4c:	10800d83 	ldbu	r2,54(r2)
  437d50:	0084303a 	nor	r2,zero,r2
  437d54:	1007883a 	mov	r3,r2
  437d58:	d0a71403 	ldbu	r2,-25520(gp)
  437d5c:	1884703a 	and	r2,r3,r2
  437d60:	d0a71405 	stb	r2,-25520(gp)
    }
}
  437d64:	e037883a 	mov	sp,fp
  437d68:	df000017 	ldw	fp,0(sp)
  437d6c:	dec00104 	addi	sp,sp,4
  437d70:	f800283a 	ret

00437d74 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  437d74:	defffc04 	addi	sp,sp,-16
  437d78:	df000315 	stw	fp,12(sp)
  437d7c:	df000304 	addi	fp,sp,12
  437d80:	e13ffe15 	stw	r4,-8(fp)
  437d84:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  437d88:	e0bffe17 	ldw	r2,-8(fp)
  437d8c:	10800d03 	ldbu	r2,52(r2)
  437d90:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  437d94:	e0bffd03 	ldbu	r2,-12(fp)
  437d98:	e0fffd03 	ldbu	r3,-12(fp)
  437d9c:	e13fff17 	ldw	r4,-4(fp)
  437da0:	20c7883a 	add	r3,r4,r3
  437da4:	18c00204 	addi	r3,r3,8
  437da8:	18c000c3 	ldbu	r3,3(r3)
  437dac:	1809883a 	mov	r4,r3
  437db0:	e0fffe17 	ldw	r3,-8(fp)
  437db4:	18c00d43 	ldbu	r3,53(r3)
  437db8:	00c6303a 	nor	r3,zero,r3
  437dbc:	20c6703a 	and	r3,r4,r3
  437dc0:	e13fff17 	ldw	r4,-4(fp)
  437dc4:	2085883a 	add	r2,r4,r2
  437dc8:	10800204 	addi	r2,r2,8
  437dcc:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  437dd0:	e0bffd03 	ldbu	r2,-12(fp)
  437dd4:	e0ffff17 	ldw	r3,-4(fp)
  437dd8:	1885883a 	add	r2,r3,r2
  437ddc:	10800204 	addi	r2,r2,8
  437de0:	108000c3 	ldbu	r2,3(r2)
  437de4:	10803fcc 	andi	r2,r2,255
  437de8:	10000a1e 	bne	r2,zero,437e14 <OS_EventTaskRemove+0xa0>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  437dec:	e0bfff17 	ldw	r2,-4(fp)
  437df0:	10800283 	ldbu	r2,10(r2)
  437df4:	1007883a 	mov	r3,r2
  437df8:	e0bffe17 	ldw	r2,-8(fp)
  437dfc:	10800d83 	ldbu	r2,54(r2)
  437e00:	0084303a 	nor	r2,zero,r2
  437e04:	1884703a 	and	r2,r3,r2
  437e08:	1007883a 	mov	r3,r2
  437e0c:	e0bfff17 	ldw	r2,-4(fp)
  437e10:	10c00285 	stb	r3,10(r2)
    }
}
  437e14:	e037883a 	mov	sp,fp
  437e18:	df000017 	ldw	fp,0(sp)
  437e1c:	dec00104 	addi	sp,sp,4
  437e20:	f800283a 	ret

00437e24 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  437e24:	defffa04 	addi	sp,sp,-24
  437e28:	df000515 	stw	fp,20(sp)
  437e2c:	df000504 	addi	fp,sp,20
  437e30:	e13ffe15 	stw	r4,-8(fp)
  437e34:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  437e38:	e0bffe17 	ldw	r2,-8(fp)
  437e3c:	10800d03 	ldbu	r2,52(r2)
  437e40:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
  437e44:	e0bffe17 	ldw	r2,-8(fp)
  437e48:	10800d83 	ldbu	r2,54(r2)
  437e4c:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
  437e50:	e0bffe17 	ldw	r2,-8(fp)
  437e54:	10800d43 	ldbu	r2,53(r2)
  437e58:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
  437e5c:	e0bfff17 	ldw	r2,-4(fp)
  437e60:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
  437e64:	e0bffb17 	ldw	r2,-20(fp)
  437e68:	10800017 	ldw	r2,0(r2)
  437e6c:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  437e70:	00002406 	br	437f04 <OS_EventTaskRemoveMulti+0xe0>
        pevent->OSEventTbl[y]  &= ~bitx;
  437e74:	e0bffd03 	ldbu	r2,-12(fp)
  437e78:	e0fffd03 	ldbu	r3,-12(fp)
  437e7c:	e13ffc17 	ldw	r4,-16(fp)
  437e80:	20c7883a 	add	r3,r4,r3
  437e84:	18c00204 	addi	r3,r3,8
  437e88:	18c000c3 	ldbu	r3,3(r3)
  437e8c:	1809883a 	mov	r4,r3
  437e90:	e0fffd83 	ldbu	r3,-10(fp)
  437e94:	00c6303a 	nor	r3,zero,r3
  437e98:	20c6703a 	and	r3,r4,r3
  437e9c:	e13ffc17 	ldw	r4,-16(fp)
  437ea0:	2085883a 	add	r2,r4,r2
  437ea4:	10800204 	addi	r2,r2,8
  437ea8:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  437eac:	e0bffd03 	ldbu	r2,-12(fp)
  437eb0:	e0fffc17 	ldw	r3,-16(fp)
  437eb4:	1885883a 	add	r2,r3,r2
  437eb8:	10800204 	addi	r2,r2,8
  437ebc:	108000c3 	ldbu	r2,3(r2)
  437ec0:	10803fcc 	andi	r2,r2,255
  437ec4:	1000091e 	bne	r2,zero,437eec <OS_EventTaskRemoveMulti+0xc8>
            pevent->OSEventGrp &= ~bity;
  437ec8:	e0bffc17 	ldw	r2,-16(fp)
  437ecc:	10800283 	ldbu	r2,10(r2)
  437ed0:	1007883a 	mov	r3,r2
  437ed4:	e0bffd43 	ldbu	r2,-11(fp)
  437ed8:	0084303a 	nor	r2,zero,r2
  437edc:	1884703a 	and	r2,r3,r2
  437ee0:	1007883a 	mov	r3,r2
  437ee4:	e0bffc17 	ldw	r2,-16(fp)
  437ee8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  437eec:	e0bffb17 	ldw	r2,-20(fp)
  437ef0:	10800104 	addi	r2,r2,4
  437ef4:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
  437ef8:	e0bffb17 	ldw	r2,-20(fp)
  437efc:	10800017 	ldw	r2,0(r2)
  437f00:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  437f04:	e0bffc17 	ldw	r2,-16(fp)
  437f08:	103fda1e 	bne	r2,zero,437e74 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  437f0c:	e037883a 	mov	sp,fp
  437f10:	df000017 	ldw	fp,0(sp)
  437f14:	dec00104 	addi	sp,sp,4
  437f18:	f800283a 	ret

00437f1c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  437f1c:	defffc04 	addi	sp,sp,-16
  437f20:	df000315 	stw	fp,12(sp)
  437f24:	df000304 	addi	fp,sp,12
  437f28:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  437f2c:	e0bfff17 	ldw	r2,-4(fp)
  437f30:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  437f34:	e0bfff17 	ldw	r2,-4(fp)
  437f38:	108002c4 	addi	r2,r2,11
  437f3c:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  437f40:	e03ffe05 	stb	zero,-8(fp)
  437f44:	00000806 	br	437f68 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  437f48:	e0bffd17 	ldw	r2,-12(fp)
  437f4c:	10000005 	stb	zero,0(r2)
  437f50:	e0bffd17 	ldw	r2,-12(fp)
  437f54:	10800044 	addi	r2,r2,1
  437f58:	e0bffd15 	stw	r2,-12(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  437f5c:	e0bffe03 	ldbu	r2,-8(fp)
  437f60:	10800044 	addi	r2,r2,1
  437f64:	e0bffe05 	stb	r2,-8(fp)
  437f68:	e0bffe03 	ldbu	r2,-8(fp)
  437f6c:	108000f0 	cmpltui	r2,r2,3
  437f70:	103ff51e 	bne	r2,zero,437f48 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  437f74:	e037883a 	mov	sp,fp
  437f78:	df000017 	ldw	fp,0(sp)
  437f7c:	dec00104 	addi	sp,sp,4
  437f80:	f800283a 	ret

00437f84 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  437f84:	defffb04 	addi	sp,sp,-20
  437f88:	dfc00415 	stw	ra,16(sp)
  437f8c:	df000315 	stw	fp,12(sp)
  437f90:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  437f94:	01001174 	movhi	r4,69
  437f98:	2126c104 	addi	r4,r4,-25852
  437f9c:	0142d004 	movi	r5,2880
  437fa0:	04382e80 	call	4382e8 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  437fa4:	00801174 	movhi	r2,69
  437fa8:	10a6c104 	addi	r2,r2,-25852
  437fac:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  437fb0:	00801174 	movhi	r2,69
  437fb4:	10a6cd04 	addi	r2,r2,-25804
  437fb8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  437fbc:	e03ffd0d 	sth	zero,-12(fp)
  437fc0:	00001306 	br	438010 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  437fc4:	e0bffe17 	ldw	r2,-8(fp)
  437fc8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  437fcc:	e0bffe17 	ldw	r2,-8(fp)
  437fd0:	e0ffff17 	ldw	r3,-4(fp)
  437fd4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  437fd8:	e0bffe17 	ldw	r2,-8(fp)
  437fdc:	00c00fc4 	movi	r3,63
  437fe0:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  437fe4:	e0bffe17 	ldw	r2,-8(fp)
  437fe8:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  437fec:	e0bffe17 	ldw	r2,-8(fp)
  437ff0:	10800c04 	addi	r2,r2,48
  437ff4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  437ff8:	e0bfff17 	ldw	r2,-4(fp)
  437ffc:	10800c04 	addi	r2,r2,48
  438000:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  438004:	e0bffd0b 	ldhu	r2,-12(fp)
  438008:	10800044 	addi	r2,r2,1
  43800c:	e0bffd0d 	sth	r2,-12(fp)
  438010:	e0bffd0b 	ldhu	r2,-12(fp)
  438014:	10800ef0 	cmpltui	r2,r2,59
  438018:	103fea1e 	bne	r2,zero,437fc4 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  43801c:	e0bffe17 	ldw	r2,-8(fp)
  438020:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  438024:	e0bffe17 	ldw	r2,-8(fp)
  438028:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  43802c:	e0bffe17 	ldw	r2,-8(fp)
  438030:	00c00fc4 	movi	r3,63
  438034:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  438038:	e0bffe17 	ldw	r2,-8(fp)
  43803c:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  438040:	00801174 	movhi	r2,69
  438044:	10a6c104 	addi	r2,r2,-25852
  438048:	d0a71515 	stw	r2,-25516(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  43804c:	e037883a 	mov	sp,fp
  438050:	dfc00117 	ldw	ra,4(sp)
  438054:	df000017 	ldw	fp,0(sp)
  438058:	dec00204 	addi	sp,sp,8
  43805c:	f800283a 	ret

00438060 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  438060:	deffff04 	addi	sp,sp,-4
  438064:	df000015 	stw	fp,0(sp)
  438068:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  43806c:	d0271815 	stw	zero,-25504(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  438070:	d0271605 	stb	zero,-25512(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  438074:	d0270805 	stb	zero,-25568(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  438078:	d0271045 	stb	zero,-25535(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  43807c:	d0270845 	stb	zero,-25567(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  438080:	d0270d15 	stw	zero,-25548(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  438084:	d0270915 	stw	zero,-25564(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  438088:	d0271b15 	stw	zero,-25492(gp)
    OSIdleCtrMax  = 0L;
  43808c:	d0270e15 	stw	zero,-25544(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  438090:	d0271a05 	stb	zero,-25496(gp)
#endif
}
  438094:	e037883a 	mov	sp,fp
  438098:	df000017 	ldw	fp,0(sp)
  43809c:	dec00104 	addi	sp,sp,4
  4380a0:	f800283a 	ret

004380a4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  4380a4:	defffd04 	addi	sp,sp,-12
  4380a8:	df000215 	stw	fp,8(sp)
  4380ac:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  4380b0:	d0271405 	stb	zero,-25520(gp)
    prdytbl       = &OSRdyTbl[0];
  4380b4:	d0a71444 	addi	r2,gp,-25519
  4380b8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  4380bc:	e03ffe05 	stb	zero,-8(fp)
  4380c0:	00000806 	br	4380e4 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  4380c4:	e0bfff17 	ldw	r2,-4(fp)
  4380c8:	10000005 	stb	zero,0(r2)
  4380cc:	e0bfff17 	ldw	r2,-4(fp)
  4380d0:	10800044 	addi	r2,r2,1
  4380d4:	e0bfff15 	stw	r2,-4(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  4380d8:	e0bffe03 	ldbu	r2,-8(fp)
  4380dc:	10800044 	addi	r2,r2,1
  4380e0:	e0bffe05 	stb	r2,-8(fp)
  4380e4:	e0bffe03 	ldbu	r2,-8(fp)
  4380e8:	108000f0 	cmpltui	r2,r2,3
  4380ec:	103ff51e 	bne	r2,zero,4380c4 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  4380f0:	d0270a45 	stb	zero,-25559(gp)
    OSPrioHighRdy = 0;
  4380f4:	d0270a05 	stb	zero,-25560(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  4380f8:	d0271215 	stw	zero,-25528(gp)
    OSTCBCur      = (OS_TCB *)0;
  4380fc:	d0271715 	stw	zero,-25508(gp)
}
  438100:	e037883a 	mov	sp,fp
  438104:	df000017 	ldw	fp,0(sp)
  438108:	dec00104 	addi	sp,sp,4
  43810c:	f800283a 	ret

00438110 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  438110:	defff804 	addi	sp,sp,-32
  438114:	dfc00715 	stw	ra,28(sp)
  438118:	df000615 	stw	fp,24(sp)
  43811c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  438120:	00bfffd4 	movui	r2,65535
  438124:	d8800015 	stw	r2,0(sp)
  438128:	00801174 	movhi	r2,69
  43812c:	10a4c104 	addi	r2,r2,-27900
  438130:	d8800115 	stw	r2,4(sp)
  438134:	00808004 	movi	r2,512
  438138:	d8800215 	stw	r2,8(sp)
  43813c:	d8000315 	stw	zero,12(sp)
  438140:	008000c4 	movi	r2,3
  438144:	d8800415 	stw	r2,16(sp)
  438148:	01001134 	movhi	r4,68
  43814c:	21217804 	addi	r4,r4,-31264
  438150:	000b883a 	mov	r5,zero
  438154:	01801174 	movhi	r6,69
  438158:	31a6c004 	addi	r6,r6,-25856
  43815c:	01c00504 	movi	r7,20
  438160:	043e0a40 	call	43e0a4 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  438164:	01000504 	movi	r4,20
  438168:	01401134 	movhi	r5,68
  43816c:	29501204 	addi	r5,r5,16456
  438170:	e1bfff04 	addi	r6,fp,-4
  438174:	043ec080 	call	43ec08 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  438178:	e037883a 	mov	sp,fp
  43817c:	dfc00117 	ldw	ra,4(sp)
  438180:	df000017 	ldw	fp,0(sp)
  438184:	dec00204 	addi	sp,sp,8
  438188:	f800283a 	ret

0043818c <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  43818c:	defff804 	addi	sp,sp,-32
  438190:	dfc00715 	stw	ra,28(sp)
  438194:	df000615 	stw	fp,24(sp)
  438198:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  43819c:	00bfff94 	movui	r2,65534
  4381a0:	d8800015 	stw	r2,0(sp)
  4381a4:	00801174 	movhi	r2,69
  4381a8:	10a24904 	addi	r2,r2,-30428
  4381ac:	d8800115 	stw	r2,4(sp)
  4381b0:	00808004 	movi	r2,512
  4381b4:	d8800215 	stw	r2,8(sp)
  4381b8:	d8000315 	stw	zero,12(sp)
  4381bc:	008000c4 	movi	r2,3
  4381c0:	d8800415 	stw	r2,16(sp)
  4381c4:	01001134 	movhi	r4,68
  4381c8:	21219a04 	addi	r4,r4,-31128
  4381cc:	000b883a 	mov	r5,zero
  4381d0:	01801174 	movhi	r6,69
  4381d4:	31a44804 	addi	r6,r6,-28384
  4381d8:	01c004c4 	movi	r7,19
  4381dc:	043e0a40 	call	43e0a4 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  4381e0:	010004c4 	movi	r4,19
  4381e4:	01401134 	movhi	r5,68
  4381e8:	29501604 	addi	r5,r5,16472
  4381ec:	e1bfff04 	addi	r6,fp,-4
  4381f0:	043ec080 	call	43ec08 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  4381f4:	e037883a 	mov	sp,fp
  4381f8:	dfc00117 	ldw	ra,4(sp)
  4381fc:	df000017 	ldw	fp,0(sp)
  438200:	dec00204 	addi	sp,sp,8
  438204:	f800283a 	ret

00438208 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  438208:	defffb04 	addi	sp,sp,-20
  43820c:	dfc00415 	stw	ra,16(sp)
  438210:	df000315 	stw	fp,12(sp)
  438214:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  438218:	01001174 	movhi	r4,69
  43821c:	21299104 	addi	r4,r4,-22972
  438220:	01414404 	movi	r5,1296
  438224:	04382e80 	call	4382e8 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  438228:	01001174 	movhi	r4,69
  43822c:	212ad504 	addi	r4,r4,-21676
  438230:	01401504 	movi	r5,84
  438234:	04382e80 	call	4382e8 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  438238:	00801174 	movhi	r2,69
  43823c:	10a99104 	addi	r2,r2,-22972
  438240:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  438244:	00801174 	movhi	r2,69
  438248:	10a9ac04 	addi	r2,r2,-22864
  43824c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  438250:	e03ffd05 	stb	zero,-12(fp)
  438254:	00001106 	br	43829c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  438258:	e0bffe17 	ldw	r2,-8(fp)
  43825c:	e0ffff17 	ldw	r3,-4(fp)
  438260:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  438264:	e0bffe17 	ldw	r2,-8(fp)
  438268:	00c00fc4 	movi	r3,63
  43826c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  438270:	e0bffe17 	ldw	r2,-8(fp)
  438274:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  438278:	e0bffe17 	ldw	r2,-8(fp)
  43827c:	10801b04 	addi	r2,r2,108
  438280:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  438284:	e0bfff17 	ldw	r2,-4(fp)
  438288:	10801b04 	addi	r2,r2,108
  43828c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  438290:	e0bffd03 	ldbu	r2,-12(fp)
  438294:	10800044 	addi	r2,r2,1
  438298:	e0bffd05 	stb	r2,-12(fp)
  43829c:	e0bffd03 	ldbu	r2,-12(fp)
  4382a0:	108002f0 	cmpltui	r2,r2,11
  4382a4:	103fec1e 	bne	r2,zero,438258 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  4382a8:	e0bffe17 	ldw	r2,-8(fp)
  4382ac:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  4382b0:	e0bffe17 	ldw	r2,-8(fp)
  4382b4:	00c00fc4 	movi	r3,63
  4382b8:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  4382bc:	e0bffe17 	ldw	r2,-8(fp)
  4382c0:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  4382c4:	d0270b15 	stw	zero,-25556(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  4382c8:	00801174 	movhi	r2,69
  4382cc:	10a99104 	addi	r2,r2,-22972
  4382d0:	d0a70f15 	stw	r2,-25540(gp)
}
  4382d4:	e037883a 	mov	sp,fp
  4382d8:	dfc00117 	ldw	ra,4(sp)
  4382dc:	df000017 	ldw	fp,0(sp)
  4382e0:	dec00204 	addi	sp,sp,8
  4382e4:	f800283a 	ret

004382e8 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  4382e8:	defffd04 	addi	sp,sp,-12
  4382ec:	df000215 	stw	fp,8(sp)
  4382f0:	df000204 	addi	fp,sp,8
  4382f4:	e13ffe15 	stw	r4,-8(fp)
  4382f8:	2805883a 	mov	r2,r5
  4382fc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  438300:	00000806 	br	438324 <OS_MemClr+0x3c>
        *pdest++ = (INT8U)0;
  438304:	e0bffe17 	ldw	r2,-8(fp)
  438308:	10000005 	stb	zero,0(r2)
  43830c:	e0bffe17 	ldw	r2,-8(fp)
  438310:	10800044 	addi	r2,r2,1
  438314:	e0bffe15 	stw	r2,-8(fp)
        size--;
  438318:	e0bfff0b 	ldhu	r2,-4(fp)
  43831c:	10bfffc4 	addi	r2,r2,-1
  438320:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  438324:	e0bfff0b 	ldhu	r2,-4(fp)
  438328:	103ff61e 	bne	r2,zero,438304 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  43832c:	e037883a 	mov	sp,fp
  438330:	df000017 	ldw	fp,0(sp)
  438334:	dec00104 	addi	sp,sp,4
  438338:	f800283a 	ret

0043833c <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  43833c:	defffc04 	addi	sp,sp,-16
  438340:	df000315 	stw	fp,12(sp)
  438344:	df000304 	addi	fp,sp,12
  438348:	e13ffd15 	stw	r4,-12(fp)
  43834c:	e17ffe15 	stw	r5,-8(fp)
  438350:	3005883a 	mov	r2,r6
  438354:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  438358:	00000d06 	br	438390 <OS_MemCopy+0x54>
        *pdest++ = *psrc++;
  43835c:	e0bffe17 	ldw	r2,-8(fp)
  438360:	10c00003 	ldbu	r3,0(r2)
  438364:	e0bffd17 	ldw	r2,-12(fp)
  438368:	10c00005 	stb	r3,0(r2)
  43836c:	e0bffd17 	ldw	r2,-12(fp)
  438370:	10800044 	addi	r2,r2,1
  438374:	e0bffd15 	stw	r2,-12(fp)
  438378:	e0bffe17 	ldw	r2,-8(fp)
  43837c:	10800044 	addi	r2,r2,1
  438380:	e0bffe15 	stw	r2,-8(fp)
        size--;
  438384:	e0bfff0b 	ldhu	r2,-4(fp)
  438388:	10bfffc4 	addi	r2,r2,-1
  43838c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  438390:	e0bfff0b 	ldhu	r2,-4(fp)
  438394:	103ff11e 	bne	r2,zero,43835c <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
  438398:	e037883a 	mov	sp,fp
  43839c:	df000017 	ldw	fp,0(sp)
  4383a0:	dec00104 	addi	sp,sp,4
  4383a4:	f800283a 	ret

004383a8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  4383a8:	defffa04 	addi	sp,sp,-24
  4383ac:	dfc00515 	stw	ra,20(sp)
  4383b0:	df000415 	stw	fp,16(sp)
  4383b4:	df000404 	addi	fp,sp,16
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  4383b8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4383bc:	0005303a 	rdctl	r2,status
  4383c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4383c4:	e0fffd17 	ldw	r3,-12(fp)
  4383c8:	00bfff84 	movi	r2,-2
  4383cc:	1884703a 	and	r2,r3,r2
  4383d0:	1001703a 	wrctl	status,r2
  
  return context;
  4383d4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  4383d8:	e0bffc15 	stw	r2,-16(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  4383dc:	d0a71603 	ldbu	r2,-25512(gp)
  4383e0:	10803fcc 	andi	r2,r2,255
  4383e4:	10001a1e 	bne	r2,zero,438450 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  4383e8:	d0a70803 	ldbu	r2,-25568(gp)
  4383ec:	10803fcc 	andi	r2,r2,255
  4383f0:	1000171e 	bne	r2,zero,438450 <OS_Sched+0xa8>
            OS_SchedNew();
  4383f4:	04384a00 	call	4384a0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  4383f8:	d0e70a03 	ldbu	r3,-25560(gp)
  4383fc:	d0a70a43 	ldbu	r2,-25559(gp)
  438400:	18c03fcc 	andi	r3,r3,255
  438404:	10803fcc 	andi	r2,r2,255
  438408:	18801126 	beq	r3,r2,438450 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  43840c:	d0a70a03 	ldbu	r2,-25560(gp)
  438410:	10803fcc 	andi	r2,r2,255
  438414:	00c01174 	movhi	r3,69
  438418:	18ead504 	addi	r3,r3,-21676
  43841c:	1085883a 	add	r2,r2,r2
  438420:	1085883a 	add	r2,r2,r2
  438424:	1885883a 	add	r2,r3,r2
  438428:	10800017 	ldw	r2,0(r2)
  43842c:	d0a71215 	stw	r2,-25528(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  438430:	d0a71217 	ldw	r2,-25528(gp)
  438434:	10c00e17 	ldw	r3,56(r2)
  438438:	18c00044 	addi	r3,r3,1
  43843c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  438440:	d0a70d17 	ldw	r2,-25548(gp)
  438444:	10800044 	addi	r2,r2,1
  438448:	d0a70d15 	stw	r2,-25548(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  43844c:	04420940 	call	442094 <OSCtxSw>
  438450:	e0bffc17 	ldw	r2,-16(fp)
  438454:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  438458:	0005303a 	rdctl	r2,status
  43845c:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  438460:	e0ffff17 	ldw	r3,-4(fp)
  438464:	00bfff84 	movi	r2,-2
  438468:	1884703a 	and	r2,r3,r2
  43846c:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  438470:	e0bffe17 	ldw	r2,-8(fp)
  438474:	1080004c 	andi	r2,r2,1
  438478:	e0ffff17 	ldw	r3,-4(fp)
  43847c:	1884b03a 	or	r2,r3,r2
  438480:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  438484:	e0bfff17 	ldw	r2,-4(fp)
  438488:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  43848c:	e037883a 	mov	sp,fp
  438490:	dfc00117 	ldw	ra,4(sp)
  438494:	df000017 	ldw	fp,0(sp)
  438498:	dec00204 	addi	sp,sp,8
  43849c:	f800283a 	ret

004384a0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  4384a0:	defffe04 	addi	sp,sp,-8
  4384a4:	df000115 	stw	fp,4(sp)
  4384a8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  4384ac:	d0a71403 	ldbu	r2,-25520(gp)
  4384b0:	10803fcc 	andi	r2,r2,255
  4384b4:	00c01134 	movhi	r3,68
  4384b8:	18cfd204 	addi	r3,r3,16200
  4384bc:	1885883a 	add	r2,r3,r2
  4384c0:	10800003 	ldbu	r2,0(r2)
  4384c4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  4384c8:	e0bfff03 	ldbu	r2,-4(fp)
  4384cc:	100490fa 	slli	r2,r2,3
  4384d0:	1007883a 	mov	r3,r2
  4384d4:	e13fff03 	ldbu	r4,-4(fp)
  4384d8:	d0a71444 	addi	r2,gp,-25519
  4384dc:	2085883a 	add	r2,r4,r2
  4384e0:	10800003 	ldbu	r2,0(r2)
  4384e4:	10803fcc 	andi	r2,r2,255
  4384e8:	01001134 	movhi	r4,68
  4384ec:	210fd204 	addi	r4,r4,16200
  4384f0:	2085883a 	add	r2,r4,r2
  4384f4:	10800003 	ldbu	r2,0(r2)
  4384f8:	1885883a 	add	r2,r3,r2
  4384fc:	d0a70a05 	stb	r2,-25560(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  438500:	e037883a 	mov	sp,fp
  438504:	df000017 	ldw	fp,0(sp)
  438508:	dec00104 	addi	sp,sp,4
  43850c:	f800283a 	ret

00438510 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  438510:	defffc04 	addi	sp,sp,-16
  438514:	df000315 	stw	fp,12(sp)
  438518:	df000304 	addi	fp,sp,12
  43851c:	e13ffe15 	stw	r4,-8(fp)
  438520:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  438524:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  438528:	00000d06 	br	438560 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  43852c:	e0bfff17 	ldw	r2,-4(fp)
  438530:	10c00003 	ldbu	r3,0(r2)
  438534:	e0bffe17 	ldw	r2,-8(fp)
  438538:	10c00005 	stb	r3,0(r2)
  43853c:	e0bffe17 	ldw	r2,-8(fp)
  438540:	10800044 	addi	r2,r2,1
  438544:	e0bffe15 	stw	r2,-8(fp)
  438548:	e0bfff17 	ldw	r2,-4(fp)
  43854c:	10800044 	addi	r2,r2,1
  438550:	e0bfff15 	stw	r2,-4(fp)
        len++;
  438554:	e0bffd03 	ldbu	r2,-12(fp)
  438558:	10800044 	addi	r2,r2,1
  43855c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  438560:	e0bfff17 	ldw	r2,-4(fp)
  438564:	10800003 	ldbu	r2,0(r2)
  438568:	10803fcc 	andi	r2,r2,255
  43856c:	103fef1e 	bne	r2,zero,43852c <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  438570:	e0bffe17 	ldw	r2,-8(fp)
  438574:	10000005 	stb	zero,0(r2)
    return (len);
  438578:	e0bffd03 	ldbu	r2,-12(fp)
}
  43857c:	e037883a 	mov	sp,fp
  438580:	df000017 	ldw	fp,0(sp)
  438584:	dec00104 	addi	sp,sp,4
  438588:	f800283a 	ret

0043858c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  43858c:	defffd04 	addi	sp,sp,-12
  438590:	df000215 	stw	fp,8(sp)
  438594:	df000204 	addi	fp,sp,8
  438598:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  43859c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  4385a0:	00000606 	br	4385bc <OS_StrLen+0x30>
        psrc++;
  4385a4:	e0bfff17 	ldw	r2,-4(fp)
  4385a8:	10800044 	addi	r2,r2,1
  4385ac:	e0bfff15 	stw	r2,-4(fp)
        len++;
  4385b0:	e0bffe03 	ldbu	r2,-8(fp)
  4385b4:	10800044 	addi	r2,r2,1
  4385b8:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  4385bc:	e0bfff17 	ldw	r2,-4(fp)
  4385c0:	10800003 	ldbu	r2,0(r2)
  4385c4:	10803fcc 	andi	r2,r2,255
  4385c8:	103ff61e 	bne	r2,zero,4385a4 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  4385cc:	e0bffe03 	ldbu	r2,-8(fp)
}
  4385d0:	e037883a 	mov	sp,fp
  4385d4:	df000017 	ldw	fp,0(sp)
  4385d8:	dec00104 	addi	sp,sp,4
  4385dc:	f800283a 	ret

004385e0 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  4385e0:	defff904 	addi	sp,sp,-28
  4385e4:	dfc00615 	stw	ra,24(sp)
  4385e8:	df000515 	stw	fp,20(sp)
  4385ec:	df000504 	addi	fp,sp,20
  4385f0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  4385f4:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4385f8:	0005303a 	rdctl	r2,status
  4385fc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  438600:	e0fffc17 	ldw	r3,-16(fp)
  438604:	00bfff84 	movi	r2,-2
  438608:	1884703a 	and	r2,r3,r2
  43860c:	1001703a 	wrctl	status,r2
  
  return context;
  438610:	e0bffc17 	ldw	r2,-16(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  438614:	e0bffb15 	stw	r2,-20(fp)
        OSIdleCtr++;
  438618:	d0a70917 	ldw	r2,-25564(gp)
  43861c:	10800044 	addi	r2,r2,1
  438620:	d0a70915 	stw	r2,-25564(gp)
  438624:	e0bffb17 	ldw	r2,-20(fp)
  438628:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43862c:	0005303a 	rdctl	r2,status
  438630:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  438634:	e0fffe17 	ldw	r3,-8(fp)
  438638:	00bfff84 	movi	r2,-2
  43863c:	1884703a 	and	r2,r3,r2
  438640:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  438644:	e0bffd17 	ldw	r2,-12(fp)
  438648:	1080004c 	andi	r2,r2,1
  43864c:	e0fffe17 	ldw	r3,-8(fp)
  438650:	1884b03a 	or	r2,r3,r2
  438654:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  438658:	e0bffe17 	ldw	r2,-8(fp)
  43865c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  438660:	04425240 	call	442524 <OSTaskIdleHook>
    }
  438664:	003fe406 	br	4385f8 <OS_TaskIdle+0x18>

00438668 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  438668:	defff904 	addi	sp,sp,-28
  43866c:	dfc00615 	stw	ra,24(sp)
  438670:	df000515 	stw	fp,20(sp)
  438674:	df000504 	addi	fp,sp,20
  438678:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  43867c:	e03ffb15 	stw	zero,-20(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  438680:	00000206 	br	43868c <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  438684:	01000504 	movi	r4,20
  438688:	043f8b00 	call	43f8b0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  43868c:	d0a71a03 	ldbu	r2,-25496(gp)
  438690:	10803fcc 	andi	r2,r2,255
  438694:	103ffb26 	beq	r2,zero,438684 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  438698:	d0a70e17 	ldw	r2,-25544(gp)
  43869c:	1009883a 	mov	r4,r2
  4386a0:	01401904 	movi	r5,100
  4386a4:	04438440 	call	443844 <__udivsi3>
  4386a8:	d0a70e15 	stw	r2,-25544(gp)
    if (OSIdleCtrMax == 0L) {
  4386ac:	d0a70e17 	ldw	r2,-25544(gp)
  4386b0:	1000031e 	bne	r2,zero,4386c0 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
  4386b4:	d0271005 	stb	zero,-25536(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  4386b8:	01003fc4 	movi	r4,255
  4386bc:	043f3fc0 	call	43f3fc <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4386c0:	0005303a 	rdctl	r2,status
  4386c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4386c8:	e0fffc17 	ldw	r3,-16(fp)
  4386cc:	00bfff84 	movi	r2,-2
  4386d0:	1884703a 	and	r2,r3,r2
  4386d4:	1001703a 	wrctl	status,r2
  
  return context;
  4386d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  4386dc:	e0bffb15 	stw	r2,-20(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  4386e0:	d0a70917 	ldw	r2,-25564(gp)
  4386e4:	d0a71b15 	stw	r2,-25492(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  4386e8:	d0270915 	stw	zero,-25564(gp)
  4386ec:	e0bffb17 	ldw	r2,-20(fp)
  4386f0:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4386f4:	0005303a 	rdctl	r2,status
  4386f8:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4386fc:	e0fffe17 	ldw	r3,-8(fp)
  438700:	00bfff84 	movi	r2,-2
  438704:	1884703a 	and	r2,r3,r2
  438708:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43870c:	e0bffd17 	ldw	r2,-12(fp)
  438710:	1080004c 	andi	r2,r2,1
  438714:	e0fffe17 	ldw	r3,-8(fp)
  438718:	1884b03a 	or	r2,r3,r2
  43871c:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  438720:	e0bffe17 	ldw	r2,-8(fp)
  438724:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  438728:	d0e71b17 	ldw	r3,-25492(gp)
  43872c:	d0a70e17 	ldw	r2,-25544(gp)
  438730:	1809883a 	mov	r4,r3
  438734:	100b883a 	mov	r5,r2
  438738:	04438440 	call	443844 <__udivsi3>
  43873c:	00c01904 	movi	r3,100
  438740:	1885c83a 	sub	r2,r3,r2
  438744:	d0a71005 	stb	r2,-25536(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  438748:	04424b40 	call	4424b4 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  43874c:	043875c0 	call	43875c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  438750:	01000284 	movi	r4,10
  438754:	043f8b00 	call	43f8b0 <OSTimeDly>
    }
  438758:	003fd906 	br	4386c0 <OS_TaskStat+0x58>

0043875c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  43875c:	defffa04 	addi	sp,sp,-24
  438760:	dfc00515 	stw	ra,20(sp)
  438764:	df000415 	stw	fp,16(sp)
  438768:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  43876c:	e03ffc05 	stb	zero,-16(fp)
  438770:	00002406 	br	438804 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  438774:	e0fffc03 	ldbu	r3,-16(fp)
  438778:	e0bffe04 	addi	r2,fp,-8
  43877c:	1809883a 	mov	r4,r3
  438780:	100b883a 	mov	r5,r2
  438784:	043f1780 	call	43f178 <OSTaskStkChk>
  438788:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  43878c:	e0bffc43 	ldbu	r2,-15(fp)
  438790:	1000191e 	bne	r2,zero,4387f8 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  438794:	e0bffc03 	ldbu	r2,-16(fp)
  438798:	00c01174 	movhi	r3,69
  43879c:	18ead504 	addi	r3,r3,-21676
  4387a0:	1085883a 	add	r2,r2,r2
  4387a4:	1085883a 	add	r2,r2,r2
  4387a8:	1885883a 	add	r2,r3,r2
  4387ac:	10800017 	ldw	r2,0(r2)
  4387b0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  4387b4:	e0bffd17 	ldw	r2,-12(fp)
  4387b8:	10000f26 	beq	r2,zero,4387f8 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  4387bc:	e0bffd17 	ldw	r2,-12(fp)
  4387c0:	10800060 	cmpeqi	r2,r2,1
  4387c4:	10000c1e 	bne	r2,zero,4387f8 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  4387c8:	e0bffd17 	ldw	r2,-12(fp)
  4387cc:	10c00217 	ldw	r3,8(r2)
  4387d0:	e0bffd17 	ldw	r2,-12(fp)
  4387d4:	10800317 	ldw	r2,12(r2)
  4387d8:	1085883a 	add	r2,r2,r2
  4387dc:	1085883a 	add	r2,r2,r2
  4387e0:	1887883a 	add	r3,r3,r2
  4387e4:	e0bffd17 	ldw	r2,-12(fp)
  4387e8:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  4387ec:	e0ffff17 	ldw	r3,-4(fp)
  4387f0:	e0bffd17 	ldw	r2,-12(fp)
  4387f4:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  4387f8:	e0bffc03 	ldbu	r2,-16(fp)
  4387fc:	10800044 	addi	r2,r2,1
  438800:	e0bffc05 	stb	r2,-16(fp)
  438804:	e0bffc03 	ldbu	r2,-16(fp)
  438808:	10800570 	cmpltui	r2,r2,21
  43880c:	103fd91e 	bne	r2,zero,438774 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  438810:	e037883a 	mov	sp,fp
  438814:	dfc00117 	ldw	ra,4(sp)
  438818:	df000017 	ldw	fp,0(sp)
  43881c:	dec00204 	addi	sp,sp,8
  438820:	f800283a 	ret

00438824 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  438824:	deffef04 	addi	sp,sp,-68
  438828:	dfc01015 	stw	ra,64(sp)
  43882c:	df000f15 	stw	fp,60(sp)
  438830:	df000f04 	addi	fp,sp,60
  438834:	2007883a 	mov	r3,r4
  438838:	e17ffc15 	stw	r5,-16(fp)
  43883c:	e1bffd15 	stw	r6,-12(fp)
  438840:	3805883a 	mov	r2,r7
  438844:	e1000417 	ldw	r4,16(fp)
  438848:	e0fffb05 	stb	r3,-20(fp)
  43884c:	e0bffe0d 	sth	r2,-8(fp)
  438850:	e13fff0d 	sth	r4,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  438854:	e03ff115 	stw	zero,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  438858:	0005303a 	rdctl	r2,status
  43885c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  438860:	e0fff317 	ldw	r3,-52(fp)
  438864:	00bfff84 	movi	r2,-2
  438868:	1884703a 	and	r2,r3,r2
  43886c:	1001703a 	wrctl	status,r2
  
  return context;
  438870:	e0bff317 	ldw	r2,-52(fp)
#endif



    OS_ENTER_CRITICAL();
  438874:	e0bff115 	stw	r2,-60(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  438878:	d0a70f17 	ldw	r2,-25540(gp)
  43887c:	e0bff215 	stw	r2,-56(fp)
    if (ptcb != (OS_TCB *)0) {
  438880:	e0bff217 	ldw	r2,-56(fp)
  438884:	1000a926 	beq	r2,zero,438b2c <OS_TCBInit+0x308>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  438888:	e0bff217 	ldw	r2,-56(fp)
  43888c:	10800517 	ldw	r2,20(r2)
  438890:	d0a70f15 	stw	r2,-25540(gp)
  438894:	e0bff117 	ldw	r2,-60(fp)
  438898:	e0bff415 	stw	r2,-48(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43889c:	0005303a 	rdctl	r2,status
  4388a0:	e0bff515 	stw	r2,-44(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4388a4:	e0fff517 	ldw	r3,-44(fp)
  4388a8:	00bfff84 	movi	r2,-2
  4388ac:	1884703a 	and	r2,r3,r2
  4388b0:	e0bff515 	stw	r2,-44(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4388b4:	e0bff417 	ldw	r2,-48(fp)
  4388b8:	1080004c 	andi	r2,r2,1
  4388bc:	e0fff517 	ldw	r3,-44(fp)
  4388c0:	1884b03a 	or	r2,r3,r2
  4388c4:	e0bff515 	stw	r2,-44(fp)
  
  NIOS2_WRITE_STATUS (status);
  4388c8:	e0bff517 	ldw	r2,-44(fp)
  4388cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  4388d0:	e0bff217 	ldw	r2,-56(fp)
  4388d4:	e0fffc17 	ldw	r3,-16(fp)
  4388d8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  4388dc:	e0bff217 	ldw	r2,-56(fp)
  4388e0:	e0fffb03 	ldbu	r3,-20(fp)
  4388e4:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  4388e8:	e0bff217 	ldw	r2,-56(fp)
  4388ec:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  4388f0:	e0bff217 	ldw	r2,-56(fp)
  4388f4:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  4388f8:	e0bff217 	ldw	r2,-56(fp)
  4388fc:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  438900:	e0bff217 	ldw	r2,-56(fp)
  438904:	e0c00317 	ldw	r3,12(fp)
  438908:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  43890c:	e0bff217 	ldw	r2,-56(fp)
  438910:	e0c00217 	ldw	r3,8(fp)
  438914:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  438918:	e0bff217 	ldw	r2,-56(fp)
  43891c:	e0fffd17 	ldw	r3,-12(fp)
  438920:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  438924:	e0bff217 	ldw	r2,-56(fp)
  438928:	e0ffff0b 	ldhu	r3,-4(fp)
  43892c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  438930:	e0bff217 	ldw	r2,-56(fp)
  438934:	e0fffe0b 	ldhu	r3,-8(fp)
  438938:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  43893c:	e0bff217 	ldw	r2,-56(fp)
  438940:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  438944:	e0bffb03 	ldbu	r2,-20(fp)
  438948:	1004d0fa 	srli	r2,r2,3
  43894c:	1007883a 	mov	r3,r2
  438950:	e0bff217 	ldw	r2,-56(fp)
  438954:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  438958:	e0bffb03 	ldbu	r2,-20(fp)
  43895c:	108001cc 	andi	r2,r2,7
  438960:	1007883a 	mov	r3,r2
  438964:	e0bff217 	ldw	r2,-56(fp)
  438968:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  43896c:	e0bff217 	ldw	r2,-56(fp)
  438970:	10800d03 	ldbu	r2,52(r2)
  438974:	10803fcc 	andi	r2,r2,255
  438978:	00c00044 	movi	r3,1
  43897c:	1884983a 	sll	r2,r3,r2
  438980:	1007883a 	mov	r3,r2
  438984:	e0bff217 	ldw	r2,-56(fp)
  438988:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  43898c:	e0bff217 	ldw	r2,-56(fp)
  438990:	10800cc3 	ldbu	r2,51(r2)
  438994:	10803fcc 	andi	r2,r2,255
  438998:	00c00044 	movi	r3,1
  43899c:	1884983a 	sll	r2,r3,r2
  4389a0:	1007883a 	mov	r3,r2
  4389a4:	e0bff217 	ldw	r2,-56(fp)
  4389a8:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  4389ac:	e0bff217 	ldw	r2,-56(fp)
  4389b0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  4389b4:	e0bff217 	ldw	r2,-56(fp)
  4389b8:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  4389bc:	e0bff217 	ldw	r2,-56(fp)
  4389c0:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  4389c4:	e0bff217 	ldw	r2,-56(fp)
  4389c8:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  4389cc:	e0bff217 	ldw	r2,-56(fp)
  4389d0:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  4389d4:	e0bff217 	ldw	r2,-56(fp)
  4389d8:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  4389dc:	e0bff217 	ldw	r2,-56(fp)
  4389e0:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  4389e4:	e0bff217 	ldw	r2,-56(fp)
  4389e8:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  4389ec:	e0bff217 	ldw	r2,-56(fp)
  4389f0:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  4389f4:	e0bff217 	ldw	r2,-56(fp)
  4389f8:	00c00fc4 	movi	r3,63
  4389fc:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  438a00:	e0bff217 	ldw	r2,-56(fp)
  438a04:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  438a08:	e13ff217 	ldw	r4,-56(fp)
  438a0c:	04425400 	call	442540 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  438a10:	e13ff217 	ldw	r4,-56(fp)
  438a14:	04424580 	call	442458 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  438a18:	0005303a 	rdctl	r2,status
  438a1c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  438a20:	e0fff617 	ldw	r3,-40(fp)
  438a24:	00bfff84 	movi	r2,-2
  438a28:	1884703a 	and	r2,r3,r2
  438a2c:	1001703a 	wrctl	status,r2
  
  return context;
  438a30:	e0bff617 	ldw	r2,-40(fp)

        OS_ENTER_CRITICAL();
  438a34:	e0bff115 	stw	r2,-60(fp)
        OSTCBPrioTbl[prio] = ptcb;
  438a38:	e0bffb03 	ldbu	r2,-20(fp)
  438a3c:	00c01174 	movhi	r3,69
  438a40:	18ead504 	addi	r3,r3,-21676
  438a44:	1085883a 	add	r2,r2,r2
  438a48:	1085883a 	add	r2,r2,r2
  438a4c:	1885883a 	add	r2,r3,r2
  438a50:	e0fff217 	ldw	r3,-56(fp)
  438a54:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  438a58:	d0e70b17 	ldw	r3,-25556(gp)
  438a5c:	e0bff217 	ldw	r2,-56(fp)
  438a60:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  438a64:	e0bff217 	ldw	r2,-56(fp)
  438a68:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  438a6c:	d0a70b17 	ldw	r2,-25556(gp)
  438a70:	10000326 	beq	r2,zero,438a80 <OS_TCBInit+0x25c>
            OSTCBList->OSTCBPrev = ptcb;
  438a74:	d0a70b17 	ldw	r2,-25556(gp)
  438a78:	e0fff217 	ldw	r3,-56(fp)
  438a7c:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
  438a80:	e0bff217 	ldw	r2,-56(fp)
  438a84:	d0a70b15 	stw	r2,-25556(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  438a88:	e0bff217 	ldw	r2,-56(fp)
  438a8c:	10c00d83 	ldbu	r3,54(r2)
  438a90:	d0a71403 	ldbu	r2,-25520(gp)
  438a94:	1884b03a 	or	r2,r3,r2
  438a98:	d0a71405 	stb	r2,-25520(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  438a9c:	e0bff217 	ldw	r2,-56(fp)
  438aa0:	10800d03 	ldbu	r2,52(r2)
  438aa4:	11003fcc 	andi	r4,r2,255
  438aa8:	e0bff217 	ldw	r2,-56(fp)
  438aac:	10800d03 	ldbu	r2,52(r2)
  438ab0:	10c03fcc 	andi	r3,r2,255
  438ab4:	d0a71444 	addi	r2,gp,-25519
  438ab8:	1885883a 	add	r2,r3,r2
  438abc:	10c00003 	ldbu	r3,0(r2)
  438ac0:	e0bff217 	ldw	r2,-56(fp)
  438ac4:	10800d43 	ldbu	r2,53(r2)
  438ac8:	1884b03a 	or	r2,r3,r2
  438acc:	1007883a 	mov	r3,r2
  438ad0:	d0a71444 	addi	r2,gp,-25519
  438ad4:	2085883a 	add	r2,r4,r2
  438ad8:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  438adc:	d0a71043 	ldbu	r2,-25535(gp)
  438ae0:	10800044 	addi	r2,r2,1
  438ae4:	d0a71045 	stb	r2,-25535(gp)
  438ae8:	e0bff117 	ldw	r2,-60(fp)
  438aec:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  438af0:	0005303a 	rdctl	r2,status
  438af4:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  438af8:	e0fff817 	ldw	r3,-32(fp)
  438afc:	00bfff84 	movi	r2,-2
  438b00:	1884703a 	and	r2,r3,r2
  438b04:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  438b08:	e0bff717 	ldw	r2,-36(fp)
  438b0c:	1080004c 	andi	r2,r2,1
  438b10:	e0fff817 	ldw	r3,-32(fp)
  438b14:	1884b03a 	or	r2,r3,r2
  438b18:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  438b1c:	e0bff817 	ldw	r2,-32(fp)
  438b20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  438b24:	0005883a 	mov	r2,zero
  438b28:	00001006 	br	438b6c <OS_TCBInit+0x348>
  438b2c:	e0bff117 	ldw	r2,-60(fp)
  438b30:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  438b34:	0005303a 	rdctl	r2,status
  438b38:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  438b3c:	e0fffa17 	ldw	r3,-24(fp)
  438b40:	00bfff84 	movi	r2,-2
  438b44:	1884703a 	and	r2,r3,r2
  438b48:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  438b4c:	e0bff917 	ldw	r2,-28(fp)
  438b50:	1080004c 	andi	r2,r2,1
  438b54:	e0fffa17 	ldw	r3,-24(fp)
  438b58:	1884b03a 	or	r2,r3,r2
  438b5c:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  438b60:	e0bffa17 	ldw	r2,-24(fp)
  438b64:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  438b68:	00801084 	movi	r2,66
}
  438b6c:	e037883a 	mov	sp,fp
  438b70:	dfc00117 	ldw	ra,4(sp)
  438b74:	df000017 	ldw	fp,0(sp)
  438b78:	dec00204 	addi	sp,sp,8
  438b7c:	f800283a 	ret

00438b80 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  438b80:	defffe04 	addi	sp,sp,-8
  438b84:	df000115 	stw	fp,4(sp)
  438b88:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  438b8c:	d0a01404 	addi	r2,gp,-32688
  438b90:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  438b94:	d0a01504 	addi	r2,gp,-32684
  438b98:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  438b9c:	d0a01684 	addi	r2,gp,-32678
  438ba0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  438ba4:	d0a01704 	addi	r2,gp,-32676
  438ba8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  438bac:	d0a01604 	addi	r2,gp,-32680
  438bb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  438bb4:	d0a01784 	addi	r2,gp,-32674
  438bb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  438bbc:	d0a01804 	addi	r2,gp,-32672
  438bc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  438bc4:	d0a01884 	addi	r2,gp,-32670
  438bc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  438bcc:	d0a01904 	addi	r2,gp,-32668
  438bd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  438bd4:	d0a01984 	addi	r2,gp,-32666
  438bd8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  438bdc:	d0a01a04 	addi	r2,gp,-32664
  438be0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  438be4:	d0a01a84 	addi	r2,gp,-32662
  438be8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  438bec:	d0a01b04 	addi	r2,gp,-32660
  438bf0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  438bf4:	d0a01b84 	addi	r2,gp,-32658
  438bf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  438bfc:	d0a01c04 	addi	r2,gp,-32656
  438c00:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  438c04:	d0a01c84 	addi	r2,gp,-32654
  438c08:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  438c0c:	d0a01d04 	addi	r2,gp,-32652
  438c10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  438c14:	d0a01d84 	addi	r2,gp,-32650
  438c18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  438c1c:	d0a01e04 	addi	r2,gp,-32648
  438c20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  438c24:	d0a01e84 	addi	r2,gp,-32646
  438c28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  438c2c:	d0a01f04 	addi	r2,gp,-32644
  438c30:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  438c34:	d0a01f84 	addi	r2,gp,-32642
  438c38:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  438c3c:	d0a02004 	addi	r2,gp,-32640
  438c40:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  438c44:	d0a02084 	addi	r2,gp,-32638
  438c48:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  438c4c:	d0a02104 	addi	r2,gp,-32636
  438c50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  438c54:	d0a02184 	addi	r2,gp,-32634
  438c58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  438c5c:	d0a02204 	addi	r2,gp,-32632
  438c60:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  438c64:	d0a02284 	addi	r2,gp,-32630
  438c68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  438c6c:	d0a02304 	addi	r2,gp,-32628
  438c70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  438c74:	d0a02384 	addi	r2,gp,-32626
  438c78:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  438c7c:	d0a02404 	addi	r2,gp,-32624
  438c80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  438c84:	d0a02484 	addi	r2,gp,-32622
  438c88:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  438c8c:	d0a02504 	addi	r2,gp,-32620
  438c90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  438c94:	d0a02584 	addi	r2,gp,-32618
  438c98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  438c9c:	d0a02604 	addi	r2,gp,-32616
  438ca0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  438ca4:	d0a02684 	addi	r2,gp,-32614
  438ca8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  438cac:	d0a02704 	addi	r2,gp,-32612
  438cb0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  438cb4:	d0a02784 	addi	r2,gp,-32610
  438cb8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  438cbc:	d0a02804 	addi	r2,gp,-32608
  438cc0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  438cc4:	d0a02884 	addi	r2,gp,-32606
  438cc8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  438ccc:	d0a02904 	addi	r2,gp,-32604
  438cd0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  438cd4:	d0a02984 	addi	r2,gp,-32602
  438cd8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  438cdc:	d0a02a04 	addi	r2,gp,-32600
  438ce0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  438ce4:	d0a02a84 	addi	r2,gp,-32598
  438ce8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  438cec:	d0a02b04 	addi	r2,gp,-32596
  438cf0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  438cf4:	d0a03004 	addi	r2,gp,-32576
  438cf8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  438cfc:	e037883a 	mov	sp,fp
  438d00:	df000017 	ldw	fp,0(sp)
  438d04:	dec00104 	addi	sp,sp,4
  438d08:	f800283a 	ret

00438d0c <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  438d0c:	deffed04 	addi	sp,sp,-76
  438d10:	df001215 	stw	fp,72(sp)
  438d14:	df001204 	addi	fp,sp,72
  438d18:	e13ffc15 	stw	r4,-16(fp)
  438d1c:	2807883a 	mov	r3,r5
  438d20:	3005883a 	mov	r2,r6
  438d24:	e1ffff15 	stw	r7,-4(fp)
  438d28:	e0fffd0d 	sth	r3,-12(fp)
  438d2c:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  438d30:	e03fef15 	stw	zero,-68(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  438d34:	e0bfff17 	ldw	r2,-4(fp)
  438d38:	1000021e 	bne	r2,zero,438d44 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
  438d3c:	0005883a 	mov	r2,zero
  438d40:	0000e706 	br	4390e0 <OSFlagAccept+0x3d4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  438d44:	e0bffc17 	ldw	r2,-16(fp)
  438d48:	1000051e 	bne	r2,zero,438d60 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  438d4c:	e0bfff17 	ldw	r2,-4(fp)
  438d50:	00c01b84 	movi	r3,110
  438d54:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  438d58:	0005883a 	mov	r2,zero
  438d5c:	0000e006 	br	4390e0 <OSFlagAccept+0x3d4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  438d60:	e0bffc17 	ldw	r2,-16(fp)
  438d64:	10800003 	ldbu	r2,0(r2)
  438d68:	10803fcc 	andi	r2,r2,255
  438d6c:	10800160 	cmpeqi	r2,r2,5
  438d70:	1000051e 	bne	r2,zero,438d88 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  438d74:	e0bfff17 	ldw	r2,-4(fp)
  438d78:	00c00044 	movi	r3,1
  438d7c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  438d80:	0005883a 	mov	r2,zero
  438d84:	0000d606 	br	4390e0 <OSFlagAccept+0x3d4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  438d88:	e0fffe03 	ldbu	r3,-8(fp)
  438d8c:	00bfe004 	movi	r2,-128
  438d90:	1884703a 	and	r2,r3,r2
  438d94:	e0bff005 	stb	r2,-64(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  438d98:	e0bff003 	ldbu	r2,-64(fp)
  438d9c:	10000626 	beq	r2,zero,438db8 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
  438da0:	e0bffe03 	ldbu	r2,-8(fp)
  438da4:	10801fcc 	andi	r2,r2,127
  438da8:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  438dac:	00800044 	movi	r2,1
  438db0:	e0bfee85 	stb	r2,-70(fp)
  438db4:	00000106 	br	438dbc <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
  438db8:	e03fee85 	stb	zero,-70(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  438dbc:	e0bfff17 	ldw	r2,-4(fp)
  438dc0:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  438dc4:	0005303a 	rdctl	r2,status
  438dc8:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  438dcc:	e0fff117 	ldw	r3,-60(fp)
  438dd0:	00bfff84 	movi	r2,-2
  438dd4:	1884703a 	and	r2,r3,r2
  438dd8:	1001703a 	wrctl	status,r2
  
  return context;
  438ddc:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
  438de0:	e0bfef15 	stw	r2,-68(fp)
    switch (wait_type) {
  438de4:	e0bffe03 	ldbu	r2,-8(fp)
  438de8:	10c00060 	cmpeqi	r3,r2,1
  438dec:	1800801e 	bne	r3,zero,438ff0 <OSFlagAccept+0x2e4>
  438df0:	10c00088 	cmpgei	r3,r2,2
  438df4:	1800021e 	bne	r3,zero,438e00 <OSFlagAccept+0xf4>
  438df8:	10005526 	beq	r2,zero,438f50 <OSFlagAccept+0x244>
  438dfc:	0000a306 	br	43908c <OSFlagAccept+0x380>
  438e00:	10c000a0 	cmpeqi	r3,r2,2
  438e04:	1800031e 	bne	r3,zero,438e14 <OSFlagAccept+0x108>
  438e08:	108000e0 	cmpeqi	r2,r2,3
  438e0c:	1000291e 	bne	r2,zero,438eb4 <OSFlagAccept+0x1a8>
  438e10:	00009e06 	br	43908c <OSFlagAccept+0x380>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  438e14:	e0bffc17 	ldw	r2,-16(fp)
  438e18:	10c0020b 	ldhu	r3,8(r2)
  438e1c:	e0bffd0b 	ldhu	r2,-12(fp)
  438e20:	1884703a 	and	r2,r3,r2
  438e24:	e0bfee0d 	sth	r2,-72(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  438e28:	e0ffee0b 	ldhu	r3,-72(fp)
  438e2c:	e0bffd0b 	ldhu	r2,-12(fp)
  438e30:	18800d1e 	bne	r3,r2,438e68 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  438e34:	e0bfee83 	ldbu	r2,-70(fp)
  438e38:	10800058 	cmpnei	r2,r2,1
  438e3c:	10000d1e 	bne	r2,zero,438e74 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  438e40:	e0bffc17 	ldw	r2,-16(fp)
  438e44:	1080020b 	ldhu	r2,8(r2)
  438e48:	1007883a 	mov	r3,r2
  438e4c:	e0bfee0b 	ldhu	r2,-72(fp)
  438e50:	0084303a 	nor	r2,zero,r2
  438e54:	1884703a 	and	r2,r3,r2
  438e58:	1007883a 	mov	r3,r2
  438e5c:	e0bffc17 	ldw	r2,-16(fp)
  438e60:	10c0020d 	sth	r3,8(r2)
  438e64:	00000306 	br	438e74 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  438e68:	e0bfff17 	ldw	r2,-4(fp)
  438e6c:	00c01c04 	movi	r3,112
  438e70:	10c00005 	stb	r3,0(r2)
  438e74:	e0bfef17 	ldw	r2,-68(fp)
  438e78:	e0bff215 	stw	r2,-56(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  438e7c:	0005303a 	rdctl	r2,status
  438e80:	e0bff315 	stw	r2,-52(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  438e84:	e0fff317 	ldw	r3,-52(fp)
  438e88:	00bfff84 	movi	r2,-2
  438e8c:	1884703a 	and	r2,r3,r2
  438e90:	e0bff315 	stw	r2,-52(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  438e94:	e0bff217 	ldw	r2,-56(fp)
  438e98:	1080004c 	andi	r2,r2,1
  438e9c:	e0fff317 	ldw	r3,-52(fp)
  438ea0:	1884b03a 	or	r2,r3,r2
  438ea4:	e0bff315 	stw	r2,-52(fp)
  
  NIOS2_WRITE_STATUS (status);
  438ea8:	e0bff317 	ldw	r2,-52(fp)
  438eac:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  438eb0:	00008a06 	br	4390dc <OSFlagAccept+0x3d0>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  438eb4:	e0bffc17 	ldw	r2,-16(fp)
  438eb8:	10c0020b 	ldhu	r3,8(r2)
  438ebc:	e0bffd0b 	ldhu	r2,-12(fp)
  438ec0:	1884703a 	and	r2,r3,r2
  438ec4:	e0bfee0d 	sth	r2,-72(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  438ec8:	e0bfee0b 	ldhu	r2,-72(fp)
  438ecc:	10000d26 	beq	r2,zero,438f04 <OSFlagAccept+0x1f8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  438ed0:	e0bfee83 	ldbu	r2,-70(fp)
  438ed4:	10800058 	cmpnei	r2,r2,1
  438ed8:	10000d1e 	bne	r2,zero,438f10 <OSFlagAccept+0x204>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  438edc:	e0bffc17 	ldw	r2,-16(fp)
  438ee0:	1080020b 	ldhu	r2,8(r2)
  438ee4:	1007883a 	mov	r3,r2
  438ee8:	e0bfee0b 	ldhu	r2,-72(fp)
  438eec:	0084303a 	nor	r2,zero,r2
  438ef0:	1884703a 	and	r2,r3,r2
  438ef4:	1007883a 	mov	r3,r2
  438ef8:	e0bffc17 	ldw	r2,-16(fp)
  438efc:	10c0020d 	sth	r3,8(r2)
  438f00:	00000306 	br	438f10 <OSFlagAccept+0x204>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  438f04:	e0bfff17 	ldw	r2,-4(fp)
  438f08:	00c01c04 	movi	r3,112
  438f0c:	10c00005 	stb	r3,0(r2)
  438f10:	e0bfef17 	ldw	r2,-68(fp)
  438f14:	e0bff415 	stw	r2,-48(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  438f18:	0005303a 	rdctl	r2,status
  438f1c:	e0bff515 	stw	r2,-44(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  438f20:	e0fff517 	ldw	r3,-44(fp)
  438f24:	00bfff84 	movi	r2,-2
  438f28:	1884703a 	and	r2,r3,r2
  438f2c:	e0bff515 	stw	r2,-44(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  438f30:	e0bff417 	ldw	r2,-48(fp)
  438f34:	1080004c 	andi	r2,r2,1
  438f38:	e0fff517 	ldw	r3,-44(fp)
  438f3c:	1884b03a 	or	r2,r3,r2
  438f40:	e0bff515 	stw	r2,-44(fp)
  
  NIOS2_WRITE_STATUS (status);
  438f44:	e0bff517 	ldw	r2,-44(fp)
  438f48:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  438f4c:	00006306 	br	4390dc <OSFlagAccept+0x3d0>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  438f50:	e0bffc17 	ldw	r2,-16(fp)
  438f54:	1080020b 	ldhu	r2,8(r2)
  438f58:	0084303a 	nor	r2,zero,r2
  438f5c:	1007883a 	mov	r3,r2
  438f60:	e0bffd0b 	ldhu	r2,-12(fp)
  438f64:	1884703a 	and	r2,r3,r2
  438f68:	e0bfee0d 	sth	r2,-72(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  438f6c:	e0ffee0b 	ldhu	r3,-72(fp)
  438f70:	e0bffd0b 	ldhu	r2,-12(fp)
  438f74:	18800b1e 	bne	r3,r2,438fa4 <OSFlagAccept+0x298>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  438f78:	e0bfee83 	ldbu	r2,-70(fp)
  438f7c:	10800058 	cmpnei	r2,r2,1
  438f80:	10000b1e 	bne	r2,zero,438fb0 <OSFlagAccept+0x2a4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  438f84:	e0bffc17 	ldw	r2,-16(fp)
  438f88:	10c0020b 	ldhu	r3,8(r2)
  438f8c:	e0bfee0b 	ldhu	r2,-72(fp)
  438f90:	1884b03a 	or	r2,r3,r2
  438f94:	1007883a 	mov	r3,r2
  438f98:	e0bffc17 	ldw	r2,-16(fp)
  438f9c:	10c0020d 	sth	r3,8(r2)
  438fa0:	00000306 	br	438fb0 <OSFlagAccept+0x2a4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  438fa4:	e0bfff17 	ldw	r2,-4(fp)
  438fa8:	00c01c04 	movi	r3,112
  438fac:	10c00005 	stb	r3,0(r2)
  438fb0:	e0bfef17 	ldw	r2,-68(fp)
  438fb4:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  438fb8:	0005303a 	rdctl	r2,status
  438fbc:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  438fc0:	e0fff717 	ldw	r3,-36(fp)
  438fc4:	00bfff84 	movi	r2,-2
  438fc8:	1884703a 	and	r2,r3,r2
  438fcc:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  438fd0:	e0bff617 	ldw	r2,-40(fp)
  438fd4:	1080004c 	andi	r2,r2,1
  438fd8:	e0fff717 	ldw	r3,-36(fp)
  438fdc:	1884b03a 	or	r2,r3,r2
  438fe0:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  438fe4:	e0bff717 	ldw	r2,-36(fp)
  438fe8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  438fec:	00003b06 	br	4390dc <OSFlagAccept+0x3d0>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  438ff0:	e0bffc17 	ldw	r2,-16(fp)
  438ff4:	1080020b 	ldhu	r2,8(r2)
  438ff8:	0084303a 	nor	r2,zero,r2
  438ffc:	1007883a 	mov	r3,r2
  439000:	e0bffd0b 	ldhu	r2,-12(fp)
  439004:	1884703a 	and	r2,r3,r2
  439008:	e0bfee0d 	sth	r2,-72(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  43900c:	e0bfee0b 	ldhu	r2,-72(fp)
  439010:	10000b26 	beq	r2,zero,439040 <OSFlagAccept+0x334>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  439014:	e0bfee83 	ldbu	r2,-70(fp)
  439018:	10800058 	cmpnei	r2,r2,1
  43901c:	10000b1e 	bne	r2,zero,43904c <OSFlagAccept+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  439020:	e0bffc17 	ldw	r2,-16(fp)
  439024:	10c0020b 	ldhu	r3,8(r2)
  439028:	e0bfee0b 	ldhu	r2,-72(fp)
  43902c:	1884b03a 	or	r2,r3,r2
  439030:	1007883a 	mov	r3,r2
  439034:	e0bffc17 	ldw	r2,-16(fp)
  439038:	10c0020d 	sth	r3,8(r2)
  43903c:	00000306 	br	43904c <OSFlagAccept+0x340>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  439040:	e0bfff17 	ldw	r2,-4(fp)
  439044:	00c01c04 	movi	r3,112
  439048:	10c00005 	stb	r3,0(r2)
  43904c:	e0bfef17 	ldw	r2,-68(fp)
  439050:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439054:	0005303a 	rdctl	r2,status
  439058:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43905c:	e0fff917 	ldw	r3,-28(fp)
  439060:	00bfff84 	movi	r2,-2
  439064:	1884703a 	and	r2,r3,r2
  439068:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43906c:	e0bff817 	ldw	r2,-32(fp)
  439070:	1080004c 	andi	r2,r2,1
  439074:	e0fff917 	ldw	r3,-28(fp)
  439078:	1884b03a 	or	r2,r3,r2
  43907c:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  439080:	e0bff917 	ldw	r2,-28(fp)
  439084:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  439088:	00001406 	br	4390dc <OSFlagAccept+0x3d0>
  43908c:	e0bfef17 	ldw	r2,-68(fp)
  439090:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439094:	0005303a 	rdctl	r2,status
  439098:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43909c:	e0fffb17 	ldw	r3,-20(fp)
  4390a0:	00bfff84 	movi	r2,-2
  4390a4:	1884703a 	and	r2,r3,r2
  4390a8:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4390ac:	e0bffa17 	ldw	r2,-24(fp)
  4390b0:	1080004c 	andi	r2,r2,1
  4390b4:	e0fffb17 	ldw	r3,-20(fp)
  4390b8:	1884b03a 	or	r2,r3,r2
  4390bc:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  4390c0:	e0bffb17 	ldw	r2,-20(fp)
  4390c4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  4390c8:	e03fee0d 	sth	zero,-72(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  4390cc:	e0bfff17 	ldw	r2,-4(fp)
  4390d0:	00c01bc4 	movi	r3,111
  4390d4:	10c00005 	stb	r3,0(r2)
             break;
  4390d8:	0001883a 	nop
    }
    return (flags_rdy);
  4390dc:	e0bfee0b 	ldhu	r2,-72(fp)
}
  4390e0:	e037883a 	mov	sp,fp
  4390e4:	df000017 	ldw	fp,0(sp)
  4390e8:	dec00104 	addi	sp,sp,4
  4390ec:	f800283a 	ret

004390f0 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  4390f0:	defff604 	addi	sp,sp,-40
  4390f4:	df000915 	stw	fp,36(sp)
  4390f8:	df000904 	addi	fp,sp,36
  4390fc:	2005883a 	mov	r2,r4
  439100:	e17fff15 	stw	r5,-4(fp)
  439104:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  439108:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  43910c:	e0bfff17 	ldw	r2,-4(fp)
  439110:	1000021e 	bne	r2,zero,43911c <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  439114:	0005883a 	mov	r2,zero
  439118:	00005106 	br	439260 <OSFlagCreate+0x170>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  43911c:	00801134 	movhi	r2,68
  439120:	109e0d04 	addi	r2,r2,30772
  439124:	10800003 	ldbu	r2,0(r2)
  439128:	10803fcc 	andi	r2,r2,255
  43912c:	10000526 	beq	r2,zero,439144 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  439130:	e0bfff17 	ldw	r2,-4(fp)
  439134:	00c00404 	movi	r3,16
  439138:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
  43913c:	0005883a 	mov	r2,zero
  439140:	00004706 	br	439260 <OSFlagCreate+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  439144:	0005303a 	rdctl	r2,status
  439148:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43914c:	e0fff917 	ldw	r3,-28(fp)
  439150:	00bfff84 	movi	r2,-2
  439154:	1884703a 	and	r2,r3,r2
  439158:	1001703a 	wrctl	status,r2
  
  return context;
  43915c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  439160:	e0bff715 	stw	r2,-36(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  439164:	00801134 	movhi	r2,68
  439168:	109e1004 	addi	r2,r2,30784
  43916c:	10800017 	ldw	r2,0(r2)
  439170:	e0bff815 	stw	r2,-32(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  439174:	e0bff817 	ldw	r2,-32(fp)
  439178:	10002626 	beq	r2,zero,439214 <OSFlagCreate+0x124>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  43917c:	00801134 	movhi	r2,68
  439180:	109e1004 	addi	r2,r2,30784
  439184:	10800017 	ldw	r2,0(r2)
  439188:	10c00117 	ldw	r3,4(r2)
  43918c:	00801134 	movhi	r2,68
  439190:	109e1004 	addi	r2,r2,30784
  439194:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  439198:	e0bff817 	ldw	r2,-32(fp)
  43919c:	00c00144 	movi	r3,5
  4391a0:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  4391a4:	e0bff817 	ldw	r2,-32(fp)
  4391a8:	e0fffe0b 	ldhu	r3,-8(fp)
  4391ac:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  4391b0:	e0bff817 	ldw	r2,-32(fp)
  4391b4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  4391b8:	e0bff817 	ldw	r2,-32(fp)
  4391bc:	00c00fc4 	movi	r3,63
  4391c0:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  4391c4:	e0bff817 	ldw	r2,-32(fp)
  4391c8:	100002c5 	stb	zero,11(r2)
  4391cc:	e0bff717 	ldw	r2,-36(fp)
  4391d0:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4391d4:	0005303a 	rdctl	r2,status
  4391d8:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4391dc:	e0fffb17 	ldw	r3,-20(fp)
  4391e0:	00bfff84 	movi	r2,-2
  4391e4:	1884703a 	and	r2,r3,r2
  4391e8:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4391ec:	e0bffa17 	ldw	r2,-24(fp)
  4391f0:	1080004c 	andi	r2,r2,1
  4391f4:	e0fffb17 	ldw	r3,-20(fp)
  4391f8:	1884b03a 	or	r2,r3,r2
  4391fc:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  439200:	e0bffb17 	ldw	r2,-20(fp)
  439204:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  439208:	e0bfff17 	ldw	r2,-4(fp)
  43920c:	10000005 	stb	zero,0(r2)
  439210:	00001206 	br	43925c <OSFlagCreate+0x16c>
  439214:	e0bff717 	ldw	r2,-36(fp)
  439218:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43921c:	0005303a 	rdctl	r2,status
  439220:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  439224:	e0fffd17 	ldw	r3,-12(fp)
  439228:	00bfff84 	movi	r2,-2
  43922c:	1884703a 	and	r2,r3,r2
  439230:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  439234:	e0bffc17 	ldw	r2,-16(fp)
  439238:	1080004c 	andi	r2,r2,1
  43923c:	e0fffd17 	ldw	r3,-12(fp)
  439240:	1884b03a 	or	r2,r3,r2
  439244:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  439248:	e0bffd17 	ldw	r2,-12(fp)
  43924c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  439250:	e0bfff17 	ldw	r2,-4(fp)
  439254:	00c01c84 	movi	r3,114
  439258:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  43925c:	e0bff817 	ldw	r2,-32(fp)
}
  439260:	e037883a 	mov	sp,fp
  439264:	df000017 	ldw	fp,0(sp)
  439268:	dec00104 	addi	sp,sp,4
  43926c:	f800283a 	ret

00439270 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  439270:	deffee04 	addi	sp,sp,-72
  439274:	dfc01115 	stw	ra,68(sp)
  439278:	df001015 	stw	fp,64(sp)
  43927c:	df001004 	addi	fp,sp,64
  439280:	e13ffd15 	stw	r4,-12(fp)
  439284:	2805883a 	mov	r2,r5
  439288:	e1bfff15 	stw	r6,-4(fp)
  43928c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  439290:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  439294:	e0bfff17 	ldw	r2,-4(fp)
  439298:	1000021e 	bne	r2,zero,4392a4 <OSFlagDel+0x34>
        return (pgrp);
  43929c:	e0bffd17 	ldw	r2,-12(fp)
  4392a0:	0000b606 	br	43957c <OSFlagDel+0x30c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  4392a4:	e0bffd17 	ldw	r2,-12(fp)
  4392a8:	1000051e 	bne	r2,zero,4392c0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  4392ac:	e0bfff17 	ldw	r2,-4(fp)
  4392b0:	00c01b84 	movi	r3,110
  4392b4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  4392b8:	e0bffd17 	ldw	r2,-12(fp)
  4392bc:	0000af06 	br	43957c <OSFlagDel+0x30c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  4392c0:	00801134 	movhi	r2,68
  4392c4:	109e0d04 	addi	r2,r2,30772
  4392c8:	10800003 	ldbu	r2,0(r2)
  4392cc:	10803fcc 	andi	r2,r2,255
  4392d0:	10000526 	beq	r2,zero,4392e8 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  4392d4:	e0bfff17 	ldw	r2,-4(fp)
  4392d8:	00c003c4 	movi	r3,15
  4392dc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  4392e0:	e0bffd17 	ldw	r2,-12(fp)
  4392e4:	0000a506 	br	43957c <OSFlagDel+0x30c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  4392e8:	e0bffd17 	ldw	r2,-12(fp)
  4392ec:	10800003 	ldbu	r2,0(r2)
  4392f0:	10803fcc 	andi	r2,r2,255
  4392f4:	10800160 	cmpeqi	r2,r2,5
  4392f8:	1000051e 	bne	r2,zero,439310 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
  4392fc:	e0bfff17 	ldw	r2,-4(fp)
  439300:	00c00044 	movi	r3,1
  439304:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  439308:	e0bffd17 	ldw	r2,-12(fp)
  43930c:	00009b06 	br	43957c <OSFlagDel+0x30c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  439310:	0005303a 	rdctl	r2,status
  439314:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  439318:	e0fff417 	ldw	r3,-48(fp)
  43931c:	00bfff84 	movi	r2,-2
  439320:	1884703a 	and	r2,r3,r2
  439324:	1001703a 	wrctl	status,r2
  
  return context;
  439328:	e0bff417 	ldw	r2,-48(fp)
    }
    OS_ENTER_CRITICAL();
  43932c:	e0bff315 	stw	r2,-52(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  439330:	e0bffd17 	ldw	r2,-12(fp)
  439334:	10800117 	ldw	r2,4(r2)
  439338:	10000326 	beq	r2,zero,439348 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  43933c:	00800044 	movi	r2,1
  439340:	e0bff005 	stb	r2,-64(fp)
  439344:	00000106 	br	43934c <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  439348:	e03ff005 	stb	zero,-64(fp)
    }
    switch (opt) {
  43934c:	e0bffe03 	ldbu	r2,-8(fp)
  439350:	10000326 	beq	r2,zero,439360 <OSFlagDel+0xf0>
  439354:	10800060 	cmpeqi	r2,r2,1
  439358:	10003d1e 	bne	r2,zero,439450 <OSFlagDel+0x1e0>
  43935c:	00007106 	br	439524 <OSFlagDel+0x2b4>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  439360:	e0bff003 	ldbu	r2,-64(fp)
  439364:	1000251e 	bne	r2,zero,4393fc <OSFlagDel+0x18c>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  439368:	e0bffd17 	ldw	r2,-12(fp)
  43936c:	00c00fc4 	movi	r3,63
  439370:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  439374:	e0bffd17 	ldw	r2,-12(fp)
  439378:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  43937c:	e0bffd17 	ldw	r2,-12(fp)
  439380:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  439384:	00801134 	movhi	r2,68
  439388:	109e1004 	addi	r2,r2,30784
  43938c:	10c00017 	ldw	r3,0(r2)
  439390:	e0bffd17 	ldw	r2,-12(fp)
  439394:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  439398:	e0bffd17 	ldw	r2,-12(fp)
  43939c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  4393a0:	00801134 	movhi	r2,68
  4393a4:	109e1004 	addi	r2,r2,30784
  4393a8:	e0fffd17 	ldw	r3,-12(fp)
  4393ac:	10c00015 	stw	r3,0(r2)
  4393b0:	e0bff317 	ldw	r2,-52(fp)
  4393b4:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4393b8:	0005303a 	rdctl	r2,status
  4393bc:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4393c0:	e0fff617 	ldw	r3,-40(fp)
  4393c4:	00bfff84 	movi	r2,-2
  4393c8:	1884703a 	and	r2,r3,r2
  4393cc:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4393d0:	e0bff517 	ldw	r2,-44(fp)
  4393d4:	1080004c 	andi	r2,r2,1
  4393d8:	e0fff617 	ldw	r3,-40(fp)
  4393dc:	1884b03a 	or	r2,r3,r2
  4393e0:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  4393e4:	e0bff617 	ldw	r2,-40(fp)
  4393e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  4393ec:	e0bfff17 	ldw	r2,-4(fp)
  4393f0:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  4393f4:	e03ff215 	stw	zero,-56(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
  4393f8:	00005f06 	br	439578 <OSFlagDel+0x308>
  4393fc:	e0bff317 	ldw	r2,-52(fp)
  439400:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439404:	0005303a 	rdctl	r2,status
  439408:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43940c:	e0fff817 	ldw	r3,-32(fp)
  439410:	00bfff84 	movi	r2,-2
  439414:	1884703a 	and	r2,r3,r2
  439418:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43941c:	e0bff717 	ldw	r2,-36(fp)
  439420:	1080004c 	andi	r2,r2,1
  439424:	e0fff817 	ldw	r3,-32(fp)
  439428:	1884b03a 	or	r2,r3,r2
  43942c:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  439430:	e0bff817 	ldw	r2,-32(fp)
  439434:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  439438:	e0bfff17 	ldw	r2,-4(fp)
  43943c:	00c01244 	movi	r3,73
  439440:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
  439444:	e0bffd17 	ldw	r2,-12(fp)
  439448:	e0bff215 	stw	r2,-56(fp)
             }
             break;
  43944c:	00004a06 	br	439578 <OSFlagDel+0x308>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  439450:	e0bffd17 	ldw	r2,-12(fp)
  439454:	10800117 	ldw	r2,4(r2)
  439458:	e0bff115 	stw	r2,-60(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  43945c:	00000606 	br	439478 <OSFlagDel+0x208>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  439460:	e13ff117 	ldw	r4,-60(fp)
  439464:	000b883a 	mov	r5,zero
  439468:	043a96c0 	call	43a96c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  43946c:	e0bff117 	ldw	r2,-60(fp)
  439470:	10800017 	ldw	r2,0(r2)
  439474:	e0bff115 	stw	r2,-60(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  439478:	e0bff117 	ldw	r2,-60(fp)
  43947c:	103ff81e 	bne	r2,zero,439460 <OSFlagDel+0x1f0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  439480:	e0bffd17 	ldw	r2,-12(fp)
  439484:	00c00fc4 	movi	r3,63
  439488:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  43948c:	e0bffd17 	ldw	r2,-12(fp)
  439490:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  439494:	e0bffd17 	ldw	r2,-12(fp)
  439498:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  43949c:	00801134 	movhi	r2,68
  4394a0:	109e1004 	addi	r2,r2,30784
  4394a4:	10c00017 	ldw	r3,0(r2)
  4394a8:	e0bffd17 	ldw	r2,-12(fp)
  4394ac:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  4394b0:	e0bffd17 	ldw	r2,-12(fp)
  4394b4:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  4394b8:	00801134 	movhi	r2,68
  4394bc:	109e1004 	addi	r2,r2,30784
  4394c0:	e0fffd17 	ldw	r3,-12(fp)
  4394c4:	10c00015 	stw	r3,0(r2)
  4394c8:	e0bff317 	ldw	r2,-52(fp)
  4394cc:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4394d0:	0005303a 	rdctl	r2,status
  4394d4:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4394d8:	e0fffa17 	ldw	r3,-24(fp)
  4394dc:	00bfff84 	movi	r2,-2
  4394e0:	1884703a 	and	r2,r3,r2
  4394e4:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4394e8:	e0bff917 	ldw	r2,-28(fp)
  4394ec:	1080004c 	andi	r2,r2,1
  4394f0:	e0fffa17 	ldw	r3,-24(fp)
  4394f4:	1884b03a 	or	r2,r3,r2
  4394f8:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  4394fc:	e0bffa17 	ldw	r2,-24(fp)
  439500:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  439504:	e0bff003 	ldbu	r2,-64(fp)
  439508:	10800058 	cmpnei	r2,r2,1
  43950c:	1000011e 	bne	r2,zero,439514 <OSFlagDel+0x2a4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  439510:	04383a80 	call	4383a8 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  439514:	e0bfff17 	ldw	r2,-4(fp)
  439518:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  43951c:	e03ff215 	stw	zero,-56(fp)
             break;
  439520:	00001506 	br	439578 <OSFlagDel+0x308>
  439524:	e0bff317 	ldw	r2,-52(fp)
  439528:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43952c:	0005303a 	rdctl	r2,status
  439530:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  439534:	e0fffc17 	ldw	r3,-16(fp)
  439538:	00bfff84 	movi	r2,-2
  43953c:	1884703a 	and	r2,r3,r2
  439540:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  439544:	e0bffb17 	ldw	r2,-20(fp)
  439548:	1080004c 	andi	r2,r2,1
  43954c:	e0fffc17 	ldw	r3,-16(fp)
  439550:	1884b03a 	or	r2,r3,r2
  439554:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  439558:	e0bffc17 	ldw	r2,-16(fp)
  43955c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  439560:	e0bfff17 	ldw	r2,-4(fp)
  439564:	00c001c4 	movi	r3,7
  439568:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
  43956c:	e0bffd17 	ldw	r2,-12(fp)
  439570:	e0bff215 	stw	r2,-56(fp)
             break;
  439574:	0001883a 	nop
    }
    return (pgrp_return);
  439578:	e0bff217 	ldw	r2,-56(fp)
}
  43957c:	e037883a 	mov	sp,fp
  439580:	dfc00117 	ldw	ra,4(sp)
  439584:	df000017 	ldw	fp,0(sp)
  439588:	dec00204 	addi	sp,sp,8
  43958c:	f800283a 	ret

00439590 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  439590:	defff404 	addi	sp,sp,-48
  439594:	dfc00b15 	stw	ra,44(sp)
  439598:	df000a15 	stw	fp,40(sp)
  43959c:	df000a04 	addi	fp,sp,40
  4395a0:	e13ffd15 	stw	r4,-12(fp)
  4395a4:	e17ffe15 	stw	r5,-8(fp)
  4395a8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  4395ac:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  4395b0:	e0bfff17 	ldw	r2,-4(fp)
  4395b4:	1000021e 	bne	r2,zero,4395c0 <OSFlagNameGet+0x30>
        return (0);
  4395b8:	0005883a 	mov	r2,zero
  4395bc:	00005106 	br	439704 <OSFlagNameGet+0x174>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  4395c0:	e0bffd17 	ldw	r2,-12(fp)
  4395c4:	1000051e 	bne	r2,zero,4395dc <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  4395c8:	e0bfff17 	ldw	r2,-4(fp)
  4395cc:	00c01b84 	movi	r3,110
  4395d0:	10c00005 	stb	r3,0(r2)
        return (0);
  4395d4:	0005883a 	mov	r2,zero
  4395d8:	00004a06 	br	439704 <OSFlagNameGet+0x174>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  4395dc:	e0bffe17 	ldw	r2,-8(fp)
  4395e0:	1000051e 	bne	r2,zero,4395f8 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  4395e4:	e0bfff17 	ldw	r2,-4(fp)
  4395e8:	00c00304 	movi	r3,12
  4395ec:	10c00005 	stb	r3,0(r2)
        return (0);
  4395f0:	0005883a 	mov	r2,zero
  4395f4:	00004306 	br	439704 <OSFlagNameGet+0x174>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  4395f8:	00801134 	movhi	r2,68
  4395fc:	109e0d04 	addi	r2,r2,30772
  439600:	10800003 	ldbu	r2,0(r2)
  439604:	10803fcc 	andi	r2,r2,255
  439608:	10000526 	beq	r2,zero,439620 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
  43960c:	e0bfff17 	ldw	r2,-4(fp)
  439610:	00c00444 	movi	r3,17
  439614:	10c00005 	stb	r3,0(r2)
        return (0);
  439618:	0005883a 	mov	r2,zero
  43961c:	00003906 	br	439704 <OSFlagNameGet+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  439620:	0005303a 	rdctl	r2,status
  439624:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  439628:	e0fff817 	ldw	r3,-32(fp)
  43962c:	00bfff84 	movi	r2,-2
  439630:	1884703a 	and	r2,r3,r2
  439634:	1001703a 	wrctl	status,r2
  
  return context;
  439638:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  43963c:	e0bff615 	stw	r2,-40(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  439640:	e0bffd17 	ldw	r2,-12(fp)
  439644:	10800003 	ldbu	r2,0(r2)
  439648:	10803fcc 	andi	r2,r2,255
  43964c:	10800160 	cmpeqi	r2,r2,5
  439650:	1000141e 	bne	r2,zero,4396a4 <OSFlagNameGet+0x114>
  439654:	e0bff617 	ldw	r2,-40(fp)
  439658:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43965c:	0005303a 	rdctl	r2,status
  439660:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  439664:	e0fffa17 	ldw	r3,-24(fp)
  439668:	00bfff84 	movi	r2,-2
  43966c:	1884703a 	and	r2,r3,r2
  439670:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  439674:	e0bff917 	ldw	r2,-28(fp)
  439678:	1080004c 	andi	r2,r2,1
  43967c:	e0fffa17 	ldw	r3,-24(fp)
  439680:	1884b03a 	or	r2,r3,r2
  439684:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  439688:	e0bffa17 	ldw	r2,-24(fp)
  43968c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  439690:	e0bfff17 	ldw	r2,-4(fp)
  439694:	00c00044 	movi	r3,1
  439698:	10c00005 	stb	r3,0(r2)
        return (0);
  43969c:	0005883a 	mov	r2,zero
  4396a0:	00001806 	br	439704 <OSFlagNameGet+0x174>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  4396a4:	e0bffd17 	ldw	r2,-12(fp)
  4396a8:	10800284 	addi	r2,r2,10
  4396ac:	e13ffe17 	ldw	r4,-8(fp)
  4396b0:	100b883a 	mov	r5,r2
  4396b4:	04385100 	call	438510 <OS_StrCopy>
  4396b8:	e0bff705 	stb	r2,-36(fp)
  4396bc:	e0bff617 	ldw	r2,-40(fp)
  4396c0:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4396c4:	0005303a 	rdctl	r2,status
  4396c8:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4396cc:	e0fffc17 	ldw	r3,-16(fp)
  4396d0:	00bfff84 	movi	r2,-2
  4396d4:	1884703a 	and	r2,r3,r2
  4396d8:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4396dc:	e0bffb17 	ldw	r2,-20(fp)
  4396e0:	1080004c 	andi	r2,r2,1
  4396e4:	e0fffc17 	ldw	r3,-16(fp)
  4396e8:	1884b03a 	or	r2,r3,r2
  4396ec:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  4396f0:	e0bffc17 	ldw	r2,-16(fp)
  4396f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  4396f8:	e0bfff17 	ldw	r2,-4(fp)
  4396fc:	10000005 	stb	zero,0(r2)
    return (len);
  439700:	e0bff703 	ldbu	r2,-36(fp)
}
  439704:	e037883a 	mov	sp,fp
  439708:	dfc00117 	ldw	ra,4(sp)
  43970c:	df000017 	ldw	fp,0(sp)
  439710:	dec00204 	addi	sp,sp,8
  439714:	f800283a 	ret

00439718 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  439718:	defff204 	addi	sp,sp,-56
  43971c:	dfc00d15 	stw	ra,52(sp)
  439720:	df000c15 	stw	fp,48(sp)
  439724:	df000c04 	addi	fp,sp,48
  439728:	e13ffd15 	stw	r4,-12(fp)
  43972c:	e17ffe15 	stw	r5,-8(fp)
  439730:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  439734:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  439738:	e0bfff17 	ldw	r2,-4(fp)
  43973c:	10006626 	beq	r2,zero,4398d8 <OSFlagNameSet+0x1c0>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  439740:	e0bffd17 	ldw	r2,-12(fp)
  439744:	1000041e 	bne	r2,zero,439758 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  439748:	e0bfff17 	ldw	r2,-4(fp)
  43974c:	00c01b84 	movi	r3,110
  439750:	10c00005 	stb	r3,0(r2)
        return;
  439754:	00006106 	br	4398dc <OSFlagNameSet+0x1c4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  439758:	e0bffe17 	ldw	r2,-8(fp)
  43975c:	1000041e 	bne	r2,zero,439770 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  439760:	e0bfff17 	ldw	r2,-4(fp)
  439764:	00c00304 	movi	r3,12
  439768:	10c00005 	stb	r3,0(r2)
        return;
  43976c:	00005b06 	br	4398dc <OSFlagNameSet+0x1c4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  439770:	00801134 	movhi	r2,68
  439774:	109e0d04 	addi	r2,r2,30772
  439778:	10800003 	ldbu	r2,0(r2)
  43977c:	10803fcc 	andi	r2,r2,255
  439780:	10000426 	beq	r2,zero,439794 <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
  439784:	e0bfff17 	ldw	r2,-4(fp)
  439788:	00c00484 	movi	r3,18
  43978c:	10c00005 	stb	r3,0(r2)
        return;
  439790:	00005206 	br	4398dc <OSFlagNameSet+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  439794:	0005303a 	rdctl	r2,status
  439798:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43979c:	e0fff617 	ldw	r3,-40(fp)
  4397a0:	00bfff84 	movi	r2,-2
  4397a4:	1884703a 	and	r2,r3,r2
  4397a8:	1001703a 	wrctl	status,r2
  
  return context;
  4397ac:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  4397b0:	e0bff415 	stw	r2,-48(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  4397b4:	e0bffd17 	ldw	r2,-12(fp)
  4397b8:	10800003 	ldbu	r2,0(r2)
  4397bc:	10803fcc 	andi	r2,r2,255
  4397c0:	10800160 	cmpeqi	r2,r2,5
  4397c4:	1000131e 	bne	r2,zero,439814 <OSFlagNameSet+0xfc>
  4397c8:	e0bff417 	ldw	r2,-48(fp)
  4397cc:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4397d0:	0005303a 	rdctl	r2,status
  4397d4:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4397d8:	e0fff817 	ldw	r3,-32(fp)
  4397dc:	00bfff84 	movi	r2,-2
  4397e0:	1884703a 	and	r2,r3,r2
  4397e4:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4397e8:	e0bff717 	ldw	r2,-36(fp)
  4397ec:	1080004c 	andi	r2,r2,1
  4397f0:	e0fff817 	ldw	r3,-32(fp)
  4397f4:	1884b03a 	or	r2,r3,r2
  4397f8:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  4397fc:	e0bff817 	ldw	r2,-32(fp)
  439800:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  439804:	e0bfff17 	ldw	r2,-4(fp)
  439808:	00c00044 	movi	r3,1
  43980c:	10c00005 	stb	r3,0(r2)
        return;
  439810:	00003206 	br	4398dc <OSFlagNameSet+0x1c4>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  439814:	e13ffe17 	ldw	r4,-8(fp)
  439818:	043858c0 	call	43858c <OS_StrLen>
  43981c:	e0bff505 	stb	r2,-44(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  439820:	e0bff503 	ldbu	r2,-44(fp)
  439824:	10800830 	cmpltui	r2,r2,32
  439828:	1000131e 	bne	r2,zero,439878 <OSFlagNameSet+0x160>
  43982c:	e0bff417 	ldw	r2,-48(fp)
  439830:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439834:	0005303a 	rdctl	r2,status
  439838:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43983c:	e0fffa17 	ldw	r3,-24(fp)
  439840:	00bfff84 	movi	r2,-2
  439844:	1884703a 	and	r2,r3,r2
  439848:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43984c:	e0bff917 	ldw	r2,-28(fp)
  439850:	1080004c 	andi	r2,r2,1
  439854:	e0fffa17 	ldw	r3,-24(fp)
  439858:	1884b03a 	or	r2,r3,r2
  43985c:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  439860:	e0bffa17 	ldw	r2,-24(fp)
  439864:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  439868:	e0bfff17 	ldw	r2,-4(fp)
  43986c:	00c01cc4 	movi	r3,115
  439870:	10c00005 	stb	r3,0(r2)
        return;
  439874:	00001906 	br	4398dc <OSFlagNameSet+0x1c4>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  439878:	e0bffd17 	ldw	r2,-12(fp)
  43987c:	10800284 	addi	r2,r2,10
  439880:	1009883a 	mov	r4,r2
  439884:	e17ffe17 	ldw	r5,-8(fp)
  439888:	04385100 	call	438510 <OS_StrCopy>
  43988c:	e0bff417 	ldw	r2,-48(fp)
  439890:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439894:	0005303a 	rdctl	r2,status
  439898:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43989c:	e0fffc17 	ldw	r3,-16(fp)
  4398a0:	00bfff84 	movi	r2,-2
  4398a4:	1884703a 	and	r2,r3,r2
  4398a8:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4398ac:	e0bffb17 	ldw	r2,-20(fp)
  4398b0:	1080004c 	andi	r2,r2,1
  4398b4:	e0fffc17 	ldw	r3,-16(fp)
  4398b8:	1884b03a 	or	r2,r3,r2
  4398bc:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  4398c0:	e0bffc17 	ldw	r2,-16(fp)
  4398c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  4398c8:	e0bfff17 	ldw	r2,-4(fp)
  4398cc:	10000005 	stb	zero,0(r2)
    return;
  4398d0:	0001883a 	nop
  4398d4:	00000106 	br	4398dc <OSFlagNameSet+0x1c4>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  4398d8:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
  4398dc:	e037883a 	mov	sp,fp
  4398e0:	dfc00117 	ldw	ra,4(sp)
  4398e4:	df000017 	ldw	fp,0(sp)
  4398e8:	dec00204 	addi	sp,sp,8
  4398ec:	f800283a 	ret

004398f0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  4398f0:	deffd604 	addi	sp,sp,-168
  4398f4:	dfc02915 	stw	ra,164(sp)
  4398f8:	df002815 	stw	fp,160(sp)
  4398fc:	df002804 	addi	fp,sp,160
  439900:	e13ffc15 	stw	r4,-16(fp)
  439904:	2809883a 	mov	r4,r5
  439908:	3007883a 	mov	r3,r6
  43990c:	3805883a 	mov	r2,r7
  439910:	e13ffd0d 	sth	r4,-12(fp)
  439914:	e0fffe05 	stb	r3,-8(fp)
  439918:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  43991c:	e03fda15 	stw	zero,-152(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  439920:	e0800217 	ldw	r2,8(fp)
  439924:	1000021e 	bne	r2,zero,439930 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
  439928:	0005883a 	mov	r2,zero
  43992c:	0001ef06 	br	43a0ec <OSFlagPend+0x7fc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  439930:	e0bffc17 	ldw	r2,-16(fp)
  439934:	1000051e 	bne	r2,zero,43994c <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  439938:	e0800217 	ldw	r2,8(fp)
  43993c:	00c01b84 	movi	r3,110
  439940:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  439944:	0005883a 	mov	r2,zero
  439948:	0001e806 	br	43a0ec <OSFlagPend+0x7fc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  43994c:	00801134 	movhi	r2,68
  439950:	109e0d04 	addi	r2,r2,30772
  439954:	10800003 	ldbu	r2,0(r2)
  439958:	10803fcc 	andi	r2,r2,255
  43995c:	10000526 	beq	r2,zero,439974 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  439960:	e0800217 	ldw	r2,8(fp)
  439964:	00c00084 	movi	r3,2
  439968:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  43996c:	0005883a 	mov	r2,zero
  439970:	0001de06 	br	43a0ec <OSFlagPend+0x7fc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  439974:	00801134 	movhi	r2,68
  439978:	109dff04 	addi	r2,r2,30716
  43997c:	10800003 	ldbu	r2,0(r2)
  439980:	10803fcc 	andi	r2,r2,255
  439984:	10000526 	beq	r2,zero,43999c <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  439988:	e0800217 	ldw	r2,8(fp)
  43998c:	00c00344 	movi	r3,13
  439990:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  439994:	0005883a 	mov	r2,zero
  439998:	0001d406 	br	43a0ec <OSFlagPend+0x7fc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  43999c:	e0bffc17 	ldw	r2,-16(fp)
  4399a0:	10800003 	ldbu	r2,0(r2)
  4399a4:	10803fcc 	andi	r2,r2,255
  4399a8:	10800160 	cmpeqi	r2,r2,5
  4399ac:	1000051e 	bne	r2,zero,4399c4 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
  4399b0:	e0800217 	ldw	r2,8(fp)
  4399b4:	00c00044 	movi	r3,1
  4399b8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  4399bc:	0005883a 	mov	r2,zero
  4399c0:	0001ca06 	br	43a0ec <OSFlagPend+0x7fc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  4399c4:	e0fffe03 	ldbu	r3,-8(fp)
  4399c8:	00bfe004 	movi	r2,-128
  4399cc:	1884703a 	and	r2,r3,r2
  4399d0:	e0bfdb05 	stb	r2,-148(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  4399d4:	e0bfdb03 	ldbu	r2,-148(fp)
  4399d8:	10000626 	beq	r2,zero,4399f4 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  4399dc:	e0bffe03 	ldbu	r2,-8(fp)
  4399e0:	10801fcc 	andi	r2,r2,127
  4399e4:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  4399e8:	00800044 	movi	r2,1
  4399ec:	e0bfd905 	stb	r2,-156(fp)
  4399f0:	00000106 	br	4399f8 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
  4399f4:	e03fd905 	stb	zero,-156(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4399f8:	0005303a 	rdctl	r2,status
  4399fc:	e0bfdd15 	stw	r2,-140(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  439a00:	e0ffdd17 	ldw	r3,-140(fp)
  439a04:	00bfff84 	movi	r2,-2
  439a08:	1884703a 	and	r2,r3,r2
  439a0c:	1001703a 	wrctl	status,r2
  
  return context;
  439a10:	e0bfdd17 	ldw	r2,-140(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  439a14:	e0bfda15 	stw	r2,-152(fp)
    switch (wait_type) {
  439a18:	e0bffe03 	ldbu	r2,-8(fp)
  439a1c:	10c00060 	cmpeqi	r3,r2,1
  439a20:	1800d71e 	bne	r3,zero,439d80 <OSFlagPend+0x490>
  439a24:	10c00088 	cmpgei	r3,r2,2
  439a28:	1800021e 	bne	r3,zero,439a34 <OSFlagPend+0x144>
  439a2c:	10008f26 	beq	r2,zero,439c6c <OSFlagPend+0x37c>
  439a30:	00011706 	br	439e90 <OSFlagPend+0x5a0>
  439a34:	10c000a0 	cmpeqi	r3,r2,2
  439a38:	1800031e 	bne	r3,zero,439a48 <OSFlagPend+0x158>
  439a3c:	108000e0 	cmpeqi	r2,r2,3
  439a40:	1000461e 	bne	r2,zero,439b5c <OSFlagPend+0x26c>
  439a44:	00011206 	br	439e90 <OSFlagPend+0x5a0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  439a48:	e0bffc17 	ldw	r2,-16(fp)
  439a4c:	10c0020b 	ldhu	r3,8(r2)
  439a50:	e0bffd0b 	ldhu	r2,-12(fp)
  439a54:	1884703a 	and	r2,r3,r2
  439a58:	e0bfdb8d 	sth	r2,-146(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  439a5c:	e0ffdb8b 	ldhu	r3,-146(fp)
  439a60:	e0bffd0b 	ldhu	r2,-12(fp)
  439a64:	1880241e 	bne	r3,r2,439af8 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  439a68:	e0bfd903 	ldbu	r2,-156(fp)
  439a6c:	10800058 	cmpnei	r2,r2,1
  439a70:	1000091e 	bne	r2,zero,439a98 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  439a74:	e0bffc17 	ldw	r2,-16(fp)
  439a78:	1080020b 	ldhu	r2,8(r2)
  439a7c:	1007883a 	mov	r3,r2
  439a80:	e0bfdb8b 	ldhu	r2,-146(fp)
  439a84:	0084303a 	nor	r2,zero,r2
  439a88:	1884703a 	and	r2,r3,r2
  439a8c:	1007883a 	mov	r3,r2
  439a90:	e0bffc17 	ldw	r2,-16(fp)
  439a94:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  439a98:	00801134 	movhi	r2,68
  439a9c:	109e0e04 	addi	r2,r2,30776
  439aa0:	10800017 	ldw	r2,0(r2)
  439aa4:	e0ffdb8b 	ldhu	r3,-146(fp)
  439aa8:	10c00b0d 	sth	r3,44(r2)
  439aac:	e0bfda17 	ldw	r2,-152(fp)
  439ab0:	e0bfde15 	stw	r2,-136(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439ab4:	0005303a 	rdctl	r2,status
  439ab8:	e0bfdf15 	stw	r2,-132(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  439abc:	e0ffdf17 	ldw	r3,-132(fp)
  439ac0:	00bfff84 	movi	r2,-2
  439ac4:	1884703a 	and	r2,r3,r2
  439ac8:	e0bfdf15 	stw	r2,-132(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  439acc:	e0bfde17 	ldw	r2,-136(fp)
  439ad0:	1080004c 	andi	r2,r2,1
  439ad4:	e0ffdf17 	ldw	r3,-132(fp)
  439ad8:	1884b03a 	or	r2,r3,r2
  439adc:	e0bfdf15 	stw	r2,-132(fp)
  
  NIOS2_WRITE_STATUS (status);
  439ae0:	e0bfdf17 	ldw	r2,-132(fp)
  439ae4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  439ae8:	e0800217 	ldw	r2,8(fp)
  439aec:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  439af0:	e0bfdb8b 	ldhu	r2,-146(fp)
  439af4:	00017d06 	br	43a0ec <OSFlagPend+0x7fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  439af8:	e0fffd0b 	ldhu	r3,-12(fp)
  439afc:	e0bffe03 	ldbu	r2,-8(fp)
  439b00:	e13fff0b 	ldhu	r4,-4(fp)
  439b04:	e17ff704 	addi	r5,fp,-36
  439b08:	d9000015 	stw	r4,0(sp)
  439b0c:	e13ffc17 	ldw	r4,-16(fp)
  439b10:	180d883a 	mov	r6,r3
  439b14:	100f883a 	mov	r7,r2
  439b18:	043a6c80 	call	43a6c8 <OS_FlagBlock>
  439b1c:	e0bfda17 	ldw	r2,-152(fp)
  439b20:	e0bfe015 	stw	r2,-128(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439b24:	0005303a 	rdctl	r2,status
  439b28:	e0bfe115 	stw	r2,-124(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  439b2c:	e0ffe117 	ldw	r3,-124(fp)
  439b30:	00bfff84 	movi	r2,-2
  439b34:	1884703a 	and	r2,r3,r2
  439b38:	e0bfe115 	stw	r2,-124(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  439b3c:	e0bfe017 	ldw	r2,-128(fp)
  439b40:	1080004c 	andi	r2,r2,1
  439b44:	e0ffe117 	ldw	r3,-124(fp)
  439b48:	1884b03a 	or	r2,r3,r2
  439b4c:	e0bfe115 	stw	r2,-124(fp)
  
  NIOS2_WRITE_STATUS (status);
  439b50:	e0bfe117 	ldw	r2,-124(fp)
  439b54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  439b58:	0000e206 	br	439ee4 <OSFlagPend+0x5f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  439b5c:	e0bffc17 	ldw	r2,-16(fp)
  439b60:	10c0020b 	ldhu	r3,8(r2)
  439b64:	e0bffd0b 	ldhu	r2,-12(fp)
  439b68:	1884703a 	and	r2,r3,r2
  439b6c:	e0bfdb8d 	sth	r2,-146(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  439b70:	e0bfdb8b 	ldhu	r2,-146(fp)
  439b74:	10002426 	beq	r2,zero,439c08 <OSFlagPend+0x318>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  439b78:	e0bfd903 	ldbu	r2,-156(fp)
  439b7c:	10800058 	cmpnei	r2,r2,1
  439b80:	1000091e 	bne	r2,zero,439ba8 <OSFlagPend+0x2b8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  439b84:	e0bffc17 	ldw	r2,-16(fp)
  439b88:	1080020b 	ldhu	r2,8(r2)
  439b8c:	1007883a 	mov	r3,r2
  439b90:	e0bfdb8b 	ldhu	r2,-146(fp)
  439b94:	0084303a 	nor	r2,zero,r2
  439b98:	1884703a 	and	r2,r3,r2
  439b9c:	1007883a 	mov	r3,r2
  439ba0:	e0bffc17 	ldw	r2,-16(fp)
  439ba4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  439ba8:	00801134 	movhi	r2,68
  439bac:	109e0e04 	addi	r2,r2,30776
  439bb0:	10800017 	ldw	r2,0(r2)
  439bb4:	e0ffdb8b 	ldhu	r3,-146(fp)
  439bb8:	10c00b0d 	sth	r3,44(r2)
  439bbc:	e0bfda17 	ldw	r2,-152(fp)
  439bc0:	e0bfe215 	stw	r2,-120(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439bc4:	0005303a 	rdctl	r2,status
  439bc8:	e0bfe315 	stw	r2,-116(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  439bcc:	e0ffe317 	ldw	r3,-116(fp)
  439bd0:	00bfff84 	movi	r2,-2
  439bd4:	1884703a 	and	r2,r3,r2
  439bd8:	e0bfe315 	stw	r2,-116(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  439bdc:	e0bfe217 	ldw	r2,-120(fp)
  439be0:	1080004c 	andi	r2,r2,1
  439be4:	e0ffe317 	ldw	r3,-116(fp)
  439be8:	1884b03a 	or	r2,r3,r2
  439bec:	e0bfe315 	stw	r2,-116(fp)
  
  NIOS2_WRITE_STATUS (status);
  439bf0:	e0bfe317 	ldw	r2,-116(fp)
  439bf4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  439bf8:	e0800217 	ldw	r2,8(fp)
  439bfc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  439c00:	e0bfdb8b 	ldhu	r2,-146(fp)
  439c04:	00013906 	br	43a0ec <OSFlagPend+0x7fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  439c08:	e0fffd0b 	ldhu	r3,-12(fp)
  439c0c:	e0bffe03 	ldbu	r2,-8(fp)
  439c10:	e13fff0b 	ldhu	r4,-4(fp)
  439c14:	e17ff704 	addi	r5,fp,-36
  439c18:	d9000015 	stw	r4,0(sp)
  439c1c:	e13ffc17 	ldw	r4,-16(fp)
  439c20:	180d883a 	mov	r6,r3
  439c24:	100f883a 	mov	r7,r2
  439c28:	043a6c80 	call	43a6c8 <OS_FlagBlock>
  439c2c:	e0bfda17 	ldw	r2,-152(fp)
  439c30:	e0bfe415 	stw	r2,-112(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439c34:	0005303a 	rdctl	r2,status
  439c38:	e0bfe515 	stw	r2,-108(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  439c3c:	e0ffe517 	ldw	r3,-108(fp)
  439c40:	00bfff84 	movi	r2,-2
  439c44:	1884703a 	and	r2,r3,r2
  439c48:	e0bfe515 	stw	r2,-108(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  439c4c:	e0bfe417 	ldw	r2,-112(fp)
  439c50:	1080004c 	andi	r2,r2,1
  439c54:	e0ffe517 	ldw	r3,-108(fp)
  439c58:	1884b03a 	or	r2,r3,r2
  439c5c:	e0bfe515 	stw	r2,-108(fp)
  
  NIOS2_WRITE_STATUS (status);
  439c60:	e0bfe517 	ldw	r2,-108(fp)
  439c64:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  439c68:	00009e06 	br	439ee4 <OSFlagPend+0x5f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  439c6c:	e0bffc17 	ldw	r2,-16(fp)
  439c70:	1080020b 	ldhu	r2,8(r2)
  439c74:	0084303a 	nor	r2,zero,r2
  439c78:	1007883a 	mov	r3,r2
  439c7c:	e0bffd0b 	ldhu	r2,-12(fp)
  439c80:	1884703a 	and	r2,r3,r2
  439c84:	e0bfdb8d 	sth	r2,-146(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  439c88:	e0ffdb8b 	ldhu	r3,-146(fp)
  439c8c:	e0bffd0b 	ldhu	r2,-12(fp)
  439c90:	1880221e 	bne	r3,r2,439d1c <OSFlagPend+0x42c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  439c94:	e0bfd903 	ldbu	r2,-156(fp)
  439c98:	10800058 	cmpnei	r2,r2,1
  439c9c:	1000071e 	bne	r2,zero,439cbc <OSFlagPend+0x3cc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  439ca0:	e0bffc17 	ldw	r2,-16(fp)
  439ca4:	10c0020b 	ldhu	r3,8(r2)
  439ca8:	e0bfdb8b 	ldhu	r2,-146(fp)
  439cac:	1884b03a 	or	r2,r3,r2
  439cb0:	1007883a 	mov	r3,r2
  439cb4:	e0bffc17 	ldw	r2,-16(fp)
  439cb8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  439cbc:	00801134 	movhi	r2,68
  439cc0:	109e0e04 	addi	r2,r2,30776
  439cc4:	10800017 	ldw	r2,0(r2)
  439cc8:	e0ffdb8b 	ldhu	r3,-146(fp)
  439ccc:	10c00b0d 	sth	r3,44(r2)
  439cd0:	e0bfda17 	ldw	r2,-152(fp)
  439cd4:	e0bfe615 	stw	r2,-104(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439cd8:	0005303a 	rdctl	r2,status
  439cdc:	e0bfe715 	stw	r2,-100(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  439ce0:	e0ffe717 	ldw	r3,-100(fp)
  439ce4:	00bfff84 	movi	r2,-2
  439ce8:	1884703a 	and	r2,r3,r2
  439cec:	e0bfe715 	stw	r2,-100(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  439cf0:	e0bfe617 	ldw	r2,-104(fp)
  439cf4:	1080004c 	andi	r2,r2,1
  439cf8:	e0ffe717 	ldw	r3,-100(fp)
  439cfc:	1884b03a 	or	r2,r3,r2
  439d00:	e0bfe715 	stw	r2,-100(fp)
  
  NIOS2_WRITE_STATUS (status);
  439d04:	e0bfe717 	ldw	r2,-100(fp)
  439d08:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  439d0c:	e0800217 	ldw	r2,8(fp)
  439d10:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  439d14:	e0bfdb8b 	ldhu	r2,-146(fp)
  439d18:	0000f406 	br	43a0ec <OSFlagPend+0x7fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  439d1c:	e0fffd0b 	ldhu	r3,-12(fp)
  439d20:	e0bffe03 	ldbu	r2,-8(fp)
  439d24:	e13fff0b 	ldhu	r4,-4(fp)
  439d28:	e17ff704 	addi	r5,fp,-36
  439d2c:	d9000015 	stw	r4,0(sp)
  439d30:	e13ffc17 	ldw	r4,-16(fp)
  439d34:	180d883a 	mov	r6,r3
  439d38:	100f883a 	mov	r7,r2
  439d3c:	043a6c80 	call	43a6c8 <OS_FlagBlock>
  439d40:	e0bfda17 	ldw	r2,-152(fp)
  439d44:	e0bfe815 	stw	r2,-96(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439d48:	0005303a 	rdctl	r2,status
  439d4c:	e0bfe915 	stw	r2,-92(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  439d50:	e0ffe917 	ldw	r3,-92(fp)
  439d54:	00bfff84 	movi	r2,-2
  439d58:	1884703a 	and	r2,r3,r2
  439d5c:	e0bfe915 	stw	r2,-92(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  439d60:	e0bfe817 	ldw	r2,-96(fp)
  439d64:	1080004c 	andi	r2,r2,1
  439d68:	e0ffe917 	ldw	r3,-92(fp)
  439d6c:	1884b03a 	or	r2,r3,r2
  439d70:	e0bfe915 	stw	r2,-92(fp)
  
  NIOS2_WRITE_STATUS (status);
  439d74:	e0bfe917 	ldw	r2,-92(fp)
  439d78:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  439d7c:	00005906 	br	439ee4 <OSFlagPend+0x5f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  439d80:	e0bffc17 	ldw	r2,-16(fp)
  439d84:	1080020b 	ldhu	r2,8(r2)
  439d88:	0084303a 	nor	r2,zero,r2
  439d8c:	1007883a 	mov	r3,r2
  439d90:	e0bffd0b 	ldhu	r2,-12(fp)
  439d94:	1884703a 	and	r2,r3,r2
  439d98:	e0bfdb8d 	sth	r2,-146(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  439d9c:	e0bfdb8b 	ldhu	r2,-146(fp)
  439da0:	10002226 	beq	r2,zero,439e2c <OSFlagPend+0x53c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  439da4:	e0bfd903 	ldbu	r2,-156(fp)
  439da8:	10800058 	cmpnei	r2,r2,1
  439dac:	1000071e 	bne	r2,zero,439dcc <OSFlagPend+0x4dc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  439db0:	e0bffc17 	ldw	r2,-16(fp)
  439db4:	10c0020b 	ldhu	r3,8(r2)
  439db8:	e0bfdb8b 	ldhu	r2,-146(fp)
  439dbc:	1884b03a 	or	r2,r3,r2
  439dc0:	1007883a 	mov	r3,r2
  439dc4:	e0bffc17 	ldw	r2,-16(fp)
  439dc8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  439dcc:	00801134 	movhi	r2,68
  439dd0:	109e0e04 	addi	r2,r2,30776
  439dd4:	10800017 	ldw	r2,0(r2)
  439dd8:	e0ffdb8b 	ldhu	r3,-146(fp)
  439ddc:	10c00b0d 	sth	r3,44(r2)
  439de0:	e0bfda17 	ldw	r2,-152(fp)
  439de4:	e0bfea15 	stw	r2,-88(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439de8:	0005303a 	rdctl	r2,status
  439dec:	e0bfeb15 	stw	r2,-84(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  439df0:	e0ffeb17 	ldw	r3,-84(fp)
  439df4:	00bfff84 	movi	r2,-2
  439df8:	1884703a 	and	r2,r3,r2
  439dfc:	e0bfeb15 	stw	r2,-84(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  439e00:	e0bfea17 	ldw	r2,-88(fp)
  439e04:	1080004c 	andi	r2,r2,1
  439e08:	e0ffeb17 	ldw	r3,-84(fp)
  439e0c:	1884b03a 	or	r2,r3,r2
  439e10:	e0bfeb15 	stw	r2,-84(fp)
  
  NIOS2_WRITE_STATUS (status);
  439e14:	e0bfeb17 	ldw	r2,-84(fp)
  439e18:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  439e1c:	e0800217 	ldw	r2,8(fp)
  439e20:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  439e24:	e0bfdb8b 	ldhu	r2,-146(fp)
  439e28:	0000b006 	br	43a0ec <OSFlagPend+0x7fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  439e2c:	e0fffd0b 	ldhu	r3,-12(fp)
  439e30:	e0bffe03 	ldbu	r2,-8(fp)
  439e34:	e13fff0b 	ldhu	r4,-4(fp)
  439e38:	e17ff704 	addi	r5,fp,-36
  439e3c:	d9000015 	stw	r4,0(sp)
  439e40:	e13ffc17 	ldw	r4,-16(fp)
  439e44:	180d883a 	mov	r6,r3
  439e48:	100f883a 	mov	r7,r2
  439e4c:	043a6c80 	call	43a6c8 <OS_FlagBlock>
  439e50:	e0bfda17 	ldw	r2,-152(fp)
  439e54:	e0bfec15 	stw	r2,-80(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439e58:	0005303a 	rdctl	r2,status
  439e5c:	e0bfed15 	stw	r2,-76(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  439e60:	e0ffed17 	ldw	r3,-76(fp)
  439e64:	00bfff84 	movi	r2,-2
  439e68:	1884703a 	and	r2,r3,r2
  439e6c:	e0bfed15 	stw	r2,-76(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  439e70:	e0bfec17 	ldw	r2,-80(fp)
  439e74:	1080004c 	andi	r2,r2,1
  439e78:	e0ffed17 	ldw	r3,-76(fp)
  439e7c:	1884b03a 	or	r2,r3,r2
  439e80:	e0bfed15 	stw	r2,-76(fp)
  
  NIOS2_WRITE_STATUS (status);
  439e84:	e0bfed17 	ldw	r2,-76(fp)
  439e88:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  439e8c:	00001506 	br	439ee4 <OSFlagPend+0x5f4>
  439e90:	e0bfda17 	ldw	r2,-152(fp)
  439e94:	e0bfee15 	stw	r2,-72(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439e98:	0005303a 	rdctl	r2,status
  439e9c:	e0bfef15 	stw	r2,-68(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  439ea0:	e0ffef17 	ldw	r3,-68(fp)
  439ea4:	00bfff84 	movi	r2,-2
  439ea8:	1884703a 	and	r2,r3,r2
  439eac:	e0bfef15 	stw	r2,-68(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  439eb0:	e0bfee17 	ldw	r2,-72(fp)
  439eb4:	1080004c 	andi	r2,r2,1
  439eb8:	e0ffef17 	ldw	r3,-68(fp)
  439ebc:	1884b03a 	or	r2,r3,r2
  439ec0:	e0bfef15 	stw	r2,-68(fp)
  
  NIOS2_WRITE_STATUS (status);
  439ec4:	e0bfef17 	ldw	r2,-68(fp)
  439ec8:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  439ecc:	e03fdb8d 	sth	zero,-146(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  439ed0:	e0800217 	ldw	r2,8(fp)
  439ed4:	00c01bc4 	movi	r3,111
  439ed8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
  439edc:	e0bfdb8b 	ldhu	r2,-146(fp)
  439ee0:	00008206 	br	43a0ec <OSFlagPend+0x7fc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  439ee4:	04383a80 	call	4383a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  439ee8:	0005303a 	rdctl	r2,status
  439eec:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  439ef0:	e0fff017 	ldw	r3,-64(fp)
  439ef4:	00bfff84 	movi	r2,-2
  439ef8:	1884703a 	and	r2,r3,r2
  439efc:	1001703a 	wrctl	status,r2
  
  return context;
  439f00:	e0bff017 	ldw	r2,-64(fp)
    OS_ENTER_CRITICAL();
  439f04:	e0bfda15 	stw	r2,-152(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  439f08:	00801134 	movhi	r2,68
  439f0c:	109e0e04 	addi	r2,r2,30776
  439f10:	10800017 	ldw	r2,0(r2)
  439f14:	10800c43 	ldbu	r2,49(r2)
  439f18:	10803fcc 	andi	r2,r2,255
  439f1c:	10002d26 	beq	r2,zero,439fd4 <OSFlagPend+0x6e4>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  439f20:	00801134 	movhi	r2,68
  439f24:	109e0e04 	addi	r2,r2,30776
  439f28:	10800017 	ldw	r2,0(r2)
  439f2c:	10800c43 	ldbu	r2,49(r2)
  439f30:	e0bfdc05 	stb	r2,-144(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  439f34:	00801134 	movhi	r2,68
  439f38:	109e0e04 	addi	r2,r2,30776
  439f3c:	10800017 	ldw	r2,0(r2)
  439f40:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  439f44:	e0bff704 	addi	r2,fp,-36
  439f48:	1009883a 	mov	r4,r2
  439f4c:	043aa780 	call	43aa78 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  439f50:	00801134 	movhi	r2,68
  439f54:	109e0e04 	addi	r2,r2,30776
  439f58:	10800017 	ldw	r2,0(r2)
  439f5c:	10000c05 	stb	zero,48(r2)
  439f60:	e0bfda17 	ldw	r2,-152(fp)
  439f64:	e0bff115 	stw	r2,-60(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  439f68:	0005303a 	rdctl	r2,status
  439f6c:	e0bff215 	stw	r2,-56(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  439f70:	e0fff217 	ldw	r3,-56(fp)
  439f74:	00bfff84 	movi	r2,-2
  439f78:	1884703a 	and	r2,r3,r2
  439f7c:	e0bff215 	stw	r2,-56(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  439f80:	e0bff117 	ldw	r2,-60(fp)
  439f84:	1080004c 	andi	r2,r2,1
  439f88:	e0fff217 	ldw	r3,-56(fp)
  439f8c:	1884b03a 	or	r2,r3,r2
  439f90:	e0bff215 	stw	r2,-56(fp)
  
  NIOS2_WRITE_STATUS (status);
  439f94:	e0bff217 	ldw	r2,-56(fp)
  439f98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  439f9c:	e03fdb8d 	sth	zero,-146(fp)
        switch (pend_stat) {
  439fa0:	e0bfdc03 	ldbu	r2,-144(fp)
  439fa4:	108000a0 	cmpeqi	r2,r2,2
  439fa8:	10000426 	beq	r2,zero,439fbc <OSFlagPend+0x6cc>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  439fac:	e0800217 	ldw	r2,8(fp)
  439fb0:	00c00384 	movi	r3,14
  439fb4:	10c00005 	stb	r3,0(r2)
                 break;
  439fb8:	00000406 	br	439fcc <OSFlagPend+0x6dc>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  439fbc:	e0800217 	ldw	r2,8(fp)
  439fc0:	00c00284 	movi	r3,10
  439fc4:	10c00005 	stb	r3,0(r2)
                 break;
  439fc8:	0001883a 	nop
        }
        return (flags_rdy);
  439fcc:	e0bfdb8b 	ldhu	r2,-146(fp)
  439fd0:	00004606 	br	43a0ec <OSFlagPend+0x7fc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  439fd4:	00801134 	movhi	r2,68
  439fd8:	109e0e04 	addi	r2,r2,30776
  439fdc:	10800017 	ldw	r2,0(r2)
  439fe0:	10800b0b 	ldhu	r2,44(r2)
  439fe4:	e0bfdb8d 	sth	r2,-146(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  439fe8:	e0bfd903 	ldbu	r2,-156(fp)
  439fec:	10800058 	cmpnei	r2,r2,1
  439ff0:	10002c1e 	bne	r2,zero,43a0a4 <OSFlagPend+0x7b4>
        switch (wait_type) {
  439ff4:	e0bffe03 	ldbu	r2,-8(fp)
  439ff8:	10001616 	blt	r2,zero,43a054 <OSFlagPend+0x764>
  439ffc:	10c00090 	cmplti	r3,r2,2
  43a000:	18000c1e 	bne	r3,zero,43a034 <OSFlagPend+0x744>
  43a004:	10800108 	cmpgei	r2,r2,4
  43a008:	1000121e 	bne	r2,zero,43a054 <OSFlagPend+0x764>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  43a00c:	e0bffc17 	ldw	r2,-16(fp)
  43a010:	1080020b 	ldhu	r2,8(r2)
  43a014:	1007883a 	mov	r3,r2
  43a018:	e0bfdb8b 	ldhu	r2,-146(fp)
  43a01c:	0084303a 	nor	r2,zero,r2
  43a020:	1884703a 	and	r2,r3,r2
  43a024:	1007883a 	mov	r3,r2
  43a028:	e0bffc17 	ldw	r2,-16(fp)
  43a02c:	10c0020d 	sth	r3,8(r2)
                 break;
  43a030:	00001c06 	br	43a0a4 <OSFlagPend+0x7b4>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  43a034:	e0bffc17 	ldw	r2,-16(fp)
  43a038:	10c0020b 	ldhu	r3,8(r2)
  43a03c:	e0bfdb8b 	ldhu	r2,-146(fp)
  43a040:	1884b03a 	or	r2,r3,r2
  43a044:	1007883a 	mov	r3,r2
  43a048:	e0bffc17 	ldw	r2,-16(fp)
  43a04c:	10c0020d 	sth	r3,8(r2)
                 break;
  43a050:	00001406 	br	43a0a4 <OSFlagPend+0x7b4>
  43a054:	e0bfda17 	ldw	r2,-152(fp)
  43a058:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43a05c:	0005303a 	rdctl	r2,status
  43a060:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43a064:	e0fff417 	ldw	r3,-48(fp)
  43a068:	00bfff84 	movi	r2,-2
  43a06c:	1884703a 	and	r2,r3,r2
  43a070:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43a074:	e0bff317 	ldw	r2,-52(fp)
  43a078:	1080004c 	andi	r2,r2,1
  43a07c:	e0fff417 	ldw	r3,-48(fp)
  43a080:	1884b03a 	or	r2,r3,r2
  43a084:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
  43a088:	e0bff417 	ldw	r2,-48(fp)
  43a08c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  43a090:	e0800217 	ldw	r2,8(fp)
  43a094:	00c01bc4 	movi	r3,111
  43a098:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  43a09c:	0005883a 	mov	r2,zero
  43a0a0:	00001206 	br	43a0ec <OSFlagPend+0x7fc>
  43a0a4:	e0bfda17 	ldw	r2,-152(fp)
  43a0a8:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43a0ac:	0005303a 	rdctl	r2,status
  43a0b0:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43a0b4:	e0fff617 	ldw	r3,-40(fp)
  43a0b8:	00bfff84 	movi	r2,-2
  43a0bc:	1884703a 	and	r2,r3,r2
  43a0c0:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43a0c4:	e0bff517 	ldw	r2,-44(fp)
  43a0c8:	1080004c 	andi	r2,r2,1
  43a0cc:	e0fff617 	ldw	r3,-40(fp)
  43a0d0:	1884b03a 	or	r2,r3,r2
  43a0d4:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  43a0d8:	e0bff617 	ldw	r2,-40(fp)
  43a0dc:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  43a0e0:	e0800217 	ldw	r2,8(fp)
  43a0e4:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  43a0e8:	e0bfdb8b 	ldhu	r2,-146(fp)
}
  43a0ec:	e037883a 	mov	sp,fp
  43a0f0:	dfc00117 	ldw	ra,4(sp)
  43a0f4:	df000017 	ldw	fp,0(sp)
  43a0f8:	dec00204 	addi	sp,sp,8
  43a0fc:	f800283a 	ret

0043a100 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  43a100:	defffa04 	addi	sp,sp,-24
  43a104:	df000515 	stw	fp,20(sp)
  43a108:	df000504 	addi	fp,sp,20
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  43a10c:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43a110:	0005303a 	rdctl	r2,status
  43a114:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43a118:	e0fffd17 	ldw	r3,-12(fp)
  43a11c:	00bfff84 	movi	r2,-2
  43a120:	1884703a 	and	r2,r3,r2
  43a124:	1001703a 	wrctl	status,r2
  
  return context;
  43a128:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  43a12c:	e0bffb15 	stw	r2,-20(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  43a130:	00801134 	movhi	r2,68
  43a134:	109e0e04 	addi	r2,r2,30776
  43a138:	10800017 	ldw	r2,0(r2)
  43a13c:	10800b0b 	ldhu	r2,44(r2)
  43a140:	e0bffc0d 	sth	r2,-16(fp)
  43a144:	e0bffb17 	ldw	r2,-20(fp)
  43a148:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43a14c:	0005303a 	rdctl	r2,status
  43a150:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43a154:	e0ffff17 	ldw	r3,-4(fp)
  43a158:	00bfff84 	movi	r2,-2
  43a15c:	1884703a 	and	r2,r3,r2
  43a160:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43a164:	e0bffe17 	ldw	r2,-8(fp)
  43a168:	1080004c 	andi	r2,r2,1
  43a16c:	e0ffff17 	ldw	r3,-4(fp)
  43a170:	1884b03a 	or	r2,r3,r2
  43a174:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  43a178:	e0bfff17 	ldw	r2,-4(fp)
  43a17c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  43a180:	e0bffc0b 	ldhu	r2,-16(fp)
}
  43a184:	e037883a 	mov	sp,fp
  43a188:	df000017 	ldw	fp,0(sp)
  43a18c:	dec00104 	addi	sp,sp,4
  43a190:	f800283a 	ret

0043a194 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  43a194:	deffeb04 	addi	sp,sp,-84
  43a198:	dfc01415 	stw	ra,80(sp)
  43a19c:	df001315 	stw	fp,76(sp)
  43a1a0:	df001304 	addi	fp,sp,76
  43a1a4:	e13ffc15 	stw	r4,-16(fp)
  43a1a8:	2807883a 	mov	r3,r5
  43a1ac:	3005883a 	mov	r2,r6
  43a1b0:	e1ffff15 	stw	r7,-4(fp)
  43a1b4:	e0fffd0d 	sth	r3,-12(fp)
  43a1b8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  43a1bc:	e03fef15 	stw	zero,-68(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  43a1c0:	e0bfff17 	ldw	r2,-4(fp)
  43a1c4:	1000021e 	bne	r2,zero,43a1d0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
  43a1c8:	0005883a 	mov	r2,zero
  43a1cc:	0000fd06 	br	43a5c4 <OSFlagPost+0x430>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  43a1d0:	e0bffc17 	ldw	r2,-16(fp)
  43a1d4:	1000051e 	bne	r2,zero,43a1ec <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  43a1d8:	e0bfff17 	ldw	r2,-4(fp)
  43a1dc:	00c01b84 	movi	r3,110
  43a1e0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  43a1e4:	0005883a 	mov	r2,zero
  43a1e8:	0000f606 	br	43a5c4 <OSFlagPost+0x430>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  43a1ec:	e0bffc17 	ldw	r2,-16(fp)
  43a1f0:	10800003 	ldbu	r2,0(r2)
  43a1f4:	10803fcc 	andi	r2,r2,255
  43a1f8:	10800160 	cmpeqi	r2,r2,5
  43a1fc:	1000051e 	bne	r2,zero,43a214 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  43a200:	e0bfff17 	ldw	r2,-4(fp)
  43a204:	00c00044 	movi	r3,1
  43a208:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  43a20c:	0005883a 	mov	r2,zero
  43a210:	0000ec06 	br	43a5c4 <OSFlagPost+0x430>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43a214:	0005303a 	rdctl	r2,status
  43a218:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43a21c:	e0fff217 	ldw	r3,-56(fp)
  43a220:	00bfff84 	movi	r2,-2
  43a224:	1884703a 	and	r2,r3,r2
  43a228:	1001703a 	wrctl	status,r2
  
  return context;
  43a22c:	e0bff217 	ldw	r2,-56(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  43a230:	e0bfef15 	stw	r2,-68(fp)
    switch (opt) {
  43a234:	e0bffe03 	ldbu	r2,-8(fp)
  43a238:	10000326 	beq	r2,zero,43a248 <OSFlagPost+0xb4>
  43a23c:	10800060 	cmpeqi	r2,r2,1
  43a240:	10000b1e 	bne	r2,zero,43a270 <OSFlagPost+0xdc>
  43a244:	00001206 	br	43a290 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  43a248:	e0bffc17 	ldw	r2,-16(fp)
  43a24c:	1080020b 	ldhu	r2,8(r2)
  43a250:	1007883a 	mov	r3,r2
  43a254:	e0bffd0b 	ldhu	r2,-12(fp)
  43a258:	0084303a 	nor	r2,zero,r2
  43a25c:	1884703a 	and	r2,r3,r2
  43a260:	1007883a 	mov	r3,r2
  43a264:	e0bffc17 	ldw	r2,-16(fp)
  43a268:	10c0020d 	sth	r3,8(r2)
             break;
  43a26c:	00001c06 	br	43a2e0 <OSFlagPost+0x14c>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  43a270:	e0bffc17 	ldw	r2,-16(fp)
  43a274:	10c0020b 	ldhu	r3,8(r2)
  43a278:	e0bffd0b 	ldhu	r2,-12(fp)
  43a27c:	1884b03a 	or	r2,r3,r2
  43a280:	1007883a 	mov	r3,r2
  43a284:	e0bffc17 	ldw	r2,-16(fp)
  43a288:	10c0020d 	sth	r3,8(r2)
             break;
  43a28c:	00001406 	br	43a2e0 <OSFlagPost+0x14c>
  43a290:	e0bfef17 	ldw	r2,-68(fp)
  43a294:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43a298:	0005303a 	rdctl	r2,status
  43a29c:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43a2a0:	e0fff417 	ldw	r3,-48(fp)
  43a2a4:	00bfff84 	movi	r2,-2
  43a2a8:	1884703a 	and	r2,r3,r2
  43a2ac:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43a2b0:	e0bff317 	ldw	r2,-52(fp)
  43a2b4:	1080004c 	andi	r2,r2,1
  43a2b8:	e0fff417 	ldw	r3,-48(fp)
  43a2bc:	1884b03a 	or	r2,r3,r2
  43a2c0:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
  43a2c4:	e0bff417 	ldw	r2,-48(fp)
  43a2c8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  43a2cc:	e0bfff17 	ldw	r2,-4(fp)
  43a2d0:	00c01c44 	movi	r3,113
  43a2d4:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
  43a2d8:	0005883a 	mov	r2,zero
  43a2dc:	0000b906 	br	43a5c4 <OSFlagPost+0x430>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  43a2e0:	e03fee05 	stb	zero,-72(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  43a2e4:	e0bffc17 	ldw	r2,-16(fp)
  43a2e8:	10800117 	ldw	r2,4(r2)
  43a2ec:	e0bfed15 	stw	r2,-76(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  43a2f0:	00008206 	br	43a4fc <OSFlagPost+0x368>
        switch (pnode->OSFlagNodeWaitType) {
  43a2f4:	e0bfed17 	ldw	r2,-76(fp)
  43a2f8:	10800483 	ldbu	r2,18(r2)
  43a2fc:	10803fcc 	andi	r2,r2,255
  43a300:	10c00060 	cmpeqi	r3,r2,1
  43a304:	18004a1e 	bne	r3,zero,43a430 <OSFlagPost+0x29c>
  43a308:	10c00088 	cmpgei	r3,r2,2
  43a30c:	1800021e 	bne	r3,zero,43a318 <OSFlagPost+0x184>
  43a310:	10002f26 	beq	r2,zero,43a3d0 <OSFlagPost+0x23c>
  43a314:	00005b06 	br	43a484 <OSFlagPost+0x2f0>
  43a318:	10c000a0 	cmpeqi	r3,r2,2
  43a31c:	1800031e 	bne	r3,zero,43a32c <OSFlagPost+0x198>
  43a320:	108000e0 	cmpeqi	r2,r2,3
  43a324:	1000171e 	bne	r2,zero,43a384 <OSFlagPost+0x1f0>
  43a328:	00005606 	br	43a484 <OSFlagPost+0x2f0>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  43a32c:	e0bffc17 	ldw	r2,-16(fp)
  43a330:	10c0020b 	ldhu	r3,8(r2)
  43a334:	e0bfed17 	ldw	r2,-76(fp)
  43a338:	1080040b 	ldhu	r2,16(r2)
  43a33c:	1884703a 	and	r2,r3,r2
  43a340:	e0bff00d 	sth	r2,-64(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  43a344:	e0bfed17 	ldw	r2,-76(fp)
  43a348:	1080040b 	ldhu	r2,16(r2)
  43a34c:	10ffffcc 	andi	r3,r2,65535
  43a350:	e0bff00b 	ldhu	r2,-64(fp)
  43a354:	18805f1e 	bne	r3,r2,43a4d4 <OSFlagPost+0x340>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  43a358:	e0bff00b 	ldhu	r2,-64(fp)
  43a35c:	e13fed17 	ldw	r4,-76(fp)
  43a360:	100b883a 	mov	r5,r2
  43a364:	043a96c0 	call	43a96c <OS_FlagTaskRdy>
  43a368:	e0bff085 	stb	r2,-62(fp)
                     if (rdy == OS_TRUE) {
  43a36c:	e0bff083 	ldbu	r2,-62(fp)
  43a370:	10800058 	cmpnei	r2,r2,1
  43a374:	1000571e 	bne	r2,zero,43a4d4 <OSFlagPost+0x340>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  43a378:	00800044 	movi	r2,1
  43a37c:	e0bfee05 	stb	r2,-72(fp)
                     }
                 }
                 break;
  43a380:	00005406 	br	43a4d4 <OSFlagPost+0x340>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  43a384:	e0bffc17 	ldw	r2,-16(fp)
  43a388:	10c0020b 	ldhu	r3,8(r2)
  43a38c:	e0bfed17 	ldw	r2,-76(fp)
  43a390:	1080040b 	ldhu	r2,16(r2)
  43a394:	1884703a 	and	r2,r3,r2
  43a398:	e0bff00d 	sth	r2,-64(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  43a39c:	e0bff00b 	ldhu	r2,-64(fp)
  43a3a0:	10004e26 	beq	r2,zero,43a4dc <OSFlagPost+0x348>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  43a3a4:	e0bff00b 	ldhu	r2,-64(fp)
  43a3a8:	e13fed17 	ldw	r4,-76(fp)
  43a3ac:	100b883a 	mov	r5,r2
  43a3b0:	043a96c0 	call	43a96c <OS_FlagTaskRdy>
  43a3b4:	e0bff085 	stb	r2,-62(fp)
                     if (rdy == OS_TRUE) {
  43a3b8:	e0bff083 	ldbu	r2,-62(fp)
  43a3bc:	10800058 	cmpnei	r2,r2,1
  43a3c0:	1000461e 	bne	r2,zero,43a4dc <OSFlagPost+0x348>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  43a3c4:	00800044 	movi	r2,1
  43a3c8:	e0bfee05 	stb	r2,-72(fp)
                     }
                 }
                 break;
  43a3cc:	00004306 	br	43a4dc <OSFlagPost+0x348>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  43a3d0:	e0bffc17 	ldw	r2,-16(fp)
  43a3d4:	1080020b 	ldhu	r2,8(r2)
  43a3d8:	0084303a 	nor	r2,zero,r2
  43a3dc:	1007883a 	mov	r3,r2
  43a3e0:	e0bfed17 	ldw	r2,-76(fp)
  43a3e4:	1080040b 	ldhu	r2,16(r2)
  43a3e8:	1884703a 	and	r2,r3,r2
  43a3ec:	e0bff00d 	sth	r2,-64(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  43a3f0:	e0bfed17 	ldw	r2,-76(fp)
  43a3f4:	1080040b 	ldhu	r2,16(r2)
  43a3f8:	10ffffcc 	andi	r3,r2,65535
  43a3fc:	e0bff00b 	ldhu	r2,-64(fp)
  43a400:	1880381e 	bne	r3,r2,43a4e4 <OSFlagPost+0x350>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  43a404:	e0bff00b 	ldhu	r2,-64(fp)
  43a408:	e13fed17 	ldw	r4,-76(fp)
  43a40c:	100b883a 	mov	r5,r2
  43a410:	043a96c0 	call	43a96c <OS_FlagTaskRdy>
  43a414:	e0bff085 	stb	r2,-62(fp)
                     if (rdy == OS_TRUE) {
  43a418:	e0bff083 	ldbu	r2,-62(fp)
  43a41c:	10800058 	cmpnei	r2,r2,1
  43a420:	1000301e 	bne	r2,zero,43a4e4 <OSFlagPost+0x350>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  43a424:	00800044 	movi	r2,1
  43a428:	e0bfee05 	stb	r2,-72(fp)
                     }
                 }
                 break;
  43a42c:	00002d06 	br	43a4e4 <OSFlagPost+0x350>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  43a430:	e0bffc17 	ldw	r2,-16(fp)
  43a434:	1080020b 	ldhu	r2,8(r2)
  43a438:	0084303a 	nor	r2,zero,r2
  43a43c:	1007883a 	mov	r3,r2
  43a440:	e0bfed17 	ldw	r2,-76(fp)
  43a444:	1080040b 	ldhu	r2,16(r2)
  43a448:	1884703a 	and	r2,r3,r2
  43a44c:	e0bff00d 	sth	r2,-64(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  43a450:	e0bff00b 	ldhu	r2,-64(fp)
  43a454:	10002526 	beq	r2,zero,43a4ec <OSFlagPost+0x358>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  43a458:	e0bff00b 	ldhu	r2,-64(fp)
  43a45c:	e13fed17 	ldw	r4,-76(fp)
  43a460:	100b883a 	mov	r5,r2
  43a464:	043a96c0 	call	43a96c <OS_FlagTaskRdy>
  43a468:	e0bff085 	stb	r2,-62(fp)
                     if (rdy == OS_TRUE) {
  43a46c:	e0bff083 	ldbu	r2,-62(fp)
  43a470:	10800058 	cmpnei	r2,r2,1
  43a474:	10001d1e 	bne	r2,zero,43a4ec <OSFlagPost+0x358>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  43a478:	00800044 	movi	r2,1
  43a47c:	e0bfee05 	stb	r2,-72(fp)
                     }
                 }
                 break;
  43a480:	00001a06 	br	43a4ec <OSFlagPost+0x358>
  43a484:	e0bfef17 	ldw	r2,-68(fp)
  43a488:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43a48c:	0005303a 	rdctl	r2,status
  43a490:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43a494:	e0fff617 	ldw	r3,-40(fp)
  43a498:	00bfff84 	movi	r2,-2
  43a49c:	1884703a 	and	r2,r3,r2
  43a4a0:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43a4a4:	e0bff517 	ldw	r2,-44(fp)
  43a4a8:	1080004c 	andi	r2,r2,1
  43a4ac:	e0fff617 	ldw	r3,-40(fp)
  43a4b0:	1884b03a 	or	r2,r3,r2
  43a4b4:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  43a4b8:	e0bff617 	ldw	r2,-40(fp)
  43a4bc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  43a4c0:	e0bfff17 	ldw	r2,-4(fp)
  43a4c4:	00c01bc4 	movi	r3,111
  43a4c8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  43a4cc:	0005883a 	mov	r2,zero
  43a4d0:	00003c06 	br	43a5c4 <OSFlagPost+0x430>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  43a4d4:	0001883a 	nop
  43a4d8:	00000506 	br	43a4f0 <OSFlagPost+0x35c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  43a4dc:	0001883a 	nop
  43a4e0:	00000306 	br	43a4f0 <OSFlagPost+0x35c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  43a4e4:	0001883a 	nop
  43a4e8:	00000106 	br	43a4f0 <OSFlagPost+0x35c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  43a4ec:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  43a4f0:	e0bfed17 	ldw	r2,-76(fp)
  43a4f4:	10800017 	ldw	r2,0(r2)
  43a4f8:	e0bfed15 	stw	r2,-76(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  43a4fc:	e0bfed17 	ldw	r2,-76(fp)
  43a500:	103f7c1e 	bne	r2,zero,43a2f4 <OSFlagPost+0x160>
  43a504:	e0bfef17 	ldw	r2,-68(fp)
  43a508:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43a50c:	0005303a 	rdctl	r2,status
  43a510:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43a514:	e0fff817 	ldw	r3,-32(fp)
  43a518:	00bfff84 	movi	r2,-2
  43a51c:	1884703a 	and	r2,r3,r2
  43a520:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43a524:	e0bff717 	ldw	r2,-36(fp)
  43a528:	1080004c 	andi	r2,r2,1
  43a52c:	e0fff817 	ldw	r3,-32(fp)
  43a530:	1884b03a 	or	r2,r3,r2
  43a534:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  43a538:	e0bff817 	ldw	r2,-32(fp)
  43a53c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  43a540:	e0bfee03 	ldbu	r2,-72(fp)
  43a544:	10800058 	cmpnei	r2,r2,1
  43a548:	1000011e 	bne	r2,zero,43a550 <OSFlagPost+0x3bc>
        OS_Sched();
  43a54c:	04383a80 	call	4383a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43a550:	0005303a 	rdctl	r2,status
  43a554:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43a558:	e0fff917 	ldw	r3,-28(fp)
  43a55c:	00bfff84 	movi	r2,-2
  43a560:	1884703a 	and	r2,r3,r2
  43a564:	1001703a 	wrctl	status,r2
  
  return context;
  43a568:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  43a56c:	e0bfef15 	stw	r2,-68(fp)
    flags_cur = pgrp->OSFlagFlags;
  43a570:	e0bffc17 	ldw	r2,-16(fp)
  43a574:	1080020b 	ldhu	r2,8(r2)
  43a578:	e0bff10d 	sth	r2,-60(fp)
  43a57c:	e0bfef17 	ldw	r2,-68(fp)
  43a580:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43a584:	0005303a 	rdctl	r2,status
  43a588:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43a58c:	e0fffb17 	ldw	r3,-20(fp)
  43a590:	00bfff84 	movi	r2,-2
  43a594:	1884703a 	and	r2,r3,r2
  43a598:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43a59c:	e0bffa17 	ldw	r2,-24(fp)
  43a5a0:	1080004c 	andi	r2,r2,1
  43a5a4:	e0fffb17 	ldw	r3,-20(fp)
  43a5a8:	1884b03a 	or	r2,r3,r2
  43a5ac:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  43a5b0:	e0bffb17 	ldw	r2,-20(fp)
  43a5b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  43a5b8:	e0bfff17 	ldw	r2,-4(fp)
  43a5bc:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  43a5c0:	e0bff10b 	ldhu	r2,-60(fp)
}
  43a5c4:	e037883a 	mov	sp,fp
  43a5c8:	dfc00117 	ldw	ra,4(sp)
  43a5cc:	df000017 	ldw	fp,0(sp)
  43a5d0:	dec00204 	addi	sp,sp,8
  43a5d4:	f800283a 	ret

0043a5d8 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  43a5d8:	defff804 	addi	sp,sp,-32
  43a5dc:	df000715 	stw	fp,28(sp)
  43a5e0:	df000704 	addi	fp,sp,28
  43a5e4:	e13ffe15 	stw	r4,-8(fp)
  43a5e8:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  43a5ec:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  43a5f0:	e0bfff17 	ldw	r2,-4(fp)
  43a5f4:	1000021e 	bne	r2,zero,43a600 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
  43a5f8:	0005883a 	mov	r2,zero
  43a5fc:	00002e06 	br	43a6b8 <OSFlagQuery+0xe0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  43a600:	e0bffe17 	ldw	r2,-8(fp)
  43a604:	1000051e 	bne	r2,zero,43a61c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  43a608:	e0bfff17 	ldw	r2,-4(fp)
  43a60c:	00c01b84 	movi	r3,110
  43a610:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  43a614:	0005883a 	mov	r2,zero
  43a618:	00002706 	br	43a6b8 <OSFlagQuery+0xe0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  43a61c:	e0bffe17 	ldw	r2,-8(fp)
  43a620:	10800003 	ldbu	r2,0(r2)
  43a624:	10803fcc 	andi	r2,r2,255
  43a628:	10800160 	cmpeqi	r2,r2,5
  43a62c:	1000051e 	bne	r2,zero,43a644 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  43a630:	e0bfff17 	ldw	r2,-4(fp)
  43a634:	00c00044 	movi	r3,1
  43a638:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  43a63c:	0005883a 	mov	r2,zero
  43a640:	00001d06 	br	43a6b8 <OSFlagQuery+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43a644:	0005303a 	rdctl	r2,status
  43a648:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43a64c:	e0fffb17 	ldw	r3,-20(fp)
  43a650:	00bfff84 	movi	r2,-2
  43a654:	1884703a 	and	r2,r3,r2
  43a658:	1001703a 	wrctl	status,r2
  
  return context;
  43a65c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  43a660:	e0bff915 	stw	r2,-28(fp)
    flags = pgrp->OSFlagFlags;
  43a664:	e0bffe17 	ldw	r2,-8(fp)
  43a668:	1080020b 	ldhu	r2,8(r2)
  43a66c:	e0bffa0d 	sth	r2,-24(fp)
  43a670:	e0bff917 	ldw	r2,-28(fp)
  43a674:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43a678:	0005303a 	rdctl	r2,status
  43a67c:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43a680:	e0fffd17 	ldw	r3,-12(fp)
  43a684:	00bfff84 	movi	r2,-2
  43a688:	1884703a 	and	r2,r3,r2
  43a68c:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43a690:	e0bffc17 	ldw	r2,-16(fp)
  43a694:	1080004c 	andi	r2,r2,1
  43a698:	e0fffd17 	ldw	r3,-12(fp)
  43a69c:	1884b03a 	or	r2,r3,r2
  43a6a0:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43a6a4:	e0bffd17 	ldw	r2,-12(fp)
  43a6a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  43a6ac:	e0bfff17 	ldw	r2,-4(fp)
  43a6b0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  43a6b4:	e0bffa0b 	ldhu	r2,-24(fp)
}
  43a6b8:	e037883a 	mov	sp,fp
  43a6bc:	df000017 	ldw	fp,0(sp)
  43a6c0:	dec00104 	addi	sp,sp,4
  43a6c4:	f800283a 	ret

0043a6c8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  43a6c8:	defff804 	addi	sp,sp,-32
  43a6cc:	df000715 	stw	fp,28(sp)
  43a6d0:	df000704 	addi	fp,sp,28
  43a6d4:	e13ffb15 	stw	r4,-20(fp)
  43a6d8:	e17ffc15 	stw	r5,-16(fp)
  43a6dc:	3007883a 	mov	r3,r6
  43a6e0:	3805883a 	mov	r2,r7
  43a6e4:	e1000117 	ldw	r4,4(fp)
  43a6e8:	e0fffd0d 	sth	r3,-12(fp)
  43a6ec:	e0bffe05 	stb	r2,-8(fp)
  43a6f0:	e13fff0d 	sth	r4,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  43a6f4:	00801134 	movhi	r2,68
  43a6f8:	109e0e04 	addi	r2,r2,30776
  43a6fc:	10800017 	ldw	r2,0(r2)
  43a700:	00c01134 	movhi	r3,68
  43a704:	18de0e04 	addi	r3,r3,30776
  43a708:	18c00017 	ldw	r3,0(r3)
  43a70c:	18c00c03 	ldbu	r3,48(r3)
  43a710:	18c00814 	ori	r3,r3,32
  43a714:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  43a718:	00801134 	movhi	r2,68
  43a71c:	109e0e04 	addi	r2,r2,30776
  43a720:	10800017 	ldw	r2,0(r2)
  43a724:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  43a728:	00801134 	movhi	r2,68
  43a72c:	109e0e04 	addi	r2,r2,30776
  43a730:	10800017 	ldw	r2,0(r2)
  43a734:	e0ffff0b 	ldhu	r3,-4(fp)
  43a738:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  43a73c:	00801134 	movhi	r2,68
  43a740:	109e0e04 	addi	r2,r2,30776
  43a744:	10800017 	ldw	r2,0(r2)
  43a748:	e0fffc17 	ldw	r3,-16(fp)
  43a74c:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  43a750:	e0bffc17 	ldw	r2,-16(fp)
  43a754:	e0fffd0b 	ldhu	r3,-12(fp)
  43a758:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  43a75c:	e0bffc17 	ldw	r2,-16(fp)
  43a760:	e0fffe03 	ldbu	r3,-8(fp)
  43a764:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  43a768:	00801134 	movhi	r2,68
  43a76c:	109e0e04 	addi	r2,r2,30776
  43a770:	10c00017 	ldw	r3,0(r2)
  43a774:	e0bffc17 	ldw	r2,-16(fp)
  43a778:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  43a77c:	e0bffb17 	ldw	r2,-20(fp)
  43a780:	10c00117 	ldw	r3,4(r2)
  43a784:	e0bffc17 	ldw	r2,-16(fp)
  43a788:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  43a78c:	e0bffc17 	ldw	r2,-16(fp)
  43a790:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  43a794:	e0bffc17 	ldw	r2,-16(fp)
  43a798:	e0fffb17 	ldw	r3,-20(fp)
  43a79c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  43a7a0:	e0bffb17 	ldw	r2,-20(fp)
  43a7a4:	10800117 	ldw	r2,4(r2)
  43a7a8:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  43a7ac:	e0bff917 	ldw	r2,-28(fp)
  43a7b0:	10000326 	beq	r2,zero,43a7c0 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  43a7b4:	e0bff917 	ldw	r2,-28(fp)
  43a7b8:	e0fffc17 	ldw	r3,-16(fp)
  43a7bc:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  43a7c0:	e0bffb17 	ldw	r2,-20(fp)
  43a7c4:	e0fffc17 	ldw	r3,-16(fp)
  43a7c8:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  43a7cc:	00801134 	movhi	r2,68
  43a7d0:	109e0e04 	addi	r2,r2,30776
  43a7d4:	10800017 	ldw	r2,0(r2)
  43a7d8:	10800d03 	ldbu	r2,52(r2)
  43a7dc:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  43a7e0:	e0bffa03 	ldbu	r2,-24(fp)
  43a7e4:	e0fffa03 	ldbu	r3,-24(fp)
  43a7e8:	01001134 	movhi	r4,68
  43a7ec:	211e0b44 	addi	r4,r4,30765
  43a7f0:	20c7883a 	add	r3,r4,r3
  43a7f4:	18c00003 	ldbu	r3,0(r3)
  43a7f8:	1809883a 	mov	r4,r3
  43a7fc:	00c01134 	movhi	r3,68
  43a800:	18de0e04 	addi	r3,r3,30776
  43a804:	18c00017 	ldw	r3,0(r3)
  43a808:	18c00d43 	ldbu	r3,53(r3)
  43a80c:	00c6303a 	nor	r3,zero,r3
  43a810:	20c6703a 	and	r3,r4,r3
  43a814:	01001134 	movhi	r4,68
  43a818:	211e0b44 	addi	r4,r4,30765
  43a81c:	2085883a 	add	r2,r4,r2
  43a820:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  43a824:	e0bffa03 	ldbu	r2,-24(fp)
  43a828:	00c01134 	movhi	r3,68
  43a82c:	18de0b44 	addi	r3,r3,30765
  43a830:	1885883a 	add	r2,r3,r2
  43a834:	10800003 	ldbu	r2,0(r2)
  43a838:	10803fcc 	andi	r2,r2,255
  43a83c:	10000e1e 	bne	r2,zero,43a878 <OS_FlagBlock+0x1b0>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  43a840:	00801134 	movhi	r2,68
  43a844:	109e0e04 	addi	r2,r2,30776
  43a848:	10800017 	ldw	r2,0(r2)
  43a84c:	10800d83 	ldbu	r2,54(r2)
  43a850:	0084303a 	nor	r2,zero,r2
  43a854:	1007883a 	mov	r3,r2
  43a858:	00801134 	movhi	r2,68
  43a85c:	109e0b04 	addi	r2,r2,30764
  43a860:	10800003 	ldbu	r2,0(r2)
  43a864:	1884703a 	and	r2,r3,r2
  43a868:	1007883a 	mov	r3,r2
  43a86c:	00801134 	movhi	r2,68
  43a870:	109e0b04 	addi	r2,r2,30764
  43a874:	10c00005 	stb	r3,0(r2)
    }
}
  43a878:	e037883a 	mov	sp,fp
  43a87c:	df000017 	ldw	fp,0(sp)
  43a880:	dec00104 	addi	sp,sp,4
  43a884:	f800283a 	ret

0043a888 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  43a888:	defffb04 	addi	sp,sp,-20
  43a88c:	dfc00415 	stw	ra,16(sp)
  43a890:	df000315 	stw	fp,12(sp)
  43a894:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  43a898:	01001134 	movhi	r4,68
  43a89c:	211e6104 	addi	r4,r4,31108
  43a8a0:	0140dc04 	movi	r5,880
  43a8a4:	04382e80 	call	4382e8 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  43a8a8:	00801134 	movhi	r2,68
  43a8ac:	109e6104 	addi	r2,r2,31108
  43a8b0:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  43a8b4:	00801134 	movhi	r2,68
  43a8b8:	109e6c04 	addi	r2,r2,31152
  43a8bc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  43a8c0:	e03ffd0d 	sth	zero,-12(fp)
  43a8c4:	00001306 	br	43a914 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  43a8c8:	e0bffe17 	ldw	r2,-8(fp)
  43a8cc:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  43a8d0:	e0bffe17 	ldw	r2,-8(fp)
  43a8d4:	e0ffff17 	ldw	r3,-4(fp)
  43a8d8:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  43a8dc:	e0bffe17 	ldw	r2,-8(fp)
  43a8e0:	00c00fc4 	movi	r3,63
  43a8e4:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  43a8e8:	e0bffe17 	ldw	r2,-8(fp)
  43a8ec:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  43a8f0:	e0bffe17 	ldw	r2,-8(fp)
  43a8f4:	10800b04 	addi	r2,r2,44
  43a8f8:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  43a8fc:	e0bfff17 	ldw	r2,-4(fp)
  43a900:	10800b04 	addi	r2,r2,44
  43a904:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  43a908:	e0bffd0b 	ldhu	r2,-12(fp)
  43a90c:	10800044 	addi	r2,r2,1
  43a910:	e0bffd0d 	sth	r2,-12(fp)
  43a914:	e0bffd0b 	ldhu	r2,-12(fp)
  43a918:	108004f0 	cmpltui	r2,r2,19
  43a91c:	103fea1e 	bne	r2,zero,43a8c8 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  43a920:	e0bffe17 	ldw	r2,-8(fp)
  43a924:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  43a928:	e0bffe17 	ldw	r2,-8(fp)
  43a92c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  43a930:	e0bffe17 	ldw	r2,-8(fp)
  43a934:	00c00fc4 	movi	r3,63
  43a938:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  43a93c:	e0bffe17 	ldw	r2,-8(fp)
  43a940:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  43a944:	00801134 	movhi	r2,68
  43a948:	109e1004 	addi	r2,r2,30784
  43a94c:	00c01134 	movhi	r3,68
  43a950:	18de6104 	addi	r3,r3,31108
  43a954:	10c00015 	stw	r3,0(r2)
#endif
}
  43a958:	e037883a 	mov	sp,fp
  43a95c:	dfc00117 	ldw	ra,4(sp)
  43a960:	df000017 	ldw	fp,0(sp)
  43a964:	dec00204 	addi	sp,sp,8
  43a968:	f800283a 	ret

0043a96c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  43a96c:	defffa04 	addi	sp,sp,-24
  43a970:	dfc00515 	stw	ra,20(sp)
  43a974:	df000415 	stw	fp,16(sp)
  43a978:	df000404 	addi	fp,sp,16
  43a97c:	e13ffe15 	stw	r4,-8(fp)
  43a980:	2805883a 	mov	r2,r5
  43a984:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  43a988:	e0bffe17 	ldw	r2,-8(fp)
  43a98c:	10800217 	ldw	r2,8(r2)
  43a990:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  43a994:	e0bffd17 	ldw	r2,-12(fp)
  43a998:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  43a99c:	e0bffd17 	ldw	r2,-12(fp)
  43a9a0:	e0ffff0b 	ldhu	r3,-4(fp)
  43a9a4:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  43a9a8:	e0bffd17 	ldw	r2,-12(fp)
  43a9ac:	10c00c03 	ldbu	r3,48(r2)
  43a9b0:	00bff7c4 	movi	r2,-33
  43a9b4:	1884703a 	and	r2,r3,r2
  43a9b8:	1007883a 	mov	r3,r2
  43a9bc:	e0bffd17 	ldw	r2,-12(fp)
  43a9c0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  43a9c4:	e0bffd17 	ldw	r2,-12(fp)
  43a9c8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  43a9cc:	e0bffd17 	ldw	r2,-12(fp)
  43a9d0:	10800c03 	ldbu	r2,48(r2)
  43a9d4:	10803fcc 	andi	r2,r2,255
  43a9d8:	10001e1e 	bne	r2,zero,43aa54 <OS_FlagTaskRdy+0xe8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  43a9dc:	e0bffd17 	ldw	r2,-12(fp)
  43a9e0:	10c00d83 	ldbu	r3,54(r2)
  43a9e4:	00801134 	movhi	r2,68
  43a9e8:	109e0b04 	addi	r2,r2,30764
  43a9ec:	10800003 	ldbu	r2,0(r2)
  43a9f0:	1884b03a 	or	r2,r3,r2
  43a9f4:	1007883a 	mov	r3,r2
  43a9f8:	00801134 	movhi	r2,68
  43a9fc:	109e0b04 	addi	r2,r2,30764
  43aa00:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  43aa04:	e0bffd17 	ldw	r2,-12(fp)
  43aa08:	10800d03 	ldbu	r2,52(r2)
  43aa0c:	10803fcc 	andi	r2,r2,255
  43aa10:	e0fffd17 	ldw	r3,-12(fp)
  43aa14:	18c00d03 	ldbu	r3,52(r3)
  43aa18:	18c03fcc 	andi	r3,r3,255
  43aa1c:	01001134 	movhi	r4,68
  43aa20:	211e0b44 	addi	r4,r4,30765
  43aa24:	20c7883a 	add	r3,r4,r3
  43aa28:	19000003 	ldbu	r4,0(r3)
  43aa2c:	e0fffd17 	ldw	r3,-12(fp)
  43aa30:	18c00d43 	ldbu	r3,53(r3)
  43aa34:	20c6b03a 	or	r3,r4,r3
  43aa38:	01001134 	movhi	r4,68
  43aa3c:	211e0b44 	addi	r4,r4,30765
  43aa40:	2085883a 	add	r2,r4,r2
  43aa44:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  43aa48:	00800044 	movi	r2,1
  43aa4c:	e0bffc05 	stb	r2,-16(fp)
  43aa50:	00000106 	br	43aa58 <OS_FlagTaskRdy+0xec>
    } else {
        sched                   = OS_FALSE;
  43aa54:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  43aa58:	e13ffe17 	ldw	r4,-8(fp)
  43aa5c:	043aa780 	call	43aa78 <OS_FlagUnlink>
    return (sched);
  43aa60:	e0bffc03 	ldbu	r2,-16(fp)
}
  43aa64:	e037883a 	mov	sp,fp
  43aa68:	dfc00117 	ldw	ra,4(sp)
  43aa6c:	df000017 	ldw	fp,0(sp)
  43aa70:	dec00204 	addi	sp,sp,8
  43aa74:	f800283a 	ret

0043aa78 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  43aa78:	defffa04 	addi	sp,sp,-24
  43aa7c:	df000515 	stw	fp,20(sp)
  43aa80:	df000504 	addi	fp,sp,20
  43aa84:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  43aa88:	e0bfff17 	ldw	r2,-4(fp)
  43aa8c:	10800117 	ldw	r2,4(r2)
  43aa90:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  43aa94:	e0bfff17 	ldw	r2,-4(fp)
  43aa98:	10800017 	ldw	r2,0(r2)
  43aa9c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  43aaa0:	e0bffb17 	ldw	r2,-20(fp)
  43aaa4:	10000b1e 	bne	r2,zero,43aad4 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  43aaa8:	e0bfff17 	ldw	r2,-4(fp)
  43aaac:	10800317 	ldw	r2,12(r2)
  43aab0:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  43aab4:	e0bffd17 	ldw	r2,-12(fp)
  43aab8:	e0fffc17 	ldw	r3,-16(fp)
  43aabc:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  43aac0:	e0bffc17 	ldw	r2,-16(fp)
  43aac4:	10000b26 	beq	r2,zero,43aaf4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  43aac8:	e0bffc17 	ldw	r2,-16(fp)
  43aacc:	10000115 	stw	zero,4(r2)
  43aad0:	00000806 	br	43aaf4 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  43aad4:	e0bffb17 	ldw	r2,-20(fp)
  43aad8:	e0fffc17 	ldw	r3,-16(fp)
  43aadc:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  43aae0:	e0bffc17 	ldw	r2,-16(fp)
  43aae4:	10000326 	beq	r2,zero,43aaf4 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  43aae8:	e0bffc17 	ldw	r2,-16(fp)
  43aaec:	e0fffb17 	ldw	r3,-20(fp)
  43aaf0:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  43aaf4:	e0bfff17 	ldw	r2,-4(fp)
  43aaf8:	10800217 	ldw	r2,8(r2)
  43aafc:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  43ab00:	e0bffe17 	ldw	r2,-8(fp)
  43ab04:	10000a15 	stw	zero,40(r2)
#endif
}
  43ab08:	e037883a 	mov	sp,fp
  43ab0c:	df000017 	ldw	fp,0(sp)
  43ab10:	dec00104 	addi	sp,sp,4
  43ab14:	f800283a 	ret

0043ab18 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  43ab18:	defff304 	addi	sp,sp,-52
  43ab1c:	df000c15 	stw	fp,48(sp)
  43ab20:	df000c04 	addi	fp,sp,48
  43ab24:	e13ffc15 	stw	r4,-16(fp)
  43ab28:	e17ffd15 	stw	r5,-12(fp)
  43ab2c:	e1bffe15 	stw	r6,-8(fp)
  43ab30:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  43ab34:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  43ab38:	e0bfff17 	ldw	r2,-4(fp)
  43ab3c:	1000021e 	bne	r2,zero,43ab48 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
  43ab40:	0005883a 	mov	r2,zero
  43ab44:	00007806 	br	43ad28 <OSMemCreate+0x210>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  43ab48:	e0bffc17 	ldw	r2,-16(fp)
  43ab4c:	1000051e 	bne	r2,zero,43ab64 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  43ab50:	e0bfff17 	ldw	r2,-4(fp)
  43ab54:	00c01884 	movi	r3,98
  43ab58:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  43ab5c:	0005883a 	mov	r2,zero
  43ab60:	00007106 	br	43ad28 <OSMemCreate+0x210>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  43ab64:	e0bffc17 	ldw	r2,-16(fp)
  43ab68:	108000cc 	andi	r2,r2,3
  43ab6c:	10000526 	beq	r2,zero,43ab84 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  43ab70:	e0bfff17 	ldw	r2,-4(fp)
  43ab74:	00c01884 	movi	r3,98
  43ab78:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  43ab7c:	0005883a 	mov	r2,zero
  43ab80:	00006906 	br	43ad28 <OSMemCreate+0x210>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  43ab84:	e0bffd17 	ldw	r2,-12(fp)
  43ab88:	108000a8 	cmpgeui	r2,r2,2
  43ab8c:	1000051e 	bne	r2,zero,43aba4 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  43ab90:	e0bfff17 	ldw	r2,-4(fp)
  43ab94:	00c016c4 	movi	r3,91
  43ab98:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  43ab9c:	0005883a 	mov	r2,zero
  43aba0:	00006106 	br	43ad28 <OSMemCreate+0x210>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  43aba4:	e0bffe17 	ldw	r2,-8(fp)
  43aba8:	10800128 	cmpgeui	r2,r2,4
  43abac:	1000051e 	bne	r2,zero,43abc4 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  43abb0:	e0bfff17 	ldw	r2,-4(fp)
  43abb4:	00c01704 	movi	r3,92
  43abb8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  43abbc:	0005883a 	mov	r2,zero
  43abc0:	00005906 	br	43ad28 <OSMemCreate+0x210>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43abc4:	0005303a 	rdctl	r2,status
  43abc8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43abcc:	e0fff917 	ldw	r3,-28(fp)
  43abd0:	00bfff84 	movi	r2,-2
  43abd4:	1884703a 	and	r2,r3,r2
  43abd8:	1001703a 	wrctl	status,r2
  
  return context;
  43abdc:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  43abe0:	e0bff715 	stw	r2,-36(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  43abe4:	00801134 	movhi	r2,68
  43abe8:	109e0804 	addi	r2,r2,30752
  43abec:	10800017 	ldw	r2,0(r2)
  43abf0:	e0bff815 	stw	r2,-32(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  43abf4:	00801134 	movhi	r2,68
  43abf8:	109e0804 	addi	r2,r2,30752
  43abfc:	10800017 	ldw	r2,0(r2)
  43ac00:	10000726 	beq	r2,zero,43ac20 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  43ac04:	00801134 	movhi	r2,68
  43ac08:	109e0804 	addi	r2,r2,30752
  43ac0c:	10800017 	ldw	r2,0(r2)
  43ac10:	10c00117 	ldw	r3,4(r2)
  43ac14:	00801134 	movhi	r2,68
  43ac18:	109e0804 	addi	r2,r2,30752
  43ac1c:	10c00015 	stw	r3,0(r2)
  43ac20:	e0bff717 	ldw	r2,-36(fp)
  43ac24:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43ac28:	0005303a 	rdctl	r2,status
  43ac2c:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43ac30:	e0fffb17 	ldw	r3,-20(fp)
  43ac34:	00bfff84 	movi	r2,-2
  43ac38:	1884703a 	and	r2,r3,r2
  43ac3c:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43ac40:	e0bffa17 	ldw	r2,-24(fp)
  43ac44:	1080004c 	andi	r2,r2,1
  43ac48:	e0fffb17 	ldw	r3,-20(fp)
  43ac4c:	1884b03a 	or	r2,r3,r2
  43ac50:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  43ac54:	e0bffb17 	ldw	r2,-20(fp)
  43ac58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  43ac5c:	e0bff817 	ldw	r2,-32(fp)
  43ac60:	1000051e 	bne	r2,zero,43ac78 <OSMemCreate+0x160>
        *perr = OS_ERR_MEM_INVALID_PART;
  43ac64:	e0bfff17 	ldw	r2,-4(fp)
  43ac68:	00c01684 	movi	r3,90
  43ac6c:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  43ac70:	0005883a 	mov	r2,zero
  43ac74:	00002c06 	br	43ad28 <OSMemCreate+0x210>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  43ac78:	e0bffc17 	ldw	r2,-16(fp)
  43ac7c:	e0bff515 	stw	r2,-44(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  43ac80:	e0fffc17 	ldw	r3,-16(fp)
  43ac84:	e0bffe17 	ldw	r2,-8(fp)
  43ac88:	1885883a 	add	r2,r3,r2
  43ac8c:	e0bff415 	stw	r2,-48(fp)
    for (i = 0; i < (nblks - 1); i++) {
  43ac90:	e03ff615 	stw	zero,-40(fp)
  43ac94:	00000c06 	br	43acc8 <OSMemCreate+0x1b0>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  43ac98:	e0bff517 	ldw	r2,-44(fp)
  43ac9c:	e0fff417 	ldw	r3,-48(fp)
  43aca0:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  43aca4:	e0bff417 	ldw	r2,-48(fp)
  43aca8:	e0bff515 	stw	r2,-44(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  43acac:	e0fff417 	ldw	r3,-48(fp)
  43acb0:	e0bffe17 	ldw	r2,-8(fp)
  43acb4:	1885883a 	add	r2,r3,r2
  43acb8:	e0bff415 	stw	r2,-48(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  43acbc:	e0bff617 	ldw	r2,-40(fp)
  43acc0:	10800044 	addi	r2,r2,1
  43acc4:	e0bff615 	stw	r2,-40(fp)
  43acc8:	e0bffd17 	ldw	r2,-12(fp)
  43accc:	10bfffc4 	addi	r2,r2,-1
  43acd0:	e0fff617 	ldw	r3,-40(fp)
  43acd4:	18bff036 	bltu	r3,r2,43ac98 <OSMemCreate+0x180>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  43acd8:	e0bff517 	ldw	r2,-44(fp)
  43acdc:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  43ace0:	e0bff817 	ldw	r2,-32(fp)
  43ace4:	e0fffc17 	ldw	r3,-16(fp)
  43ace8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  43acec:	e0bff817 	ldw	r2,-32(fp)
  43acf0:	e0fffc17 	ldw	r3,-16(fp)
  43acf4:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  43acf8:	e0bff817 	ldw	r2,-32(fp)
  43acfc:	e0fffd17 	ldw	r3,-12(fp)
  43ad00:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
  43ad04:	e0bff817 	ldw	r2,-32(fp)
  43ad08:	e0fffd17 	ldw	r3,-12(fp)
  43ad0c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  43ad10:	e0bff817 	ldw	r2,-32(fp)
  43ad14:	e0fffe17 	ldw	r3,-8(fp)
  43ad18:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
  43ad1c:	e0bfff17 	ldw	r2,-4(fp)
  43ad20:	10000005 	stb	zero,0(r2)
    return (pmem);
  43ad24:	e0bff817 	ldw	r2,-32(fp)
}
  43ad28:	e037883a 	mov	sp,fp
  43ad2c:	df000017 	ldw	fp,0(sp)
  43ad30:	dec00104 	addi	sp,sp,4
  43ad34:	f800283a 	ret

0043ad38 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  43ad38:	defff604 	addi	sp,sp,-40
  43ad3c:	df000915 	stw	fp,36(sp)
  43ad40:	df000904 	addi	fp,sp,36
  43ad44:	e13ffe15 	stw	r4,-8(fp)
  43ad48:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  43ad4c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  43ad50:	e0bfff17 	ldw	r2,-4(fp)
  43ad54:	1000021e 	bne	r2,zero,43ad60 <OSMemGet+0x28>
        return ((void *)0);
  43ad58:	0005883a 	mov	r2,zero
  43ad5c:	00004406 	br	43ae70 <OSMemGet+0x138>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  43ad60:	e0bffe17 	ldw	r2,-8(fp)
  43ad64:	1000051e 	bne	r2,zero,43ad7c <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  43ad68:	e0bfff17 	ldw	r2,-4(fp)
  43ad6c:	00c01804 	movi	r3,96
  43ad70:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  43ad74:	0005883a 	mov	r2,zero
  43ad78:	00003d06 	br	43ae70 <OSMemGet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43ad7c:	0005303a 	rdctl	r2,status
  43ad80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43ad84:	e0fff917 	ldw	r3,-28(fp)
  43ad88:	00bfff84 	movi	r2,-2
  43ad8c:	1884703a 	and	r2,r3,r2
  43ad90:	1001703a 	wrctl	status,r2
  
  return context;
  43ad94:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  43ad98:	e0bff715 	stw	r2,-36(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  43ad9c:	e0bffe17 	ldw	r2,-8(fp)
  43ada0:	10800417 	ldw	r2,16(r2)
  43ada4:	10001f26 	beq	r2,zero,43ae24 <OSMemGet+0xec>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  43ada8:	e0bffe17 	ldw	r2,-8(fp)
  43adac:	10800117 	ldw	r2,4(r2)
  43adb0:	e0bff815 	stw	r2,-32(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  43adb4:	e0bff817 	ldw	r2,-32(fp)
  43adb8:	10c00017 	ldw	r3,0(r2)
  43adbc:	e0bffe17 	ldw	r2,-8(fp)
  43adc0:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  43adc4:	e0bffe17 	ldw	r2,-8(fp)
  43adc8:	10800417 	ldw	r2,16(r2)
  43adcc:	10ffffc4 	addi	r3,r2,-1
  43add0:	e0bffe17 	ldw	r2,-8(fp)
  43add4:	10c00415 	stw	r3,16(r2)
  43add8:	e0bff717 	ldw	r2,-36(fp)
  43addc:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43ade0:	0005303a 	rdctl	r2,status
  43ade4:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43ade8:	e0fffb17 	ldw	r3,-20(fp)
  43adec:	00bfff84 	movi	r2,-2
  43adf0:	1884703a 	and	r2,r3,r2
  43adf4:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43adf8:	e0bffa17 	ldw	r2,-24(fp)
  43adfc:	1080004c 	andi	r2,r2,1
  43ae00:	e0fffb17 	ldw	r3,-20(fp)
  43ae04:	1884b03a 	or	r2,r3,r2
  43ae08:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  43ae0c:	e0bffb17 	ldw	r2,-20(fp)
  43ae10:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  43ae14:	e0bfff17 	ldw	r2,-4(fp)
  43ae18:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  43ae1c:	e0bff817 	ldw	r2,-32(fp)
  43ae20:	00001306 	br	43ae70 <OSMemGet+0x138>
  43ae24:	e0bff717 	ldw	r2,-36(fp)
  43ae28:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43ae2c:	0005303a 	rdctl	r2,status
  43ae30:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43ae34:	e0fffd17 	ldw	r3,-12(fp)
  43ae38:	00bfff84 	movi	r2,-2
  43ae3c:	1884703a 	and	r2,r3,r2
  43ae40:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43ae44:	e0bffc17 	ldw	r2,-16(fp)
  43ae48:	1080004c 	andi	r2,r2,1
  43ae4c:	e0fffd17 	ldw	r3,-12(fp)
  43ae50:	1884b03a 	or	r2,r3,r2
  43ae54:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43ae58:	e0bffd17 	ldw	r2,-12(fp)
  43ae5c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  43ae60:	e0bfff17 	ldw	r2,-4(fp)
  43ae64:	00c01744 	movi	r3,93
  43ae68:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  43ae6c:	0005883a 	mov	r2,zero
}
  43ae70:	e037883a 	mov	sp,fp
  43ae74:	df000017 	ldw	fp,0(sp)
  43ae78:	dec00104 	addi	sp,sp,4
  43ae7c:	f800283a 	ret

0043ae80 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  43ae80:	defff604 	addi	sp,sp,-40
  43ae84:	dfc00915 	stw	ra,36(sp)
  43ae88:	df000815 	stw	fp,32(sp)
  43ae8c:	df000804 	addi	fp,sp,32
  43ae90:	e13ffd15 	stw	r4,-12(fp)
  43ae94:	e17ffe15 	stw	r5,-8(fp)
  43ae98:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  43ae9c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  43aea0:	e0bfff17 	ldw	r2,-4(fp)
  43aea4:	1000021e 	bne	r2,zero,43aeb0 <OSMemNameGet+0x30>
        return (0);
  43aea8:	0005883a 	mov	r2,zero
  43aeac:	00003806 	br	43af90 <OSMemNameGet+0x110>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  43aeb0:	e0bffd17 	ldw	r2,-12(fp)
  43aeb4:	1000051e 	bne	r2,zero,43aecc <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  43aeb8:	e0bfff17 	ldw	r2,-4(fp)
  43aebc:	00c01804 	movi	r3,96
  43aec0:	10c00005 	stb	r3,0(r2)
        return (0);
  43aec4:	0005883a 	mov	r2,zero
  43aec8:	00003106 	br	43af90 <OSMemNameGet+0x110>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  43aecc:	e0bffe17 	ldw	r2,-8(fp)
  43aed0:	1000051e 	bne	r2,zero,43aee8 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  43aed4:	e0bfff17 	ldw	r2,-4(fp)
  43aed8:	00c00304 	movi	r3,12
  43aedc:	10c00005 	stb	r3,0(r2)
        return (0);
  43aee0:	0005883a 	mov	r2,zero
  43aee4:	00002a06 	br	43af90 <OSMemNameGet+0x110>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  43aee8:	00801134 	movhi	r2,68
  43aeec:	109e0d04 	addi	r2,r2,30772
  43aef0:	10800003 	ldbu	r2,0(r2)
  43aef4:	10803fcc 	andi	r2,r2,255
  43aef8:	10000526 	beq	r2,zero,43af10 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
  43aefc:	e0bfff17 	ldw	r2,-4(fp)
  43af00:	00c00444 	movi	r3,17
  43af04:	10c00005 	stb	r3,0(r2)
        return (0);
  43af08:	0005883a 	mov	r2,zero
  43af0c:	00002006 	br	43af90 <OSMemNameGet+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43af10:	0005303a 	rdctl	r2,status
  43af14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43af18:	e0fffa17 	ldw	r3,-24(fp)
  43af1c:	00bfff84 	movi	r2,-2
  43af20:	1884703a 	and	r2,r3,r2
  43af24:	1001703a 	wrctl	status,r2
  
  return context;
  43af28:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  43af2c:	e0bff815 	stw	r2,-32(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  43af30:	e0bffd17 	ldw	r2,-12(fp)
  43af34:	10800504 	addi	r2,r2,20
  43af38:	e13ffe17 	ldw	r4,-8(fp)
  43af3c:	100b883a 	mov	r5,r2
  43af40:	04385100 	call	438510 <OS_StrCopy>
  43af44:	e0bff905 	stb	r2,-28(fp)
  43af48:	e0bff817 	ldw	r2,-32(fp)
  43af4c:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43af50:	0005303a 	rdctl	r2,status
  43af54:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43af58:	e0fffc17 	ldw	r3,-16(fp)
  43af5c:	00bfff84 	movi	r2,-2
  43af60:	1884703a 	and	r2,r3,r2
  43af64:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43af68:	e0bffb17 	ldw	r2,-20(fp)
  43af6c:	1080004c 	andi	r2,r2,1
  43af70:	e0fffc17 	ldw	r3,-16(fp)
  43af74:	1884b03a 	or	r2,r3,r2
  43af78:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43af7c:	e0bffc17 	ldw	r2,-16(fp)
  43af80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  43af84:	e0bfff17 	ldw	r2,-4(fp)
  43af88:	10000005 	stb	zero,0(r2)
    return (len);
  43af8c:	e0bff903 	ldbu	r2,-28(fp)
}
  43af90:	e037883a 	mov	sp,fp
  43af94:	dfc00117 	ldw	ra,4(sp)
  43af98:	df000017 	ldw	fp,0(sp)
  43af9c:	dec00204 	addi	sp,sp,8
  43afa0:	f800283a 	ret

0043afa4 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  43afa4:	defff404 	addi	sp,sp,-48
  43afa8:	dfc00b15 	stw	ra,44(sp)
  43afac:	df000a15 	stw	fp,40(sp)
  43afb0:	df000a04 	addi	fp,sp,40
  43afb4:	e13ffd15 	stw	r4,-12(fp)
  43afb8:	e17ffe15 	stw	r5,-8(fp)
  43afbc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  43afc0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  43afc4:	e0bfff17 	ldw	r2,-4(fp)
  43afc8:	10004d26 	beq	r2,zero,43b100 <OSMemNameSet+0x15c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  43afcc:	e0bffd17 	ldw	r2,-12(fp)
  43afd0:	1000041e 	bne	r2,zero,43afe4 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  43afd4:	e0bfff17 	ldw	r2,-4(fp)
  43afd8:	00c01804 	movi	r3,96
  43afdc:	10c00005 	stb	r3,0(r2)
        return;
  43afe0:	00004806 	br	43b104 <OSMemNameSet+0x160>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  43afe4:	e0bffe17 	ldw	r2,-8(fp)
  43afe8:	1000041e 	bne	r2,zero,43affc <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  43afec:	e0bfff17 	ldw	r2,-4(fp)
  43aff0:	00c00304 	movi	r3,12
  43aff4:	10c00005 	stb	r3,0(r2)
        return;
  43aff8:	00004206 	br	43b104 <OSMemNameSet+0x160>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  43affc:	00801134 	movhi	r2,68
  43b000:	109e0d04 	addi	r2,r2,30772
  43b004:	10800003 	ldbu	r2,0(r2)
  43b008:	10803fcc 	andi	r2,r2,255
  43b00c:	10000426 	beq	r2,zero,43b020 <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
  43b010:	e0bfff17 	ldw	r2,-4(fp)
  43b014:	00c00484 	movi	r3,18
  43b018:	10c00005 	stb	r3,0(r2)
        return;
  43b01c:	00003906 	br	43b104 <OSMemNameSet+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43b020:	0005303a 	rdctl	r2,status
  43b024:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43b028:	e0fff817 	ldw	r3,-32(fp)
  43b02c:	00bfff84 	movi	r2,-2
  43b030:	1884703a 	and	r2,r3,r2
  43b034:	1001703a 	wrctl	status,r2
  
  return context;
  43b038:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  43b03c:	e0bff615 	stw	r2,-40(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  43b040:	e13ffe17 	ldw	r4,-8(fp)
  43b044:	043858c0 	call	43858c <OS_StrLen>
  43b048:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  43b04c:	e0bff703 	ldbu	r2,-36(fp)
  43b050:	10800830 	cmpltui	r2,r2,32
  43b054:	1000131e 	bne	r2,zero,43b0a4 <OSMemNameSet+0x100>
  43b058:	e0bff617 	ldw	r2,-40(fp)
  43b05c:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43b060:	0005303a 	rdctl	r2,status
  43b064:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43b068:	e0fffa17 	ldw	r3,-24(fp)
  43b06c:	00bfff84 	movi	r2,-2
  43b070:	1884703a 	and	r2,r3,r2
  43b074:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43b078:	e0bff917 	ldw	r2,-28(fp)
  43b07c:	1080004c 	andi	r2,r2,1
  43b080:	e0fffa17 	ldw	r3,-24(fp)
  43b084:	1884b03a 	or	r2,r3,r2
  43b088:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  43b08c:	e0bffa17 	ldw	r2,-24(fp)
  43b090:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  43b094:	e0bfff17 	ldw	r2,-4(fp)
  43b098:	00c018c4 	movi	r3,99
  43b09c:	10c00005 	stb	r3,0(r2)
        return;
  43b0a0:	00001806 	br	43b104 <OSMemNameSet+0x160>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  43b0a4:	e0bffd17 	ldw	r2,-12(fp)
  43b0a8:	10800504 	addi	r2,r2,20
  43b0ac:	1009883a 	mov	r4,r2
  43b0b0:	e17ffe17 	ldw	r5,-8(fp)
  43b0b4:	04385100 	call	438510 <OS_StrCopy>
  43b0b8:	e0bff617 	ldw	r2,-40(fp)
  43b0bc:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43b0c0:	0005303a 	rdctl	r2,status
  43b0c4:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43b0c8:	e0fffc17 	ldw	r3,-16(fp)
  43b0cc:	00bfff84 	movi	r2,-2
  43b0d0:	1884703a 	and	r2,r3,r2
  43b0d4:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43b0d8:	e0bffb17 	ldw	r2,-20(fp)
  43b0dc:	1080004c 	andi	r2,r2,1
  43b0e0:	e0fffc17 	ldw	r3,-16(fp)
  43b0e4:	1884b03a 	or	r2,r3,r2
  43b0e8:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43b0ec:	e0bffc17 	ldw	r2,-16(fp)
  43b0f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  43b0f4:	e0bfff17 	ldw	r2,-4(fp)
  43b0f8:	10000005 	stb	zero,0(r2)
  43b0fc:	00000106 	br	43b104 <OSMemNameSet+0x160>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  43b100:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  43b104:	e037883a 	mov	sp,fp
  43b108:	dfc00117 	ldw	ra,4(sp)
  43b10c:	df000017 	ldw	fp,0(sp)
  43b110:	dec00204 	addi	sp,sp,8
  43b114:	f800283a 	ret

0043b118 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  43b118:	defff704 	addi	sp,sp,-36
  43b11c:	df000815 	stw	fp,32(sp)
  43b120:	df000804 	addi	fp,sp,32
  43b124:	e13ffe15 	stw	r4,-8(fp)
  43b128:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  43b12c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  43b130:	e0bffe17 	ldw	r2,-8(fp)
  43b134:	1000021e 	bne	r2,zero,43b140 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  43b138:	00801804 	movi	r2,96
  43b13c:	00003e06 	br	43b238 <OSMemPut+0x120>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  43b140:	e0bfff17 	ldw	r2,-4(fp)
  43b144:	1000021e 	bne	r2,zero,43b150 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
  43b148:	008017c4 	movi	r2,95
  43b14c:	00003a06 	br	43b238 <OSMemPut+0x120>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43b150:	0005303a 	rdctl	r2,status
  43b154:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43b158:	e0fff917 	ldw	r3,-28(fp)
  43b15c:	00bfff84 	movi	r2,-2
  43b160:	1884703a 	and	r2,r3,r2
  43b164:	1001703a 	wrctl	status,r2
  
  return context;
  43b168:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  43b16c:	e0bff815 	stw	r2,-32(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  43b170:	e0bffe17 	ldw	r2,-8(fp)
  43b174:	10c00417 	ldw	r3,16(r2)
  43b178:	e0bffe17 	ldw	r2,-8(fp)
  43b17c:	10800317 	ldw	r2,12(r2)
  43b180:	18801136 	bltu	r3,r2,43b1c8 <OSMemPut+0xb0>
  43b184:	e0bff817 	ldw	r2,-32(fp)
  43b188:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43b18c:	0005303a 	rdctl	r2,status
  43b190:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43b194:	e0fffb17 	ldw	r3,-20(fp)
  43b198:	00bfff84 	movi	r2,-2
  43b19c:	1884703a 	and	r2,r3,r2
  43b1a0:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43b1a4:	e0bffa17 	ldw	r2,-24(fp)
  43b1a8:	1080004c 	andi	r2,r2,1
  43b1ac:	e0fffb17 	ldw	r3,-20(fp)
  43b1b0:	1884b03a 	or	r2,r3,r2
  43b1b4:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  43b1b8:	e0bffb17 	ldw	r2,-20(fp)
  43b1bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  43b1c0:	00801784 	movi	r2,94
  43b1c4:	00001c06 	br	43b238 <OSMemPut+0x120>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  43b1c8:	e0bffe17 	ldw	r2,-8(fp)
  43b1cc:	10c00117 	ldw	r3,4(r2)
  43b1d0:	e0bfff17 	ldw	r2,-4(fp)
  43b1d4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
  43b1d8:	e0bffe17 	ldw	r2,-8(fp)
  43b1dc:	e0ffff17 	ldw	r3,-4(fp)
  43b1e0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  43b1e4:	e0bffe17 	ldw	r2,-8(fp)
  43b1e8:	10800417 	ldw	r2,16(r2)
  43b1ec:	10c00044 	addi	r3,r2,1
  43b1f0:	e0bffe17 	ldw	r2,-8(fp)
  43b1f4:	10c00415 	stw	r3,16(r2)
  43b1f8:	e0bff817 	ldw	r2,-32(fp)
  43b1fc:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43b200:	0005303a 	rdctl	r2,status
  43b204:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43b208:	e0fffd17 	ldw	r3,-12(fp)
  43b20c:	00bfff84 	movi	r2,-2
  43b210:	1884703a 	and	r2,r3,r2
  43b214:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43b218:	e0bffc17 	ldw	r2,-16(fp)
  43b21c:	1080004c 	andi	r2,r2,1
  43b220:	e0fffd17 	ldw	r3,-12(fp)
  43b224:	1884b03a 	or	r2,r3,r2
  43b228:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43b22c:	e0bffd17 	ldw	r2,-12(fp)
  43b230:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  43b234:	0005883a 	mov	r2,zero
}
  43b238:	e037883a 	mov	sp,fp
  43b23c:	df000017 	ldw	fp,0(sp)
  43b240:	dec00104 	addi	sp,sp,4
  43b244:	f800283a 	ret

0043b248 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  43b248:	defff904 	addi	sp,sp,-28
  43b24c:	df000615 	stw	fp,24(sp)
  43b250:	df000604 	addi	fp,sp,24
  43b254:	e13ffe15 	stw	r4,-8(fp)
  43b258:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  43b25c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  43b260:	e0bffe17 	ldw	r2,-8(fp)
  43b264:	1000021e 	bne	r2,zero,43b270 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  43b268:	00801804 	movi	r2,96
  43b26c:	00003706 	br	43b34c <OSMemQuery+0x104>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  43b270:	e0bfff17 	ldw	r2,-4(fp)
  43b274:	1000021e 	bne	r2,zero,43b280 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
  43b278:	00801844 	movi	r2,97
  43b27c:	00003306 	br	43b34c <OSMemQuery+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43b280:	0005303a 	rdctl	r2,status
  43b284:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43b288:	e0fffb17 	ldw	r3,-20(fp)
  43b28c:	00bfff84 	movi	r2,-2
  43b290:	1884703a 	and	r2,r3,r2
  43b294:	1001703a 	wrctl	status,r2
  
  return context;
  43b298:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  43b29c:	e0bffa15 	stw	r2,-24(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  43b2a0:	e0bffe17 	ldw	r2,-8(fp)
  43b2a4:	10c00017 	ldw	r3,0(r2)
  43b2a8:	e0bfff17 	ldw	r2,-4(fp)
  43b2ac:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  43b2b0:	e0bffe17 	ldw	r2,-8(fp)
  43b2b4:	10c00117 	ldw	r3,4(r2)
  43b2b8:	e0bfff17 	ldw	r2,-4(fp)
  43b2bc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  43b2c0:	e0bffe17 	ldw	r2,-8(fp)
  43b2c4:	10c00217 	ldw	r3,8(r2)
  43b2c8:	e0bfff17 	ldw	r2,-4(fp)
  43b2cc:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  43b2d0:	e0bffe17 	ldw	r2,-8(fp)
  43b2d4:	10c00317 	ldw	r3,12(r2)
  43b2d8:	e0bfff17 	ldw	r2,-4(fp)
  43b2dc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  43b2e0:	e0bffe17 	ldw	r2,-8(fp)
  43b2e4:	10c00417 	ldw	r3,16(r2)
  43b2e8:	e0bfff17 	ldw	r2,-4(fp)
  43b2ec:	10c00415 	stw	r3,16(r2)
  43b2f0:	e0bffa17 	ldw	r2,-24(fp)
  43b2f4:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43b2f8:	0005303a 	rdctl	r2,status
  43b2fc:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43b300:	e0fffd17 	ldw	r3,-12(fp)
  43b304:	00bfff84 	movi	r2,-2
  43b308:	1884703a 	and	r2,r3,r2
  43b30c:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43b310:	e0bffc17 	ldw	r2,-16(fp)
  43b314:	1080004c 	andi	r2,r2,1
  43b318:	e0fffd17 	ldw	r3,-12(fp)
  43b31c:	1884b03a 	or	r2,r3,r2
  43b320:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43b324:	e0bffd17 	ldw	r2,-12(fp)
  43b328:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  43b32c:	e0bfff17 	ldw	r2,-4(fp)
  43b330:	10c00317 	ldw	r3,12(r2)
  43b334:	e0bfff17 	ldw	r2,-4(fp)
  43b338:	10800417 	ldw	r2,16(r2)
  43b33c:	1887c83a 	sub	r3,r3,r2
  43b340:	e0bfff17 	ldw	r2,-4(fp)
  43b344:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  43b348:	0005883a 	mov	r2,zero
}
  43b34c:	e037883a 	mov	sp,fp
  43b350:	df000017 	ldw	fp,0(sp)
  43b354:	dec00104 	addi	sp,sp,4
  43b358:	f800283a 	ret

0043b35c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  43b35c:	defffc04 	addi	sp,sp,-16
  43b360:	dfc00315 	stw	ra,12(sp)
  43b364:	df000215 	stw	fp,8(sp)
  43b368:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  43b36c:	01001134 	movhi	r4,68
  43b370:	211f3d04 	addi	r4,r4,31988
  43b374:	01430c04 	movi	r5,3120
  43b378:	04382e80 	call	4382e8 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  43b37c:	00801134 	movhi	r2,68
  43b380:	109f3d04 	addi	r2,r2,31988
  43b384:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  43b388:	e03fff0d 	sth	zero,-4(fp)
  43b38c:	00001506 	br	43b3e4 <OS_MemInit+0x88>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  43b390:	e0bfff0b 	ldhu	r2,-4(fp)
  43b394:	10800044 	addi	r2,r2,1
  43b398:	1009883a 	mov	r4,r2
  43b39c:	01400d04 	movi	r5,52
  43b3a0:	04355000 	call	435500 <__mulsi3>
  43b3a4:	00c01134 	movhi	r3,68
  43b3a8:	18df3d04 	addi	r3,r3,31988
  43b3ac:	10c7883a 	add	r3,r2,r3
  43b3b0:	e0bffe17 	ldw	r2,-8(fp)
  43b3b4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  43b3b8:	e0bffe17 	ldw	r2,-8(fp)
  43b3bc:	00c00fc4 	movi	r3,63
  43b3c0:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  43b3c4:	e0bffe17 	ldw	r2,-8(fp)
  43b3c8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  43b3cc:	e0bffe17 	ldw	r2,-8(fp)
  43b3d0:	10800d04 	addi	r2,r2,52
  43b3d4:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  43b3d8:	e0bfff0b 	ldhu	r2,-4(fp)
  43b3dc:	10800044 	addi	r2,r2,1
  43b3e0:	e0bfff0d 	sth	r2,-4(fp)
  43b3e4:	e0bfff0b 	ldhu	r2,-4(fp)
  43b3e8:	10800ef0 	cmpltui	r2,r2,59
  43b3ec:	103fe81e 	bne	r2,zero,43b390 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  43b3f0:	e0bffe17 	ldw	r2,-8(fp)
  43b3f4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  43b3f8:	e0bffe17 	ldw	r2,-8(fp)
  43b3fc:	00c00fc4 	movi	r3,63
  43b400:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  43b404:	e0bffe17 	ldw	r2,-8(fp)
  43b408:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  43b40c:	00801134 	movhi	r2,68
  43b410:	109e0804 	addi	r2,r2,30752
  43b414:	00c01134 	movhi	r3,68
  43b418:	18df3d04 	addi	r3,r3,31988
  43b41c:	10c00015 	stw	r3,0(r2)
#endif
}
  43b420:	e037883a 	mov	sp,fp
  43b424:	dfc00117 	ldw	ra,4(sp)
  43b428:	df000017 	ldw	fp,0(sp)
  43b42c:	dec00204 	addi	sp,sp,8
  43b430:	f800283a 	ret

0043b434 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  43b434:	defff704 	addi	sp,sp,-36
  43b438:	df000815 	stw	fp,32(sp)
  43b43c:	df000804 	addi	fp,sp,32
  43b440:	e13ffe15 	stw	r4,-8(fp)
  43b444:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  43b448:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  43b44c:	e0bfff17 	ldw	r2,-4(fp)
  43b450:	1000021e 	bne	r2,zero,43b45c <OSQAccept+0x28>
        return ((void *)0);
  43b454:	0005883a 	mov	r2,zero
  43b458:	00004d06 	br	43b590 <OSQAccept+0x15c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  43b45c:	e0bffe17 	ldw	r2,-8(fp)
  43b460:	1000051e 	bne	r2,zero,43b478 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  43b464:	e0bfff17 	ldw	r2,-4(fp)
  43b468:	00c00104 	movi	r3,4
  43b46c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  43b470:	0005883a 	mov	r2,zero
  43b474:	00004606 	br	43b590 <OSQAccept+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  43b478:	e0bffe17 	ldw	r2,-8(fp)
  43b47c:	10800003 	ldbu	r2,0(r2)
  43b480:	10803fcc 	andi	r2,r2,255
  43b484:	108000a0 	cmpeqi	r2,r2,2
  43b488:	1000051e 	bne	r2,zero,43b4a0 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  43b48c:	e0bfff17 	ldw	r2,-4(fp)
  43b490:	00c00044 	movi	r3,1
  43b494:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  43b498:	0005883a 	mov	r2,zero
  43b49c:	00003c06 	br	43b590 <OSQAccept+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43b4a0:	0005303a 	rdctl	r2,status
  43b4a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43b4a8:	e0fffb17 	ldw	r3,-20(fp)
  43b4ac:	00bfff84 	movi	r2,-2
  43b4b0:	1884703a 	and	r2,r3,r2
  43b4b4:	1001703a 	wrctl	status,r2
  
  return context;
  43b4b8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  43b4bc:	e0bff915 	stw	r2,-28(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  43b4c0:	e0bffe17 	ldw	r2,-8(fp)
  43b4c4:	10800117 	ldw	r2,4(r2)
  43b4c8:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  43b4cc:	e0bffa17 	ldw	r2,-24(fp)
  43b4d0:	1080058b 	ldhu	r2,22(r2)
  43b4d4:	10bfffcc 	andi	r2,r2,65535
  43b4d8:	10001926 	beq	r2,zero,43b540 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  43b4dc:	e0bffa17 	ldw	r2,-24(fp)
  43b4e0:	10800417 	ldw	r2,16(r2)
  43b4e4:	10c00017 	ldw	r3,0(r2)
  43b4e8:	e0fff815 	stw	r3,-32(fp)
  43b4ec:	10c00104 	addi	r3,r2,4
  43b4f0:	e0bffa17 	ldw	r2,-24(fp)
  43b4f4:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  43b4f8:	e0bffa17 	ldw	r2,-24(fp)
  43b4fc:	1080058b 	ldhu	r2,22(r2)
  43b500:	10bfffc4 	addi	r2,r2,-1
  43b504:	1007883a 	mov	r3,r2
  43b508:	e0bffa17 	ldw	r2,-24(fp)
  43b50c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  43b510:	e0bffa17 	ldw	r2,-24(fp)
  43b514:	10c00417 	ldw	r3,16(r2)
  43b518:	e0bffa17 	ldw	r2,-24(fp)
  43b51c:	10800217 	ldw	r2,8(r2)
  43b520:	1880041e 	bne	r3,r2,43b534 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
  43b524:	e0bffa17 	ldw	r2,-24(fp)
  43b528:	10c00117 	ldw	r3,4(r2)
  43b52c:	e0bffa17 	ldw	r2,-24(fp)
  43b530:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  43b534:	e0bfff17 	ldw	r2,-4(fp)
  43b538:	10000005 	stb	zero,0(r2)
  43b53c:	00000406 	br	43b550 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  43b540:	e0bfff17 	ldw	r2,-4(fp)
  43b544:	00c007c4 	movi	r3,31
  43b548:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  43b54c:	e03ff815 	stw	zero,-32(fp)
  43b550:	e0bff917 	ldw	r2,-28(fp)
  43b554:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43b558:	0005303a 	rdctl	r2,status
  43b55c:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43b560:	e0fffd17 	ldw	r3,-12(fp)
  43b564:	00bfff84 	movi	r2,-2
  43b568:	1884703a 	and	r2,r3,r2
  43b56c:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43b570:	e0bffc17 	ldw	r2,-16(fp)
  43b574:	1080004c 	andi	r2,r2,1
  43b578:	e0fffd17 	ldw	r3,-12(fp)
  43b57c:	1884b03a 	or	r2,r3,r2
  43b580:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43b584:	e0bffd17 	ldw	r2,-12(fp)
  43b588:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  43b58c:	e0bff817 	ldw	r2,-32(fp)
}
  43b590:	e037883a 	mov	sp,fp
  43b594:	df000017 	ldw	fp,0(sp)
  43b598:	dec00104 	addi	sp,sp,4
  43b59c:	f800283a 	ret

0043b5a0 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  43b5a0:	defff104 	addi	sp,sp,-60
  43b5a4:	dfc00e15 	stw	ra,56(sp)
  43b5a8:	df000d15 	stw	fp,52(sp)
  43b5ac:	df000d04 	addi	fp,sp,52
  43b5b0:	e13ffe15 	stw	r4,-8(fp)
  43b5b4:	2805883a 	mov	r2,r5
  43b5b8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  43b5bc:	e03ff415 	stw	zero,-48(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  43b5c0:	00801134 	movhi	r2,68
  43b5c4:	109e0d04 	addi	r2,r2,30772
  43b5c8:	10800003 	ldbu	r2,0(r2)
  43b5cc:	10803fcc 	andi	r2,r2,255
  43b5d0:	10000226 	beq	r2,zero,43b5dc <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  43b5d4:	0005883a 	mov	r2,zero
  43b5d8:	00008b06 	br	43b808 <OSQCreate+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43b5dc:	0005303a 	rdctl	r2,status
  43b5e0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43b5e4:	e0fff617 	ldw	r3,-40(fp)
  43b5e8:	00bfff84 	movi	r2,-2
  43b5ec:	1884703a 	and	r2,r3,r2
  43b5f0:	1001703a 	wrctl	status,r2
  
  return context;
  43b5f4:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  43b5f8:	e0bff415 	stw	r2,-48(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  43b5fc:	00801134 	movhi	r2,68
  43b600:	109e0c04 	addi	r2,r2,30768
  43b604:	10800017 	ldw	r2,0(r2)
  43b608:	e0bff315 	stw	r2,-52(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  43b60c:	00801134 	movhi	r2,68
  43b610:	109e0c04 	addi	r2,r2,30768
  43b614:	10800017 	ldw	r2,0(r2)
  43b618:	10000726 	beq	r2,zero,43b638 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  43b61c:	00801134 	movhi	r2,68
  43b620:	109e0c04 	addi	r2,r2,30768
  43b624:	10800017 	ldw	r2,0(r2)
  43b628:	10c00117 	ldw	r3,4(r2)
  43b62c:	00801134 	movhi	r2,68
  43b630:	109e0c04 	addi	r2,r2,30768
  43b634:	10c00015 	stw	r3,0(r2)
  43b638:	e0bff417 	ldw	r2,-48(fp)
  43b63c:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43b640:	0005303a 	rdctl	r2,status
  43b644:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43b648:	e0fff817 	ldw	r3,-32(fp)
  43b64c:	00bfff84 	movi	r2,-2
  43b650:	1884703a 	and	r2,r3,r2
  43b654:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43b658:	e0bff717 	ldw	r2,-36(fp)
  43b65c:	1080004c 	andi	r2,r2,1
  43b660:	e0fff817 	ldw	r3,-32(fp)
  43b664:	1884b03a 	or	r2,r3,r2
  43b668:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  43b66c:	e0bff817 	ldw	r2,-32(fp)
  43b670:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  43b674:	e0bff317 	ldw	r2,-52(fp)
  43b678:	10006226 	beq	r2,zero,43b804 <OSQCreate+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43b67c:	0005303a 	rdctl	r2,status
  43b680:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43b684:	e0fff917 	ldw	r3,-28(fp)
  43b688:	00bfff84 	movi	r2,-2
  43b68c:	1884703a 	and	r2,r3,r2
  43b690:	1001703a 	wrctl	status,r2
  
  return context;
  43b694:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
  43b698:	e0bff415 	stw	r2,-48(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  43b69c:	00801134 	movhi	r2,68
  43b6a0:	109e0a04 	addi	r2,r2,30760
  43b6a4:	10800017 	ldw	r2,0(r2)
  43b6a8:	e0bff515 	stw	r2,-44(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  43b6ac:	e0bff517 	ldw	r2,-44(fp)
  43b6b0:	10003b26 	beq	r2,zero,43b7a0 <OSQCreate+0x200>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  43b6b4:	00801134 	movhi	r2,68
  43b6b8:	109e0a04 	addi	r2,r2,30760
  43b6bc:	10800017 	ldw	r2,0(r2)
  43b6c0:	10c00017 	ldw	r3,0(r2)
  43b6c4:	00801134 	movhi	r2,68
  43b6c8:	109e0a04 	addi	r2,r2,30760
  43b6cc:	10c00015 	stw	r3,0(r2)
  43b6d0:	e0bff417 	ldw	r2,-48(fp)
  43b6d4:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43b6d8:	0005303a 	rdctl	r2,status
  43b6dc:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43b6e0:	e0fffb17 	ldw	r3,-20(fp)
  43b6e4:	00bfff84 	movi	r2,-2
  43b6e8:	1884703a 	and	r2,r3,r2
  43b6ec:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43b6f0:	e0bffa17 	ldw	r2,-24(fp)
  43b6f4:	1080004c 	andi	r2,r2,1
  43b6f8:	e0fffb17 	ldw	r3,-20(fp)
  43b6fc:	1884b03a 	or	r2,r3,r2
  43b700:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  43b704:	e0bffb17 	ldw	r2,-20(fp)
  43b708:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  43b70c:	e0bff517 	ldw	r2,-44(fp)
  43b710:	e0fffe17 	ldw	r3,-8(fp)
  43b714:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
  43b718:	e0bfff0b 	ldhu	r2,-4(fp)
  43b71c:	1085883a 	add	r2,r2,r2
  43b720:	1085883a 	add	r2,r2,r2
  43b724:	e0fffe17 	ldw	r3,-8(fp)
  43b728:	1887883a 	add	r3,r3,r2
  43b72c:	e0bff517 	ldw	r2,-44(fp)
  43b730:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  43b734:	e0bff517 	ldw	r2,-44(fp)
  43b738:	e0fffe17 	ldw	r3,-8(fp)
  43b73c:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
  43b740:	e0bff517 	ldw	r2,-44(fp)
  43b744:	e0fffe17 	ldw	r3,-8(fp)
  43b748:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
  43b74c:	e0bff517 	ldw	r2,-44(fp)
  43b750:	e0ffff0b 	ldhu	r3,-4(fp)
  43b754:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
  43b758:	e0bff517 	ldw	r2,-44(fp)
  43b75c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  43b760:	e0bff317 	ldw	r2,-52(fp)
  43b764:	00c00084 	movi	r3,2
  43b768:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
  43b76c:	e0bff317 	ldw	r2,-52(fp)
  43b770:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  43b774:	e0bff317 	ldw	r2,-52(fp)
  43b778:	e0fff517 	ldw	r3,-44(fp)
  43b77c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  43b780:	e0bff317 	ldw	r2,-52(fp)
  43b784:	00c00fc4 	movi	r3,63
  43b788:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  43b78c:	e0bff317 	ldw	r2,-52(fp)
  43b790:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  43b794:	e13ff317 	ldw	r4,-52(fp)
  43b798:	0437f1c0 	call	437f1c <OS_EventWaitListInit>
  43b79c:	00001906 	br	43b804 <OSQCreate+0x264>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  43b7a0:	00801134 	movhi	r2,68
  43b7a4:	109e0c04 	addi	r2,r2,30768
  43b7a8:	10c00017 	ldw	r3,0(r2)
  43b7ac:	e0bff317 	ldw	r2,-52(fp)
  43b7b0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  43b7b4:	00801134 	movhi	r2,68
  43b7b8:	109e0c04 	addi	r2,r2,30768
  43b7bc:	e0fff317 	ldw	r3,-52(fp)
  43b7c0:	10c00015 	stw	r3,0(r2)
  43b7c4:	e0bff417 	ldw	r2,-48(fp)
  43b7c8:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43b7cc:	0005303a 	rdctl	r2,status
  43b7d0:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43b7d4:	e0fffd17 	ldw	r3,-12(fp)
  43b7d8:	00bfff84 	movi	r2,-2
  43b7dc:	1884703a 	and	r2,r3,r2
  43b7e0:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43b7e4:	e0bffc17 	ldw	r2,-16(fp)
  43b7e8:	1080004c 	andi	r2,r2,1
  43b7ec:	e0fffd17 	ldw	r3,-12(fp)
  43b7f0:	1884b03a 	or	r2,r3,r2
  43b7f4:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43b7f8:	e0bffd17 	ldw	r2,-12(fp)
  43b7fc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  43b800:	e03ff315 	stw	zero,-52(fp)
        }
    }
    return (pevent);
  43b804:	e0bff317 	ldw	r2,-52(fp)
}
  43b808:	e037883a 	mov	sp,fp
  43b80c:	dfc00117 	ldw	ra,4(sp)
  43b810:	df000017 	ldw	fp,0(sp)
  43b814:	dec00204 	addi	sp,sp,8
  43b818:	f800283a 	ret

0043b81c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  43b81c:	deffee04 	addi	sp,sp,-72
  43b820:	dfc01115 	stw	ra,68(sp)
  43b824:	df001015 	stw	fp,64(sp)
  43b828:	df001004 	addi	fp,sp,64
  43b82c:	e13ffd15 	stw	r4,-12(fp)
  43b830:	2805883a 	mov	r2,r5
  43b834:	e1bfff15 	stw	r6,-4(fp)
  43b838:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  43b83c:	e03ff215 	stw	zero,-56(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  43b840:	e0bfff17 	ldw	r2,-4(fp)
  43b844:	1000021e 	bne	r2,zero,43b850 <OSQDel+0x34>
        return (pevent);
  43b848:	e0bffd17 	ldw	r2,-12(fp)
  43b84c:	0000ce06 	br	43bb88 <OSQDel+0x36c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  43b850:	e0bffd17 	ldw	r2,-12(fp)
  43b854:	1000051e 	bne	r2,zero,43b86c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  43b858:	e0bfff17 	ldw	r2,-4(fp)
  43b85c:	00c00104 	movi	r3,4
  43b860:	10c00005 	stb	r3,0(r2)
        return (pevent);
  43b864:	e0bffd17 	ldw	r2,-12(fp)
  43b868:	0000c706 	br	43bb88 <OSQDel+0x36c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  43b86c:	e0bffd17 	ldw	r2,-12(fp)
  43b870:	10800003 	ldbu	r2,0(r2)
  43b874:	10803fcc 	andi	r2,r2,255
  43b878:	108000a0 	cmpeqi	r2,r2,2
  43b87c:	1000051e 	bne	r2,zero,43b894 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  43b880:	e0bfff17 	ldw	r2,-4(fp)
  43b884:	00c00044 	movi	r3,1
  43b888:	10c00005 	stb	r3,0(r2)
        return (pevent);
  43b88c:	e0bffd17 	ldw	r2,-12(fp)
  43b890:	0000bd06 	br	43bb88 <OSQDel+0x36c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  43b894:	00801134 	movhi	r2,68
  43b898:	109e0d04 	addi	r2,r2,30772
  43b89c:	10800003 	ldbu	r2,0(r2)
  43b8a0:	10803fcc 	andi	r2,r2,255
  43b8a4:	10000526 	beq	r2,zero,43b8bc <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  43b8a8:	e0bfff17 	ldw	r2,-4(fp)
  43b8ac:	00c003c4 	movi	r3,15
  43b8b0:	10c00005 	stb	r3,0(r2)
        return (pevent);
  43b8b4:	e0bffd17 	ldw	r2,-12(fp)
  43b8b8:	0000b306 	br	43bb88 <OSQDel+0x36c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43b8bc:	0005303a 	rdctl	r2,status
  43b8c0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43b8c4:	e0fff417 	ldw	r3,-48(fp)
  43b8c8:	00bfff84 	movi	r2,-2
  43b8cc:	1884703a 	and	r2,r3,r2
  43b8d0:	1001703a 	wrctl	status,r2
  
  return context;
  43b8d4:	e0bff417 	ldw	r2,-48(fp)
    }
    OS_ENTER_CRITICAL();
  43b8d8:	e0bff215 	stw	r2,-56(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  43b8dc:	e0bffd17 	ldw	r2,-12(fp)
  43b8e0:	10800283 	ldbu	r2,10(r2)
  43b8e4:	10803fcc 	andi	r2,r2,255
  43b8e8:	10000326 	beq	r2,zero,43b8f8 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  43b8ec:	00800044 	movi	r2,1
  43b8f0:	e0bff005 	stb	r2,-64(fp)
  43b8f4:	00000106 	br	43b8fc <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  43b8f8:	e03ff005 	stb	zero,-64(fp)
    }
    switch (opt) {
  43b8fc:	e0bffe03 	ldbu	r2,-8(fp)
  43b900:	10000326 	beq	r2,zero,43b910 <OSQDel+0xf4>
  43b904:	10800060 	cmpeqi	r2,r2,1
  43b908:	10004f1e 	bne	r2,zero,43ba48 <OSQDel+0x22c>
  43b90c:	00008806 	br	43bb30 <OSQDel+0x314>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  43b910:	e0bff003 	ldbu	r2,-64(fp)
  43b914:	1000311e 	bne	r2,zero,43b9dc <OSQDel+0x1c0>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  43b918:	e0bffd17 	ldw	r2,-12(fp)
  43b91c:	00c00fc4 	movi	r3,63
  43b920:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  43b924:	e0bffd17 	ldw	r2,-12(fp)
  43b928:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  43b92c:	e0bffd17 	ldw	r2,-12(fp)
  43b930:	10800117 	ldw	r2,4(r2)
  43b934:	e0bff315 	stw	r2,-52(fp)
                 pq->OSQPtr             = OSQFreeList;
  43b938:	00801134 	movhi	r2,68
  43b93c:	109e0a04 	addi	r2,r2,30760
  43b940:	10c00017 	ldw	r3,0(r2)
  43b944:	e0bff317 	ldw	r2,-52(fp)
  43b948:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  43b94c:	00801134 	movhi	r2,68
  43b950:	109e0a04 	addi	r2,r2,30760
  43b954:	e0fff317 	ldw	r3,-52(fp)
  43b958:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  43b95c:	e0bffd17 	ldw	r2,-12(fp)
  43b960:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  43b964:	00801134 	movhi	r2,68
  43b968:	109e0c04 	addi	r2,r2,30768
  43b96c:	10c00017 	ldw	r3,0(r2)
  43b970:	e0bffd17 	ldw	r2,-12(fp)
  43b974:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  43b978:	e0bffd17 	ldw	r2,-12(fp)
  43b97c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  43b980:	00801134 	movhi	r2,68
  43b984:	109e0c04 	addi	r2,r2,30768
  43b988:	e0fffd17 	ldw	r3,-12(fp)
  43b98c:	10c00015 	stw	r3,0(r2)
  43b990:	e0bff217 	ldw	r2,-56(fp)
  43b994:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43b998:	0005303a 	rdctl	r2,status
  43b99c:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43b9a0:	e0fff617 	ldw	r3,-40(fp)
  43b9a4:	00bfff84 	movi	r2,-2
  43b9a8:	1884703a 	and	r2,r3,r2
  43b9ac:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43b9b0:	e0bff517 	ldw	r2,-44(fp)
  43b9b4:	1080004c 	andi	r2,r2,1
  43b9b8:	e0fff617 	ldw	r3,-40(fp)
  43b9bc:	1884b03a 	or	r2,r3,r2
  43b9c0:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  43b9c4:	e0bff617 	ldw	r2,-40(fp)
  43b9c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  43b9cc:	e0bfff17 	ldw	r2,-4(fp)
  43b9d0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  43b9d4:	e03ff115 	stw	zero,-60(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  43b9d8:	00006a06 	br	43bb84 <OSQDel+0x368>
  43b9dc:	e0bff217 	ldw	r2,-56(fp)
  43b9e0:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43b9e4:	0005303a 	rdctl	r2,status
  43b9e8:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43b9ec:	e0fff817 	ldw	r3,-32(fp)
  43b9f0:	00bfff84 	movi	r2,-2
  43b9f4:	1884703a 	and	r2,r3,r2
  43b9f8:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43b9fc:	e0bff717 	ldw	r2,-36(fp)
  43ba00:	1080004c 	andi	r2,r2,1
  43ba04:	e0fff817 	ldw	r3,-32(fp)
  43ba08:	1884b03a 	or	r2,r3,r2
  43ba0c:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  43ba10:	e0bff817 	ldw	r2,-32(fp)
  43ba14:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  43ba18:	e0bfff17 	ldw	r2,-4(fp)
  43ba1c:	00c01244 	movi	r3,73
  43ba20:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  43ba24:	e0bffd17 	ldw	r2,-12(fp)
  43ba28:	e0bff115 	stw	r2,-60(fp)
             }
             break;
  43ba2c:	00005506 	br	43bb84 <OSQDel+0x368>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  43ba30:	e13ffd17 	ldw	r4,-12(fp)
  43ba34:	000b883a 	mov	r5,zero
  43ba38:	01800104 	movi	r6,4
  43ba3c:	000f883a 	mov	r7,zero
  43ba40:	043798c0 	call	43798c <OS_EventTaskRdy>
  43ba44:	00000106 	br	43ba4c <OSQDel+0x230>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  43ba48:	0001883a 	nop
  43ba4c:	e0bffd17 	ldw	r2,-12(fp)
  43ba50:	10800283 	ldbu	r2,10(r2)
  43ba54:	10803fcc 	andi	r2,r2,255
  43ba58:	103ff51e 	bne	r2,zero,43ba30 <OSQDel+0x214>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  43ba5c:	e0bffd17 	ldw	r2,-12(fp)
  43ba60:	00c00fc4 	movi	r3,63
  43ba64:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  43ba68:	e0bffd17 	ldw	r2,-12(fp)
  43ba6c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  43ba70:	e0bffd17 	ldw	r2,-12(fp)
  43ba74:	10800117 	ldw	r2,4(r2)
  43ba78:	e0bff315 	stw	r2,-52(fp)
             pq->OSQPtr             = OSQFreeList;
  43ba7c:	00801134 	movhi	r2,68
  43ba80:	109e0a04 	addi	r2,r2,30760
  43ba84:	10c00017 	ldw	r3,0(r2)
  43ba88:	e0bff317 	ldw	r2,-52(fp)
  43ba8c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  43ba90:	00801134 	movhi	r2,68
  43ba94:	109e0a04 	addi	r2,r2,30760
  43ba98:	e0fff317 	ldw	r3,-52(fp)
  43ba9c:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  43baa0:	e0bffd17 	ldw	r2,-12(fp)
  43baa4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  43baa8:	00801134 	movhi	r2,68
  43baac:	109e0c04 	addi	r2,r2,30768
  43bab0:	10c00017 	ldw	r3,0(r2)
  43bab4:	e0bffd17 	ldw	r2,-12(fp)
  43bab8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  43babc:	e0bffd17 	ldw	r2,-12(fp)
  43bac0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  43bac4:	00801134 	movhi	r2,68
  43bac8:	109e0c04 	addi	r2,r2,30768
  43bacc:	e0fffd17 	ldw	r3,-12(fp)
  43bad0:	10c00015 	stw	r3,0(r2)
  43bad4:	e0bff217 	ldw	r2,-56(fp)
  43bad8:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43badc:	0005303a 	rdctl	r2,status
  43bae0:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43bae4:	e0fffa17 	ldw	r3,-24(fp)
  43bae8:	00bfff84 	movi	r2,-2
  43baec:	1884703a 	and	r2,r3,r2
  43baf0:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43baf4:	e0bff917 	ldw	r2,-28(fp)
  43baf8:	1080004c 	andi	r2,r2,1
  43bafc:	e0fffa17 	ldw	r3,-24(fp)
  43bb00:	1884b03a 	or	r2,r3,r2
  43bb04:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  43bb08:	e0bffa17 	ldw	r2,-24(fp)
  43bb0c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  43bb10:	e0bff003 	ldbu	r2,-64(fp)
  43bb14:	10800058 	cmpnei	r2,r2,1
  43bb18:	1000011e 	bne	r2,zero,43bb20 <OSQDel+0x304>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  43bb1c:	04383a80 	call	4383a8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  43bb20:	e0bfff17 	ldw	r2,-4(fp)
  43bb24:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  43bb28:	e03ff115 	stw	zero,-60(fp)
             break;
  43bb2c:	00001506 	br	43bb84 <OSQDel+0x368>
  43bb30:	e0bff217 	ldw	r2,-56(fp)
  43bb34:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43bb38:	0005303a 	rdctl	r2,status
  43bb3c:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43bb40:	e0fffc17 	ldw	r3,-16(fp)
  43bb44:	00bfff84 	movi	r2,-2
  43bb48:	1884703a 	and	r2,r3,r2
  43bb4c:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43bb50:	e0bffb17 	ldw	r2,-20(fp)
  43bb54:	1080004c 	andi	r2,r2,1
  43bb58:	e0fffc17 	ldw	r3,-16(fp)
  43bb5c:	1884b03a 	or	r2,r3,r2
  43bb60:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43bb64:	e0bffc17 	ldw	r2,-16(fp)
  43bb68:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  43bb6c:	e0bfff17 	ldw	r2,-4(fp)
  43bb70:	00c001c4 	movi	r3,7
  43bb74:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  43bb78:	e0bffd17 	ldw	r2,-12(fp)
  43bb7c:	e0bff115 	stw	r2,-60(fp)
             break;
  43bb80:	0001883a 	nop
    }
    return (pevent_return);
  43bb84:	e0bff117 	ldw	r2,-60(fp)
}
  43bb88:	e037883a 	mov	sp,fp
  43bb8c:	dfc00117 	ldw	ra,4(sp)
  43bb90:	df000017 	ldw	fp,0(sp)
  43bb94:	dec00204 	addi	sp,sp,8
  43bb98:	f800283a 	ret

0043bb9c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  43bb9c:	defff904 	addi	sp,sp,-28
  43bba0:	df000615 	stw	fp,24(sp)
  43bba4:	df000604 	addi	fp,sp,24
  43bba8:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  43bbac:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  43bbb0:	e0bfff17 	ldw	r2,-4(fp)
  43bbb4:	1000021e 	bne	r2,zero,43bbc0 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
  43bbb8:	00800104 	movi	r2,4
  43bbbc:	00002c06 	br	43bc70 <OSQFlush+0xd4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  43bbc0:	e0bfff17 	ldw	r2,-4(fp)
  43bbc4:	10800003 	ldbu	r2,0(r2)
  43bbc8:	10803fcc 	andi	r2,r2,255
  43bbcc:	108000a0 	cmpeqi	r2,r2,2
  43bbd0:	1000021e 	bne	r2,zero,43bbdc <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
  43bbd4:	00800044 	movi	r2,1
  43bbd8:	00002506 	br	43bc70 <OSQFlush+0xd4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43bbdc:	0005303a 	rdctl	r2,status
  43bbe0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43bbe4:	e0fffc17 	ldw	r3,-16(fp)
  43bbe8:	00bfff84 	movi	r2,-2
  43bbec:	1884703a 	and	r2,r3,r2
  43bbf0:	1001703a 	wrctl	status,r2
  
  return context;
  43bbf4:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  43bbf8:	e0bffa15 	stw	r2,-24(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  43bbfc:	e0bfff17 	ldw	r2,-4(fp)
  43bc00:	10800117 	ldw	r2,4(r2)
  43bc04:	e0bffb15 	stw	r2,-20(fp)
    pq->OSQIn      = pq->OSQStart;
  43bc08:	e0bffb17 	ldw	r2,-20(fp)
  43bc0c:	10c00117 	ldw	r3,4(r2)
  43bc10:	e0bffb17 	ldw	r2,-20(fp)
  43bc14:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  43bc18:	e0bffb17 	ldw	r2,-20(fp)
  43bc1c:	10c00117 	ldw	r3,4(r2)
  43bc20:	e0bffb17 	ldw	r2,-20(fp)
  43bc24:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  43bc28:	e0bffb17 	ldw	r2,-20(fp)
  43bc2c:	1000058d 	sth	zero,22(r2)
  43bc30:	e0bffa17 	ldw	r2,-24(fp)
  43bc34:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43bc38:	0005303a 	rdctl	r2,status
  43bc3c:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43bc40:	e0fffe17 	ldw	r3,-8(fp)
  43bc44:	00bfff84 	movi	r2,-2
  43bc48:	1884703a 	and	r2,r3,r2
  43bc4c:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43bc50:	e0bffd17 	ldw	r2,-12(fp)
  43bc54:	1080004c 	andi	r2,r2,1
  43bc58:	e0fffe17 	ldw	r3,-8(fp)
  43bc5c:	1884b03a 	or	r2,r3,r2
  43bc60:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  43bc64:	e0bffe17 	ldw	r2,-8(fp)
  43bc68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  43bc6c:	0005883a 	mov	r2,zero
}
  43bc70:	e037883a 	mov	sp,fp
  43bc74:	df000017 	ldw	fp,0(sp)
  43bc78:	dec00104 	addi	sp,sp,4
  43bc7c:	f800283a 	ret

0043bc80 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  43bc80:	defff004 	addi	sp,sp,-64
  43bc84:	dfc00f15 	stw	ra,60(sp)
  43bc88:	df000e15 	stw	fp,56(sp)
  43bc8c:	df000e04 	addi	fp,sp,56
  43bc90:	e13ffd15 	stw	r4,-12(fp)
  43bc94:	2805883a 	mov	r2,r5
  43bc98:	e1bfff15 	stw	r6,-4(fp)
  43bc9c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  43bca0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  43bca4:	e0bfff17 	ldw	r2,-4(fp)
  43bca8:	1000021e 	bne	r2,zero,43bcb4 <OSQPend+0x34>
        return ((void *)0);
  43bcac:	0005883a 	mov	r2,zero
  43bcb0:	0000ce06 	br	43bfec <OSQPend+0x36c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  43bcb4:	e0bffd17 	ldw	r2,-12(fp)
  43bcb8:	1000051e 	bne	r2,zero,43bcd0 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  43bcbc:	e0bfff17 	ldw	r2,-4(fp)
  43bcc0:	00c00104 	movi	r3,4
  43bcc4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  43bcc8:	0005883a 	mov	r2,zero
  43bccc:	0000c706 	br	43bfec <OSQPend+0x36c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  43bcd0:	e0bffd17 	ldw	r2,-12(fp)
  43bcd4:	10800003 	ldbu	r2,0(r2)
  43bcd8:	10803fcc 	andi	r2,r2,255
  43bcdc:	108000a0 	cmpeqi	r2,r2,2
  43bce0:	1000051e 	bne	r2,zero,43bcf8 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  43bce4:	e0bfff17 	ldw	r2,-4(fp)
  43bce8:	00c00044 	movi	r3,1
  43bcec:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  43bcf0:	0005883a 	mov	r2,zero
  43bcf4:	0000bd06 	br	43bfec <OSQPend+0x36c>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  43bcf8:	00801134 	movhi	r2,68
  43bcfc:	109e0d04 	addi	r2,r2,30772
  43bd00:	10800003 	ldbu	r2,0(r2)
  43bd04:	10803fcc 	andi	r2,r2,255
  43bd08:	10000526 	beq	r2,zero,43bd20 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  43bd0c:	e0bfff17 	ldw	r2,-4(fp)
  43bd10:	00c00084 	movi	r3,2
  43bd14:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  43bd18:	0005883a 	mov	r2,zero
  43bd1c:	0000b306 	br	43bfec <OSQPend+0x36c>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  43bd20:	00801134 	movhi	r2,68
  43bd24:	109dff04 	addi	r2,r2,30716
  43bd28:	10800003 	ldbu	r2,0(r2)
  43bd2c:	10803fcc 	andi	r2,r2,255
  43bd30:	10000526 	beq	r2,zero,43bd48 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  43bd34:	e0bfff17 	ldw	r2,-4(fp)
  43bd38:	00c00344 	movi	r3,13
  43bd3c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  43bd40:	0005883a 	mov	r2,zero
  43bd44:	0000a906 	br	43bfec <OSQPend+0x36c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43bd48:	0005303a 	rdctl	r2,status
  43bd4c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43bd50:	e0fff517 	ldw	r3,-44(fp)
  43bd54:	00bfff84 	movi	r2,-2
  43bd58:	1884703a 	and	r2,r3,r2
  43bd5c:	1001703a 	wrctl	status,r2
  
  return context;
  43bd60:	e0bff517 	ldw	r2,-44(fp)
    }
    OS_ENTER_CRITICAL();
  43bd64:	e0bff315 	stw	r2,-52(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  43bd68:	e0bffd17 	ldw	r2,-12(fp)
  43bd6c:	10800117 	ldw	r2,4(r2)
  43bd70:	e0bff415 	stw	r2,-48(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  43bd74:	e0bff417 	ldw	r2,-48(fp)
  43bd78:	1080058b 	ldhu	r2,22(r2)
  43bd7c:	10bfffcc 	andi	r2,r2,65535
  43bd80:	10002926 	beq	r2,zero,43be28 <OSQPend+0x1a8>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  43bd84:	e0bff417 	ldw	r2,-48(fp)
  43bd88:	10800417 	ldw	r2,16(r2)
  43bd8c:	10c00017 	ldw	r3,0(r2)
  43bd90:	e0fff215 	stw	r3,-56(fp)
  43bd94:	10c00104 	addi	r3,r2,4
  43bd98:	e0bff417 	ldw	r2,-48(fp)
  43bd9c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  43bda0:	e0bff417 	ldw	r2,-48(fp)
  43bda4:	1080058b 	ldhu	r2,22(r2)
  43bda8:	10bfffc4 	addi	r2,r2,-1
  43bdac:	1007883a 	mov	r3,r2
  43bdb0:	e0bff417 	ldw	r2,-48(fp)
  43bdb4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  43bdb8:	e0bff417 	ldw	r2,-48(fp)
  43bdbc:	10c00417 	ldw	r3,16(r2)
  43bdc0:	e0bff417 	ldw	r2,-48(fp)
  43bdc4:	10800217 	ldw	r2,8(r2)
  43bdc8:	1880041e 	bne	r3,r2,43bddc <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
  43bdcc:	e0bff417 	ldw	r2,-48(fp)
  43bdd0:	10c00117 	ldw	r3,4(r2)
  43bdd4:	e0bff417 	ldw	r2,-48(fp)
  43bdd8:	10c00415 	stw	r3,16(r2)
  43bddc:	e0bff317 	ldw	r2,-52(fp)
  43bde0:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43bde4:	0005303a 	rdctl	r2,status
  43bde8:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43bdec:	e0fff717 	ldw	r3,-36(fp)
  43bdf0:	00bfff84 	movi	r2,-2
  43bdf4:	1884703a 	and	r2,r3,r2
  43bdf8:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43bdfc:	e0bff617 	ldw	r2,-40(fp)
  43be00:	1080004c 	andi	r2,r2,1
  43be04:	e0fff717 	ldw	r3,-36(fp)
  43be08:	1884b03a 	or	r2,r3,r2
  43be0c:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  43be10:	e0bff717 	ldw	r2,-36(fp)
  43be14:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  43be18:	e0bfff17 	ldw	r2,-4(fp)
  43be1c:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  43be20:	e0bff217 	ldw	r2,-56(fp)
  43be24:	00007106 	br	43bfec <OSQPend+0x36c>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  43be28:	00801134 	movhi	r2,68
  43be2c:	109e0e04 	addi	r2,r2,30776
  43be30:	10800017 	ldw	r2,0(r2)
  43be34:	00c01134 	movhi	r3,68
  43be38:	18de0e04 	addi	r3,r3,30776
  43be3c:	18c00017 	ldw	r3,0(r3)
  43be40:	18c00c03 	ldbu	r3,48(r3)
  43be44:	18c00114 	ori	r3,r3,4
  43be48:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  43be4c:	00801134 	movhi	r2,68
  43be50:	109e0e04 	addi	r2,r2,30776
  43be54:	10800017 	ldw	r2,0(r2)
  43be58:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  43be5c:	00801134 	movhi	r2,68
  43be60:	109e0e04 	addi	r2,r2,30776
  43be64:	10800017 	ldw	r2,0(r2)
  43be68:	e0fffe0b 	ldhu	r3,-8(fp)
  43be6c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  43be70:	e13ffd17 	ldw	r4,-12(fp)
  43be74:	0437b240 	call	437b24 <OS_EventTaskWait>
  43be78:	e0bff317 	ldw	r2,-52(fp)
  43be7c:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43be80:	0005303a 	rdctl	r2,status
  43be84:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43be88:	e0fff917 	ldw	r3,-28(fp)
  43be8c:	00bfff84 	movi	r2,-2
  43be90:	1884703a 	and	r2,r3,r2
  43be94:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43be98:	e0bff817 	ldw	r2,-32(fp)
  43be9c:	1080004c 	andi	r2,r2,1
  43bea0:	e0fff917 	ldw	r3,-28(fp)
  43bea4:	1884b03a 	or	r2,r3,r2
  43bea8:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  43beac:	e0bff917 	ldw	r2,-28(fp)
  43beb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  43beb4:	04383a80 	call	4383a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43beb8:	0005303a 	rdctl	r2,status
  43bebc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43bec0:	e0fffa17 	ldw	r3,-24(fp)
  43bec4:	00bfff84 	movi	r2,-2
  43bec8:	1884703a 	and	r2,r3,r2
  43becc:	1001703a 	wrctl	status,r2
  
  return context;
  43bed0:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
  43bed4:	e0bff315 	stw	r2,-52(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  43bed8:	00801134 	movhi	r2,68
  43bedc:	109e0e04 	addi	r2,r2,30776
  43bee0:	10800017 	ldw	r2,0(r2)
  43bee4:	10800c43 	ldbu	r2,49(r2)
  43bee8:	10803fcc 	andi	r2,r2,255
  43beec:	10000326 	beq	r2,zero,43befc <OSQPend+0x27c>
  43bef0:	108000a0 	cmpeqi	r2,r2,2
  43bef4:	1000091e 	bne	r2,zero,43bf1c <OSQPend+0x29c>
  43bef8:	00000d06 	br	43bf30 <OSQPend+0x2b0>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  43befc:	00801134 	movhi	r2,68
  43bf00:	109e0e04 	addi	r2,r2,30776
  43bf04:	10800017 	ldw	r2,0(r2)
  43bf08:	10800917 	ldw	r2,36(r2)
  43bf0c:	e0bff215 	stw	r2,-56(fp)
            *perr =  OS_ERR_NONE;
  43bf10:	e0bfff17 	ldw	r2,-4(fp)
  43bf14:	10000005 	stb	zero,0(r2)
             break;
  43bf18:	00001006 	br	43bf5c <OSQPend+0x2dc>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  43bf1c:	e03ff215 	stw	zero,-56(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  43bf20:	e0bfff17 	ldw	r2,-4(fp)
  43bf24:	00c00384 	movi	r3,14
  43bf28:	10c00005 	stb	r3,0(r2)
             break;
  43bf2c:	00000b06 	br	43bf5c <OSQPend+0x2dc>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  43bf30:	00801134 	movhi	r2,68
  43bf34:	109e0e04 	addi	r2,r2,30776
  43bf38:	10800017 	ldw	r2,0(r2)
  43bf3c:	1009883a 	mov	r4,r2
  43bf40:	e17ffd17 	ldw	r5,-12(fp)
  43bf44:	0437d740 	call	437d74 <OS_EventTaskRemove>
             pmsg = (void *)0;
  43bf48:	e03ff215 	stw	zero,-56(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  43bf4c:	e0bfff17 	ldw	r2,-4(fp)
  43bf50:	00c00284 	movi	r3,10
  43bf54:	10c00005 	stb	r3,0(r2)
             break;
  43bf58:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  43bf5c:	00801134 	movhi	r2,68
  43bf60:	109e0e04 	addi	r2,r2,30776
  43bf64:	10800017 	ldw	r2,0(r2)
  43bf68:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  43bf6c:	00801134 	movhi	r2,68
  43bf70:	109e0e04 	addi	r2,r2,30776
  43bf74:	10800017 	ldw	r2,0(r2)
  43bf78:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  43bf7c:	00801134 	movhi	r2,68
  43bf80:	109e0e04 	addi	r2,r2,30776
  43bf84:	10800017 	ldw	r2,0(r2)
  43bf88:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  43bf8c:	00801134 	movhi	r2,68
  43bf90:	109e0e04 	addi	r2,r2,30776
  43bf94:	10800017 	ldw	r2,0(r2)
  43bf98:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  43bf9c:	00801134 	movhi	r2,68
  43bfa0:	109e0e04 	addi	r2,r2,30776
  43bfa4:	10800017 	ldw	r2,0(r2)
  43bfa8:	10000915 	stw	zero,36(r2)
  43bfac:	e0bff317 	ldw	r2,-52(fp)
  43bfb0:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43bfb4:	0005303a 	rdctl	r2,status
  43bfb8:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43bfbc:	e0fffc17 	ldw	r3,-16(fp)
  43bfc0:	00bfff84 	movi	r2,-2
  43bfc4:	1884703a 	and	r2,r3,r2
  43bfc8:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43bfcc:	e0bffb17 	ldw	r2,-20(fp)
  43bfd0:	1080004c 	andi	r2,r2,1
  43bfd4:	e0fffc17 	ldw	r3,-16(fp)
  43bfd8:	1884b03a 	or	r2,r3,r2
  43bfdc:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43bfe0:	e0bffc17 	ldw	r2,-16(fp)
  43bfe4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  43bfe8:	e0bff217 	ldw	r2,-56(fp)
}
  43bfec:	e037883a 	mov	sp,fp
  43bff0:	dfc00117 	ldw	ra,4(sp)
  43bff4:	df000017 	ldw	fp,0(sp)
  43bff8:	dec00204 	addi	sp,sp,8
  43bffc:	f800283a 	ret

0043c000 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  43c000:	defff404 	addi	sp,sp,-48
  43c004:	dfc00b15 	stw	ra,44(sp)
  43c008:	df000a15 	stw	fp,40(sp)
  43c00c:	df000a04 	addi	fp,sp,40
  43c010:	e13ffd15 	stw	r4,-12(fp)
  43c014:	2805883a 	mov	r2,r5
  43c018:	e1bfff15 	stw	r6,-4(fp)
  43c01c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  43c020:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  43c024:	e0bfff17 	ldw	r2,-4(fp)
  43c028:	1000021e 	bne	r2,zero,43c034 <OSQPendAbort+0x34>
        return (0);
  43c02c:	0005883a 	mov	r2,zero
  43c030:	00006106 	br	43c1b8 <OSQPendAbort+0x1b8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  43c034:	e0bffd17 	ldw	r2,-12(fp)
  43c038:	1000051e 	bne	r2,zero,43c050 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  43c03c:	e0bfff17 	ldw	r2,-4(fp)
  43c040:	00c00104 	movi	r3,4
  43c044:	10c00005 	stb	r3,0(r2)
        return (0);
  43c048:	0005883a 	mov	r2,zero
  43c04c:	00005a06 	br	43c1b8 <OSQPendAbort+0x1b8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  43c050:	e0bffd17 	ldw	r2,-12(fp)
  43c054:	10800003 	ldbu	r2,0(r2)
  43c058:	10803fcc 	andi	r2,r2,255
  43c05c:	108000a0 	cmpeqi	r2,r2,2
  43c060:	1000051e 	bne	r2,zero,43c078 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  43c064:	e0bfff17 	ldw	r2,-4(fp)
  43c068:	00c00044 	movi	r3,1
  43c06c:	10c00005 	stb	r3,0(r2)
        return (0);
  43c070:	0005883a 	mov	r2,zero
  43c074:	00005006 	br	43c1b8 <OSQPendAbort+0x1b8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43c078:	0005303a 	rdctl	r2,status
  43c07c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43c080:	e0fff817 	ldw	r3,-32(fp)
  43c084:	00bfff84 	movi	r2,-2
  43c088:	1884703a 	and	r2,r3,r2
  43c08c:	1001703a 	wrctl	status,r2
  
  return context;
  43c090:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  43c094:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  43c098:	e0bffd17 	ldw	r2,-12(fp)
  43c09c:	10800283 	ldbu	r2,10(r2)
  43c0a0:	10803fcc 	andi	r2,r2,255
  43c0a4:	10003226 	beq	r2,zero,43c170 <OSQPendAbort+0x170>
        nbr_tasks = 0;
  43c0a8:	e03ff605 	stb	zero,-40(fp)
        switch (opt) {
  43c0ac:	e0bffe03 	ldbu	r2,-8(fp)
  43c0b0:	10800060 	cmpeqi	r2,r2,1
  43c0b4:	10000a1e 	bne	r2,zero,43c0e0 <OSQPendAbort+0xe0>
  43c0b8:	00000f06 	br	43c0f8 <OSQPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  43c0bc:	e13ffd17 	ldw	r4,-12(fp)
  43c0c0:	000b883a 	mov	r5,zero
  43c0c4:	01800104 	movi	r6,4
  43c0c8:	01c00084 	movi	r7,2
  43c0cc:	043798c0 	call	43798c <OS_EventTaskRdy>
                     nbr_tasks++;
  43c0d0:	e0bff603 	ldbu	r2,-40(fp)
  43c0d4:	10800044 	addi	r2,r2,1
  43c0d8:	e0bff605 	stb	r2,-40(fp)
  43c0dc:	00000106 	br	43c0e4 <OSQPendAbort+0xe4>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  43c0e0:	0001883a 	nop
  43c0e4:	e0bffd17 	ldw	r2,-12(fp)
  43c0e8:	10800283 	ldbu	r2,10(r2)
  43c0ec:	10803fcc 	andi	r2,r2,255
  43c0f0:	103ff21e 	bne	r2,zero,43c0bc <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  43c0f4:	00000906 	br	43c11c <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  43c0f8:	e13ffd17 	ldw	r4,-12(fp)
  43c0fc:	000b883a 	mov	r5,zero
  43c100:	01800104 	movi	r6,4
  43c104:	01c00084 	movi	r7,2
  43c108:	043798c0 	call	43798c <OS_EventTaskRdy>
                 nbr_tasks++;
  43c10c:	e0bff603 	ldbu	r2,-40(fp)
  43c110:	10800044 	addi	r2,r2,1
  43c114:	e0bff605 	stb	r2,-40(fp)
                 break;
  43c118:	0001883a 	nop
  43c11c:	e0bff717 	ldw	r2,-36(fp)
  43c120:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43c124:	0005303a 	rdctl	r2,status
  43c128:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43c12c:	e0fffa17 	ldw	r3,-24(fp)
  43c130:	00bfff84 	movi	r2,-2
  43c134:	1884703a 	and	r2,r3,r2
  43c138:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43c13c:	e0bff917 	ldw	r2,-28(fp)
  43c140:	1080004c 	andi	r2,r2,1
  43c144:	e0fffa17 	ldw	r3,-24(fp)
  43c148:	1884b03a 	or	r2,r3,r2
  43c14c:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  43c150:	e0bffa17 	ldw	r2,-24(fp)
  43c154:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  43c158:	04383a80 	call	4383a8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  43c15c:	e0bfff17 	ldw	r2,-4(fp)
  43c160:	00c00384 	movi	r3,14
  43c164:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  43c168:	e0bff603 	ldbu	r2,-40(fp)
  43c16c:	00001206 	br	43c1b8 <OSQPendAbort+0x1b8>
  43c170:	e0bff717 	ldw	r2,-36(fp)
  43c174:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43c178:	0005303a 	rdctl	r2,status
  43c17c:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43c180:	e0fffc17 	ldw	r3,-16(fp)
  43c184:	00bfff84 	movi	r2,-2
  43c188:	1884703a 	and	r2,r3,r2
  43c18c:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43c190:	e0bffb17 	ldw	r2,-20(fp)
  43c194:	1080004c 	andi	r2,r2,1
  43c198:	e0fffc17 	ldw	r3,-16(fp)
  43c19c:	1884b03a 	or	r2,r3,r2
  43c1a0:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43c1a4:	e0bffc17 	ldw	r2,-16(fp)
  43c1a8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  43c1ac:	e0bfff17 	ldw	r2,-4(fp)
  43c1b0:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  43c1b4:	0005883a 	mov	r2,zero
}
  43c1b8:	e037883a 	mov	sp,fp
  43c1bc:	dfc00117 	ldw	ra,4(sp)
  43c1c0:	df000017 	ldw	fp,0(sp)
  43c1c4:	dec00204 	addi	sp,sp,8
  43c1c8:	f800283a 	ret

0043c1cc <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  43c1cc:	defff304 	addi	sp,sp,-52
  43c1d0:	dfc00c15 	stw	ra,48(sp)
  43c1d4:	df000b15 	stw	fp,44(sp)
  43c1d8:	df000b04 	addi	fp,sp,44
  43c1dc:	e13ffe15 	stw	r4,-8(fp)
  43c1e0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  43c1e4:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  43c1e8:	e0bffe17 	ldw	r2,-8(fp)
  43c1ec:	1000021e 	bne	r2,zero,43c1f8 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
  43c1f0:	00800104 	movi	r2,4
  43c1f4:	00006b06 	br	43c3a4 <OSQPost+0x1d8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  43c1f8:	e0bffe17 	ldw	r2,-8(fp)
  43c1fc:	10800003 	ldbu	r2,0(r2)
  43c200:	10803fcc 	andi	r2,r2,255
  43c204:	108000a0 	cmpeqi	r2,r2,2
  43c208:	1000021e 	bne	r2,zero,43c214 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
  43c20c:	00800044 	movi	r2,1
  43c210:	00006406 	br	43c3a4 <OSQPost+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43c214:	0005303a 	rdctl	r2,status
  43c218:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43c21c:	e0fff717 	ldw	r3,-36(fp)
  43c220:	00bfff84 	movi	r2,-2
  43c224:	1884703a 	and	r2,r3,r2
  43c228:	1001703a 	wrctl	status,r2
  
  return context;
  43c22c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  43c230:	e0bff515 	stw	r2,-44(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  43c234:	e0bffe17 	ldw	r2,-8(fp)
  43c238:	10800283 	ldbu	r2,10(r2)
  43c23c:	10803fcc 	andi	r2,r2,255
  43c240:	10001726 	beq	r2,zero,43c2a0 <OSQPost+0xd4>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  43c244:	e13ffe17 	ldw	r4,-8(fp)
  43c248:	e17fff17 	ldw	r5,-4(fp)
  43c24c:	01800104 	movi	r6,4
  43c250:	000f883a 	mov	r7,zero
  43c254:	043798c0 	call	43798c <OS_EventTaskRdy>
  43c258:	e0bff517 	ldw	r2,-44(fp)
  43c25c:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43c260:	0005303a 	rdctl	r2,status
  43c264:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43c268:	e0fff917 	ldw	r3,-28(fp)
  43c26c:	00bfff84 	movi	r2,-2
  43c270:	1884703a 	and	r2,r3,r2
  43c274:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43c278:	e0bff817 	ldw	r2,-32(fp)
  43c27c:	1080004c 	andi	r2,r2,1
  43c280:	e0fff917 	ldw	r3,-28(fp)
  43c284:	1884b03a 	or	r2,r3,r2
  43c288:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  43c28c:	e0bff917 	ldw	r2,-28(fp)
  43c290:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  43c294:	04383a80 	call	4383a8 <OS_Sched>
        return (OS_ERR_NONE);
  43c298:	0005883a 	mov	r2,zero
  43c29c:	00004106 	br	43c3a4 <OSQPost+0x1d8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  43c2a0:	e0bffe17 	ldw	r2,-8(fp)
  43c2a4:	10800117 	ldw	r2,4(r2)
  43c2a8:	e0bff615 	stw	r2,-40(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  43c2ac:	e0bff617 	ldw	r2,-40(fp)
  43c2b0:	10c0058b 	ldhu	r3,22(r2)
  43c2b4:	e0bff617 	ldw	r2,-40(fp)
  43c2b8:	1080050b 	ldhu	r2,20(r2)
  43c2bc:	18ffffcc 	andi	r3,r3,65535
  43c2c0:	10bfffcc 	andi	r2,r2,65535
  43c2c4:	18801136 	bltu	r3,r2,43c30c <OSQPost+0x140>
  43c2c8:	e0bff517 	ldw	r2,-44(fp)
  43c2cc:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43c2d0:	0005303a 	rdctl	r2,status
  43c2d4:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43c2d8:	e0fffb17 	ldw	r3,-20(fp)
  43c2dc:	00bfff84 	movi	r2,-2
  43c2e0:	1884703a 	and	r2,r3,r2
  43c2e4:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43c2e8:	e0bffa17 	ldw	r2,-24(fp)
  43c2ec:	1080004c 	andi	r2,r2,1
  43c2f0:	e0fffb17 	ldw	r3,-20(fp)
  43c2f4:	1884b03a 	or	r2,r3,r2
  43c2f8:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  43c2fc:	e0bffb17 	ldw	r2,-20(fp)
  43c300:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  43c304:	00800784 	movi	r2,30
  43c308:	00002606 	br	43c3a4 <OSQPost+0x1d8>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  43c30c:	e0bff617 	ldw	r2,-40(fp)
  43c310:	10800317 	ldw	r2,12(r2)
  43c314:	e0ffff17 	ldw	r3,-4(fp)
  43c318:	10c00015 	stw	r3,0(r2)
  43c31c:	10c00104 	addi	r3,r2,4
  43c320:	e0bff617 	ldw	r2,-40(fp)
  43c324:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  43c328:	e0bff617 	ldw	r2,-40(fp)
  43c32c:	1080058b 	ldhu	r2,22(r2)
  43c330:	10800044 	addi	r2,r2,1
  43c334:	1007883a 	mov	r3,r2
  43c338:	e0bff617 	ldw	r2,-40(fp)
  43c33c:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  43c340:	e0bff617 	ldw	r2,-40(fp)
  43c344:	10c00317 	ldw	r3,12(r2)
  43c348:	e0bff617 	ldw	r2,-40(fp)
  43c34c:	10800217 	ldw	r2,8(r2)
  43c350:	1880041e 	bne	r3,r2,43c364 <OSQPost+0x198>
        pq->OSQIn = pq->OSQStart;
  43c354:	e0bff617 	ldw	r2,-40(fp)
  43c358:	10c00117 	ldw	r3,4(r2)
  43c35c:	e0bff617 	ldw	r2,-40(fp)
  43c360:	10c00315 	stw	r3,12(r2)
  43c364:	e0bff517 	ldw	r2,-44(fp)
  43c368:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43c36c:	0005303a 	rdctl	r2,status
  43c370:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43c374:	e0fffd17 	ldw	r3,-12(fp)
  43c378:	00bfff84 	movi	r2,-2
  43c37c:	1884703a 	and	r2,r3,r2
  43c380:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43c384:	e0bffc17 	ldw	r2,-16(fp)
  43c388:	1080004c 	andi	r2,r2,1
  43c38c:	e0fffd17 	ldw	r3,-12(fp)
  43c390:	1884b03a 	or	r2,r3,r2
  43c394:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43c398:	e0bffd17 	ldw	r2,-12(fp)
  43c39c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  43c3a0:	0005883a 	mov	r2,zero
}
  43c3a4:	e037883a 	mov	sp,fp
  43c3a8:	dfc00117 	ldw	ra,4(sp)
  43c3ac:	df000017 	ldw	fp,0(sp)
  43c3b0:	dec00204 	addi	sp,sp,8
  43c3b4:	f800283a 	ret

0043c3b8 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  43c3b8:	defff304 	addi	sp,sp,-52
  43c3bc:	dfc00c15 	stw	ra,48(sp)
  43c3c0:	df000b15 	stw	fp,44(sp)
  43c3c4:	df000b04 	addi	fp,sp,44
  43c3c8:	e13ffe15 	stw	r4,-8(fp)
  43c3cc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  43c3d0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  43c3d4:	e0bffe17 	ldw	r2,-8(fp)
  43c3d8:	1000021e 	bne	r2,zero,43c3e4 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
  43c3dc:	00800104 	movi	r2,4
  43c3e0:	00006d06 	br	43c598 <OSQPostFront+0x1e0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  43c3e4:	e0bffe17 	ldw	r2,-8(fp)
  43c3e8:	10800003 	ldbu	r2,0(r2)
  43c3ec:	10803fcc 	andi	r2,r2,255
  43c3f0:	108000a0 	cmpeqi	r2,r2,2
  43c3f4:	1000021e 	bne	r2,zero,43c400 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
  43c3f8:	00800044 	movi	r2,1
  43c3fc:	00006606 	br	43c598 <OSQPostFront+0x1e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43c400:	0005303a 	rdctl	r2,status
  43c404:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43c408:	e0fff717 	ldw	r3,-36(fp)
  43c40c:	00bfff84 	movi	r2,-2
  43c410:	1884703a 	and	r2,r3,r2
  43c414:	1001703a 	wrctl	status,r2
  
  return context;
  43c418:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  43c41c:	e0bff515 	stw	r2,-44(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  43c420:	e0bffe17 	ldw	r2,-8(fp)
  43c424:	10800283 	ldbu	r2,10(r2)
  43c428:	10803fcc 	andi	r2,r2,255
  43c42c:	10001726 	beq	r2,zero,43c48c <OSQPostFront+0xd4>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  43c430:	e13ffe17 	ldw	r4,-8(fp)
  43c434:	e17fff17 	ldw	r5,-4(fp)
  43c438:	01800104 	movi	r6,4
  43c43c:	000f883a 	mov	r7,zero
  43c440:	043798c0 	call	43798c <OS_EventTaskRdy>
  43c444:	e0bff517 	ldw	r2,-44(fp)
  43c448:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43c44c:	0005303a 	rdctl	r2,status
  43c450:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43c454:	e0fff917 	ldw	r3,-28(fp)
  43c458:	00bfff84 	movi	r2,-2
  43c45c:	1884703a 	and	r2,r3,r2
  43c460:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43c464:	e0bff817 	ldw	r2,-32(fp)
  43c468:	1080004c 	andi	r2,r2,1
  43c46c:	e0fff917 	ldw	r3,-28(fp)
  43c470:	1884b03a 	or	r2,r3,r2
  43c474:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  43c478:	e0bff917 	ldw	r2,-28(fp)
  43c47c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  43c480:	04383a80 	call	4383a8 <OS_Sched>
        return (OS_ERR_NONE);
  43c484:	0005883a 	mov	r2,zero
  43c488:	00004306 	br	43c598 <OSQPostFront+0x1e0>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  43c48c:	e0bffe17 	ldw	r2,-8(fp)
  43c490:	10800117 	ldw	r2,4(r2)
  43c494:	e0bff615 	stw	r2,-40(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  43c498:	e0bff617 	ldw	r2,-40(fp)
  43c49c:	10c0058b 	ldhu	r3,22(r2)
  43c4a0:	e0bff617 	ldw	r2,-40(fp)
  43c4a4:	1080050b 	ldhu	r2,20(r2)
  43c4a8:	18ffffcc 	andi	r3,r3,65535
  43c4ac:	10bfffcc 	andi	r2,r2,65535
  43c4b0:	18801136 	bltu	r3,r2,43c4f8 <OSQPostFront+0x140>
  43c4b4:	e0bff517 	ldw	r2,-44(fp)
  43c4b8:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43c4bc:	0005303a 	rdctl	r2,status
  43c4c0:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43c4c4:	e0fffb17 	ldw	r3,-20(fp)
  43c4c8:	00bfff84 	movi	r2,-2
  43c4cc:	1884703a 	and	r2,r3,r2
  43c4d0:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43c4d4:	e0bffa17 	ldw	r2,-24(fp)
  43c4d8:	1080004c 	andi	r2,r2,1
  43c4dc:	e0fffb17 	ldw	r3,-20(fp)
  43c4e0:	1884b03a 	or	r2,r3,r2
  43c4e4:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  43c4e8:	e0bffb17 	ldw	r2,-20(fp)
  43c4ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  43c4f0:	00800784 	movi	r2,30
  43c4f4:	00002806 	br	43c598 <OSQPostFront+0x1e0>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  43c4f8:	e0bff617 	ldw	r2,-40(fp)
  43c4fc:	10c00417 	ldw	r3,16(r2)
  43c500:	e0bff617 	ldw	r2,-40(fp)
  43c504:	10800117 	ldw	r2,4(r2)
  43c508:	1880041e 	bne	r3,r2,43c51c <OSQPostFront+0x164>
        pq->OSQOut = pq->OSQEnd;
  43c50c:	e0bff617 	ldw	r2,-40(fp)
  43c510:	10c00217 	ldw	r3,8(r2)
  43c514:	e0bff617 	ldw	r2,-40(fp)
  43c518:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  43c51c:	e0bff617 	ldw	r2,-40(fp)
  43c520:	10800417 	ldw	r2,16(r2)
  43c524:	10ffff04 	addi	r3,r2,-4
  43c528:	e0bff617 	ldw	r2,-40(fp)
  43c52c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  43c530:	e0bff617 	ldw	r2,-40(fp)
  43c534:	10800417 	ldw	r2,16(r2)
  43c538:	e0ffff17 	ldw	r3,-4(fp)
  43c53c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  43c540:	e0bff617 	ldw	r2,-40(fp)
  43c544:	1080058b 	ldhu	r2,22(r2)
  43c548:	10800044 	addi	r2,r2,1
  43c54c:	1007883a 	mov	r3,r2
  43c550:	e0bff617 	ldw	r2,-40(fp)
  43c554:	10c0058d 	sth	r3,22(r2)
  43c558:	e0bff517 	ldw	r2,-44(fp)
  43c55c:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43c560:	0005303a 	rdctl	r2,status
  43c564:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43c568:	e0fffd17 	ldw	r3,-12(fp)
  43c56c:	00bfff84 	movi	r2,-2
  43c570:	1884703a 	and	r2,r3,r2
  43c574:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43c578:	e0bffc17 	ldw	r2,-16(fp)
  43c57c:	1080004c 	andi	r2,r2,1
  43c580:	e0fffd17 	ldw	r3,-12(fp)
  43c584:	1884b03a 	or	r2,r3,r2
  43c588:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43c58c:	e0bffd17 	ldw	r2,-12(fp)
  43c590:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  43c594:	0005883a 	mov	r2,zero
}
  43c598:	e037883a 	mov	sp,fp
  43c59c:	dfc00117 	ldw	ra,4(sp)
  43c5a0:	df000017 	ldw	fp,0(sp)
  43c5a4:	dec00204 	addi	sp,sp,8
  43c5a8:	f800283a 	ret

0043c5ac <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  43c5ac:	defff204 	addi	sp,sp,-56
  43c5b0:	dfc00d15 	stw	ra,52(sp)
  43c5b4:	df000c15 	stw	fp,48(sp)
  43c5b8:	df000c04 	addi	fp,sp,48
  43c5bc:	e13ffd15 	stw	r4,-12(fp)
  43c5c0:	e17ffe15 	stw	r5,-8(fp)
  43c5c4:	3005883a 	mov	r2,r6
  43c5c8:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  43c5cc:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  43c5d0:	e0bffd17 	ldw	r2,-12(fp)
  43c5d4:	1000021e 	bne	r2,zero,43c5e0 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
  43c5d8:	00800104 	movi	r2,4
  43c5dc:	00009206 	br	43c828 <OSQPostOpt+0x27c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  43c5e0:	e0bffd17 	ldw	r2,-12(fp)
  43c5e4:	10800003 	ldbu	r2,0(r2)
  43c5e8:	10803fcc 	andi	r2,r2,255
  43c5ec:	108000a0 	cmpeqi	r2,r2,2
  43c5f0:	1000021e 	bne	r2,zero,43c5fc <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
  43c5f4:	00800044 	movi	r2,1
  43c5f8:	00008b06 	br	43c828 <OSQPostOpt+0x27c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43c5fc:	0005303a 	rdctl	r2,status
  43c600:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43c604:	e0fff617 	ldw	r3,-40(fp)
  43c608:	00bfff84 	movi	r2,-2
  43c60c:	1884703a 	and	r2,r3,r2
  43c610:	1001703a 	wrctl	status,r2
  
  return context;
  43c614:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  43c618:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  43c61c:	e0bffd17 	ldw	r2,-12(fp)
  43c620:	10800283 	ldbu	r2,10(r2)
  43c624:	10803fcc 	andi	r2,r2,255
  43c628:	10002826 	beq	r2,zero,43c6cc <OSQPostOpt+0x120>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  43c62c:	e0bfff03 	ldbu	r2,-4(fp)
  43c630:	1080004c 	andi	r2,r2,1
  43c634:	10000b26 	beq	r2,zero,43c664 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  43c638:	00000506 	br	43c650 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  43c63c:	e13ffd17 	ldw	r4,-12(fp)
  43c640:	e17ffe17 	ldw	r5,-8(fp)
  43c644:	01800104 	movi	r6,4
  43c648:	000f883a 	mov	r7,zero
  43c64c:	043798c0 	call	43798c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  43c650:	e0bffd17 	ldw	r2,-12(fp)
  43c654:	10800283 	ldbu	r2,10(r2)
  43c658:	10803fcc 	andi	r2,r2,255
  43c65c:	103ff71e 	bne	r2,zero,43c63c <OSQPostOpt+0x90>
  43c660:	00000506 	br	43c678 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  43c664:	e13ffd17 	ldw	r4,-12(fp)
  43c668:	e17ffe17 	ldw	r5,-8(fp)
  43c66c:	01800104 	movi	r6,4
  43c670:	000f883a 	mov	r7,zero
  43c674:	043798c0 	call	43798c <OS_EventTaskRdy>
  43c678:	e0bff417 	ldw	r2,-48(fp)
  43c67c:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43c680:	0005303a 	rdctl	r2,status
  43c684:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43c688:	e0fff817 	ldw	r3,-32(fp)
  43c68c:	00bfff84 	movi	r2,-2
  43c690:	1884703a 	and	r2,r3,r2
  43c694:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43c698:	e0bff717 	ldw	r2,-36(fp)
  43c69c:	1080004c 	andi	r2,r2,1
  43c6a0:	e0fff817 	ldw	r3,-32(fp)
  43c6a4:	1884b03a 	or	r2,r3,r2
  43c6a8:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  43c6ac:	e0bff817 	ldw	r2,-32(fp)
  43c6b0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  43c6b4:	e0bfff03 	ldbu	r2,-4(fp)
  43c6b8:	1080010c 	andi	r2,r2,4
  43c6bc:	1000011e 	bne	r2,zero,43c6c4 <OSQPostOpt+0x118>
            OS_Sched();                               /* Find highest priority task ready to run       */
  43c6c0:	04383a80 	call	4383a8 <OS_Sched>
        }
        return (OS_ERR_NONE);
  43c6c4:	0005883a 	mov	r2,zero
  43c6c8:	00005706 	br	43c828 <OSQPostOpt+0x27c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  43c6cc:	e0bffd17 	ldw	r2,-12(fp)
  43c6d0:	10800117 	ldw	r2,4(r2)
  43c6d4:	e0bff515 	stw	r2,-44(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  43c6d8:	e0bff517 	ldw	r2,-44(fp)
  43c6dc:	10c0058b 	ldhu	r3,22(r2)
  43c6e0:	e0bff517 	ldw	r2,-44(fp)
  43c6e4:	1080050b 	ldhu	r2,20(r2)
  43c6e8:	18ffffcc 	andi	r3,r3,65535
  43c6ec:	10bfffcc 	andi	r2,r2,65535
  43c6f0:	18801136 	bltu	r3,r2,43c738 <OSQPostOpt+0x18c>
  43c6f4:	e0bff417 	ldw	r2,-48(fp)
  43c6f8:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43c6fc:	0005303a 	rdctl	r2,status
  43c700:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43c704:	e0fffa17 	ldw	r3,-24(fp)
  43c708:	00bfff84 	movi	r2,-2
  43c70c:	1884703a 	and	r2,r3,r2
  43c710:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43c714:	e0bff917 	ldw	r2,-28(fp)
  43c718:	1080004c 	andi	r2,r2,1
  43c71c:	e0fffa17 	ldw	r3,-24(fp)
  43c720:	1884b03a 	or	r2,r3,r2
  43c724:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  43c728:	e0bffa17 	ldw	r2,-24(fp)
  43c72c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  43c730:	00800784 	movi	r2,30
  43c734:	00003c06 	br	43c828 <OSQPostOpt+0x27c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  43c738:	e0bfff03 	ldbu	r2,-4(fp)
  43c73c:	1080008c 	andi	r2,r2,2
  43c740:	10001326 	beq	r2,zero,43c790 <OSQPostOpt+0x1e4>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  43c744:	e0bff517 	ldw	r2,-44(fp)
  43c748:	10c00417 	ldw	r3,16(r2)
  43c74c:	e0bff517 	ldw	r2,-44(fp)
  43c750:	10800117 	ldw	r2,4(r2)
  43c754:	1880041e 	bne	r3,r2,43c768 <OSQPostOpt+0x1bc>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  43c758:	e0bff517 	ldw	r2,-44(fp)
  43c75c:	10c00217 	ldw	r3,8(r2)
  43c760:	e0bff517 	ldw	r2,-44(fp)
  43c764:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  43c768:	e0bff517 	ldw	r2,-44(fp)
  43c76c:	10800417 	ldw	r2,16(r2)
  43c770:	10ffff04 	addi	r3,r2,-4
  43c774:	e0bff517 	ldw	r2,-44(fp)
  43c778:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  43c77c:	e0bff517 	ldw	r2,-44(fp)
  43c780:	10800417 	ldw	r2,16(r2)
  43c784:	e0fffe17 	ldw	r3,-8(fp)
  43c788:	10c00015 	stw	r3,0(r2)
  43c78c:	00001006 	br	43c7d0 <OSQPostOpt+0x224>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  43c790:	e0bff517 	ldw	r2,-44(fp)
  43c794:	10800317 	ldw	r2,12(r2)
  43c798:	e0fffe17 	ldw	r3,-8(fp)
  43c79c:	10c00015 	stw	r3,0(r2)
  43c7a0:	10c00104 	addi	r3,r2,4
  43c7a4:	e0bff517 	ldw	r2,-44(fp)
  43c7a8:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  43c7ac:	e0bff517 	ldw	r2,-44(fp)
  43c7b0:	10c00317 	ldw	r3,12(r2)
  43c7b4:	e0bff517 	ldw	r2,-44(fp)
  43c7b8:	10800217 	ldw	r2,8(r2)
  43c7bc:	1880041e 	bne	r3,r2,43c7d0 <OSQPostOpt+0x224>
            pq->OSQIn = pq->OSQStart;
  43c7c0:	e0bff517 	ldw	r2,-44(fp)
  43c7c4:	10c00117 	ldw	r3,4(r2)
  43c7c8:	e0bff517 	ldw	r2,-44(fp)
  43c7cc:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  43c7d0:	e0bff517 	ldw	r2,-44(fp)
  43c7d4:	1080058b 	ldhu	r2,22(r2)
  43c7d8:	10800044 	addi	r2,r2,1
  43c7dc:	1007883a 	mov	r3,r2
  43c7e0:	e0bff517 	ldw	r2,-44(fp)
  43c7e4:	10c0058d 	sth	r3,22(r2)
  43c7e8:	e0bff417 	ldw	r2,-48(fp)
  43c7ec:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43c7f0:	0005303a 	rdctl	r2,status
  43c7f4:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43c7f8:	e0fffc17 	ldw	r3,-16(fp)
  43c7fc:	00bfff84 	movi	r2,-2
  43c800:	1884703a 	and	r2,r3,r2
  43c804:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43c808:	e0bffb17 	ldw	r2,-20(fp)
  43c80c:	1080004c 	andi	r2,r2,1
  43c810:	e0fffc17 	ldw	r3,-16(fp)
  43c814:	1884b03a 	or	r2,r3,r2
  43c818:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43c81c:	e0bffc17 	ldw	r2,-16(fp)
  43c820:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  43c824:	0005883a 	mov	r2,zero
}
  43c828:	e037883a 	mov	sp,fp
  43c82c:	dfc00117 	ldw	ra,4(sp)
  43c830:	df000017 	ldw	fp,0(sp)
  43c834:	dec00204 	addi	sp,sp,8
  43c838:	f800283a 	ret

0043c83c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  43c83c:	defff504 	addi	sp,sp,-44
  43c840:	df000a15 	stw	fp,40(sp)
  43c844:	df000a04 	addi	fp,sp,40
  43c848:	e13ffe15 	stw	r4,-8(fp)
  43c84c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  43c850:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  43c854:	e0bffe17 	ldw	r2,-8(fp)
  43c858:	1000021e 	bne	r2,zero,43c864 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  43c85c:	00800104 	movi	r2,4
  43c860:	00005606 	br	43c9bc <OSQQuery+0x180>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  43c864:	e0bfff17 	ldw	r2,-4(fp)
  43c868:	1000021e 	bne	r2,zero,43c874 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  43c86c:	00800244 	movi	r2,9
  43c870:	00005206 	br	43c9bc <OSQQuery+0x180>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  43c874:	e0bffe17 	ldw	r2,-8(fp)
  43c878:	10800003 	ldbu	r2,0(r2)
  43c87c:	10803fcc 	andi	r2,r2,255
  43c880:	108000a0 	cmpeqi	r2,r2,2
  43c884:	1000021e 	bne	r2,zero,43c890 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  43c888:	00800044 	movi	r2,1
  43c88c:	00004b06 	br	43c9bc <OSQQuery+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43c890:	0005303a 	rdctl	r2,status
  43c894:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43c898:	e0fffb17 	ldw	r3,-20(fp)
  43c89c:	00bfff84 	movi	r2,-2
  43c8a0:	1884703a 	and	r2,r3,r2
  43c8a4:	1001703a 	wrctl	status,r2
  
  return context;
  43c8a8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  43c8ac:	e0bff915 	stw	r2,-28(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  43c8b0:	e0bffe17 	ldw	r2,-8(fp)
  43c8b4:	10c00283 	ldbu	r3,10(r2)
  43c8b8:	e0bfff17 	ldw	r2,-4(fp)
  43c8bc:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  43c8c0:	e0bffe17 	ldw	r2,-8(fp)
  43c8c4:	108002c4 	addi	r2,r2,11
  43c8c8:	e0bff715 	stw	r2,-36(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  43c8cc:	e0bfff17 	ldw	r2,-4(fp)
  43c8d0:	10800204 	addi	r2,r2,8
  43c8d4:	e0bff815 	stw	r2,-32(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  43c8d8:	e03ff605 	stb	zero,-40(fp)
  43c8dc:	00000d06 	br	43c914 <OSQQuery+0xd8>
        *pdest++ = *psrc++;
  43c8e0:	e0bff717 	ldw	r2,-36(fp)
  43c8e4:	10c00003 	ldbu	r3,0(r2)
  43c8e8:	e0bff817 	ldw	r2,-32(fp)
  43c8ec:	10c00005 	stb	r3,0(r2)
  43c8f0:	e0bff817 	ldw	r2,-32(fp)
  43c8f4:	10800044 	addi	r2,r2,1
  43c8f8:	e0bff815 	stw	r2,-32(fp)
  43c8fc:	e0bff717 	ldw	r2,-36(fp)
  43c900:	10800044 	addi	r2,r2,1
  43c904:	e0bff715 	stw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  43c908:	e0bff603 	ldbu	r2,-40(fp)
  43c90c:	10800044 	addi	r2,r2,1
  43c910:	e0bff605 	stb	r2,-40(fp)
  43c914:	e0bff603 	ldbu	r2,-40(fp)
  43c918:	108000f0 	cmpltui	r2,r2,3
  43c91c:	103ff01e 	bne	r2,zero,43c8e0 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  43c920:	e0bffe17 	ldw	r2,-8(fp)
  43c924:	10800117 	ldw	r2,4(r2)
  43c928:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries > 0) {
  43c92c:	e0bffa17 	ldw	r2,-24(fp)
  43c930:	1080058b 	ldhu	r2,22(r2)
  43c934:	10bfffcc 	andi	r2,r2,65535
  43c938:	10000626 	beq	r2,zero,43c954 <OSQQuery+0x118>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  43c93c:	e0bffa17 	ldw	r2,-24(fp)
  43c940:	10800417 	ldw	r2,16(r2)
  43c944:	10c00017 	ldw	r3,0(r2)
  43c948:	e0bfff17 	ldw	r2,-4(fp)
  43c94c:	10c00015 	stw	r3,0(r2)
  43c950:	00000206 	br	43c95c <OSQQuery+0x120>
    } else {
        p_q_data->OSMsg = (void *)0;
  43c954:	e0bfff17 	ldw	r2,-4(fp)
  43c958:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  43c95c:	e0bffa17 	ldw	r2,-24(fp)
  43c960:	10c0058b 	ldhu	r3,22(r2)
  43c964:	e0bfff17 	ldw	r2,-4(fp)
  43c968:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  43c96c:	e0bffa17 	ldw	r2,-24(fp)
  43c970:	10c0050b 	ldhu	r3,20(r2)
  43c974:	e0bfff17 	ldw	r2,-4(fp)
  43c978:	10c0018d 	sth	r3,6(r2)
  43c97c:	e0bff917 	ldw	r2,-28(fp)
  43c980:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43c984:	0005303a 	rdctl	r2,status
  43c988:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43c98c:	e0fffd17 	ldw	r3,-12(fp)
  43c990:	00bfff84 	movi	r2,-2
  43c994:	1884703a 	and	r2,r3,r2
  43c998:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43c99c:	e0bffc17 	ldw	r2,-16(fp)
  43c9a0:	1080004c 	andi	r2,r2,1
  43c9a4:	e0fffd17 	ldw	r3,-12(fp)
  43c9a8:	1884b03a 	or	r2,r3,r2
  43c9ac:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43c9b0:	e0bffd17 	ldw	r2,-12(fp)
  43c9b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  43c9b8:	0005883a 	mov	r2,zero
}
  43c9bc:	e037883a 	mov	sp,fp
  43c9c0:	df000017 	ldw	fp,0(sp)
  43c9c4:	dec00104 	addi	sp,sp,4
  43c9c8:	f800283a 	ret

0043c9cc <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  43c9cc:	defffb04 	addi	sp,sp,-20
  43c9d0:	dfc00415 	stw	ra,16(sp)
  43c9d4:	df000315 	stw	fp,12(sp)
  43c9d8:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  43c9dc:	01001174 	movhi	r4,69
  43c9e0:	21244904 	addi	r4,r4,-28380
  43c9e4:	01407804 	movi	r5,480
  43c9e8:	04382e80 	call	4382e8 <OS_MemClr>
    pq1 = &OSQTbl[0];
  43c9ec:	00801174 	movhi	r2,69
  43c9f0:	10a44904 	addi	r2,r2,-28380
  43c9f4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  43c9f8:	00801174 	movhi	r2,69
  43c9fc:	10a44f04 	addi	r2,r2,-28356
  43ca00:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  43ca04:	e03ffd0d 	sth	zero,-12(fp)
  43ca08:	00000c06 	br	43ca3c <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  43ca0c:	e0bffe17 	ldw	r2,-8(fp)
  43ca10:	e0ffff17 	ldw	r3,-4(fp)
  43ca14:	10c00015 	stw	r3,0(r2)
        pq1++;
  43ca18:	e0bffe17 	ldw	r2,-8(fp)
  43ca1c:	10800604 	addi	r2,r2,24
  43ca20:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  43ca24:	e0bfff17 	ldw	r2,-4(fp)
  43ca28:	10800604 	addi	r2,r2,24
  43ca2c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  43ca30:	e0bffd0b 	ldhu	r2,-12(fp)
  43ca34:	10800044 	addi	r2,r2,1
  43ca38:	e0bffd0d 	sth	r2,-12(fp)
  43ca3c:	e0bffd0b 	ldhu	r2,-12(fp)
  43ca40:	108004f0 	cmpltui	r2,r2,19
  43ca44:	103ff11e 	bne	r2,zero,43ca0c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  43ca48:	e0bffe17 	ldw	r2,-8(fp)
  43ca4c:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  43ca50:	00801134 	movhi	r2,68
  43ca54:	109e0a04 	addi	r2,r2,30760
  43ca58:	00c01174 	movhi	r3,69
  43ca5c:	18e44904 	addi	r3,r3,-28380
  43ca60:	10c00015 	stw	r3,0(r2)
#endif
}
  43ca64:	e037883a 	mov	sp,fp
  43ca68:	dfc00117 	ldw	ra,4(sp)
  43ca6c:	df000017 	ldw	fp,0(sp)
  43ca70:	dec00204 	addi	sp,sp,8
  43ca74:	f800283a 	ret

0043ca78 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  43ca78:	defff904 	addi	sp,sp,-28
  43ca7c:	df000615 	stw	fp,24(sp)
  43ca80:	df000604 	addi	fp,sp,24
  43ca84:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  43ca88:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  43ca8c:	e0bfff17 	ldw	r2,-4(fp)
  43ca90:	1000021e 	bne	r2,zero,43ca9c <OSSemAccept+0x24>
        return (0);
  43ca94:	0005883a 	mov	r2,zero
  43ca98:	00002a06 	br	43cb44 <OSSemAccept+0xcc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  43ca9c:	e0bfff17 	ldw	r2,-4(fp)
  43caa0:	10800003 	ldbu	r2,0(r2)
  43caa4:	10803fcc 	andi	r2,r2,255
  43caa8:	108000e0 	cmpeqi	r2,r2,3
  43caac:	1000021e 	bne	r2,zero,43cab8 <OSSemAccept+0x40>
        return (0);
  43cab0:	0005883a 	mov	r2,zero
  43cab4:	00002306 	br	43cb44 <OSSemAccept+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43cab8:	0005303a 	rdctl	r2,status
  43cabc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43cac0:	e0fffc17 	ldw	r3,-16(fp)
  43cac4:	00bfff84 	movi	r2,-2
  43cac8:	1884703a 	and	r2,r3,r2
  43cacc:	1001703a 	wrctl	status,r2
  
  return context;
  43cad0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  43cad4:	e0bffa15 	stw	r2,-24(fp)
    cnt = pevent->OSEventCnt;
  43cad8:	e0bfff17 	ldw	r2,-4(fp)
  43cadc:	1080020b 	ldhu	r2,8(r2)
  43cae0:	e0bffb0d 	sth	r2,-20(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  43cae4:	e0bffb0b 	ldhu	r2,-20(fp)
  43cae8:	10000626 	beq	r2,zero,43cb04 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  43caec:	e0bfff17 	ldw	r2,-4(fp)
  43caf0:	1080020b 	ldhu	r2,8(r2)
  43caf4:	10bfffc4 	addi	r2,r2,-1
  43caf8:	1007883a 	mov	r3,r2
  43cafc:	e0bfff17 	ldw	r2,-4(fp)
  43cb00:	10c0020d 	sth	r3,8(r2)
  43cb04:	e0bffa17 	ldw	r2,-24(fp)
  43cb08:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43cb0c:	0005303a 	rdctl	r2,status
  43cb10:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43cb14:	e0fffe17 	ldw	r3,-8(fp)
  43cb18:	00bfff84 	movi	r2,-2
  43cb1c:	1884703a 	and	r2,r3,r2
  43cb20:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43cb24:	e0bffd17 	ldw	r2,-12(fp)
  43cb28:	1080004c 	andi	r2,r2,1
  43cb2c:	e0fffe17 	ldw	r3,-8(fp)
  43cb30:	1884b03a 	or	r2,r3,r2
  43cb34:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  43cb38:	e0bffe17 	ldw	r2,-8(fp)
  43cb3c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  43cb40:	e0bffb0b 	ldhu	r2,-20(fp)
}
  43cb44:	e037883a 	mov	sp,fp
  43cb48:	df000017 	ldw	fp,0(sp)
  43cb4c:	dec00104 	addi	sp,sp,4
  43cb50:	f800283a 	ret

0043cb54 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  43cb54:	defff804 	addi	sp,sp,-32
  43cb58:	dfc00715 	stw	ra,28(sp)
  43cb5c:	df000615 	stw	fp,24(sp)
  43cb60:	df000604 	addi	fp,sp,24
  43cb64:	2005883a 	mov	r2,r4
  43cb68:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  43cb6c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  43cb70:	00801134 	movhi	r2,68
  43cb74:	109e0d04 	addi	r2,r2,30772
  43cb78:	10800003 	ldbu	r2,0(r2)
  43cb7c:	10803fcc 	andi	r2,r2,255
  43cb80:	10000226 	beq	r2,zero,43cb8c <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  43cb84:	0005883a 	mov	r2,zero
  43cb88:	00003806 	br	43cc6c <OSSemCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43cb8c:	0005303a 	rdctl	r2,status
  43cb90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43cb94:	e0fffc17 	ldw	r3,-16(fp)
  43cb98:	00bfff84 	movi	r2,-2
  43cb9c:	1884703a 	and	r2,r3,r2
  43cba0:	1001703a 	wrctl	status,r2
  
  return context;
  43cba4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  43cba8:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  43cbac:	00801134 	movhi	r2,68
  43cbb0:	109e0c04 	addi	r2,r2,30768
  43cbb4:	10800017 	ldw	r2,0(r2)
  43cbb8:	e0bffb15 	stw	r2,-20(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  43cbbc:	00801134 	movhi	r2,68
  43cbc0:	109e0c04 	addi	r2,r2,30768
  43cbc4:	10800017 	ldw	r2,0(r2)
  43cbc8:	10000726 	beq	r2,zero,43cbe8 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  43cbcc:	00801134 	movhi	r2,68
  43cbd0:	109e0c04 	addi	r2,r2,30768
  43cbd4:	10800017 	ldw	r2,0(r2)
  43cbd8:	10c00117 	ldw	r3,4(r2)
  43cbdc:	00801134 	movhi	r2,68
  43cbe0:	109e0c04 	addi	r2,r2,30768
  43cbe4:	10c00015 	stw	r3,0(r2)
  43cbe8:	e0bffa17 	ldw	r2,-24(fp)
  43cbec:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43cbf0:	0005303a 	rdctl	r2,status
  43cbf4:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43cbf8:	e0fffe17 	ldw	r3,-8(fp)
  43cbfc:	00bfff84 	movi	r2,-2
  43cc00:	1884703a 	and	r2,r3,r2
  43cc04:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43cc08:	e0bffd17 	ldw	r2,-12(fp)
  43cc0c:	1080004c 	andi	r2,r2,1
  43cc10:	e0fffe17 	ldw	r3,-8(fp)
  43cc14:	1884b03a 	or	r2,r3,r2
  43cc18:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  43cc1c:	e0bffe17 	ldw	r2,-8(fp)
  43cc20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  43cc24:	e0bffb17 	ldw	r2,-20(fp)
  43cc28:	10000f26 	beq	r2,zero,43cc68 <OSSemCreate+0x114>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  43cc2c:	e0bffb17 	ldw	r2,-20(fp)
  43cc30:	00c000c4 	movi	r3,3
  43cc34:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  43cc38:	e0bffb17 	ldw	r2,-20(fp)
  43cc3c:	e0ffff0b 	ldhu	r3,-4(fp)
  43cc40:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  43cc44:	e0bffb17 	ldw	r2,-20(fp)
  43cc48:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  43cc4c:	e0bffb17 	ldw	r2,-20(fp)
  43cc50:	00c00fc4 	movi	r3,63
  43cc54:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  43cc58:	e0bffb17 	ldw	r2,-20(fp)
  43cc5c:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  43cc60:	e13ffb17 	ldw	r4,-20(fp)
  43cc64:	0437f1c0 	call	437f1c <OS_EventWaitListInit>
    }
    return (pevent);
  43cc68:	e0bffb17 	ldw	r2,-20(fp)
}
  43cc6c:	e037883a 	mov	sp,fp
  43cc70:	dfc00117 	ldw	ra,4(sp)
  43cc74:	df000017 	ldw	fp,0(sp)
  43cc78:	dec00204 	addi	sp,sp,8
  43cc7c:	f800283a 	ret

0043cc80 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  43cc80:	deffef04 	addi	sp,sp,-68
  43cc84:	dfc01015 	stw	ra,64(sp)
  43cc88:	df000f15 	stw	fp,60(sp)
  43cc8c:	df000f04 	addi	fp,sp,60
  43cc90:	e13ffd15 	stw	r4,-12(fp)
  43cc94:	2805883a 	mov	r2,r5
  43cc98:	e1bfff15 	stw	r6,-4(fp)
  43cc9c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  43cca0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  43cca4:	e0bfff17 	ldw	r2,-4(fp)
  43cca8:	1000021e 	bne	r2,zero,43ccb4 <OSSemDel+0x34>
        return (pevent);
  43ccac:	e0bffd17 	ldw	r2,-12(fp)
  43ccb0:	0000b606 	br	43cf8c <OSSemDel+0x30c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  43ccb4:	e0bffd17 	ldw	r2,-12(fp)
  43ccb8:	1000051e 	bne	r2,zero,43ccd0 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  43ccbc:	e0bfff17 	ldw	r2,-4(fp)
  43ccc0:	00c00104 	movi	r3,4
  43ccc4:	10c00005 	stb	r3,0(r2)
        return (pevent);
  43ccc8:	e0bffd17 	ldw	r2,-12(fp)
  43cccc:	0000af06 	br	43cf8c <OSSemDel+0x30c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  43ccd0:	e0bffd17 	ldw	r2,-12(fp)
  43ccd4:	10800003 	ldbu	r2,0(r2)
  43ccd8:	10803fcc 	andi	r2,r2,255
  43ccdc:	108000e0 	cmpeqi	r2,r2,3
  43cce0:	1000051e 	bne	r2,zero,43ccf8 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  43cce4:	e0bfff17 	ldw	r2,-4(fp)
  43cce8:	00c00044 	movi	r3,1
  43ccec:	10c00005 	stb	r3,0(r2)
        return (pevent);
  43ccf0:	e0bffd17 	ldw	r2,-12(fp)
  43ccf4:	0000a506 	br	43cf8c <OSSemDel+0x30c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  43ccf8:	00801134 	movhi	r2,68
  43ccfc:	109e0d04 	addi	r2,r2,30772
  43cd00:	10800003 	ldbu	r2,0(r2)
  43cd04:	10803fcc 	andi	r2,r2,255
  43cd08:	10000526 	beq	r2,zero,43cd20 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  43cd0c:	e0bfff17 	ldw	r2,-4(fp)
  43cd10:	00c003c4 	movi	r3,15
  43cd14:	10c00005 	stb	r3,0(r2)
        return (pevent);
  43cd18:	e0bffd17 	ldw	r2,-12(fp)
  43cd1c:	00009b06 	br	43cf8c <OSSemDel+0x30c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43cd20:	0005303a 	rdctl	r2,status
  43cd24:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43cd28:	e0fff417 	ldw	r3,-48(fp)
  43cd2c:	00bfff84 	movi	r2,-2
  43cd30:	1884703a 	and	r2,r3,r2
  43cd34:	1001703a 	wrctl	status,r2
  
  return context;
  43cd38:	e0bff417 	ldw	r2,-48(fp)
    }
    OS_ENTER_CRITICAL();
  43cd3c:	e0bff315 	stw	r2,-52(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  43cd40:	e0bffd17 	ldw	r2,-12(fp)
  43cd44:	10800283 	ldbu	r2,10(r2)
  43cd48:	10803fcc 	andi	r2,r2,255
  43cd4c:	10000326 	beq	r2,zero,43cd5c <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  43cd50:	00800044 	movi	r2,1
  43cd54:	e0bff105 	stb	r2,-60(fp)
  43cd58:	00000106 	br	43cd60 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  43cd5c:	e03ff105 	stb	zero,-60(fp)
    }
    switch (opt) {
  43cd60:	e0bffe03 	ldbu	r2,-8(fp)
  43cd64:	10000326 	beq	r2,zero,43cd74 <OSSemDel+0xf4>
  43cd68:	10800060 	cmpeqi	r2,r2,1
  43cd6c:	1000431e 	bne	r2,zero,43ce7c <OSSemDel+0x1fc>
  43cd70:	00007006 	br	43cf34 <OSSemDel+0x2b4>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  43cd74:	e0bff103 	ldbu	r2,-60(fp)
  43cd78:	1000251e 	bne	r2,zero,43ce10 <OSSemDel+0x190>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  43cd7c:	e0bffd17 	ldw	r2,-12(fp)
  43cd80:	00c00fc4 	movi	r3,63
  43cd84:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  43cd88:	e0bffd17 	ldw	r2,-12(fp)
  43cd8c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  43cd90:	e0bffd17 	ldw	r2,-12(fp)
  43cd94:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  43cd98:	00801134 	movhi	r2,68
  43cd9c:	109e0c04 	addi	r2,r2,30768
  43cda0:	10c00017 	ldw	r3,0(r2)
  43cda4:	e0bffd17 	ldw	r2,-12(fp)
  43cda8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  43cdac:	e0bffd17 	ldw	r2,-12(fp)
  43cdb0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  43cdb4:	00801134 	movhi	r2,68
  43cdb8:	109e0c04 	addi	r2,r2,30768
  43cdbc:	e0fffd17 	ldw	r3,-12(fp)
  43cdc0:	10c00015 	stw	r3,0(r2)
  43cdc4:	e0bff317 	ldw	r2,-52(fp)
  43cdc8:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43cdcc:	0005303a 	rdctl	r2,status
  43cdd0:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43cdd4:	e0fff617 	ldw	r3,-40(fp)
  43cdd8:	00bfff84 	movi	r2,-2
  43cddc:	1884703a 	and	r2,r3,r2
  43cde0:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43cde4:	e0bff517 	ldw	r2,-44(fp)
  43cde8:	1080004c 	andi	r2,r2,1
  43cdec:	e0fff617 	ldw	r3,-40(fp)
  43cdf0:	1884b03a 	or	r2,r3,r2
  43cdf4:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  43cdf8:	e0bff617 	ldw	r2,-40(fp)
  43cdfc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  43ce00:	e0bfff17 	ldw	r2,-4(fp)
  43ce04:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  43ce08:	e03ff215 	stw	zero,-56(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  43ce0c:	00005e06 	br	43cf88 <OSSemDel+0x308>
  43ce10:	e0bff317 	ldw	r2,-52(fp)
  43ce14:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43ce18:	0005303a 	rdctl	r2,status
  43ce1c:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43ce20:	e0fff817 	ldw	r3,-32(fp)
  43ce24:	00bfff84 	movi	r2,-2
  43ce28:	1884703a 	and	r2,r3,r2
  43ce2c:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43ce30:	e0bff717 	ldw	r2,-36(fp)
  43ce34:	1080004c 	andi	r2,r2,1
  43ce38:	e0fff817 	ldw	r3,-32(fp)
  43ce3c:	1884b03a 	or	r2,r3,r2
  43ce40:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  43ce44:	e0bff817 	ldw	r2,-32(fp)
  43ce48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  43ce4c:	e0bfff17 	ldw	r2,-4(fp)
  43ce50:	00c01244 	movi	r3,73
  43ce54:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  43ce58:	e0bffd17 	ldw	r2,-12(fp)
  43ce5c:	e0bff215 	stw	r2,-56(fp)
             }
             break;
  43ce60:	00004906 	br	43cf88 <OSSemDel+0x308>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  43ce64:	e13ffd17 	ldw	r4,-12(fp)
  43ce68:	000b883a 	mov	r5,zero
  43ce6c:	01800044 	movi	r6,1
  43ce70:	000f883a 	mov	r7,zero
  43ce74:	043798c0 	call	43798c <OS_EventTaskRdy>
  43ce78:	00000106 	br	43ce80 <OSSemDel+0x200>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  43ce7c:	0001883a 	nop
  43ce80:	e0bffd17 	ldw	r2,-12(fp)
  43ce84:	10800283 	ldbu	r2,10(r2)
  43ce88:	10803fcc 	andi	r2,r2,255
  43ce8c:	103ff51e 	bne	r2,zero,43ce64 <OSSemDel+0x1e4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  43ce90:	e0bffd17 	ldw	r2,-12(fp)
  43ce94:	00c00fc4 	movi	r3,63
  43ce98:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  43ce9c:	e0bffd17 	ldw	r2,-12(fp)
  43cea0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  43cea4:	e0bffd17 	ldw	r2,-12(fp)
  43cea8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  43ceac:	00801134 	movhi	r2,68
  43ceb0:	109e0c04 	addi	r2,r2,30768
  43ceb4:	10c00017 	ldw	r3,0(r2)
  43ceb8:	e0bffd17 	ldw	r2,-12(fp)
  43cebc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  43cec0:	e0bffd17 	ldw	r2,-12(fp)
  43cec4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  43cec8:	00801134 	movhi	r2,68
  43cecc:	109e0c04 	addi	r2,r2,30768
  43ced0:	e0fffd17 	ldw	r3,-12(fp)
  43ced4:	10c00015 	stw	r3,0(r2)
  43ced8:	e0bff317 	ldw	r2,-52(fp)
  43cedc:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43cee0:	0005303a 	rdctl	r2,status
  43cee4:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43cee8:	e0fffa17 	ldw	r3,-24(fp)
  43ceec:	00bfff84 	movi	r2,-2
  43cef0:	1884703a 	and	r2,r3,r2
  43cef4:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43cef8:	e0bff917 	ldw	r2,-28(fp)
  43cefc:	1080004c 	andi	r2,r2,1
  43cf00:	e0fffa17 	ldw	r3,-24(fp)
  43cf04:	1884b03a 	or	r2,r3,r2
  43cf08:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  43cf0c:	e0bffa17 	ldw	r2,-24(fp)
  43cf10:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  43cf14:	e0bff103 	ldbu	r2,-60(fp)
  43cf18:	10800058 	cmpnei	r2,r2,1
  43cf1c:	1000011e 	bne	r2,zero,43cf24 <OSSemDel+0x2a4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  43cf20:	04383a80 	call	4383a8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  43cf24:	e0bfff17 	ldw	r2,-4(fp)
  43cf28:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  43cf2c:	e03ff215 	stw	zero,-56(fp)
             break;
  43cf30:	00001506 	br	43cf88 <OSSemDel+0x308>
  43cf34:	e0bff317 	ldw	r2,-52(fp)
  43cf38:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43cf3c:	0005303a 	rdctl	r2,status
  43cf40:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43cf44:	e0fffc17 	ldw	r3,-16(fp)
  43cf48:	00bfff84 	movi	r2,-2
  43cf4c:	1884703a 	and	r2,r3,r2
  43cf50:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43cf54:	e0bffb17 	ldw	r2,-20(fp)
  43cf58:	1080004c 	andi	r2,r2,1
  43cf5c:	e0fffc17 	ldw	r3,-16(fp)
  43cf60:	1884b03a 	or	r2,r3,r2
  43cf64:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43cf68:	e0bffc17 	ldw	r2,-16(fp)
  43cf6c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  43cf70:	e0bfff17 	ldw	r2,-4(fp)
  43cf74:	00c001c4 	movi	r3,7
  43cf78:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  43cf7c:	e0bffd17 	ldw	r2,-12(fp)
  43cf80:	e0bff215 	stw	r2,-56(fp)
             break;
  43cf84:	0001883a 	nop
    }
    return (pevent_return);
  43cf88:	e0bff217 	ldw	r2,-56(fp)
}
  43cf8c:	e037883a 	mov	sp,fp
  43cf90:	dfc00117 	ldw	ra,4(sp)
  43cf94:	df000017 	ldw	fp,0(sp)
  43cf98:	dec00204 	addi	sp,sp,8
  43cf9c:	f800283a 	ret

0043cfa0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  43cfa0:	defff204 	addi	sp,sp,-56
  43cfa4:	dfc00d15 	stw	ra,52(sp)
  43cfa8:	df000c15 	stw	fp,48(sp)
  43cfac:	df000c04 	addi	fp,sp,48
  43cfb0:	e13ffd15 	stw	r4,-12(fp)
  43cfb4:	2805883a 	mov	r2,r5
  43cfb8:	e1bfff15 	stw	r6,-4(fp)
  43cfbc:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  43cfc0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  43cfc4:	e0bfff17 	ldw	r2,-4(fp)
  43cfc8:	1000ab26 	beq	r2,zero,43d278 <OSSemPend+0x2d8>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  43cfcc:	e0bffd17 	ldw	r2,-12(fp)
  43cfd0:	1000041e 	bne	r2,zero,43cfe4 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  43cfd4:	e0bfff17 	ldw	r2,-4(fp)
  43cfd8:	00c00104 	movi	r3,4
  43cfdc:	10c00005 	stb	r3,0(r2)
        return;
  43cfe0:	0000a606 	br	43d27c <OSSemPend+0x2dc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  43cfe4:	e0bffd17 	ldw	r2,-12(fp)
  43cfe8:	10800003 	ldbu	r2,0(r2)
  43cfec:	10803fcc 	andi	r2,r2,255
  43cff0:	108000e0 	cmpeqi	r2,r2,3
  43cff4:	1000041e 	bne	r2,zero,43d008 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  43cff8:	e0bfff17 	ldw	r2,-4(fp)
  43cffc:	00c00044 	movi	r3,1
  43d000:	10c00005 	stb	r3,0(r2)
        return;
  43d004:	00009d06 	br	43d27c <OSSemPend+0x2dc>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  43d008:	00801134 	movhi	r2,68
  43d00c:	109e0d04 	addi	r2,r2,30772
  43d010:	10800003 	ldbu	r2,0(r2)
  43d014:	10803fcc 	andi	r2,r2,255
  43d018:	10000426 	beq	r2,zero,43d02c <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  43d01c:	e0bfff17 	ldw	r2,-4(fp)
  43d020:	00c00084 	movi	r3,2
  43d024:	10c00005 	stb	r3,0(r2)
        return;
  43d028:	00009406 	br	43d27c <OSSemPend+0x2dc>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  43d02c:	00801134 	movhi	r2,68
  43d030:	109dff04 	addi	r2,r2,30716
  43d034:	10800003 	ldbu	r2,0(r2)
  43d038:	10803fcc 	andi	r2,r2,255
  43d03c:	10000426 	beq	r2,zero,43d050 <OSSemPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  43d040:	e0bfff17 	ldw	r2,-4(fp)
  43d044:	00c00344 	movi	r3,13
  43d048:	10c00005 	stb	r3,0(r2)
        return;
  43d04c:	00008b06 	br	43d27c <OSSemPend+0x2dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43d050:	0005303a 	rdctl	r2,status
  43d054:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43d058:	e0fff517 	ldw	r3,-44(fp)
  43d05c:	00bfff84 	movi	r2,-2
  43d060:	1884703a 	and	r2,r3,r2
  43d064:	1001703a 	wrctl	status,r2
  
  return context;
  43d068:	e0bff517 	ldw	r2,-44(fp)
    }
    OS_ENTER_CRITICAL();
  43d06c:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  43d070:	e0bffd17 	ldw	r2,-12(fp)
  43d074:	1080020b 	ldhu	r2,8(r2)
  43d078:	10bfffcc 	andi	r2,r2,65535
  43d07c:	10001826 	beq	r2,zero,43d0e0 <OSSemPend+0x140>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  43d080:	e0bffd17 	ldw	r2,-12(fp)
  43d084:	1080020b 	ldhu	r2,8(r2)
  43d088:	10bfffc4 	addi	r2,r2,-1
  43d08c:	1007883a 	mov	r3,r2
  43d090:	e0bffd17 	ldw	r2,-12(fp)
  43d094:	10c0020d 	sth	r3,8(r2)
  43d098:	e0bff417 	ldw	r2,-48(fp)
  43d09c:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43d0a0:	0005303a 	rdctl	r2,status
  43d0a4:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43d0a8:	e0fff717 	ldw	r3,-36(fp)
  43d0ac:	00bfff84 	movi	r2,-2
  43d0b0:	1884703a 	and	r2,r3,r2
  43d0b4:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43d0b8:	e0bff617 	ldw	r2,-40(fp)
  43d0bc:	1080004c 	andi	r2,r2,1
  43d0c0:	e0fff717 	ldw	r3,-36(fp)
  43d0c4:	1884b03a 	or	r2,r3,r2
  43d0c8:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  43d0cc:	e0bff717 	ldw	r2,-36(fp)
  43d0d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  43d0d4:	e0bfff17 	ldw	r2,-4(fp)
  43d0d8:	10000005 	stb	zero,0(r2)
        return;
  43d0dc:	00006706 	br	43d27c <OSSemPend+0x2dc>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  43d0e0:	00801134 	movhi	r2,68
  43d0e4:	109e0e04 	addi	r2,r2,30776
  43d0e8:	10800017 	ldw	r2,0(r2)
  43d0ec:	00c01134 	movhi	r3,68
  43d0f0:	18de0e04 	addi	r3,r3,30776
  43d0f4:	18c00017 	ldw	r3,0(r3)
  43d0f8:	18c00c03 	ldbu	r3,48(r3)
  43d0fc:	18c00054 	ori	r3,r3,1
  43d100:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  43d104:	00801134 	movhi	r2,68
  43d108:	109e0e04 	addi	r2,r2,30776
  43d10c:	10800017 	ldw	r2,0(r2)
  43d110:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  43d114:	00801134 	movhi	r2,68
  43d118:	109e0e04 	addi	r2,r2,30776
  43d11c:	10800017 	ldw	r2,0(r2)
  43d120:	e0fffe0b 	ldhu	r3,-8(fp)
  43d124:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  43d128:	e13ffd17 	ldw	r4,-12(fp)
  43d12c:	0437b240 	call	437b24 <OS_EventTaskWait>
  43d130:	e0bff417 	ldw	r2,-48(fp)
  43d134:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43d138:	0005303a 	rdctl	r2,status
  43d13c:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43d140:	e0fff917 	ldw	r3,-28(fp)
  43d144:	00bfff84 	movi	r2,-2
  43d148:	1884703a 	and	r2,r3,r2
  43d14c:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43d150:	e0bff817 	ldw	r2,-32(fp)
  43d154:	1080004c 	andi	r2,r2,1
  43d158:	e0fff917 	ldw	r3,-28(fp)
  43d15c:	1884b03a 	or	r2,r3,r2
  43d160:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  43d164:	e0bff917 	ldw	r2,-28(fp)
  43d168:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  43d16c:	04383a80 	call	4383a8 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43d170:	0005303a 	rdctl	r2,status
  43d174:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43d178:	e0fffa17 	ldw	r3,-24(fp)
  43d17c:	00bfff84 	movi	r2,-2
  43d180:	1884703a 	and	r2,r3,r2
  43d184:	1001703a 	wrctl	status,r2
  
  return context;
  43d188:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
  43d18c:	e0bff415 	stw	r2,-48(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  43d190:	00801134 	movhi	r2,68
  43d194:	109e0e04 	addi	r2,r2,30776
  43d198:	10800017 	ldw	r2,0(r2)
  43d19c:	10800c43 	ldbu	r2,49(r2)
  43d1a0:	10803fcc 	andi	r2,r2,255
  43d1a4:	10000326 	beq	r2,zero,43d1b4 <OSSemPend+0x214>
  43d1a8:	108000a0 	cmpeqi	r2,r2,2
  43d1ac:	1000041e 	bne	r2,zero,43d1c0 <OSSemPend+0x220>
  43d1b0:	00000706 	br	43d1d0 <OSSemPend+0x230>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  43d1b4:	e0bfff17 	ldw	r2,-4(fp)
  43d1b8:	10000005 	stb	zero,0(r2)
             break;
  43d1bc:	00000e06 	br	43d1f8 <OSSemPend+0x258>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  43d1c0:	e0bfff17 	ldw	r2,-4(fp)
  43d1c4:	00c00384 	movi	r3,14
  43d1c8:	10c00005 	stb	r3,0(r2)
             break;
  43d1cc:	00000a06 	br	43d1f8 <OSSemPend+0x258>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  43d1d0:	00801134 	movhi	r2,68
  43d1d4:	109e0e04 	addi	r2,r2,30776
  43d1d8:	10800017 	ldw	r2,0(r2)
  43d1dc:	1009883a 	mov	r4,r2
  43d1e0:	e17ffd17 	ldw	r5,-12(fp)
  43d1e4:	0437d740 	call	437d74 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  43d1e8:	e0bfff17 	ldw	r2,-4(fp)
  43d1ec:	00c00284 	movi	r3,10
  43d1f0:	10c00005 	stb	r3,0(r2)
             break;
  43d1f4:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  43d1f8:	00801134 	movhi	r2,68
  43d1fc:	109e0e04 	addi	r2,r2,30776
  43d200:	10800017 	ldw	r2,0(r2)
  43d204:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  43d208:	00801134 	movhi	r2,68
  43d20c:	109e0e04 	addi	r2,r2,30776
  43d210:	10800017 	ldw	r2,0(r2)
  43d214:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  43d218:	00801134 	movhi	r2,68
  43d21c:	109e0e04 	addi	r2,r2,30776
  43d220:	10800017 	ldw	r2,0(r2)
  43d224:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  43d228:	00801134 	movhi	r2,68
  43d22c:	109e0e04 	addi	r2,r2,30776
  43d230:	10800017 	ldw	r2,0(r2)
  43d234:	10000815 	stw	zero,32(r2)
  43d238:	e0bff417 	ldw	r2,-48(fp)
  43d23c:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43d240:	0005303a 	rdctl	r2,status
  43d244:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43d248:	e0fffc17 	ldw	r3,-16(fp)
  43d24c:	00bfff84 	movi	r2,-2
  43d250:	1884703a 	and	r2,r3,r2
  43d254:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43d258:	e0bffb17 	ldw	r2,-20(fp)
  43d25c:	1080004c 	andi	r2,r2,1
  43d260:	e0fffc17 	ldw	r3,-16(fp)
  43d264:	1884b03a 	or	r2,r3,r2
  43d268:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43d26c:	e0bffc17 	ldw	r2,-16(fp)
  43d270:	1001703a 	wrctl	status,r2
  43d274:	00000106 	br	43d27c <OSSemPend+0x2dc>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  43d278:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
  43d27c:	e037883a 	mov	sp,fp
  43d280:	dfc00117 	ldw	ra,4(sp)
  43d284:	df000017 	ldw	fp,0(sp)
  43d288:	dec00204 	addi	sp,sp,8
  43d28c:	f800283a 	ret

0043d290 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  43d290:	defff404 	addi	sp,sp,-48
  43d294:	dfc00b15 	stw	ra,44(sp)
  43d298:	df000a15 	stw	fp,40(sp)
  43d29c:	df000a04 	addi	fp,sp,40
  43d2a0:	e13ffd15 	stw	r4,-12(fp)
  43d2a4:	2805883a 	mov	r2,r5
  43d2a8:	e1bfff15 	stw	r6,-4(fp)
  43d2ac:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  43d2b0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  43d2b4:	e0bfff17 	ldw	r2,-4(fp)
  43d2b8:	1000021e 	bne	r2,zero,43d2c4 <OSSemPendAbort+0x34>
        return (0);
  43d2bc:	0005883a 	mov	r2,zero
  43d2c0:	00006106 	br	43d448 <OSSemPendAbort+0x1b8>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  43d2c4:	e0bffd17 	ldw	r2,-12(fp)
  43d2c8:	1000051e 	bne	r2,zero,43d2e0 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  43d2cc:	e0bfff17 	ldw	r2,-4(fp)
  43d2d0:	00c00104 	movi	r3,4
  43d2d4:	10c00005 	stb	r3,0(r2)
        return (0);
  43d2d8:	0005883a 	mov	r2,zero
  43d2dc:	00005a06 	br	43d448 <OSSemPendAbort+0x1b8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  43d2e0:	e0bffd17 	ldw	r2,-12(fp)
  43d2e4:	10800003 	ldbu	r2,0(r2)
  43d2e8:	10803fcc 	andi	r2,r2,255
  43d2ec:	108000e0 	cmpeqi	r2,r2,3
  43d2f0:	1000051e 	bne	r2,zero,43d308 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  43d2f4:	e0bfff17 	ldw	r2,-4(fp)
  43d2f8:	00c00044 	movi	r3,1
  43d2fc:	10c00005 	stb	r3,0(r2)
        return (0);
  43d300:	0005883a 	mov	r2,zero
  43d304:	00005006 	br	43d448 <OSSemPendAbort+0x1b8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43d308:	0005303a 	rdctl	r2,status
  43d30c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43d310:	e0fff817 	ldw	r3,-32(fp)
  43d314:	00bfff84 	movi	r2,-2
  43d318:	1884703a 	and	r2,r3,r2
  43d31c:	1001703a 	wrctl	status,r2
  
  return context;
  43d320:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  43d324:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  43d328:	e0bffd17 	ldw	r2,-12(fp)
  43d32c:	10800283 	ldbu	r2,10(r2)
  43d330:	10803fcc 	andi	r2,r2,255
  43d334:	10003226 	beq	r2,zero,43d400 <OSSemPendAbort+0x170>
        nbr_tasks = 0;
  43d338:	e03ff605 	stb	zero,-40(fp)
        switch (opt) {
  43d33c:	e0bffe03 	ldbu	r2,-8(fp)
  43d340:	10800060 	cmpeqi	r2,r2,1
  43d344:	10000a1e 	bne	r2,zero,43d370 <OSSemPendAbort+0xe0>
  43d348:	00000f06 	br	43d388 <OSSemPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  43d34c:	e13ffd17 	ldw	r4,-12(fp)
  43d350:	000b883a 	mov	r5,zero
  43d354:	01800044 	movi	r6,1
  43d358:	01c00084 	movi	r7,2
  43d35c:	043798c0 	call	43798c <OS_EventTaskRdy>
                     nbr_tasks++;
  43d360:	e0bff603 	ldbu	r2,-40(fp)
  43d364:	10800044 	addi	r2,r2,1
  43d368:	e0bff605 	stb	r2,-40(fp)
  43d36c:	00000106 	br	43d374 <OSSemPendAbort+0xe4>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  43d370:	0001883a 	nop
  43d374:	e0bffd17 	ldw	r2,-12(fp)
  43d378:	10800283 	ldbu	r2,10(r2)
  43d37c:	10803fcc 	andi	r2,r2,255
  43d380:	103ff21e 	bne	r2,zero,43d34c <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  43d384:	00000906 	br	43d3ac <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  43d388:	e13ffd17 	ldw	r4,-12(fp)
  43d38c:	000b883a 	mov	r5,zero
  43d390:	01800044 	movi	r6,1
  43d394:	01c00084 	movi	r7,2
  43d398:	043798c0 	call	43798c <OS_EventTaskRdy>
                 nbr_tasks++;
  43d39c:	e0bff603 	ldbu	r2,-40(fp)
  43d3a0:	10800044 	addi	r2,r2,1
  43d3a4:	e0bff605 	stb	r2,-40(fp)
                 break;
  43d3a8:	0001883a 	nop
  43d3ac:	e0bff717 	ldw	r2,-36(fp)
  43d3b0:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43d3b4:	0005303a 	rdctl	r2,status
  43d3b8:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43d3bc:	e0fffa17 	ldw	r3,-24(fp)
  43d3c0:	00bfff84 	movi	r2,-2
  43d3c4:	1884703a 	and	r2,r3,r2
  43d3c8:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43d3cc:	e0bff917 	ldw	r2,-28(fp)
  43d3d0:	1080004c 	andi	r2,r2,1
  43d3d4:	e0fffa17 	ldw	r3,-24(fp)
  43d3d8:	1884b03a 	or	r2,r3,r2
  43d3dc:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  43d3e0:	e0bffa17 	ldw	r2,-24(fp)
  43d3e4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  43d3e8:	04383a80 	call	4383a8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  43d3ec:	e0bfff17 	ldw	r2,-4(fp)
  43d3f0:	00c00384 	movi	r3,14
  43d3f4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  43d3f8:	e0bff603 	ldbu	r2,-40(fp)
  43d3fc:	00001206 	br	43d448 <OSSemPendAbort+0x1b8>
  43d400:	e0bff717 	ldw	r2,-36(fp)
  43d404:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43d408:	0005303a 	rdctl	r2,status
  43d40c:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43d410:	e0fffc17 	ldw	r3,-16(fp)
  43d414:	00bfff84 	movi	r2,-2
  43d418:	1884703a 	and	r2,r3,r2
  43d41c:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43d420:	e0bffb17 	ldw	r2,-20(fp)
  43d424:	1080004c 	andi	r2,r2,1
  43d428:	e0fffc17 	ldw	r3,-16(fp)
  43d42c:	1884b03a 	or	r2,r3,r2
  43d430:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43d434:	e0bffc17 	ldw	r2,-16(fp)
  43d438:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  43d43c:	e0bfff17 	ldw	r2,-4(fp)
  43d440:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  43d444:	0005883a 	mov	r2,zero
}
  43d448:	e037883a 	mov	sp,fp
  43d44c:	dfc00117 	ldw	ra,4(sp)
  43d450:	df000017 	ldw	fp,0(sp)
  43d454:	dec00204 	addi	sp,sp,8
  43d458:	f800283a 	ret

0043d45c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  43d45c:	defff504 	addi	sp,sp,-44
  43d460:	dfc00a15 	stw	ra,40(sp)
  43d464:	df000915 	stw	fp,36(sp)
  43d468:	df000904 	addi	fp,sp,36
  43d46c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  43d470:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  43d474:	e0bfff17 	ldw	r2,-4(fp)
  43d478:	1000021e 	bne	r2,zero,43d484 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
  43d47c:	00800104 	movi	r2,4
  43d480:	00005606 	br	43d5dc <OSSemPost+0x180>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  43d484:	e0bfff17 	ldw	r2,-4(fp)
  43d488:	10800003 	ldbu	r2,0(r2)
  43d48c:	10803fcc 	andi	r2,r2,255
  43d490:	108000e0 	cmpeqi	r2,r2,3
  43d494:	1000021e 	bne	r2,zero,43d4a0 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
  43d498:	00800044 	movi	r2,1
  43d49c:	00004f06 	br	43d5dc <OSSemPost+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43d4a0:	0005303a 	rdctl	r2,status
  43d4a4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43d4a8:	e0fff817 	ldw	r3,-32(fp)
  43d4ac:	00bfff84 	movi	r2,-2
  43d4b0:	1884703a 	and	r2,r3,r2
  43d4b4:	1001703a 	wrctl	status,r2
  
  return context;
  43d4b8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  43d4bc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  43d4c0:	e0bfff17 	ldw	r2,-4(fp)
  43d4c4:	10800283 	ldbu	r2,10(r2)
  43d4c8:	10803fcc 	andi	r2,r2,255
  43d4cc:	10001726 	beq	r2,zero,43d52c <OSSemPost+0xd0>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  43d4d0:	e13fff17 	ldw	r4,-4(fp)
  43d4d4:	000b883a 	mov	r5,zero
  43d4d8:	01800044 	movi	r6,1
  43d4dc:	000f883a 	mov	r7,zero
  43d4e0:	043798c0 	call	43798c <OS_EventTaskRdy>
  43d4e4:	e0bff717 	ldw	r2,-36(fp)
  43d4e8:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43d4ec:	0005303a 	rdctl	r2,status
  43d4f0:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43d4f4:	e0fffa17 	ldw	r3,-24(fp)
  43d4f8:	00bfff84 	movi	r2,-2
  43d4fc:	1884703a 	and	r2,r3,r2
  43d500:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43d504:	e0bff917 	ldw	r2,-28(fp)
  43d508:	1080004c 	andi	r2,r2,1
  43d50c:	e0fffa17 	ldw	r3,-24(fp)
  43d510:	1884b03a 	or	r2,r3,r2
  43d514:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  43d518:	e0bffa17 	ldw	r2,-24(fp)
  43d51c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  43d520:	04383a80 	call	4383a8 <OS_Sched>
        return (OS_ERR_NONE);
  43d524:	0005883a 	mov	r2,zero
  43d528:	00002c06 	br	43d5dc <OSSemPost+0x180>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  43d52c:	e0bfff17 	ldw	r2,-4(fp)
  43d530:	1080020b 	ldhu	r2,8(r2)
  43d534:	10ffffcc 	andi	r3,r2,65535
  43d538:	00bfffd4 	movui	r2,65535
  43d53c:	18801726 	beq	r3,r2,43d59c <OSSemPost+0x140>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  43d540:	e0bfff17 	ldw	r2,-4(fp)
  43d544:	1080020b 	ldhu	r2,8(r2)
  43d548:	10800044 	addi	r2,r2,1
  43d54c:	1007883a 	mov	r3,r2
  43d550:	e0bfff17 	ldw	r2,-4(fp)
  43d554:	10c0020d 	sth	r3,8(r2)
  43d558:	e0bff717 	ldw	r2,-36(fp)
  43d55c:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43d560:	0005303a 	rdctl	r2,status
  43d564:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43d568:	e0fffc17 	ldw	r3,-16(fp)
  43d56c:	00bfff84 	movi	r2,-2
  43d570:	1884703a 	and	r2,r3,r2
  43d574:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43d578:	e0bffb17 	ldw	r2,-20(fp)
  43d57c:	1080004c 	andi	r2,r2,1
  43d580:	e0fffc17 	ldw	r3,-16(fp)
  43d584:	1884b03a 	or	r2,r3,r2
  43d588:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43d58c:	e0bffc17 	ldw	r2,-16(fp)
  43d590:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  43d594:	0005883a 	mov	r2,zero
  43d598:	00001006 	br	43d5dc <OSSemPost+0x180>
  43d59c:	e0bff717 	ldw	r2,-36(fp)
  43d5a0:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43d5a4:	0005303a 	rdctl	r2,status
  43d5a8:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43d5ac:	e0fffe17 	ldw	r3,-8(fp)
  43d5b0:	00bfff84 	movi	r2,-2
  43d5b4:	1884703a 	and	r2,r3,r2
  43d5b8:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43d5bc:	e0bffd17 	ldw	r2,-12(fp)
  43d5c0:	1080004c 	andi	r2,r2,1
  43d5c4:	e0fffe17 	ldw	r3,-8(fp)
  43d5c8:	1884b03a 	or	r2,r3,r2
  43d5cc:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  43d5d0:	e0bffe17 	ldw	r2,-8(fp)
  43d5d4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  43d5d8:	00800c84 	movi	r2,50
}
  43d5dc:	e037883a 	mov	sp,fp
  43d5e0:	dfc00117 	ldw	ra,4(sp)
  43d5e4:	df000017 	ldw	fp,0(sp)
  43d5e8:	dec00204 	addi	sp,sp,8
  43d5ec:	f800283a 	ret

0043d5f0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  43d5f0:	defff604 	addi	sp,sp,-40
  43d5f4:	df000915 	stw	fp,36(sp)
  43d5f8:	df000904 	addi	fp,sp,36
  43d5fc:	e13ffe15 	stw	r4,-8(fp)
  43d600:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  43d604:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  43d608:	e0bffe17 	ldw	r2,-8(fp)
  43d60c:	1000021e 	bne	r2,zero,43d618 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  43d610:	00800104 	movi	r2,4
  43d614:	00004306 	br	43d724 <OSSemQuery+0x134>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  43d618:	e0bfff17 	ldw	r2,-4(fp)
  43d61c:	1000021e 	bne	r2,zero,43d628 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  43d620:	00800244 	movi	r2,9
  43d624:	00003f06 	br	43d724 <OSSemQuery+0x134>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  43d628:	e0bffe17 	ldw	r2,-8(fp)
  43d62c:	10800003 	ldbu	r2,0(r2)
  43d630:	10803fcc 	andi	r2,r2,255
  43d634:	108000e0 	cmpeqi	r2,r2,3
  43d638:	1000021e 	bne	r2,zero,43d644 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  43d63c:	00800044 	movi	r2,1
  43d640:	00003806 	br	43d724 <OSSemQuery+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43d644:	0005303a 	rdctl	r2,status
  43d648:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43d64c:	e0fffb17 	ldw	r3,-20(fp)
  43d650:	00bfff84 	movi	r2,-2
  43d654:	1884703a 	and	r2,r3,r2
  43d658:	1001703a 	wrctl	status,r2
  
  return context;
  43d65c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  43d660:	e0bffa15 	stw	r2,-24(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  43d664:	e0bffe17 	ldw	r2,-8(fp)
  43d668:	10c00283 	ldbu	r3,10(r2)
  43d66c:	e0bfff17 	ldw	r2,-4(fp)
  43d670:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  43d674:	e0bffe17 	ldw	r2,-8(fp)
  43d678:	108002c4 	addi	r2,r2,11
  43d67c:	e0bff715 	stw	r2,-36(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  43d680:	e0bfff17 	ldw	r2,-4(fp)
  43d684:	10800084 	addi	r2,r2,2
  43d688:	e0bff815 	stw	r2,-32(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  43d68c:	e03ff905 	stb	zero,-28(fp)
  43d690:	00000d06 	br	43d6c8 <OSSemQuery+0xd8>
        *pdest++ = *psrc++;
  43d694:	e0bff717 	ldw	r2,-36(fp)
  43d698:	10c00003 	ldbu	r3,0(r2)
  43d69c:	e0bff817 	ldw	r2,-32(fp)
  43d6a0:	10c00005 	stb	r3,0(r2)
  43d6a4:	e0bff817 	ldw	r2,-32(fp)
  43d6a8:	10800044 	addi	r2,r2,1
  43d6ac:	e0bff815 	stw	r2,-32(fp)
  43d6b0:	e0bff717 	ldw	r2,-36(fp)
  43d6b4:	10800044 	addi	r2,r2,1
  43d6b8:	e0bff715 	stw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  43d6bc:	e0bff903 	ldbu	r2,-28(fp)
  43d6c0:	10800044 	addi	r2,r2,1
  43d6c4:	e0bff905 	stb	r2,-28(fp)
  43d6c8:	e0bff903 	ldbu	r2,-28(fp)
  43d6cc:	108000f0 	cmpltui	r2,r2,3
  43d6d0:	103ff01e 	bne	r2,zero,43d694 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  43d6d4:	e0bffe17 	ldw	r2,-8(fp)
  43d6d8:	10c0020b 	ldhu	r3,8(r2)
  43d6dc:	e0bfff17 	ldw	r2,-4(fp)
  43d6e0:	10c0000d 	sth	r3,0(r2)
  43d6e4:	e0bffa17 	ldw	r2,-24(fp)
  43d6e8:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43d6ec:	0005303a 	rdctl	r2,status
  43d6f0:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43d6f4:	e0fffd17 	ldw	r3,-12(fp)
  43d6f8:	00bfff84 	movi	r2,-2
  43d6fc:	1884703a 	and	r2,r3,r2
  43d700:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43d704:	e0bffc17 	ldw	r2,-16(fp)
  43d708:	1080004c 	andi	r2,r2,1
  43d70c:	e0fffd17 	ldw	r3,-12(fp)
  43d710:	1884b03a 	or	r2,r3,r2
  43d714:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43d718:	e0bffd17 	ldw	r2,-12(fp)
  43d71c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  43d720:	0005883a 	mov	r2,zero
}
  43d724:	e037883a 	mov	sp,fp
  43d728:	df000017 	ldw	fp,0(sp)
  43d72c:	dec00104 	addi	sp,sp,4
  43d730:	f800283a 	ret

0043d734 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  43d734:	defff804 	addi	sp,sp,-32
  43d738:	df000715 	stw	fp,28(sp)
  43d73c:	df000704 	addi	fp,sp,28
  43d740:	e13ffd15 	stw	r4,-12(fp)
  43d744:	2805883a 	mov	r2,r5
  43d748:	e1bfff15 	stw	r6,-4(fp)
  43d74c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  43d750:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  43d754:	e0bfff17 	ldw	r2,-4(fp)
  43d758:	10003c26 	beq	r2,zero,43d84c <OSSemSet+0x118>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  43d75c:	e0bffd17 	ldw	r2,-12(fp)
  43d760:	1000041e 	bne	r2,zero,43d774 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  43d764:	e0bfff17 	ldw	r2,-4(fp)
  43d768:	00c00104 	movi	r3,4
  43d76c:	10c00005 	stb	r3,0(r2)
        return;
  43d770:	00003706 	br	43d850 <OSSemSet+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  43d774:	e0bffd17 	ldw	r2,-12(fp)
  43d778:	10800003 	ldbu	r2,0(r2)
  43d77c:	10803fcc 	andi	r2,r2,255
  43d780:	108000e0 	cmpeqi	r2,r2,3
  43d784:	1000041e 	bne	r2,zero,43d798 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
  43d788:	e0bfff17 	ldw	r2,-4(fp)
  43d78c:	00c00044 	movi	r3,1
  43d790:	10c00005 	stb	r3,0(r2)
        return;
  43d794:	00002e06 	br	43d850 <OSSemSet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43d798:	0005303a 	rdctl	r2,status
  43d79c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43d7a0:	e0fffa17 	ldw	r3,-24(fp)
  43d7a4:	00bfff84 	movi	r2,-2
  43d7a8:	1884703a 	and	r2,r3,r2
  43d7ac:	1001703a 	wrctl	status,r2
  
  return context;
  43d7b0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  43d7b4:	e0bff915 	stw	r2,-28(fp)
    *perr = OS_ERR_NONE;
  43d7b8:	e0bfff17 	ldw	r2,-4(fp)
  43d7bc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  43d7c0:	e0bffd17 	ldw	r2,-12(fp)
  43d7c4:	1080020b 	ldhu	r2,8(r2)
  43d7c8:	10bfffcc 	andi	r2,r2,65535
  43d7cc:	10000426 	beq	r2,zero,43d7e0 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  43d7d0:	e0bffd17 	ldw	r2,-12(fp)
  43d7d4:	e0fffe0b 	ldhu	r3,-8(fp)
  43d7d8:	10c0020d 	sth	r3,8(r2)
  43d7dc:	00000b06 	br	43d80c <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  43d7e0:	e0bffd17 	ldw	r2,-12(fp)
  43d7e4:	10800283 	ldbu	r2,10(r2)
  43d7e8:	10803fcc 	andi	r2,r2,255
  43d7ec:	1000041e 	bne	r2,zero,43d800 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  43d7f0:	e0bffd17 	ldw	r2,-12(fp)
  43d7f4:	e0fffe0b 	ldhu	r3,-8(fp)
  43d7f8:	10c0020d 	sth	r3,8(r2)
  43d7fc:	00000306 	br	43d80c <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  43d800:	e0bfff17 	ldw	r2,-4(fp)
  43d804:	00c01244 	movi	r3,73
  43d808:	10c00005 	stb	r3,0(r2)
  43d80c:	e0bff917 	ldw	r2,-28(fp)
  43d810:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43d814:	0005303a 	rdctl	r2,status
  43d818:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43d81c:	e0fffc17 	ldw	r3,-16(fp)
  43d820:	00bfff84 	movi	r2,-2
  43d824:	1884703a 	and	r2,r3,r2
  43d828:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43d82c:	e0bffb17 	ldw	r2,-20(fp)
  43d830:	1080004c 	andi	r2,r2,1
  43d834:	e0fffc17 	ldw	r3,-16(fp)
  43d838:	1884b03a 	or	r2,r3,r2
  43d83c:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43d840:	e0bffc17 	ldw	r2,-16(fp)
  43d844:	1001703a 	wrctl	status,r2
  43d848:	00000106 	br	43d850 <OSSemSet+0x11c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  43d84c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
  43d850:	e037883a 	mov	sp,fp
  43d854:	df000017 	ldw	fp,0(sp)
  43d858:	dec00104 	addi	sp,sp,4
  43d85c:	f800283a 	ret

0043d860 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  43d860:	deffed04 	addi	sp,sp,-76
  43d864:	dfc01215 	stw	ra,72(sp)
  43d868:	df001115 	stw	fp,68(sp)
  43d86c:	df001104 	addi	fp,sp,68
  43d870:	2007883a 	mov	r3,r4
  43d874:	2805883a 	mov	r2,r5
  43d878:	e0fffe05 	stb	r3,-8(fp)
  43d87c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  43d880:	e03ff115 	stw	zero,-60(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  43d884:	e0bffe03 	ldbu	r2,-8(fp)
  43d888:	10800530 	cmpltui	r2,r2,20
  43d88c:	1000051e 	bne	r2,zero,43d8a4 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
  43d890:	e0bffe03 	ldbu	r2,-8(fp)
  43d894:	10803fe0 	cmpeqi	r2,r2,255
  43d898:	1000021e 	bne	r2,zero,43d8a4 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
  43d89c:	00800a84 	movi	r2,42
  43d8a0:	00016006 	br	43de24 <OSTaskChangePrio+0x5c4>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  43d8a4:	e0bfff03 	ldbu	r2,-4(fp)
  43d8a8:	10800530 	cmpltui	r2,r2,20
  43d8ac:	1000021e 	bne	r2,zero,43d8b8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  43d8b0:	00800a84 	movi	r2,42
  43d8b4:	00015b06 	br	43de24 <OSTaskChangePrio+0x5c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43d8b8:	0005303a 	rdctl	r2,status
  43d8bc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43d8c0:	e0fff517 	ldw	r3,-44(fp)
  43d8c4:	00bfff84 	movi	r2,-2
  43d8c8:	1884703a 	and	r2,r3,r2
  43d8cc:	1001703a 	wrctl	status,r2
  
  return context;
  43d8d0:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  43d8d4:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  43d8d8:	e0bfff03 	ldbu	r2,-4(fp)
  43d8dc:	00c01174 	movhi	r3,69
  43d8e0:	18ead504 	addi	r3,r3,-21676
  43d8e4:	1085883a 	add	r2,r2,r2
  43d8e8:	1085883a 	add	r2,r2,r2
  43d8ec:	1885883a 	add	r2,r3,r2
  43d8f0:	10800017 	ldw	r2,0(r2)
  43d8f4:	10001126 	beq	r2,zero,43d93c <OSTaskChangePrio+0xdc>
  43d8f8:	e0bff117 	ldw	r2,-60(fp)
  43d8fc:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43d900:	0005303a 	rdctl	r2,status
  43d904:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43d908:	e0fff717 	ldw	r3,-36(fp)
  43d90c:	00bfff84 	movi	r2,-2
  43d910:	1884703a 	and	r2,r3,r2
  43d914:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43d918:	e0bff617 	ldw	r2,-40(fp)
  43d91c:	1080004c 	andi	r2,r2,1
  43d920:	e0fff717 	ldw	r3,-36(fp)
  43d924:	1884b03a 	or	r2,r3,r2
  43d928:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  43d92c:	e0bff717 	ldw	r2,-36(fp)
  43d930:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  43d934:	00800a04 	movi	r2,40
  43d938:	00013a06 	br	43de24 <OSTaskChangePrio+0x5c4>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  43d93c:	e0bffe03 	ldbu	r2,-8(fp)
  43d940:	10803fd8 	cmpnei	r2,r2,255
  43d944:	1000051e 	bne	r2,zero,43d95c <OSTaskChangePrio+0xfc>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  43d948:	00801134 	movhi	r2,68
  43d94c:	109e0e04 	addi	r2,r2,30776
  43d950:	10800017 	ldw	r2,0(r2)
  43d954:	10800c83 	ldbu	r2,50(r2)
  43d958:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  43d95c:	e0bffe03 	ldbu	r2,-8(fp)
  43d960:	00c01174 	movhi	r3,69
  43d964:	18ead504 	addi	r3,r3,-21676
  43d968:	1085883a 	add	r2,r2,r2
  43d96c:	1085883a 	add	r2,r2,r2
  43d970:	1885883a 	add	r2,r3,r2
  43d974:	10800017 	ldw	r2,0(r2)
  43d978:	e0bff215 	stw	r2,-56(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  43d97c:	e0bff217 	ldw	r2,-56(fp)
  43d980:	1000111e 	bne	r2,zero,43d9c8 <OSTaskChangePrio+0x168>
  43d984:	e0bff117 	ldw	r2,-60(fp)
  43d988:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43d98c:	0005303a 	rdctl	r2,status
  43d990:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43d994:	e0fff917 	ldw	r3,-28(fp)
  43d998:	00bfff84 	movi	r2,-2
  43d99c:	1884703a 	and	r2,r3,r2
  43d9a0:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43d9a4:	e0bff817 	ldw	r2,-32(fp)
  43d9a8:	1080004c 	andi	r2,r2,1
  43d9ac:	e0fff917 	ldw	r3,-28(fp)
  43d9b0:	1884b03a 	or	r2,r3,r2
  43d9b4:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  43d9b8:	e0bff917 	ldw	r2,-28(fp)
  43d9bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  43d9c0:	00800a44 	movi	r2,41
  43d9c4:	00011706 	br	43de24 <OSTaskChangePrio+0x5c4>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  43d9c8:	e0bff217 	ldw	r2,-56(fp)
  43d9cc:	10800058 	cmpnei	r2,r2,1
  43d9d0:	1000111e 	bne	r2,zero,43da18 <OSTaskChangePrio+0x1b8>
  43d9d4:	e0bff117 	ldw	r2,-60(fp)
  43d9d8:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43d9dc:	0005303a 	rdctl	r2,status
  43d9e0:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43d9e4:	e0fffb17 	ldw	r3,-20(fp)
  43d9e8:	00bfff84 	movi	r2,-2
  43d9ec:	1884703a 	and	r2,r3,r2
  43d9f0:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43d9f4:	e0bffa17 	ldw	r2,-24(fp)
  43d9f8:	1080004c 	andi	r2,r2,1
  43d9fc:	e0fffb17 	ldw	r3,-20(fp)
  43da00:	1884b03a 	or	r2,r3,r2
  43da04:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  43da08:	e0bffb17 	ldw	r2,-20(fp)
  43da0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  43da10:	008010c4 	movi	r2,67
  43da14:	00010306 	br	43de24 <OSTaskChangePrio+0x5c4>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  43da18:	e0bfff03 	ldbu	r2,-4(fp)
  43da1c:	1004d0fa 	srli	r2,r2,3
  43da20:	e0bff305 	stb	r2,-52(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  43da24:	e0bfff03 	ldbu	r2,-4(fp)
  43da28:	108001cc 	andi	r2,r2,7
  43da2c:	e0bff345 	stb	r2,-51(fp)
    bity_new              = (INT8U)(1 << y_new);
  43da30:	e0bff303 	ldbu	r2,-52(fp)
  43da34:	00c00044 	movi	r3,1
  43da38:	1884983a 	sll	r2,r3,r2
  43da3c:	e0bff385 	stb	r2,-50(fp)
    bitx_new              = (INT8U)(1 << x_new);
  43da40:	e0bff343 	ldbu	r2,-51(fp)
  43da44:	00c00044 	movi	r3,1
  43da48:	1884983a 	sll	r2,r3,r2
  43da4c:	e0bff3c5 	stb	r2,-49(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  43da50:	e0bffe03 	ldbu	r2,-8(fp)
  43da54:	00c01174 	movhi	r3,69
  43da58:	18ead504 	addi	r3,r3,-21676
  43da5c:	1085883a 	add	r2,r2,r2
  43da60:	1085883a 	add	r2,r2,r2
  43da64:	1885883a 	add	r2,r3,r2
  43da68:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  43da6c:	e0bfff03 	ldbu	r2,-4(fp)
  43da70:	00c01174 	movhi	r3,69
  43da74:	18ead504 	addi	r3,r3,-21676
  43da78:	1085883a 	add	r2,r2,r2
  43da7c:	1085883a 	add	r2,r2,r2
  43da80:	1885883a 	add	r2,r3,r2
  43da84:	e0fff217 	ldw	r3,-56(fp)
  43da88:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
  43da8c:	e0bff217 	ldw	r2,-56(fp)
  43da90:	10800d03 	ldbu	r2,52(r2)
  43da94:	e0bff405 	stb	r2,-48(fp)
    bity_old              =  ptcb->OSTCBBitY;
  43da98:	e0bff217 	ldw	r2,-56(fp)
  43da9c:	10800d83 	ldbu	r2,54(r2)
  43daa0:	e0bff445 	stb	r2,-47(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  43daa4:	e0bff217 	ldw	r2,-56(fp)
  43daa8:	10800d43 	ldbu	r2,53(r2)
  43daac:	e0bff485 	stb	r2,-46(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  43dab0:	e0bff403 	ldbu	r2,-48(fp)
  43dab4:	00c01134 	movhi	r3,68
  43dab8:	18de0b44 	addi	r3,r3,30765
  43dabc:	1885883a 	add	r2,r3,r2
  43dac0:	10c00003 	ldbu	r3,0(r2)
  43dac4:	e0bff483 	ldbu	r2,-46(fp)
  43dac8:	1884703a 	and	r2,r3,r2
  43dacc:	10803fcc 	andi	r2,r2,255
  43dad0:	10003526 	beq	r2,zero,43dba8 <OSTaskChangePrio+0x348>
         OSRdyTbl[y_old] &= ~bitx_old;
  43dad4:	e0bff403 	ldbu	r2,-48(fp)
  43dad8:	e0fff403 	ldbu	r3,-48(fp)
  43dadc:	01001134 	movhi	r4,68
  43dae0:	211e0b44 	addi	r4,r4,30765
  43dae4:	20c7883a 	add	r3,r4,r3
  43dae8:	18c00003 	ldbu	r3,0(r3)
  43daec:	1809883a 	mov	r4,r3
  43daf0:	e0fff483 	ldbu	r3,-46(fp)
  43daf4:	00c6303a 	nor	r3,zero,r3
  43daf8:	20c6703a 	and	r3,r4,r3
  43dafc:	01001134 	movhi	r4,68
  43db00:	211e0b44 	addi	r4,r4,30765
  43db04:	2085883a 	add	r2,r4,r2
  43db08:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  43db0c:	e0bff403 	ldbu	r2,-48(fp)
  43db10:	00c01134 	movhi	r3,68
  43db14:	18de0b44 	addi	r3,r3,30765
  43db18:	1885883a 	add	r2,r3,r2
  43db1c:	10800003 	ldbu	r2,0(r2)
  43db20:	10803fcc 	andi	r2,r2,255
  43db24:	10000b1e 	bne	r2,zero,43db54 <OSTaskChangePrio+0x2f4>
             OSRdyGrp &= ~bity_old;
  43db28:	e0bff443 	ldbu	r2,-47(fp)
  43db2c:	0084303a 	nor	r2,zero,r2
  43db30:	1007883a 	mov	r3,r2
  43db34:	00801134 	movhi	r2,68
  43db38:	109e0b04 	addi	r2,r2,30764
  43db3c:	10800003 	ldbu	r2,0(r2)
  43db40:	1884703a 	and	r2,r3,r2
  43db44:	1007883a 	mov	r3,r2
  43db48:	00801134 	movhi	r2,68
  43db4c:	109e0b04 	addi	r2,r2,30764
  43db50:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  43db54:	00801134 	movhi	r2,68
  43db58:	109e0b04 	addi	r2,r2,30764
  43db5c:	10c00003 	ldbu	r3,0(r2)
  43db60:	e0bff383 	ldbu	r2,-50(fp)
  43db64:	1884b03a 	or	r2,r3,r2
  43db68:	1007883a 	mov	r3,r2
  43db6c:	00801134 	movhi	r2,68
  43db70:	109e0b04 	addi	r2,r2,30764
  43db74:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  43db78:	e0bff303 	ldbu	r2,-52(fp)
  43db7c:	e0fff303 	ldbu	r3,-52(fp)
  43db80:	01001134 	movhi	r4,68
  43db84:	211e0b44 	addi	r4,r4,30765
  43db88:	20c7883a 	add	r3,r4,r3
  43db8c:	19000003 	ldbu	r4,0(r3)
  43db90:	e0fff3c3 	ldbu	r3,-49(fp)
  43db94:	20c6b03a 	or	r3,r4,r3
  43db98:	01001134 	movhi	r4,68
  43db9c:	211e0b44 	addi	r4,r4,30765
  43dba0:	2085883a 	add	r2,r4,r2
  43dba4:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  43dba8:	e0bff217 	ldw	r2,-56(fp)
  43dbac:	10800717 	ldw	r2,28(r2)
  43dbb0:	e0bfef15 	stw	r2,-68(fp)
    if (pevent != (OS_EVENT *)0) {
  43dbb4:	e0bfef17 	ldw	r2,-68(fp)
  43dbb8:	10003126 	beq	r2,zero,43dc80 <OSTaskChangePrio+0x420>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  43dbbc:	e0bff403 	ldbu	r2,-48(fp)
  43dbc0:	e0fff403 	ldbu	r3,-48(fp)
  43dbc4:	e13fef17 	ldw	r4,-68(fp)
  43dbc8:	20c7883a 	add	r3,r4,r3
  43dbcc:	18c00204 	addi	r3,r3,8
  43dbd0:	18c000c3 	ldbu	r3,3(r3)
  43dbd4:	1809883a 	mov	r4,r3
  43dbd8:	e0fff483 	ldbu	r3,-46(fp)
  43dbdc:	00c6303a 	nor	r3,zero,r3
  43dbe0:	20c6703a 	and	r3,r4,r3
  43dbe4:	e13fef17 	ldw	r4,-68(fp)
  43dbe8:	2085883a 	add	r2,r4,r2
  43dbec:	10800204 	addi	r2,r2,8
  43dbf0:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  43dbf4:	e0bff403 	ldbu	r2,-48(fp)
  43dbf8:	e0ffef17 	ldw	r3,-68(fp)
  43dbfc:	1885883a 	add	r2,r3,r2
  43dc00:	10800204 	addi	r2,r2,8
  43dc04:	108000c3 	ldbu	r2,3(r2)
  43dc08:	10803fcc 	andi	r2,r2,255
  43dc0c:	1000091e 	bne	r2,zero,43dc34 <OSTaskChangePrio+0x3d4>
            pevent->OSEventGrp    &= ~bity_old;
  43dc10:	e0bfef17 	ldw	r2,-68(fp)
  43dc14:	10800283 	ldbu	r2,10(r2)
  43dc18:	1007883a 	mov	r3,r2
  43dc1c:	e0bff443 	ldbu	r2,-47(fp)
  43dc20:	0084303a 	nor	r2,zero,r2
  43dc24:	1884703a 	and	r2,r3,r2
  43dc28:	1007883a 	mov	r3,r2
  43dc2c:	e0bfef17 	ldw	r2,-68(fp)
  43dc30:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  43dc34:	e0bfef17 	ldw	r2,-68(fp)
  43dc38:	10c00283 	ldbu	r3,10(r2)
  43dc3c:	e0bff383 	ldbu	r2,-50(fp)
  43dc40:	1884b03a 	or	r2,r3,r2
  43dc44:	1007883a 	mov	r3,r2
  43dc48:	e0bfef17 	ldw	r2,-68(fp)
  43dc4c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  43dc50:	e0bff303 	ldbu	r2,-52(fp)
  43dc54:	e0fff303 	ldbu	r3,-52(fp)
  43dc58:	e13fef17 	ldw	r4,-68(fp)
  43dc5c:	20c7883a 	add	r3,r4,r3
  43dc60:	18c00204 	addi	r3,r3,8
  43dc64:	190000c3 	ldbu	r4,3(r3)
  43dc68:	e0fff3c3 	ldbu	r3,-49(fp)
  43dc6c:	20c6b03a 	or	r3,r4,r3
  43dc70:	e13fef17 	ldw	r4,-68(fp)
  43dc74:	2085883a 	add	r2,r4,r2
  43dc78:	10800204 	addi	r2,r2,8
  43dc7c:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  43dc80:	e0bff217 	ldw	r2,-56(fp)
  43dc84:	10800817 	ldw	r2,32(r2)
  43dc88:	10004026 	beq	r2,zero,43dd8c <OSTaskChangePrio+0x52c>
        pevents =  ptcb->OSTCBEventMultiPtr;
  43dc8c:	e0bff217 	ldw	r2,-56(fp)
  43dc90:	10800817 	ldw	r2,32(r2)
  43dc94:	e0bff015 	stw	r2,-64(fp)
        pevent  = *pevents;
  43dc98:	e0bff017 	ldw	r2,-64(fp)
  43dc9c:	10800017 	ldw	r2,0(r2)
  43dca0:	e0bfef15 	stw	r2,-68(fp)
        while (pevent != (OS_EVENT *)0) {
  43dca4:	00003706 	br	43dd84 <OSTaskChangePrio+0x524>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  43dca8:	e0bff403 	ldbu	r2,-48(fp)
  43dcac:	e0fff403 	ldbu	r3,-48(fp)
  43dcb0:	e13fef17 	ldw	r4,-68(fp)
  43dcb4:	20c7883a 	add	r3,r4,r3
  43dcb8:	18c00204 	addi	r3,r3,8
  43dcbc:	18c000c3 	ldbu	r3,3(r3)
  43dcc0:	1809883a 	mov	r4,r3
  43dcc4:	e0fff483 	ldbu	r3,-46(fp)
  43dcc8:	00c6303a 	nor	r3,zero,r3
  43dccc:	20c6703a 	and	r3,r4,r3
  43dcd0:	e13fef17 	ldw	r4,-68(fp)
  43dcd4:	2085883a 	add	r2,r4,r2
  43dcd8:	10800204 	addi	r2,r2,8
  43dcdc:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  43dce0:	e0bff403 	ldbu	r2,-48(fp)
  43dce4:	e0ffef17 	ldw	r3,-68(fp)
  43dce8:	1885883a 	add	r2,r3,r2
  43dcec:	10800204 	addi	r2,r2,8
  43dcf0:	108000c3 	ldbu	r2,3(r2)
  43dcf4:	10803fcc 	andi	r2,r2,255
  43dcf8:	1000091e 	bne	r2,zero,43dd20 <OSTaskChangePrio+0x4c0>
                pevent->OSEventGrp    &= ~bity_old;
  43dcfc:	e0bfef17 	ldw	r2,-68(fp)
  43dd00:	10800283 	ldbu	r2,10(r2)
  43dd04:	1007883a 	mov	r3,r2
  43dd08:	e0bff443 	ldbu	r2,-47(fp)
  43dd0c:	0084303a 	nor	r2,zero,r2
  43dd10:	1884703a 	and	r2,r3,r2
  43dd14:	1007883a 	mov	r3,r2
  43dd18:	e0bfef17 	ldw	r2,-68(fp)
  43dd1c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  43dd20:	e0bfef17 	ldw	r2,-68(fp)
  43dd24:	10c00283 	ldbu	r3,10(r2)
  43dd28:	e0bff383 	ldbu	r2,-50(fp)
  43dd2c:	1884b03a 	or	r2,r3,r2
  43dd30:	1007883a 	mov	r3,r2
  43dd34:	e0bfef17 	ldw	r2,-68(fp)
  43dd38:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  43dd3c:	e0bff303 	ldbu	r2,-52(fp)
  43dd40:	e0fff303 	ldbu	r3,-52(fp)
  43dd44:	e13fef17 	ldw	r4,-68(fp)
  43dd48:	20c7883a 	add	r3,r4,r3
  43dd4c:	18c00204 	addi	r3,r3,8
  43dd50:	190000c3 	ldbu	r4,3(r3)
  43dd54:	e0fff3c3 	ldbu	r3,-49(fp)
  43dd58:	20c6b03a 	or	r3,r4,r3
  43dd5c:	e13fef17 	ldw	r4,-68(fp)
  43dd60:	2085883a 	add	r2,r4,r2
  43dd64:	10800204 	addi	r2,r2,8
  43dd68:	10c000c5 	stb	r3,3(r2)
            pevents++;
  43dd6c:	e0bff017 	ldw	r2,-64(fp)
  43dd70:	10800104 	addi	r2,r2,4
  43dd74:	e0bff015 	stw	r2,-64(fp)
            pevent                     = *pevents;
  43dd78:	e0bff017 	ldw	r2,-64(fp)
  43dd7c:	10800017 	ldw	r2,0(r2)
  43dd80:	e0bfef15 	stw	r2,-68(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  43dd84:	e0bfef17 	ldw	r2,-68(fp)
  43dd88:	103fc71e 	bne	r2,zero,43dca8 <OSTaskChangePrio+0x448>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  43dd8c:	e0bff217 	ldw	r2,-56(fp)
  43dd90:	e0ffff03 	ldbu	r3,-4(fp)
  43dd94:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
  43dd98:	e0bff217 	ldw	r2,-56(fp)
  43dd9c:	e0fff303 	ldbu	r3,-52(fp)
  43dda0:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
  43dda4:	e0bff217 	ldw	r2,-56(fp)
  43dda8:	e0fff343 	ldbu	r3,-51(fp)
  43ddac:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
  43ddb0:	e0bff217 	ldw	r2,-56(fp)
  43ddb4:	e0fff383 	ldbu	r3,-50(fp)
  43ddb8:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
  43ddbc:	e0bff217 	ldw	r2,-56(fp)
  43ddc0:	e0fff3c3 	ldbu	r3,-49(fp)
  43ddc4:	10c00d45 	stb	r3,53(r2)
  43ddc8:	e0bff117 	ldw	r2,-60(fp)
  43ddcc:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43ddd0:	0005303a 	rdctl	r2,status
  43ddd4:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43ddd8:	e0fffd17 	ldw	r3,-12(fp)
  43dddc:	00bfff84 	movi	r2,-2
  43dde0:	1884703a 	and	r2,r3,r2
  43dde4:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43dde8:	e0bffc17 	ldw	r2,-16(fp)
  43ddec:	1080004c 	andi	r2,r2,1
  43ddf0:	e0fffd17 	ldw	r3,-12(fp)
  43ddf4:	1884b03a 	or	r2,r3,r2
  43ddf8:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43ddfc:	e0bffd17 	ldw	r2,-12(fp)
  43de00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  43de04:	00801134 	movhi	r2,68
  43de08:	109dff44 	addi	r2,r2,30717
  43de0c:	10800003 	ldbu	r2,0(r2)
  43de10:	10803fcc 	andi	r2,r2,255
  43de14:	10800058 	cmpnei	r2,r2,1
  43de18:	1000011e 	bne	r2,zero,43de20 <OSTaskChangePrio+0x5c0>
        OS_Sched();                                         /* Find new highest priority task          */
  43de1c:	04383a80 	call	4383a8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  43de20:	0005883a 	mov	r2,zero
}
  43de24:	e037883a 	mov	sp,fp
  43de28:	dfc00117 	ldw	ra,4(sp)
  43de2c:	df000017 	ldw	fp,0(sp)
  43de30:	dec00204 	addi	sp,sp,8
  43de34:	f800283a 	ret

0043de38 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  43de38:	deffea04 	addi	sp,sp,-88
  43de3c:	dfc01515 	stw	ra,84(sp)
  43de40:	df001415 	stw	fp,80(sp)
  43de44:	df001404 	addi	fp,sp,80
  43de48:	e13ffc15 	stw	r4,-16(fp)
  43de4c:	e17ffd15 	stw	r5,-12(fp)
  43de50:	e1bffe15 	stw	r6,-8(fp)
  43de54:	3805883a 	mov	r2,r7
  43de58:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  43de5c:	e03fef15 	stw	zero,-68(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  43de60:	e0bfff03 	ldbu	r2,-4(fp)
  43de64:	10800570 	cmpltui	r2,r2,21
  43de68:	1000021e 	bne	r2,zero,43de74 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  43de6c:	00800a84 	movi	r2,42
  43de70:	00008706 	br	43e090 <OSTaskCreate+0x258>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43de74:	0005303a 	rdctl	r2,status
  43de78:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43de7c:	e0fff217 	ldw	r3,-56(fp)
  43de80:	00bfff84 	movi	r2,-2
  43de84:	1884703a 	and	r2,r3,r2
  43de88:	1001703a 	wrctl	status,r2
  
  return context;
  43de8c:	e0bff217 	ldw	r2,-56(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  43de90:	e0bfef15 	stw	r2,-68(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  43de94:	00801134 	movhi	r2,68
  43de98:	109e0d04 	addi	r2,r2,30772
  43de9c:	10800003 	ldbu	r2,0(r2)
  43dea0:	10803fcc 	andi	r2,r2,255
  43dea4:	10001126 	beq	r2,zero,43deec <OSTaskCreate+0xb4>
  43dea8:	e0bfef17 	ldw	r2,-68(fp)
  43deac:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43deb0:	0005303a 	rdctl	r2,status
  43deb4:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43deb8:	e0fff417 	ldw	r3,-48(fp)
  43debc:	00bfff84 	movi	r2,-2
  43dec0:	1884703a 	and	r2,r3,r2
  43dec4:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43dec8:	e0bff317 	ldw	r2,-52(fp)
  43decc:	1080004c 	andi	r2,r2,1
  43ded0:	e0fff417 	ldw	r3,-48(fp)
  43ded4:	1884b03a 	or	r2,r3,r2
  43ded8:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
  43dedc:	e0bff417 	ldw	r2,-48(fp)
  43dee0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  43dee4:	00800f04 	movi	r2,60
  43dee8:	00006906 	br	43e090 <OSTaskCreate+0x258>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  43deec:	e0bfff03 	ldbu	r2,-4(fp)
  43def0:	00c01174 	movhi	r3,69
  43def4:	18ead504 	addi	r3,r3,-21676
  43def8:	1085883a 	add	r2,r2,r2
  43defc:	1085883a 	add	r2,r2,r2
  43df00:	1885883a 	add	r2,r3,r2
  43df04:	10800017 	ldw	r2,0(r2)
  43df08:	1000511e 	bne	r2,zero,43e050 <OSTaskCreate+0x218>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  43df0c:	e0bfff03 	ldbu	r2,-4(fp)
  43df10:	00c01174 	movhi	r3,69
  43df14:	18ead504 	addi	r3,r3,-21676
  43df18:	1085883a 	add	r2,r2,r2
  43df1c:	1085883a 	add	r2,r2,r2
  43df20:	1885883a 	add	r2,r3,r2
  43df24:	00c00044 	movi	r3,1
  43df28:	10c00015 	stw	r3,0(r2)
  43df2c:	e0bfef17 	ldw	r2,-68(fp)
  43df30:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43df34:	0005303a 	rdctl	r2,status
  43df38:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43df3c:	e0fff617 	ldw	r3,-40(fp)
  43df40:	00bfff84 	movi	r2,-2
  43df44:	1884703a 	and	r2,r3,r2
  43df48:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43df4c:	e0bff517 	ldw	r2,-44(fp)
  43df50:	1080004c 	andi	r2,r2,1
  43df54:	e0fff617 	ldw	r3,-40(fp)
  43df58:	1884b03a 	or	r2,r3,r2
  43df5c:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  43df60:	e0bff617 	ldw	r2,-40(fp)
  43df64:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  43df68:	e13ffc17 	ldw	r4,-16(fp)
  43df6c:	e17ffd17 	ldw	r5,-12(fp)
  43df70:	e1bffe17 	ldw	r6,-8(fp)
  43df74:	000f883a 	mov	r7,zero
  43df78:	04421640 	call	442164 <OSTaskStkInit>
  43df7c:	e0bff015 	stw	r2,-64(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  43df80:	e0bfff03 	ldbu	r2,-4(fp)
  43df84:	d8000015 	stw	zero,0(sp)
  43df88:	d8000115 	stw	zero,4(sp)
  43df8c:	d8000215 	stw	zero,8(sp)
  43df90:	1009883a 	mov	r4,r2
  43df94:	e17ff017 	ldw	r5,-64(fp)
  43df98:	000d883a 	mov	r6,zero
  43df9c:	000f883a 	mov	r7,zero
  43dfa0:	04388240 	call	438824 <OS_TCBInit>
  43dfa4:	e0bff105 	stb	r2,-60(fp)
        if (err == OS_ERR_NONE) {
  43dfa8:	e0bff103 	ldbu	r2,-60(fp)
  43dfac:	1000081e 	bne	r2,zero,43dfd0 <OSTaskCreate+0x198>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  43dfb0:	00801134 	movhi	r2,68
  43dfb4:	109dff44 	addi	r2,r2,30717
  43dfb8:	10800003 	ldbu	r2,0(r2)
  43dfbc:	10803fcc 	andi	r2,r2,255
  43dfc0:	10800058 	cmpnei	r2,r2,1
  43dfc4:	1000201e 	bne	r2,zero,43e048 <OSTaskCreate+0x210>
                OS_Sched();
  43dfc8:	04383a80 	call	4383a8 <OS_Sched>
  43dfcc:	00001e06 	br	43e048 <OSTaskCreate+0x210>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43dfd0:	0005303a 	rdctl	r2,status
  43dfd4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43dfd8:	e0fff717 	ldw	r3,-36(fp)
  43dfdc:	00bfff84 	movi	r2,-2
  43dfe0:	1884703a 	and	r2,r3,r2
  43dfe4:	1001703a 	wrctl	status,r2
  
  return context;
  43dfe8:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  43dfec:	e0bfef15 	stw	r2,-68(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  43dff0:	e0bfff03 	ldbu	r2,-4(fp)
  43dff4:	00c01174 	movhi	r3,69
  43dff8:	18ead504 	addi	r3,r3,-21676
  43dffc:	1085883a 	add	r2,r2,r2
  43e000:	1085883a 	add	r2,r2,r2
  43e004:	1885883a 	add	r2,r3,r2
  43e008:	10000015 	stw	zero,0(r2)
  43e00c:	e0bfef17 	ldw	r2,-68(fp)
  43e010:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43e014:	0005303a 	rdctl	r2,status
  43e018:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43e01c:	e0fff917 	ldw	r3,-28(fp)
  43e020:	00bfff84 	movi	r2,-2
  43e024:	1884703a 	and	r2,r3,r2
  43e028:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43e02c:	e0bff817 	ldw	r2,-32(fp)
  43e030:	1080004c 	andi	r2,r2,1
  43e034:	e0fff917 	ldw	r3,-28(fp)
  43e038:	1884b03a 	or	r2,r3,r2
  43e03c:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  43e040:	e0bff917 	ldw	r2,-28(fp)
  43e044:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  43e048:	e0bff103 	ldbu	r2,-60(fp)
  43e04c:	00001006 	br	43e090 <OSTaskCreate+0x258>
  43e050:	e0bfef17 	ldw	r2,-68(fp)
  43e054:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43e058:	0005303a 	rdctl	r2,status
  43e05c:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43e060:	e0fffb17 	ldw	r3,-20(fp)
  43e064:	00bfff84 	movi	r2,-2
  43e068:	1884703a 	and	r2,r3,r2
  43e06c:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43e070:	e0bffa17 	ldw	r2,-24(fp)
  43e074:	1080004c 	andi	r2,r2,1
  43e078:	e0fffb17 	ldw	r3,-20(fp)
  43e07c:	1884b03a 	or	r2,r3,r2
  43e080:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  43e084:	e0bffb17 	ldw	r2,-20(fp)
  43e088:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  43e08c:	00800a04 	movi	r2,40
}
  43e090:	e037883a 	mov	sp,fp
  43e094:	dfc00117 	ldw	ra,4(sp)
  43e098:	df000017 	ldw	fp,0(sp)
  43e09c:	dec00204 	addi	sp,sp,8
  43e0a0:	f800283a 	ret

0043e0a4 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  43e0a4:	deffe804 	addi	sp,sp,-96
  43e0a8:	dfc01715 	stw	ra,92(sp)
  43e0ac:	df001615 	stw	fp,88(sp)
  43e0b0:	df001604 	addi	fp,sp,88
  43e0b4:	e13ffa15 	stw	r4,-24(fp)
  43e0b8:	e17ffb15 	stw	r5,-20(fp)
  43e0bc:	e1bffc15 	stw	r6,-16(fp)
  43e0c0:	3805883a 	mov	r2,r7
  43e0c4:	e1000217 	ldw	r4,8(fp)
  43e0c8:	e0c00617 	ldw	r3,24(fp)
  43e0cc:	e0bffd05 	stb	r2,-12(fp)
  43e0d0:	e13ffe0d 	sth	r4,-8(fp)
  43e0d4:	e0ffff0d 	sth	r3,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  43e0d8:	e03fed15 	stw	zero,-76(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  43e0dc:	e0bffd03 	ldbu	r2,-12(fp)
  43e0e0:	10800570 	cmpltui	r2,r2,21
  43e0e4:	1000021e 	bne	r2,zero,43e0f0 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  43e0e8:	00800a84 	movi	r2,42
  43e0ec:	00009106 	br	43e334 <OSTaskCreateExt+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43e0f0:	0005303a 	rdctl	r2,status
  43e0f4:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43e0f8:	e0fff017 	ldw	r3,-64(fp)
  43e0fc:	00bfff84 	movi	r2,-2
  43e100:	1884703a 	and	r2,r3,r2
  43e104:	1001703a 	wrctl	status,r2
  
  return context;
  43e108:	e0bff017 	ldw	r2,-64(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  43e10c:	e0bfed15 	stw	r2,-76(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  43e110:	00801134 	movhi	r2,68
  43e114:	109e0d04 	addi	r2,r2,30772
  43e118:	10800003 	ldbu	r2,0(r2)
  43e11c:	10803fcc 	andi	r2,r2,255
  43e120:	10001126 	beq	r2,zero,43e168 <OSTaskCreateExt+0xc4>
  43e124:	e0bfed17 	ldw	r2,-76(fp)
  43e128:	e0bff115 	stw	r2,-60(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43e12c:	0005303a 	rdctl	r2,status
  43e130:	e0bff215 	stw	r2,-56(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43e134:	e0fff217 	ldw	r3,-56(fp)
  43e138:	00bfff84 	movi	r2,-2
  43e13c:	1884703a 	and	r2,r3,r2
  43e140:	e0bff215 	stw	r2,-56(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43e144:	e0bff117 	ldw	r2,-60(fp)
  43e148:	1080004c 	andi	r2,r2,1
  43e14c:	e0fff217 	ldw	r3,-56(fp)
  43e150:	1884b03a 	or	r2,r3,r2
  43e154:	e0bff215 	stw	r2,-56(fp)
  
  NIOS2_WRITE_STATUS (status);
  43e158:	e0bff217 	ldw	r2,-56(fp)
  43e15c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  43e160:	00800f04 	movi	r2,60
  43e164:	00007306 	br	43e334 <OSTaskCreateExt+0x290>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  43e168:	e0bffd03 	ldbu	r2,-12(fp)
  43e16c:	00c01174 	movhi	r3,69
  43e170:	18ead504 	addi	r3,r3,-21676
  43e174:	1085883a 	add	r2,r2,r2
  43e178:	1085883a 	add	r2,r2,r2
  43e17c:	1885883a 	add	r2,r3,r2
  43e180:	10800017 	ldw	r2,0(r2)
  43e184:	10005b1e 	bne	r2,zero,43e2f4 <OSTaskCreateExt+0x250>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  43e188:	e0bffd03 	ldbu	r2,-12(fp)
  43e18c:	00c01174 	movhi	r3,69
  43e190:	18ead504 	addi	r3,r3,-21676
  43e194:	1085883a 	add	r2,r2,r2
  43e198:	1085883a 	add	r2,r2,r2
  43e19c:	1885883a 	add	r2,r3,r2
  43e1a0:	00c00044 	movi	r3,1
  43e1a4:	10c00015 	stw	r3,0(r2)
  43e1a8:	e0bfed17 	ldw	r2,-76(fp)
  43e1ac:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43e1b0:	0005303a 	rdctl	r2,status
  43e1b4:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43e1b8:	e0fff417 	ldw	r3,-48(fp)
  43e1bc:	00bfff84 	movi	r2,-2
  43e1c0:	1884703a 	and	r2,r3,r2
  43e1c4:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43e1c8:	e0bff317 	ldw	r2,-52(fp)
  43e1cc:	1080004c 	andi	r2,r2,1
  43e1d0:	e0fff417 	ldw	r3,-48(fp)
  43e1d4:	1884b03a 	or	r2,r3,r2
  43e1d8:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
  43e1dc:	e0bff417 	ldw	r2,-48(fp)
  43e1e0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  43e1e4:	e0bfff0b 	ldhu	r2,-4(fp)
  43e1e8:	e1000317 	ldw	r4,12(fp)
  43e1ec:	e1400417 	ldw	r5,16(fp)
  43e1f0:	100d883a 	mov	r6,r2
  43e1f4:	043f8400 	call	43f840 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  43e1f8:	e0bfff0b 	ldhu	r2,-4(fp)
  43e1fc:	e13ffa17 	ldw	r4,-24(fp)
  43e200:	e17ffb17 	ldw	r5,-20(fp)
  43e204:	e1bffc17 	ldw	r6,-16(fp)
  43e208:	100f883a 	mov	r7,r2
  43e20c:	04421640 	call	442164 <OSTaskStkInit>
  43e210:	e0bfee15 	stw	r2,-72(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  43e214:	e0fffd03 	ldbu	r3,-12(fp)
  43e218:	e0bffe0b 	ldhu	r2,-8(fp)
  43e21c:	e13fff0b 	ldhu	r4,-4(fp)
  43e220:	e1400417 	ldw	r5,16(fp)
  43e224:	d9400015 	stw	r5,0(sp)
  43e228:	e1400517 	ldw	r5,20(fp)
  43e22c:	d9400115 	stw	r5,4(sp)
  43e230:	d9000215 	stw	r4,8(sp)
  43e234:	1809883a 	mov	r4,r3
  43e238:	e17fee17 	ldw	r5,-72(fp)
  43e23c:	e1800317 	ldw	r6,12(fp)
  43e240:	100f883a 	mov	r7,r2
  43e244:	04388240 	call	438824 <OS_TCBInit>
  43e248:	e0bfef05 	stb	r2,-68(fp)
        if (err == OS_ERR_NONE) {
  43e24c:	e0bfef03 	ldbu	r2,-68(fp)
  43e250:	1000081e 	bne	r2,zero,43e274 <OSTaskCreateExt+0x1d0>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  43e254:	00801134 	movhi	r2,68
  43e258:	109dff44 	addi	r2,r2,30717
  43e25c:	10800003 	ldbu	r2,0(r2)
  43e260:	10803fcc 	andi	r2,r2,255
  43e264:	10800058 	cmpnei	r2,r2,1
  43e268:	1000201e 	bne	r2,zero,43e2ec <OSTaskCreateExt+0x248>
                OS_Sched();
  43e26c:	04383a80 	call	4383a8 <OS_Sched>
  43e270:	00001e06 	br	43e2ec <OSTaskCreateExt+0x248>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43e274:	0005303a 	rdctl	r2,status
  43e278:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43e27c:	e0fff517 	ldw	r3,-44(fp)
  43e280:	00bfff84 	movi	r2,-2
  43e284:	1884703a 	and	r2,r3,r2
  43e288:	1001703a 	wrctl	status,r2
  
  return context;
  43e28c:	e0bff517 	ldw	r2,-44(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  43e290:	e0bfed15 	stw	r2,-76(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  43e294:	e0bffd03 	ldbu	r2,-12(fp)
  43e298:	00c01174 	movhi	r3,69
  43e29c:	18ead504 	addi	r3,r3,-21676
  43e2a0:	1085883a 	add	r2,r2,r2
  43e2a4:	1085883a 	add	r2,r2,r2
  43e2a8:	1885883a 	add	r2,r3,r2
  43e2ac:	10000015 	stw	zero,0(r2)
  43e2b0:	e0bfed17 	ldw	r2,-76(fp)
  43e2b4:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43e2b8:	0005303a 	rdctl	r2,status
  43e2bc:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43e2c0:	e0fff717 	ldw	r3,-36(fp)
  43e2c4:	00bfff84 	movi	r2,-2
  43e2c8:	1884703a 	and	r2,r3,r2
  43e2cc:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43e2d0:	e0bff617 	ldw	r2,-40(fp)
  43e2d4:	1080004c 	andi	r2,r2,1
  43e2d8:	e0fff717 	ldw	r3,-36(fp)
  43e2dc:	1884b03a 	or	r2,r3,r2
  43e2e0:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  43e2e4:	e0bff717 	ldw	r2,-36(fp)
  43e2e8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  43e2ec:	e0bfef03 	ldbu	r2,-68(fp)
  43e2f0:	00001006 	br	43e334 <OSTaskCreateExt+0x290>
  43e2f4:	e0bfed17 	ldw	r2,-76(fp)
  43e2f8:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43e2fc:	0005303a 	rdctl	r2,status
  43e300:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43e304:	e0fff917 	ldw	r3,-28(fp)
  43e308:	00bfff84 	movi	r2,-2
  43e30c:	1884703a 	and	r2,r3,r2
  43e310:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43e314:	e0bff817 	ldw	r2,-32(fp)
  43e318:	1080004c 	andi	r2,r2,1
  43e31c:	e0fff917 	ldw	r3,-28(fp)
  43e320:	1884b03a 	or	r2,r3,r2
  43e324:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  43e328:	e0bff917 	ldw	r2,-28(fp)
  43e32c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  43e330:	00800a04 	movi	r2,40
}
  43e334:	e037883a 	mov	sp,fp
  43e338:	dfc00117 	ldw	ra,4(sp)
  43e33c:	df000017 	ldw	fp,0(sp)
  43e340:	dec00204 	addi	sp,sp,8
  43e344:	f800283a 	ret

0043e348 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  43e348:	defff004 	addi	sp,sp,-64
  43e34c:	dfc00f15 	stw	ra,60(sp)
  43e350:	df000e15 	stw	fp,56(sp)
  43e354:	df000e04 	addi	fp,sp,56
  43e358:	2005883a 	mov	r2,r4
  43e35c:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  43e360:	e03ff215 	stw	zero,-56(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  43e364:	00801134 	movhi	r2,68
  43e368:	109e0d04 	addi	r2,r2,30772
  43e36c:	10800003 	ldbu	r2,0(r2)
  43e370:	10803fcc 	andi	r2,r2,255
  43e374:	10000226 	beq	r2,zero,43e380 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
  43e378:	00801004 	movi	r2,64
  43e37c:	00011006 	br	43e7c0 <OSTaskDel+0x478>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  43e380:	e0bfff03 	ldbu	r2,-4(fp)
  43e384:	10800518 	cmpnei	r2,r2,20
  43e388:	1000021e 	bne	r2,zero,43e394 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
  43e38c:	00800f84 	movi	r2,62
  43e390:	00010b06 	br	43e7c0 <OSTaskDel+0x478>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  43e394:	e0bfff03 	ldbu	r2,-4(fp)
  43e398:	10800530 	cmpltui	r2,r2,20
  43e39c:	1000051e 	bne	r2,zero,43e3b4 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
  43e3a0:	e0bfff03 	ldbu	r2,-4(fp)
  43e3a4:	10803fe0 	cmpeqi	r2,r2,255
  43e3a8:	1000021e 	bne	r2,zero,43e3b4 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
  43e3ac:	00800a84 	movi	r2,42
  43e3b0:	00010306 	br	43e7c0 <OSTaskDel+0x478>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43e3b4:	0005303a 	rdctl	r2,status
  43e3b8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43e3bc:	e0fff517 	ldw	r3,-44(fp)
  43e3c0:	00bfff84 	movi	r2,-2
  43e3c4:	1884703a 	and	r2,r3,r2
  43e3c8:	1001703a 	wrctl	status,r2
  
  return context;
  43e3cc:	e0bff517 	ldw	r2,-44(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  43e3d0:	e0bff215 	stw	r2,-56(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  43e3d4:	e0bfff03 	ldbu	r2,-4(fp)
  43e3d8:	10803fd8 	cmpnei	r2,r2,255
  43e3dc:	1000051e 	bne	r2,zero,43e3f4 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  43e3e0:	00801134 	movhi	r2,68
  43e3e4:	109e0e04 	addi	r2,r2,30776
  43e3e8:	10800017 	ldw	r2,0(r2)
  43e3ec:	10800c83 	ldbu	r2,50(r2)
  43e3f0:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  43e3f4:	e0bfff03 	ldbu	r2,-4(fp)
  43e3f8:	00c01174 	movhi	r3,69
  43e3fc:	18ead504 	addi	r3,r3,-21676
  43e400:	1085883a 	add	r2,r2,r2
  43e404:	1085883a 	add	r2,r2,r2
  43e408:	1885883a 	add	r2,r3,r2
  43e40c:	10800017 	ldw	r2,0(r2)
  43e410:	e0bff315 	stw	r2,-52(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  43e414:	e0bff317 	ldw	r2,-52(fp)
  43e418:	1000111e 	bne	r2,zero,43e460 <OSTaskDel+0x118>
  43e41c:	e0bff217 	ldw	r2,-56(fp)
  43e420:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43e424:	0005303a 	rdctl	r2,status
  43e428:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43e42c:	e0fff717 	ldw	r3,-36(fp)
  43e430:	00bfff84 	movi	r2,-2
  43e434:	1884703a 	and	r2,r3,r2
  43e438:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43e43c:	e0bff617 	ldw	r2,-40(fp)
  43e440:	1080004c 	andi	r2,r2,1
  43e444:	e0fff717 	ldw	r3,-36(fp)
  43e448:	1884b03a 	or	r2,r3,r2
  43e44c:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  43e450:	e0bff717 	ldw	r2,-36(fp)
  43e454:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  43e458:	008010c4 	movi	r2,67
  43e45c:	0000d806 	br	43e7c0 <OSTaskDel+0x478>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  43e460:	e0bff317 	ldw	r2,-52(fp)
  43e464:	10800058 	cmpnei	r2,r2,1
  43e468:	1000111e 	bne	r2,zero,43e4b0 <OSTaskDel+0x168>
  43e46c:	e0bff217 	ldw	r2,-56(fp)
  43e470:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43e474:	0005303a 	rdctl	r2,status
  43e478:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43e47c:	e0fff917 	ldw	r3,-28(fp)
  43e480:	00bfff84 	movi	r2,-2
  43e484:	1884703a 	and	r2,r3,r2
  43e488:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43e48c:	e0bff817 	ldw	r2,-32(fp)
  43e490:	1080004c 	andi	r2,r2,1
  43e494:	e0fff917 	ldw	r3,-28(fp)
  43e498:	1884b03a 	or	r2,r3,r2
  43e49c:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  43e4a0:	e0bff917 	ldw	r2,-28(fp)
  43e4a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  43e4a8:	00800f44 	movi	r2,61
  43e4ac:	0000c406 	br	43e7c0 <OSTaskDel+0x478>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  43e4b0:	e0bff317 	ldw	r2,-52(fp)
  43e4b4:	10800d03 	ldbu	r2,52(r2)
  43e4b8:	10803fcc 	andi	r2,r2,255
  43e4bc:	e0fff317 	ldw	r3,-52(fp)
  43e4c0:	18c00d03 	ldbu	r3,52(r3)
  43e4c4:	18c03fcc 	andi	r3,r3,255
  43e4c8:	01001134 	movhi	r4,68
  43e4cc:	211e0b44 	addi	r4,r4,30765
  43e4d0:	20c7883a 	add	r3,r4,r3
  43e4d4:	18c00003 	ldbu	r3,0(r3)
  43e4d8:	1809883a 	mov	r4,r3
  43e4dc:	e0fff317 	ldw	r3,-52(fp)
  43e4e0:	18c00d43 	ldbu	r3,53(r3)
  43e4e4:	00c6303a 	nor	r3,zero,r3
  43e4e8:	20c6703a 	and	r3,r4,r3
  43e4ec:	01001134 	movhi	r4,68
  43e4f0:	211e0b44 	addi	r4,r4,30765
  43e4f4:	2085883a 	add	r2,r4,r2
  43e4f8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  43e4fc:	e0bff317 	ldw	r2,-52(fp)
  43e500:	10800d03 	ldbu	r2,52(r2)
  43e504:	10803fcc 	andi	r2,r2,255
  43e508:	00c01134 	movhi	r3,68
  43e50c:	18de0b44 	addi	r3,r3,30765
  43e510:	1885883a 	add	r2,r3,r2
  43e514:	10800003 	ldbu	r2,0(r2)
  43e518:	10803fcc 	andi	r2,r2,255
  43e51c:	10000c1e 	bne	r2,zero,43e550 <OSTaskDel+0x208>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  43e520:	e0bff317 	ldw	r2,-52(fp)
  43e524:	10800d83 	ldbu	r2,54(r2)
  43e528:	0084303a 	nor	r2,zero,r2
  43e52c:	1007883a 	mov	r3,r2
  43e530:	00801134 	movhi	r2,68
  43e534:	109e0b04 	addi	r2,r2,30764
  43e538:	10800003 	ldbu	r2,0(r2)
  43e53c:	1884703a 	and	r2,r3,r2
  43e540:	1007883a 	mov	r3,r2
  43e544:	00801134 	movhi	r2,68
  43e548:	109e0b04 	addi	r2,r2,30764
  43e54c:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  43e550:	e0bff317 	ldw	r2,-52(fp)
  43e554:	10800717 	ldw	r2,28(r2)
  43e558:	10000526 	beq	r2,zero,43e570 <OSTaskDel+0x228>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  43e55c:	e0bff317 	ldw	r2,-52(fp)
  43e560:	10800717 	ldw	r2,28(r2)
  43e564:	e13ff317 	ldw	r4,-52(fp)
  43e568:	100b883a 	mov	r5,r2
  43e56c:	0437d740 	call	437d74 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  43e570:	e0bff317 	ldw	r2,-52(fp)
  43e574:	10800817 	ldw	r2,32(r2)
  43e578:	10000526 	beq	r2,zero,43e590 <OSTaskDel+0x248>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  43e57c:	e0bff317 	ldw	r2,-52(fp)
  43e580:	10800817 	ldw	r2,32(r2)
  43e584:	e13ff317 	ldw	r4,-52(fp)
  43e588:	100b883a 	mov	r5,r2
  43e58c:	0437e240 	call	437e24 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  43e590:	e0bff317 	ldw	r2,-52(fp)
  43e594:	10800a17 	ldw	r2,40(r2)
  43e598:	e0bff415 	stw	r2,-48(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  43e59c:	e0bff417 	ldw	r2,-48(fp)
  43e5a0:	10000226 	beq	r2,zero,43e5ac <OSTaskDel+0x264>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  43e5a4:	e13ff417 	ldw	r4,-48(fp)
  43e5a8:	043aa780 	call	43aa78 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  43e5ac:	e0bff317 	ldw	r2,-52(fp)
  43e5b0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  43e5b4:	e0bff317 	ldw	r2,-52(fp)
  43e5b8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  43e5bc:	e0bff317 	ldw	r2,-52(fp)
  43e5c0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  43e5c4:	00801134 	movhi	r2,68
  43e5c8:	109dff04 	addi	r2,r2,30716
  43e5cc:	10800003 	ldbu	r2,0(r2)
  43e5d0:	10803fcc 	andi	r2,r2,255
  43e5d4:	10803fe0 	cmpeqi	r2,r2,255
  43e5d8:	1000081e 	bne	r2,zero,43e5fc <OSTaskDel+0x2b4>
        OSLockNesting++;
  43e5dc:	00801134 	movhi	r2,68
  43e5e0:	109dff04 	addi	r2,r2,30716
  43e5e4:	10800003 	ldbu	r2,0(r2)
  43e5e8:	10800044 	addi	r2,r2,1
  43e5ec:	1007883a 	mov	r3,r2
  43e5f0:	00801134 	movhi	r2,68
  43e5f4:	109dff04 	addi	r2,r2,30716
  43e5f8:	10c00005 	stb	r3,0(r2)
  43e5fc:	e0bff217 	ldw	r2,-56(fp)
  43e600:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43e604:	0005303a 	rdctl	r2,status
  43e608:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43e60c:	e0fffb17 	ldw	r3,-20(fp)
  43e610:	00bfff84 	movi	r2,-2
  43e614:	1884703a 	and	r2,r3,r2
  43e618:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43e61c:	e0bffa17 	ldw	r2,-24(fp)
  43e620:	1080004c 	andi	r2,r2,1
  43e624:	e0fffb17 	ldw	r3,-20(fp)
  43e628:	1884b03a 	or	r2,r3,r2
  43e62c:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  43e630:	e0bffb17 	ldw	r2,-20(fp)
  43e634:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  43e638:	04379700 	call	437970 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43e63c:	0005303a 	rdctl	r2,status
  43e640:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43e644:	e0fffc17 	ldw	r3,-16(fp)
  43e648:	00bfff84 	movi	r2,-2
  43e64c:	1884703a 	and	r2,r3,r2
  43e650:	1001703a 	wrctl	status,r2
  
  return context;
  43e654:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  43e658:	e0bff215 	stw	r2,-56(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  43e65c:	00801134 	movhi	r2,68
  43e660:	109dff04 	addi	r2,r2,30716
  43e664:	10800003 	ldbu	r2,0(r2)
  43e668:	10803fcc 	andi	r2,r2,255
  43e66c:	10000826 	beq	r2,zero,43e690 <OSTaskDel+0x348>
        OSLockNesting--;
  43e670:	00801134 	movhi	r2,68
  43e674:	109dff04 	addi	r2,r2,30716
  43e678:	10800003 	ldbu	r2,0(r2)
  43e67c:	10bfffc4 	addi	r2,r2,-1
  43e680:	1007883a 	mov	r3,r2
  43e684:	00801134 	movhi	r2,68
  43e688:	109dff04 	addi	r2,r2,30716
  43e68c:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  43e690:	e13ff317 	ldw	r4,-52(fp)
  43e694:	04424780 	call	442478 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  43e698:	00801134 	movhi	r2,68
  43e69c:	109e0744 	addi	r2,r2,30749
  43e6a0:	10800003 	ldbu	r2,0(r2)
  43e6a4:	10bfffc4 	addi	r2,r2,-1
  43e6a8:	1007883a 	mov	r3,r2
  43e6ac:	00801134 	movhi	r2,68
  43e6b0:	109e0744 	addi	r2,r2,30749
  43e6b4:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  43e6b8:	e0bfff03 	ldbu	r2,-4(fp)
  43e6bc:	00c01174 	movhi	r3,69
  43e6c0:	18ead504 	addi	r3,r3,-21676
  43e6c4:	1085883a 	add	r2,r2,r2
  43e6c8:	1085883a 	add	r2,r2,r2
  43e6cc:	1885883a 	add	r2,r3,r2
  43e6d0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  43e6d4:	e0bff317 	ldw	r2,-52(fp)
  43e6d8:	10800617 	ldw	r2,24(r2)
  43e6dc:	1000091e 	bne	r2,zero,43e704 <OSTaskDel+0x3bc>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  43e6e0:	e0bff317 	ldw	r2,-52(fp)
  43e6e4:	10800517 	ldw	r2,20(r2)
  43e6e8:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  43e6ec:	e0bff317 	ldw	r2,-52(fp)
  43e6f0:	10c00517 	ldw	r3,20(r2)
  43e6f4:	00801134 	movhi	r2,68
  43e6f8:	109e0204 	addi	r2,r2,30728
  43e6fc:	10c00015 	stw	r3,0(r2)
  43e700:	00000a06 	br	43e72c <OSTaskDel+0x3e4>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  43e704:	e0bff317 	ldw	r2,-52(fp)
  43e708:	10800617 	ldw	r2,24(r2)
  43e70c:	e0fff317 	ldw	r3,-52(fp)
  43e710:	18c00517 	ldw	r3,20(r3)
  43e714:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  43e718:	e0bff317 	ldw	r2,-52(fp)
  43e71c:	10800517 	ldw	r2,20(r2)
  43e720:	e0fff317 	ldw	r3,-52(fp)
  43e724:	18c00617 	ldw	r3,24(r3)
  43e728:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  43e72c:	00801134 	movhi	r2,68
  43e730:	109e0604 	addi	r2,r2,30744
  43e734:	10c00017 	ldw	r3,0(r2)
  43e738:	e0bff317 	ldw	r2,-52(fp)
  43e73c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  43e740:	00801134 	movhi	r2,68
  43e744:	109e0604 	addi	r2,r2,30744
  43e748:	e0fff317 	ldw	r3,-52(fp)
  43e74c:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  43e750:	e0bff317 	ldw	r2,-52(fp)
  43e754:	00c00fc4 	movi	r3,63
  43e758:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  43e75c:	e0bff317 	ldw	r2,-52(fp)
  43e760:	10001345 	stb	zero,77(r2)
  43e764:	e0bff217 	ldw	r2,-56(fp)
  43e768:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43e76c:	0005303a 	rdctl	r2,status
  43e770:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43e774:	e0fffe17 	ldw	r3,-8(fp)
  43e778:	00bfff84 	movi	r2,-2
  43e77c:	1884703a 	and	r2,r3,r2
  43e780:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43e784:	e0bffd17 	ldw	r2,-12(fp)
  43e788:	1080004c 	andi	r2,r2,1
  43e78c:	e0fffe17 	ldw	r3,-8(fp)
  43e790:	1884b03a 	or	r2,r3,r2
  43e794:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  43e798:	e0bffe17 	ldw	r2,-8(fp)
  43e79c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  43e7a0:	00801134 	movhi	r2,68
  43e7a4:	109dff44 	addi	r2,r2,30717
  43e7a8:	10800003 	ldbu	r2,0(r2)
  43e7ac:	10803fcc 	andi	r2,r2,255
  43e7b0:	10800058 	cmpnei	r2,r2,1
  43e7b4:	1000011e 	bne	r2,zero,43e7bc <OSTaskDel+0x474>
        OS_Sched();                                     /* Find new highest priority task              */
  43e7b8:	04383a80 	call	4383a8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  43e7bc:	0005883a 	mov	r2,zero
}
  43e7c0:	e037883a 	mov	sp,fp
  43e7c4:	dfc00117 	ldw	ra,4(sp)
  43e7c8:	df000017 	ldw	fp,0(sp)
  43e7cc:	dec00204 	addi	sp,sp,8
  43e7d0:	f800283a 	ret

0043e7d4 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  43e7d4:	defff104 	addi	sp,sp,-60
  43e7d8:	df000e15 	stw	fp,56(sp)
  43e7dc:	df000e04 	addi	fp,sp,56
  43e7e0:	2005883a 	mov	r2,r4
  43e7e4:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  43e7e8:	e03ff215 	stw	zero,-56(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  43e7ec:	e0bfff03 	ldbu	r2,-4(fp)
  43e7f0:	10800518 	cmpnei	r2,r2,20
  43e7f4:	1000021e 	bne	r2,zero,43e800 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  43e7f8:	00800f84 	movi	r2,62
  43e7fc:	00007306 	br	43e9cc <OSTaskDelReq+0x1f8>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  43e800:	e0bfff03 	ldbu	r2,-4(fp)
  43e804:	10800530 	cmpltui	r2,r2,20
  43e808:	1000051e 	bne	r2,zero,43e820 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
  43e80c:	e0bfff03 	ldbu	r2,-4(fp)
  43e810:	10803fe0 	cmpeqi	r2,r2,255
  43e814:	1000021e 	bne	r2,zero,43e820 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
  43e818:	00800a84 	movi	r2,42
  43e81c:	00006b06 	br	43e9cc <OSTaskDelReq+0x1f8>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  43e820:	e0bfff03 	ldbu	r2,-4(fp)
  43e824:	10803fd8 	cmpnei	r2,r2,255
  43e828:	10001e1e 	bne	r2,zero,43e8a4 <OSTaskDelReq+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43e82c:	0005303a 	rdctl	r2,status
  43e830:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43e834:	e0fff517 	ldw	r3,-44(fp)
  43e838:	00bfff84 	movi	r2,-2
  43e83c:	1884703a 	and	r2,r3,r2
  43e840:	1001703a 	wrctl	status,r2
  
  return context;
  43e844:	e0bff517 	ldw	r2,-44(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  43e848:	e0bff215 	stw	r2,-56(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  43e84c:	00801134 	movhi	r2,68
  43e850:	109e0e04 	addi	r2,r2,30776
  43e854:	10800017 	ldw	r2,0(r2)
  43e858:	10800dc3 	ldbu	r2,55(r2)
  43e85c:	e0bff305 	stb	r2,-52(fp)
  43e860:	e0bff217 	ldw	r2,-56(fp)
  43e864:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43e868:	0005303a 	rdctl	r2,status
  43e86c:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43e870:	e0fff717 	ldw	r3,-36(fp)
  43e874:	00bfff84 	movi	r2,-2
  43e878:	1884703a 	and	r2,r3,r2
  43e87c:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43e880:	e0bff617 	ldw	r2,-40(fp)
  43e884:	1080004c 	andi	r2,r2,1
  43e888:	e0fff717 	ldw	r3,-36(fp)
  43e88c:	1884b03a 	or	r2,r3,r2
  43e890:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  43e894:	e0bff717 	ldw	r2,-36(fp)
  43e898:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  43e89c:	e0bff303 	ldbu	r2,-52(fp)
  43e8a0:	00004a06 	br	43e9cc <OSTaskDelReq+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43e8a4:	0005303a 	rdctl	r2,status
  43e8a8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43e8ac:	e0fff817 	ldw	r3,-32(fp)
  43e8b0:	00bfff84 	movi	r2,-2
  43e8b4:	1884703a 	and	r2,r3,r2
  43e8b8:	1001703a 	wrctl	status,r2
  
  return context;
  43e8bc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  43e8c0:	e0bff215 	stw	r2,-56(fp)
    ptcb = OSTCBPrioTbl[prio];
  43e8c4:	e0bfff03 	ldbu	r2,-4(fp)
  43e8c8:	00c01174 	movhi	r3,69
  43e8cc:	18ead504 	addi	r3,r3,-21676
  43e8d0:	1085883a 	add	r2,r2,r2
  43e8d4:	1085883a 	add	r2,r2,r2
  43e8d8:	1885883a 	add	r2,r3,r2
  43e8dc:	10800017 	ldw	r2,0(r2)
  43e8e0:	e0bff415 	stw	r2,-48(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  43e8e4:	e0bff417 	ldw	r2,-48(fp)
  43e8e8:	1000111e 	bne	r2,zero,43e930 <OSTaskDelReq+0x15c>
  43e8ec:	e0bff217 	ldw	r2,-56(fp)
  43e8f0:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43e8f4:	0005303a 	rdctl	r2,status
  43e8f8:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43e8fc:	e0fffa17 	ldw	r3,-24(fp)
  43e900:	00bfff84 	movi	r2,-2
  43e904:	1884703a 	and	r2,r3,r2
  43e908:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43e90c:	e0bff917 	ldw	r2,-28(fp)
  43e910:	1080004c 	andi	r2,r2,1
  43e914:	e0fffa17 	ldw	r3,-24(fp)
  43e918:	1884b03a 	or	r2,r3,r2
  43e91c:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  43e920:	e0bffa17 	ldw	r2,-24(fp)
  43e924:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  43e928:	008010c4 	movi	r2,67
  43e92c:	00002706 	br	43e9cc <OSTaskDelReq+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  43e930:	e0bff417 	ldw	r2,-48(fp)
  43e934:	10800058 	cmpnei	r2,r2,1
  43e938:	1000111e 	bne	r2,zero,43e980 <OSTaskDelReq+0x1ac>
  43e93c:	e0bff217 	ldw	r2,-56(fp)
  43e940:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43e944:	0005303a 	rdctl	r2,status
  43e948:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43e94c:	e0fffc17 	ldw	r3,-16(fp)
  43e950:	00bfff84 	movi	r2,-2
  43e954:	1884703a 	and	r2,r3,r2
  43e958:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43e95c:	e0bffb17 	ldw	r2,-20(fp)
  43e960:	1080004c 	andi	r2,r2,1
  43e964:	e0fffc17 	ldw	r3,-16(fp)
  43e968:	1884b03a 	or	r2,r3,r2
  43e96c:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43e970:	e0bffc17 	ldw	r2,-16(fp)
  43e974:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  43e978:	00800f44 	movi	r2,61
  43e97c:	00001306 	br	43e9cc <OSTaskDelReq+0x1f8>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  43e980:	e0bff417 	ldw	r2,-48(fp)
  43e984:	00c00fc4 	movi	r3,63
  43e988:	10c00dc5 	stb	r3,55(r2)
  43e98c:	e0bff217 	ldw	r2,-56(fp)
  43e990:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43e994:	0005303a 	rdctl	r2,status
  43e998:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43e99c:	e0fffe17 	ldw	r3,-8(fp)
  43e9a0:	00bfff84 	movi	r2,-2
  43e9a4:	1884703a 	and	r2,r3,r2
  43e9a8:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43e9ac:	e0bffd17 	ldw	r2,-12(fp)
  43e9b0:	1080004c 	andi	r2,r2,1
  43e9b4:	e0fffe17 	ldw	r3,-8(fp)
  43e9b8:	1884b03a 	or	r2,r3,r2
  43e9bc:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  43e9c0:	e0bffe17 	ldw	r2,-8(fp)
  43e9c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  43e9c8:	0005883a 	mov	r2,zero
}
  43e9cc:	e037883a 	mov	sp,fp
  43e9d0:	df000017 	ldw	fp,0(sp)
  43e9d4:	dec00104 	addi	sp,sp,4
  43e9d8:	f800283a 	ret

0043e9dc <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  43e9dc:	defff104 	addi	sp,sp,-60
  43e9e0:	dfc00e15 	stw	ra,56(sp)
  43e9e4:	df000d15 	stw	fp,52(sp)
  43e9e8:	df000d04 	addi	fp,sp,52
  43e9ec:	2005883a 	mov	r2,r4
  43e9f0:	e17ffe15 	stw	r5,-8(fp)
  43e9f4:	e1bfff15 	stw	r6,-4(fp)
  43e9f8:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  43e9fc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  43ea00:	e0bfff17 	ldw	r2,-4(fp)
  43ea04:	1000021e 	bne	r2,zero,43ea10 <OSTaskNameGet+0x34>
        return (0);
  43ea08:	0005883a 	mov	r2,zero
  43ea0c:	00007906 	br	43ebf4 <OSTaskNameGet+0x218>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  43ea10:	e0bffd03 	ldbu	r2,-12(fp)
  43ea14:	10800570 	cmpltui	r2,r2,21
  43ea18:	1000081e 	bne	r2,zero,43ea3c <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  43ea1c:	e0bffd03 	ldbu	r2,-12(fp)
  43ea20:	10803fe0 	cmpeqi	r2,r2,255
  43ea24:	1000051e 	bne	r2,zero,43ea3c <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  43ea28:	e0bfff17 	ldw	r2,-4(fp)
  43ea2c:	00c00a84 	movi	r3,42
  43ea30:	10c00005 	stb	r3,0(r2)
            return (0);
  43ea34:	0005883a 	mov	r2,zero
  43ea38:	00006e06 	br	43ebf4 <OSTaskNameGet+0x218>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  43ea3c:	e0bffe17 	ldw	r2,-8(fp)
  43ea40:	1000051e 	bne	r2,zero,43ea58 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  43ea44:	e0bfff17 	ldw	r2,-4(fp)
  43ea48:	00c00304 	movi	r3,12
  43ea4c:	10c00005 	stb	r3,0(r2)
        return (0);
  43ea50:	0005883a 	mov	r2,zero
  43ea54:	00006706 	br	43ebf4 <OSTaskNameGet+0x218>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  43ea58:	00801134 	movhi	r2,68
  43ea5c:	109e0d04 	addi	r2,r2,30772
  43ea60:	10800003 	ldbu	r2,0(r2)
  43ea64:	10803fcc 	andi	r2,r2,255
  43ea68:	10000526 	beq	r2,zero,43ea80 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
  43ea6c:	e0bfff17 	ldw	r2,-4(fp)
  43ea70:	00c00444 	movi	r3,17
  43ea74:	10c00005 	stb	r3,0(r2)
        return (0);
  43ea78:	0005883a 	mov	r2,zero
  43ea7c:	00005d06 	br	43ebf4 <OSTaskNameGet+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43ea80:	0005303a 	rdctl	r2,status
  43ea84:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43ea88:	e0fff617 	ldw	r3,-40(fp)
  43ea8c:	00bfff84 	movi	r2,-2
  43ea90:	1884703a 	and	r2,r3,r2
  43ea94:	1001703a 	wrctl	status,r2
  
  return context;
  43ea98:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  43ea9c:	e0bff315 	stw	r2,-52(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  43eaa0:	e0bffd03 	ldbu	r2,-12(fp)
  43eaa4:	10803fd8 	cmpnei	r2,r2,255
  43eaa8:	1000051e 	bne	r2,zero,43eac0 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
  43eaac:	00801134 	movhi	r2,68
  43eab0:	109e0e04 	addi	r2,r2,30776
  43eab4:	10800017 	ldw	r2,0(r2)
  43eab8:	10800c83 	ldbu	r2,50(r2)
  43eabc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  43eac0:	e0bffd03 	ldbu	r2,-12(fp)
  43eac4:	00c01174 	movhi	r3,69
  43eac8:	18ead504 	addi	r3,r3,-21676
  43eacc:	1085883a 	add	r2,r2,r2
  43ead0:	1085883a 	add	r2,r2,r2
  43ead4:	1885883a 	add	r2,r3,r2
  43ead8:	10800017 	ldw	r2,0(r2)
  43eadc:	e0bff415 	stw	r2,-48(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  43eae0:	e0bff417 	ldw	r2,-48(fp)
  43eae4:	1000141e 	bne	r2,zero,43eb38 <OSTaskNameGet+0x15c>
  43eae8:	e0bff317 	ldw	r2,-52(fp)
  43eaec:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43eaf0:	0005303a 	rdctl	r2,status
  43eaf4:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43eaf8:	e0fff817 	ldw	r3,-32(fp)
  43eafc:	00bfff84 	movi	r2,-2
  43eb00:	1884703a 	and	r2,r3,r2
  43eb04:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43eb08:	e0bff717 	ldw	r2,-36(fp)
  43eb0c:	1080004c 	andi	r2,r2,1
  43eb10:	e0fff817 	ldw	r3,-32(fp)
  43eb14:	1884b03a 	or	r2,r3,r2
  43eb18:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  43eb1c:	e0bff817 	ldw	r2,-32(fp)
  43eb20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  43eb24:	e0bfff17 	ldw	r2,-4(fp)
  43eb28:	00c010c4 	movi	r3,67
  43eb2c:	10c00005 	stb	r3,0(r2)
        return (0);
  43eb30:	0005883a 	mov	r2,zero
  43eb34:	00002f06 	br	43ebf4 <OSTaskNameGet+0x218>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  43eb38:	e0bff417 	ldw	r2,-48(fp)
  43eb3c:	10800058 	cmpnei	r2,r2,1
  43eb40:	1000141e 	bne	r2,zero,43eb94 <OSTaskNameGet+0x1b8>
  43eb44:	e0bff317 	ldw	r2,-52(fp)
  43eb48:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43eb4c:	0005303a 	rdctl	r2,status
  43eb50:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43eb54:	e0fffa17 	ldw	r3,-24(fp)
  43eb58:	00bfff84 	movi	r2,-2
  43eb5c:	1884703a 	and	r2,r3,r2
  43eb60:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43eb64:	e0bff917 	ldw	r2,-28(fp)
  43eb68:	1080004c 	andi	r2,r2,1
  43eb6c:	e0fffa17 	ldw	r3,-24(fp)
  43eb70:	1884b03a 	or	r2,r3,r2
  43eb74:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  43eb78:	e0bffa17 	ldw	r2,-24(fp)
  43eb7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  43eb80:	e0bfff17 	ldw	r2,-4(fp)
  43eb84:	00c010c4 	movi	r3,67
  43eb88:	10c00005 	stb	r3,0(r2)
        return (0);
  43eb8c:	0005883a 	mov	r2,zero
  43eb90:	00001806 	br	43ebf4 <OSTaskNameGet+0x218>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  43eb94:	e0bff417 	ldw	r2,-48(fp)
  43eb98:	10801304 	addi	r2,r2,76
  43eb9c:	e13ffe17 	ldw	r4,-8(fp)
  43eba0:	100b883a 	mov	r5,r2
  43eba4:	04385100 	call	438510 <OS_StrCopy>
  43eba8:	e0bff505 	stb	r2,-44(fp)
  43ebac:	e0bff317 	ldw	r2,-52(fp)
  43ebb0:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43ebb4:	0005303a 	rdctl	r2,status
  43ebb8:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43ebbc:	e0fffc17 	ldw	r3,-16(fp)
  43ebc0:	00bfff84 	movi	r2,-2
  43ebc4:	1884703a 	and	r2,r3,r2
  43ebc8:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43ebcc:	e0bffb17 	ldw	r2,-20(fp)
  43ebd0:	1080004c 	andi	r2,r2,1
  43ebd4:	e0fffc17 	ldw	r3,-16(fp)
  43ebd8:	1884b03a 	or	r2,r3,r2
  43ebdc:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43ebe0:	e0bffc17 	ldw	r2,-16(fp)
  43ebe4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  43ebe8:	e0bfff17 	ldw	r2,-4(fp)
  43ebec:	10000005 	stb	zero,0(r2)
    return (len);
  43ebf0:	e0bff503 	ldbu	r2,-44(fp)
}
  43ebf4:	e037883a 	mov	sp,fp
  43ebf8:	dfc00117 	ldw	ra,4(sp)
  43ebfc:	df000017 	ldw	fp,0(sp)
  43ec00:	dec00204 	addi	sp,sp,8
  43ec04:	f800283a 	ret

0043ec08 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  43ec08:	deffef04 	addi	sp,sp,-68
  43ec0c:	dfc01015 	stw	ra,64(sp)
  43ec10:	df000f15 	stw	fp,60(sp)
  43ec14:	df000f04 	addi	fp,sp,60
  43ec18:	2005883a 	mov	r2,r4
  43ec1c:	e17ffe15 	stw	r5,-8(fp)
  43ec20:	e1bfff15 	stw	r6,-4(fp)
  43ec24:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  43ec28:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  43ec2c:	e0bfff17 	ldw	r2,-4(fp)
  43ec30:	10008c26 	beq	r2,zero,43ee64 <OSTaskNameSet+0x25c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  43ec34:	e0bffd03 	ldbu	r2,-12(fp)
  43ec38:	10800570 	cmpltui	r2,r2,21
  43ec3c:	1000071e 	bne	r2,zero,43ec5c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  43ec40:	e0bffd03 	ldbu	r2,-12(fp)
  43ec44:	10803fe0 	cmpeqi	r2,r2,255
  43ec48:	1000041e 	bne	r2,zero,43ec5c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  43ec4c:	e0bfff17 	ldw	r2,-4(fp)
  43ec50:	00c00a84 	movi	r3,42
  43ec54:	10c00005 	stb	r3,0(r2)
            return;
  43ec58:	00008306 	br	43ee68 <OSTaskNameSet+0x260>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  43ec5c:	e0bffe17 	ldw	r2,-8(fp)
  43ec60:	1000041e 	bne	r2,zero,43ec74 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  43ec64:	e0bfff17 	ldw	r2,-4(fp)
  43ec68:	00c00304 	movi	r3,12
  43ec6c:	10c00005 	stb	r3,0(r2)
        return;
  43ec70:	00007d06 	br	43ee68 <OSTaskNameSet+0x260>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  43ec74:	00801134 	movhi	r2,68
  43ec78:	109e0d04 	addi	r2,r2,30772
  43ec7c:	10800003 	ldbu	r2,0(r2)
  43ec80:	10803fcc 	andi	r2,r2,255
  43ec84:	10000426 	beq	r2,zero,43ec98 <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
  43ec88:	e0bfff17 	ldw	r2,-4(fp)
  43ec8c:	00c00484 	movi	r3,18
  43ec90:	10c00005 	stb	r3,0(r2)
        return;
  43ec94:	00007406 	br	43ee68 <OSTaskNameSet+0x260>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43ec98:	0005303a 	rdctl	r2,status
  43ec9c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43eca0:	e0fff417 	ldw	r3,-48(fp)
  43eca4:	00bfff84 	movi	r2,-2
  43eca8:	1884703a 	and	r2,r3,r2
  43ecac:	1001703a 	wrctl	status,r2
  
  return context;
  43ecb0:	e0bff417 	ldw	r2,-48(fp)
    }
    OS_ENTER_CRITICAL();
  43ecb4:	e0bff115 	stw	r2,-60(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  43ecb8:	e0bffd03 	ldbu	r2,-12(fp)
  43ecbc:	10803fd8 	cmpnei	r2,r2,255
  43ecc0:	1000051e 	bne	r2,zero,43ecd8 <OSTaskNameSet+0xd0>
        prio = OSTCBCur->OSTCBPrio;
  43ecc4:	00801134 	movhi	r2,68
  43ecc8:	109e0e04 	addi	r2,r2,30776
  43eccc:	10800017 	ldw	r2,0(r2)
  43ecd0:	10800c83 	ldbu	r2,50(r2)
  43ecd4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  43ecd8:	e0bffd03 	ldbu	r2,-12(fp)
  43ecdc:	00c01174 	movhi	r3,69
  43ece0:	18ead504 	addi	r3,r3,-21676
  43ece4:	1085883a 	add	r2,r2,r2
  43ece8:	1085883a 	add	r2,r2,r2
  43ecec:	1885883a 	add	r2,r3,r2
  43ecf0:	10800017 	ldw	r2,0(r2)
  43ecf4:	e0bff215 	stw	r2,-56(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  43ecf8:	e0bff217 	ldw	r2,-56(fp)
  43ecfc:	1000131e 	bne	r2,zero,43ed4c <OSTaskNameSet+0x144>
  43ed00:	e0bff117 	ldw	r2,-60(fp)
  43ed04:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43ed08:	0005303a 	rdctl	r2,status
  43ed0c:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43ed10:	e0fff617 	ldw	r3,-40(fp)
  43ed14:	00bfff84 	movi	r2,-2
  43ed18:	1884703a 	and	r2,r3,r2
  43ed1c:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43ed20:	e0bff517 	ldw	r2,-44(fp)
  43ed24:	1080004c 	andi	r2,r2,1
  43ed28:	e0fff617 	ldw	r3,-40(fp)
  43ed2c:	1884b03a 	or	r2,r3,r2
  43ed30:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  43ed34:	e0bff617 	ldw	r2,-40(fp)
  43ed38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  43ed3c:	e0bfff17 	ldw	r2,-4(fp)
  43ed40:	00c010c4 	movi	r3,67
  43ed44:	10c00005 	stb	r3,0(r2)
        return;
  43ed48:	00004706 	br	43ee68 <OSTaskNameSet+0x260>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  43ed4c:	e0bff217 	ldw	r2,-56(fp)
  43ed50:	10800058 	cmpnei	r2,r2,1
  43ed54:	1000131e 	bne	r2,zero,43eda4 <OSTaskNameSet+0x19c>
  43ed58:	e0bff117 	ldw	r2,-60(fp)
  43ed5c:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43ed60:	0005303a 	rdctl	r2,status
  43ed64:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43ed68:	e0fff817 	ldw	r3,-32(fp)
  43ed6c:	00bfff84 	movi	r2,-2
  43ed70:	1884703a 	and	r2,r3,r2
  43ed74:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43ed78:	e0bff717 	ldw	r2,-36(fp)
  43ed7c:	1080004c 	andi	r2,r2,1
  43ed80:	e0fff817 	ldw	r3,-32(fp)
  43ed84:	1884b03a 	or	r2,r3,r2
  43ed88:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  43ed8c:	e0bff817 	ldw	r2,-32(fp)
  43ed90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  43ed94:	e0bfff17 	ldw	r2,-4(fp)
  43ed98:	00c010c4 	movi	r3,67
  43ed9c:	10c00005 	stb	r3,0(r2)
        return;
  43eda0:	00003106 	br	43ee68 <OSTaskNameSet+0x260>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  43eda4:	e13ffe17 	ldw	r4,-8(fp)
  43eda8:	043858c0 	call	43858c <OS_StrLen>
  43edac:	e0bff305 	stb	r2,-52(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  43edb0:	e0bff303 	ldbu	r2,-52(fp)
  43edb4:	10800830 	cmpltui	r2,r2,32
  43edb8:	1000131e 	bne	r2,zero,43ee08 <OSTaskNameSet+0x200>
  43edbc:	e0bff117 	ldw	r2,-60(fp)
  43edc0:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43edc4:	0005303a 	rdctl	r2,status
  43edc8:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43edcc:	e0fffa17 	ldw	r3,-24(fp)
  43edd0:	00bfff84 	movi	r2,-2
  43edd4:	1884703a 	and	r2,r3,r2
  43edd8:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43eddc:	e0bff917 	ldw	r2,-28(fp)
  43ede0:	1080004c 	andi	r2,r2,1
  43ede4:	e0fffa17 	ldw	r3,-24(fp)
  43ede8:	1884b03a 	or	r2,r3,r2
  43edec:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  43edf0:	e0bffa17 	ldw	r2,-24(fp)
  43edf4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  43edf8:	e0bfff17 	ldw	r2,-4(fp)
  43edfc:	00c01044 	movi	r3,65
  43ee00:	10c00005 	stb	r3,0(r2)
        return;
  43ee04:	00001806 	br	43ee68 <OSTaskNameSet+0x260>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  43ee08:	e0bff217 	ldw	r2,-56(fp)
  43ee0c:	10801304 	addi	r2,r2,76
  43ee10:	1009883a 	mov	r4,r2
  43ee14:	e17ffe17 	ldw	r5,-8(fp)
  43ee18:	04385100 	call	438510 <OS_StrCopy>
  43ee1c:	e0bff117 	ldw	r2,-60(fp)
  43ee20:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43ee24:	0005303a 	rdctl	r2,status
  43ee28:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43ee2c:	e0fffc17 	ldw	r3,-16(fp)
  43ee30:	00bfff84 	movi	r2,-2
  43ee34:	1884703a 	and	r2,r3,r2
  43ee38:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43ee3c:	e0bffb17 	ldw	r2,-20(fp)
  43ee40:	1080004c 	andi	r2,r2,1
  43ee44:	e0fffc17 	ldw	r3,-16(fp)
  43ee48:	1884b03a 	or	r2,r3,r2
  43ee4c:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43ee50:	e0bffc17 	ldw	r2,-16(fp)
  43ee54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  43ee58:	e0bfff17 	ldw	r2,-4(fp)
  43ee5c:	10000005 	stb	zero,0(r2)
  43ee60:	00000106 	br	43ee68 <OSTaskNameSet+0x260>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
  43ee64:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  43ee68:	e037883a 	mov	sp,fp
  43ee6c:	dfc00117 	ldw	ra,4(sp)
  43ee70:	df000017 	ldw	fp,0(sp)
  43ee74:	dec00204 	addi	sp,sp,8
  43ee78:	f800283a 	ret

0043ee7c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  43ee7c:	deffee04 	addi	sp,sp,-72
  43ee80:	dfc01115 	stw	ra,68(sp)
  43ee84:	df001015 	stw	fp,64(sp)
  43ee88:	df001004 	addi	fp,sp,64
  43ee8c:	2005883a 	mov	r2,r4
  43ee90:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  43ee94:	e03ff015 	stw	zero,-64(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  43ee98:	e0bfff03 	ldbu	r2,-4(fp)
  43ee9c:	10800530 	cmpltui	r2,r2,20
  43eea0:	1000021e 	bne	r2,zero,43eeac <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  43eea4:	00800a84 	movi	r2,42
  43eea8:	0000ae06 	br	43f164 <OSTaskResume+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43eeac:	0005303a 	rdctl	r2,status
  43eeb0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43eeb4:	e0fff217 	ldw	r3,-56(fp)
  43eeb8:	00bfff84 	movi	r2,-2
  43eebc:	1884703a 	and	r2,r3,r2
  43eec0:	1001703a 	wrctl	status,r2
  
  return context;
  43eec4:	e0bff217 	ldw	r2,-56(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  43eec8:	e0bff015 	stw	r2,-64(fp)
    ptcb = OSTCBPrioTbl[prio];
  43eecc:	e0bfff03 	ldbu	r2,-4(fp)
  43eed0:	00c01174 	movhi	r3,69
  43eed4:	18ead504 	addi	r3,r3,-21676
  43eed8:	1085883a 	add	r2,r2,r2
  43eedc:	1085883a 	add	r2,r2,r2
  43eee0:	1885883a 	add	r2,r3,r2
  43eee4:	10800017 	ldw	r2,0(r2)
  43eee8:	e0bff115 	stw	r2,-60(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  43eeec:	e0bff117 	ldw	r2,-60(fp)
  43eef0:	1000111e 	bne	r2,zero,43ef38 <OSTaskResume+0xbc>
  43eef4:	e0bff017 	ldw	r2,-64(fp)
  43eef8:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43eefc:	0005303a 	rdctl	r2,status
  43ef00:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43ef04:	e0fff417 	ldw	r3,-48(fp)
  43ef08:	00bfff84 	movi	r2,-2
  43ef0c:	1884703a 	and	r2,r3,r2
  43ef10:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43ef14:	e0bff317 	ldw	r2,-52(fp)
  43ef18:	1080004c 	andi	r2,r2,1
  43ef1c:	e0fff417 	ldw	r3,-48(fp)
  43ef20:	1884b03a 	or	r2,r3,r2
  43ef24:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
  43ef28:	e0bff417 	ldw	r2,-48(fp)
  43ef2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  43ef30:	00801184 	movi	r2,70
  43ef34:	00008b06 	br	43f164 <OSTaskResume+0x2e8>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  43ef38:	e0bff117 	ldw	r2,-60(fp)
  43ef3c:	10800058 	cmpnei	r2,r2,1
  43ef40:	1000111e 	bne	r2,zero,43ef88 <OSTaskResume+0x10c>
  43ef44:	e0bff017 	ldw	r2,-64(fp)
  43ef48:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43ef4c:	0005303a 	rdctl	r2,status
  43ef50:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43ef54:	e0fff617 	ldw	r3,-40(fp)
  43ef58:	00bfff84 	movi	r2,-2
  43ef5c:	1884703a 	and	r2,r3,r2
  43ef60:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43ef64:	e0bff517 	ldw	r2,-44(fp)
  43ef68:	1080004c 	andi	r2,r2,1
  43ef6c:	e0fff617 	ldw	r3,-40(fp)
  43ef70:	1884b03a 	or	r2,r3,r2
  43ef74:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  43ef78:	e0bff617 	ldw	r2,-40(fp)
  43ef7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  43ef80:	008010c4 	movi	r2,67
  43ef84:	00007706 	br	43f164 <OSTaskResume+0x2e8>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  43ef88:	e0bff117 	ldw	r2,-60(fp)
  43ef8c:	10800c03 	ldbu	r2,48(r2)
  43ef90:	10803fcc 	andi	r2,r2,255
  43ef94:	1080020c 	andi	r2,r2,8
  43ef98:	10006226 	beq	r2,zero,43f124 <OSTaskResume+0x2a8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  43ef9c:	e0bff117 	ldw	r2,-60(fp)
  43efa0:	10c00c03 	ldbu	r3,48(r2)
  43efa4:	00bffdc4 	movi	r2,-9
  43efa8:	1884703a 	and	r2,r3,r2
  43efac:	1007883a 	mov	r3,r2
  43efb0:	e0bff117 	ldw	r2,-60(fp)
  43efb4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  43efb8:	e0bff117 	ldw	r2,-60(fp)
  43efbc:	10800c03 	ldbu	r2,48(r2)
  43efc0:	10803fcc 	andi	r2,r2,255
  43efc4:	1000461e 	bne	r2,zero,43f0e0 <OSTaskResume+0x264>
            if (ptcb->OSTCBDly == 0) {
  43efc8:	e0bff117 	ldw	r2,-60(fp)
  43efcc:	10800b8b 	ldhu	r2,46(r2)
  43efd0:	10bfffcc 	andi	r2,r2,65535
  43efd4:	1000321e 	bne	r2,zero,43f0a0 <OSTaskResume+0x224>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  43efd8:	e0bff117 	ldw	r2,-60(fp)
  43efdc:	10c00d83 	ldbu	r3,54(r2)
  43efe0:	00801134 	movhi	r2,68
  43efe4:	109e0b04 	addi	r2,r2,30764
  43efe8:	10800003 	ldbu	r2,0(r2)
  43efec:	1884b03a 	or	r2,r3,r2
  43eff0:	1007883a 	mov	r3,r2
  43eff4:	00801134 	movhi	r2,68
  43eff8:	109e0b04 	addi	r2,r2,30764
  43effc:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  43f000:	e0bff117 	ldw	r2,-60(fp)
  43f004:	10800d03 	ldbu	r2,52(r2)
  43f008:	10803fcc 	andi	r2,r2,255
  43f00c:	e0fff117 	ldw	r3,-60(fp)
  43f010:	18c00d03 	ldbu	r3,52(r3)
  43f014:	18c03fcc 	andi	r3,r3,255
  43f018:	01001134 	movhi	r4,68
  43f01c:	211e0b44 	addi	r4,r4,30765
  43f020:	20c7883a 	add	r3,r4,r3
  43f024:	19000003 	ldbu	r4,0(r3)
  43f028:	e0fff117 	ldw	r3,-60(fp)
  43f02c:	18c00d43 	ldbu	r3,53(r3)
  43f030:	20c6b03a 	or	r3,r4,r3
  43f034:	01001134 	movhi	r4,68
  43f038:	211e0b44 	addi	r4,r4,30765
  43f03c:	2085883a 	add	r2,r4,r2
  43f040:	10c00005 	stb	r3,0(r2)
  43f044:	e0bff017 	ldw	r2,-64(fp)
  43f048:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f04c:	0005303a 	rdctl	r2,status
  43f050:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f054:	e0fff817 	ldw	r3,-32(fp)
  43f058:	00bfff84 	movi	r2,-2
  43f05c:	1884703a 	and	r2,r3,r2
  43f060:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f064:	e0bff717 	ldw	r2,-36(fp)
  43f068:	1080004c 	andi	r2,r2,1
  43f06c:	e0fff817 	ldw	r3,-32(fp)
  43f070:	1884b03a 	or	r2,r3,r2
  43f074:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f078:	e0bff817 	ldw	r2,-32(fp)
  43f07c:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  43f080:	00801134 	movhi	r2,68
  43f084:	109dff44 	addi	r2,r2,30717
  43f088:	10800003 	ldbu	r2,0(r2)
  43f08c:	10803fcc 	andi	r2,r2,255
  43f090:	10800058 	cmpnei	r2,r2,1
  43f094:	1000211e 	bne	r2,zero,43f11c <OSTaskResume+0x2a0>
                    OS_Sched();                               /* Find new highest priority task        */
  43f098:	04383a80 	call	4383a8 <OS_Sched>
  43f09c:	00001f06 	br	43f11c <OSTaskResume+0x2a0>
  43f0a0:	e0bff017 	ldw	r2,-64(fp)
  43f0a4:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f0a8:	0005303a 	rdctl	r2,status
  43f0ac:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f0b0:	e0fffa17 	ldw	r3,-24(fp)
  43f0b4:	00bfff84 	movi	r2,-2
  43f0b8:	1884703a 	and	r2,r3,r2
  43f0bc:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f0c0:	e0bff917 	ldw	r2,-28(fp)
  43f0c4:	1080004c 	andi	r2,r2,1
  43f0c8:	e0fffa17 	ldw	r3,-24(fp)
  43f0cc:	1884b03a 	or	r2,r3,r2
  43f0d0:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f0d4:	e0bffa17 	ldw	r2,-24(fp)
  43f0d8:	1001703a 	wrctl	status,r2
  43f0dc:	00000f06 	br	43f11c <OSTaskResume+0x2a0>
  43f0e0:	e0bff017 	ldw	r2,-64(fp)
  43f0e4:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f0e8:	0005303a 	rdctl	r2,status
  43f0ec:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f0f0:	e0fffc17 	ldw	r3,-16(fp)
  43f0f4:	00bfff84 	movi	r2,-2
  43f0f8:	1884703a 	and	r2,r3,r2
  43f0fc:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f100:	e0bffb17 	ldw	r2,-20(fp)
  43f104:	1080004c 	andi	r2,r2,1
  43f108:	e0fffc17 	ldw	r3,-16(fp)
  43f10c:	1884b03a 	or	r2,r3,r2
  43f110:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f114:	e0bffc17 	ldw	r2,-16(fp)
  43f118:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  43f11c:	0005883a 	mov	r2,zero
  43f120:	00001006 	br	43f164 <OSTaskResume+0x2e8>
  43f124:	e0bff017 	ldw	r2,-64(fp)
  43f128:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f12c:	0005303a 	rdctl	r2,status
  43f130:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f134:	e0fffe17 	ldw	r3,-8(fp)
  43f138:	00bfff84 	movi	r2,-2
  43f13c:	1884703a 	and	r2,r3,r2
  43f140:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f144:	e0bffd17 	ldw	r2,-12(fp)
  43f148:	1080004c 	andi	r2,r2,1
  43f14c:	e0fffe17 	ldw	r3,-8(fp)
  43f150:	1884b03a 	or	r2,r3,r2
  43f154:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f158:	e0bffe17 	ldw	r2,-8(fp)
  43f15c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  43f160:	00801104 	movi	r2,68
}
  43f164:	e037883a 	mov	sp,fp
  43f168:	dfc00117 	ldw	ra,4(sp)
  43f16c:	df000017 	ldw	fp,0(sp)
  43f170:	dec00204 	addi	sp,sp,8
  43f174:	f800283a 	ret

0043f178 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  43f178:	deffef04 	addi	sp,sp,-68
  43f17c:	df001015 	stw	fp,64(sp)
  43f180:	df001004 	addi	fp,sp,64
  43f184:	2005883a 	mov	r2,r4
  43f188:	e17fff15 	stw	r5,-4(fp)
  43f18c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  43f190:	e03ff215 	stw	zero,-56(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  43f194:	e0bffe03 	ldbu	r2,-8(fp)
  43f198:	10800570 	cmpltui	r2,r2,21
  43f19c:	1000051e 	bne	r2,zero,43f1b4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  43f1a0:	e0bffe03 	ldbu	r2,-8(fp)
  43f1a4:	10803fe0 	cmpeqi	r2,r2,255
  43f1a8:	1000021e 	bne	r2,zero,43f1b4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  43f1ac:	00800a84 	movi	r2,42
  43f1b0:	00008e06 	br	43f3ec <OSTaskStkChk+0x274>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  43f1b4:	e0bfff17 	ldw	r2,-4(fp)
  43f1b8:	1000021e 	bne	r2,zero,43f1c4 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
  43f1bc:	00800244 	movi	r2,9
  43f1c0:	00008a06 	br	43f3ec <OSTaskStkChk+0x274>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  43f1c4:	e0bfff17 	ldw	r2,-4(fp)
  43f1c8:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  43f1cc:	e0bfff17 	ldw	r2,-4(fp)
  43f1d0:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43f1d4:	0005303a 	rdctl	r2,status
  43f1d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43f1dc:	e0fff517 	ldw	r3,-44(fp)
  43f1e0:	00bfff84 	movi	r2,-2
  43f1e4:	1884703a 	and	r2,r3,r2
  43f1e8:	1001703a 	wrctl	status,r2
  
  return context;
  43f1ec:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
  43f1f0:	e0bff215 	stw	r2,-56(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  43f1f4:	e0bffe03 	ldbu	r2,-8(fp)
  43f1f8:	10803fd8 	cmpnei	r2,r2,255
  43f1fc:	1000051e 	bne	r2,zero,43f214 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
  43f200:	00801134 	movhi	r2,68
  43f204:	109e0e04 	addi	r2,r2,30776
  43f208:	10800017 	ldw	r2,0(r2)
  43f20c:	10800c83 	ldbu	r2,50(r2)
  43f210:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  43f214:	e0bffe03 	ldbu	r2,-8(fp)
  43f218:	00c01174 	movhi	r3,69
  43f21c:	18ead504 	addi	r3,r3,-21676
  43f220:	1085883a 	add	r2,r2,r2
  43f224:	1085883a 	add	r2,r2,r2
  43f228:	1885883a 	add	r2,r3,r2
  43f22c:	10800017 	ldw	r2,0(r2)
  43f230:	e0bff315 	stw	r2,-52(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  43f234:	e0bff317 	ldw	r2,-52(fp)
  43f238:	1000111e 	bne	r2,zero,43f280 <OSTaskStkChk+0x108>
  43f23c:	e0bff217 	ldw	r2,-56(fp)
  43f240:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f244:	0005303a 	rdctl	r2,status
  43f248:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f24c:	e0fff717 	ldw	r3,-36(fp)
  43f250:	00bfff84 	movi	r2,-2
  43f254:	1884703a 	and	r2,r3,r2
  43f258:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f25c:	e0bff617 	ldw	r2,-40(fp)
  43f260:	1080004c 	andi	r2,r2,1
  43f264:	e0fff717 	ldw	r3,-36(fp)
  43f268:	1884b03a 	or	r2,r3,r2
  43f26c:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f270:	e0bff717 	ldw	r2,-36(fp)
  43f274:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  43f278:	008010c4 	movi	r2,67
  43f27c:	00005b06 	br	43f3ec <OSTaskStkChk+0x274>
    }
    if (ptcb == OS_TCB_RESERVED) {
  43f280:	e0bff317 	ldw	r2,-52(fp)
  43f284:	10800058 	cmpnei	r2,r2,1
  43f288:	1000111e 	bne	r2,zero,43f2d0 <OSTaskStkChk+0x158>
  43f28c:	e0bff217 	ldw	r2,-56(fp)
  43f290:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f294:	0005303a 	rdctl	r2,status
  43f298:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f29c:	e0fff917 	ldw	r3,-28(fp)
  43f2a0:	00bfff84 	movi	r2,-2
  43f2a4:	1884703a 	and	r2,r3,r2
  43f2a8:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f2ac:	e0bff817 	ldw	r2,-32(fp)
  43f2b0:	1080004c 	andi	r2,r2,1
  43f2b4:	e0fff917 	ldw	r3,-28(fp)
  43f2b8:	1884b03a 	or	r2,r3,r2
  43f2bc:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f2c0:	e0bff917 	ldw	r2,-28(fp)
  43f2c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  43f2c8:	008010c4 	movi	r2,67
  43f2cc:	00004706 	br	43f3ec <OSTaskStkChk+0x274>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  43f2d0:	e0bff317 	ldw	r2,-52(fp)
  43f2d4:	1080040b 	ldhu	r2,16(r2)
  43f2d8:	10bfffcc 	andi	r2,r2,65535
  43f2dc:	1080004c 	andi	r2,r2,1
  43f2e0:	1000111e 	bne	r2,zero,43f328 <OSTaskStkChk+0x1b0>
  43f2e4:	e0bff217 	ldw	r2,-56(fp)
  43f2e8:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f2ec:	0005303a 	rdctl	r2,status
  43f2f0:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f2f4:	e0fffb17 	ldw	r3,-20(fp)
  43f2f8:	00bfff84 	movi	r2,-2
  43f2fc:	1884703a 	and	r2,r3,r2
  43f300:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f304:	e0bffa17 	ldw	r2,-24(fp)
  43f308:	1080004c 	andi	r2,r2,1
  43f30c:	e0fffb17 	ldw	r3,-20(fp)
  43f310:	1884b03a 	or	r2,r3,r2
  43f314:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f318:	e0bffb17 	ldw	r2,-20(fp)
  43f31c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  43f320:	00801144 	movi	r2,69
  43f324:	00003106 	br	43f3ec <OSTaskStkChk+0x274>
    }
    nfree = 0;
  43f328:	e03ff115 	stw	zero,-60(fp)
    size  = ptcb->OSTCBStkSize;
  43f32c:	e0bff317 	ldw	r2,-52(fp)
  43f330:	10800317 	ldw	r2,12(r2)
  43f334:	e0bff415 	stw	r2,-48(fp)
    pchk  = ptcb->OSTCBStkBottom;
  43f338:	e0bff317 	ldw	r2,-52(fp)
  43f33c:	10800217 	ldw	r2,8(r2)
  43f340:	e0bff015 	stw	r2,-64(fp)
  43f344:	e0bff217 	ldw	r2,-56(fp)
  43f348:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f34c:	0005303a 	rdctl	r2,status
  43f350:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f354:	e0fffd17 	ldw	r3,-12(fp)
  43f358:	00bfff84 	movi	r2,-2
  43f35c:	1884703a 	and	r2,r3,r2
  43f360:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f364:	e0bffc17 	ldw	r2,-16(fp)
  43f368:	1080004c 	andi	r2,r2,1
  43f36c:	e0fffd17 	ldw	r3,-12(fp)
  43f370:	1884b03a 	or	r2,r3,r2
  43f374:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f378:	e0bffd17 	ldw	r2,-12(fp)
  43f37c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  43f380:	00000306 	br	43f390 <OSTaskStkChk+0x218>
        nfree++;
  43f384:	e0bff117 	ldw	r2,-60(fp)
  43f388:	10800044 	addi	r2,r2,1
  43f38c:	e0bff115 	stw	r2,-60(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  43f390:	e0bff017 	ldw	r2,-64(fp)
  43f394:	10800017 	ldw	r2,0(r2)
  43f398:	1005003a 	cmpeq	r2,r2,zero
  43f39c:	e0fff017 	ldw	r3,-64(fp)
  43f3a0:	18c00104 	addi	r3,r3,4
  43f3a4:	e0fff015 	stw	r3,-64(fp)
  43f3a8:	10803fcc 	andi	r2,r2,255
  43f3ac:	103ff51e 	bne	r2,zero,43f384 <OSTaskStkChk+0x20c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  43f3b0:	e0bff117 	ldw	r2,-60(fp)
  43f3b4:	1085883a 	add	r2,r2,r2
  43f3b8:	1085883a 	add	r2,r2,r2
  43f3bc:	1007883a 	mov	r3,r2
  43f3c0:	e0bfff17 	ldw	r2,-4(fp)
  43f3c4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  43f3c8:	e0fff417 	ldw	r3,-48(fp)
  43f3cc:	e0bff117 	ldw	r2,-60(fp)
  43f3d0:	1885c83a 	sub	r2,r3,r2
  43f3d4:	1085883a 	add	r2,r2,r2
  43f3d8:	1085883a 	add	r2,r2,r2
  43f3dc:	1007883a 	mov	r3,r2
  43f3e0:	e0bfff17 	ldw	r2,-4(fp)
  43f3e4:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  43f3e8:	0005883a 	mov	r2,zero
}
  43f3ec:	e037883a 	mov	sp,fp
  43f3f0:	df000017 	ldw	fp,0(sp)
  43f3f4:	dec00104 	addi	sp,sp,4
  43f3f8:	f800283a 	ret

0043f3fc <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  43f3fc:	defff204 	addi	sp,sp,-56
  43f400:	dfc00d15 	stw	ra,52(sp)
  43f404:	df000c15 	stw	fp,48(sp)
  43f408:	df000c04 	addi	fp,sp,48
  43f40c:	2005883a 	mov	r2,r4
  43f410:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  43f414:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  43f418:	e0bfff03 	ldbu	r2,-4(fp)
  43f41c:	10800518 	cmpnei	r2,r2,20
  43f420:	1000021e 	bne	r2,zero,43f42c <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  43f424:	008011c4 	movi	r2,71
  43f428:	00009406 	br	43f67c <OSTaskSuspend+0x280>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  43f42c:	e0bfff03 	ldbu	r2,-4(fp)
  43f430:	10800530 	cmpltui	r2,r2,20
  43f434:	1000051e 	bne	r2,zero,43f44c <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
  43f438:	e0bfff03 	ldbu	r2,-4(fp)
  43f43c:	10803fe0 	cmpeqi	r2,r2,255
  43f440:	1000021e 	bne	r2,zero,43f44c <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
  43f444:	00800a84 	movi	r2,42
  43f448:	00008c06 	br	43f67c <OSTaskSuspend+0x280>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43f44c:	0005303a 	rdctl	r2,status
  43f450:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43f454:	e0fff817 	ldw	r3,-32(fp)
  43f458:	00bfff84 	movi	r2,-2
  43f45c:	1884703a 	and	r2,r3,r2
  43f460:	1001703a 	wrctl	status,r2
  
  return context;
  43f464:	e0bff817 	ldw	r2,-32(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  43f468:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  43f46c:	e0bfff03 	ldbu	r2,-4(fp)
  43f470:	10803fd8 	cmpnei	r2,r2,255
  43f474:	1000081e 	bne	r2,zero,43f498 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
  43f478:	00801134 	movhi	r2,68
  43f47c:	109e0e04 	addi	r2,r2,30776
  43f480:	10800017 	ldw	r2,0(r2)
  43f484:	10800c83 	ldbu	r2,50(r2)
  43f488:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
  43f48c:	00800044 	movi	r2,1
  43f490:	e0bff405 	stb	r2,-48(fp)
  43f494:	00000b06 	br	43f4c4 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  43f498:	00801134 	movhi	r2,68
  43f49c:	109e0e04 	addi	r2,r2,30776
  43f4a0:	10800017 	ldw	r2,0(r2)
  43f4a4:	10800c83 	ldbu	r2,50(r2)
  43f4a8:	10c03fcc 	andi	r3,r2,255
  43f4ac:	e0bfff03 	ldbu	r2,-4(fp)
  43f4b0:	1880031e 	bne	r3,r2,43f4c0 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
  43f4b4:	00800044 	movi	r2,1
  43f4b8:	e0bff405 	stb	r2,-48(fp)
  43f4bc:	00000106 	br	43f4c4 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  43f4c0:	e03ff405 	stb	zero,-48(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  43f4c4:	e0bfff03 	ldbu	r2,-4(fp)
  43f4c8:	00c01174 	movhi	r3,69
  43f4cc:	18ead504 	addi	r3,r3,-21676
  43f4d0:	1085883a 	add	r2,r2,r2
  43f4d4:	1085883a 	add	r2,r2,r2
  43f4d8:	1885883a 	add	r2,r3,r2
  43f4dc:	10800017 	ldw	r2,0(r2)
  43f4e0:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  43f4e4:	e0bff617 	ldw	r2,-40(fp)
  43f4e8:	1000111e 	bne	r2,zero,43f530 <OSTaskSuspend+0x134>
  43f4ec:	e0bff517 	ldw	r2,-44(fp)
  43f4f0:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f4f4:	0005303a 	rdctl	r2,status
  43f4f8:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f4fc:	e0fffa17 	ldw	r3,-24(fp)
  43f500:	00bfff84 	movi	r2,-2
  43f504:	1884703a 	and	r2,r3,r2
  43f508:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f50c:	e0bff917 	ldw	r2,-28(fp)
  43f510:	1080004c 	andi	r2,r2,1
  43f514:	e0fffa17 	ldw	r3,-24(fp)
  43f518:	1884b03a 	or	r2,r3,r2
  43f51c:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f520:	e0bffa17 	ldw	r2,-24(fp)
  43f524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  43f528:	00801204 	movi	r2,72
  43f52c:	00005306 	br	43f67c <OSTaskSuspend+0x280>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  43f530:	e0bff617 	ldw	r2,-40(fp)
  43f534:	10800058 	cmpnei	r2,r2,1
  43f538:	1000111e 	bne	r2,zero,43f580 <OSTaskSuspend+0x184>
  43f53c:	e0bff517 	ldw	r2,-44(fp)
  43f540:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f544:	0005303a 	rdctl	r2,status
  43f548:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f54c:	e0fffc17 	ldw	r3,-16(fp)
  43f550:	00bfff84 	movi	r2,-2
  43f554:	1884703a 	and	r2,r3,r2
  43f558:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f55c:	e0bffb17 	ldw	r2,-20(fp)
  43f560:	1080004c 	andi	r2,r2,1
  43f564:	e0fffc17 	ldw	r3,-16(fp)
  43f568:	1884b03a 	or	r2,r3,r2
  43f56c:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f570:	e0bffc17 	ldw	r2,-16(fp)
  43f574:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  43f578:	008010c4 	movi	r2,67
  43f57c:	00003f06 	br	43f67c <OSTaskSuspend+0x280>
    }
    y            = ptcb->OSTCBY;
  43f580:	e0bff617 	ldw	r2,-40(fp)
  43f584:	10800d03 	ldbu	r2,52(r2)
  43f588:	e0bff705 	stb	r2,-36(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  43f58c:	e0bff703 	ldbu	r2,-36(fp)
  43f590:	e0fff703 	ldbu	r3,-36(fp)
  43f594:	01001134 	movhi	r4,68
  43f598:	211e0b44 	addi	r4,r4,30765
  43f59c:	20c7883a 	add	r3,r4,r3
  43f5a0:	18c00003 	ldbu	r3,0(r3)
  43f5a4:	1809883a 	mov	r4,r3
  43f5a8:	e0fff617 	ldw	r3,-40(fp)
  43f5ac:	18c00d43 	ldbu	r3,53(r3)
  43f5b0:	00c6303a 	nor	r3,zero,r3
  43f5b4:	20c6703a 	and	r3,r4,r3
  43f5b8:	01001134 	movhi	r4,68
  43f5bc:	211e0b44 	addi	r4,r4,30765
  43f5c0:	2085883a 	add	r2,r4,r2
  43f5c4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  43f5c8:	e0bff703 	ldbu	r2,-36(fp)
  43f5cc:	00c01134 	movhi	r3,68
  43f5d0:	18de0b44 	addi	r3,r3,30765
  43f5d4:	1885883a 	add	r2,r3,r2
  43f5d8:	10800003 	ldbu	r2,0(r2)
  43f5dc:	10803fcc 	andi	r2,r2,255
  43f5e0:	10000c1e 	bne	r2,zero,43f614 <OSTaskSuspend+0x218>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  43f5e4:	e0bff617 	ldw	r2,-40(fp)
  43f5e8:	10800d83 	ldbu	r2,54(r2)
  43f5ec:	0084303a 	nor	r2,zero,r2
  43f5f0:	1007883a 	mov	r3,r2
  43f5f4:	00801134 	movhi	r2,68
  43f5f8:	109e0b04 	addi	r2,r2,30764
  43f5fc:	10800003 	ldbu	r2,0(r2)
  43f600:	1884703a 	and	r2,r3,r2
  43f604:	1007883a 	mov	r3,r2
  43f608:	00801134 	movhi	r2,68
  43f60c:	109e0b04 	addi	r2,r2,30764
  43f610:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  43f614:	e0bff617 	ldw	r2,-40(fp)
  43f618:	10800c03 	ldbu	r2,48(r2)
  43f61c:	10800214 	ori	r2,r2,8
  43f620:	1007883a 	mov	r3,r2
  43f624:	e0bff617 	ldw	r2,-40(fp)
  43f628:	10c00c05 	stb	r3,48(r2)
  43f62c:	e0bff517 	ldw	r2,-44(fp)
  43f630:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f634:	0005303a 	rdctl	r2,status
  43f638:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f63c:	e0fffe17 	ldw	r3,-8(fp)
  43f640:	00bfff84 	movi	r2,-2
  43f644:	1884703a 	and	r2,r3,r2
  43f648:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f64c:	e0bffd17 	ldw	r2,-12(fp)
  43f650:	1080004c 	andi	r2,r2,1
  43f654:	e0fffe17 	ldw	r3,-8(fp)
  43f658:	1884b03a 	or	r2,r3,r2
  43f65c:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f660:	e0bffe17 	ldw	r2,-8(fp)
  43f664:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  43f668:	e0bff403 	ldbu	r2,-48(fp)
  43f66c:	10800058 	cmpnei	r2,r2,1
  43f670:	1000011e 	bne	r2,zero,43f678 <OSTaskSuspend+0x27c>
        OS_Sched();                                             /* Find new highest priority task      */
  43f674:	04383a80 	call	4383a8 <OS_Sched>
    }
    return (OS_ERR_NONE);
  43f678:	0005883a 	mov	r2,zero
}
  43f67c:	e037883a 	mov	sp,fp
  43f680:	dfc00117 	ldw	ra,4(sp)
  43f684:	df000017 	ldw	fp,0(sp)
  43f688:	dec00204 	addi	sp,sp,8
  43f68c:	f800283a 	ret

0043f690 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  43f690:	defff304 	addi	sp,sp,-52
  43f694:	dfc00c15 	stw	ra,48(sp)
  43f698:	df000b15 	stw	fp,44(sp)
  43f69c:	df000b04 	addi	fp,sp,44
  43f6a0:	2005883a 	mov	r2,r4
  43f6a4:	e17fff15 	stw	r5,-4(fp)
  43f6a8:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  43f6ac:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  43f6b0:	e0bffe03 	ldbu	r2,-8(fp)
  43f6b4:	10800570 	cmpltui	r2,r2,21
  43f6b8:	1000051e 	bne	r2,zero,43f6d0 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  43f6bc:	e0bffe03 	ldbu	r2,-8(fp)
  43f6c0:	10803fe0 	cmpeqi	r2,r2,255
  43f6c4:	1000021e 	bne	r2,zero,43f6d0 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  43f6c8:	00800a84 	movi	r2,42
  43f6cc:	00005706 	br	43f82c <OSTaskQuery+0x19c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  43f6d0:	e0bfff17 	ldw	r2,-4(fp)
  43f6d4:	1000021e 	bne	r2,zero,43f6e0 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
  43f6d8:	00800244 	movi	r2,9
  43f6dc:	00005306 	br	43f82c <OSTaskQuery+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43f6e0:	0005303a 	rdctl	r2,status
  43f6e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43f6e8:	e0fff717 	ldw	r3,-36(fp)
  43f6ec:	00bfff84 	movi	r2,-2
  43f6f0:	1884703a 	and	r2,r3,r2
  43f6f4:	1001703a 	wrctl	status,r2
  
  return context;
  43f6f8:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  43f6fc:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  43f700:	e0bffe03 	ldbu	r2,-8(fp)
  43f704:	10803fd8 	cmpnei	r2,r2,255
  43f708:	1000051e 	bne	r2,zero,43f720 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
  43f70c:	00801134 	movhi	r2,68
  43f710:	109e0e04 	addi	r2,r2,30776
  43f714:	10800017 	ldw	r2,0(r2)
  43f718:	10800c83 	ldbu	r2,50(r2)
  43f71c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  43f720:	e0bffe03 	ldbu	r2,-8(fp)
  43f724:	00c01174 	movhi	r3,69
  43f728:	18ead504 	addi	r3,r3,-21676
  43f72c:	1085883a 	add	r2,r2,r2
  43f730:	1085883a 	add	r2,r2,r2
  43f734:	1885883a 	add	r2,r3,r2
  43f738:	10800017 	ldw	r2,0(r2)
  43f73c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  43f740:	e0bff617 	ldw	r2,-40(fp)
  43f744:	1000111e 	bne	r2,zero,43f78c <OSTaskQuery+0xfc>
  43f748:	e0bff517 	ldw	r2,-44(fp)
  43f74c:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f750:	0005303a 	rdctl	r2,status
  43f754:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f758:	e0fff917 	ldw	r3,-28(fp)
  43f75c:	00bfff84 	movi	r2,-2
  43f760:	1884703a 	and	r2,r3,r2
  43f764:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f768:	e0bff817 	ldw	r2,-32(fp)
  43f76c:	1080004c 	andi	r2,r2,1
  43f770:	e0fff917 	ldw	r3,-28(fp)
  43f774:	1884b03a 	or	r2,r3,r2
  43f778:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f77c:	e0bff917 	ldw	r2,-28(fp)
  43f780:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  43f784:	00800a44 	movi	r2,41
  43f788:	00002806 	br	43f82c <OSTaskQuery+0x19c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  43f78c:	e0bff617 	ldw	r2,-40(fp)
  43f790:	10800058 	cmpnei	r2,r2,1
  43f794:	1000111e 	bne	r2,zero,43f7dc <OSTaskQuery+0x14c>
  43f798:	e0bff517 	ldw	r2,-44(fp)
  43f79c:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f7a0:	0005303a 	rdctl	r2,status
  43f7a4:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f7a8:	e0fffb17 	ldw	r3,-20(fp)
  43f7ac:	00bfff84 	movi	r2,-2
  43f7b0:	1884703a 	and	r2,r3,r2
  43f7b4:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f7b8:	e0bffa17 	ldw	r2,-24(fp)
  43f7bc:	1080004c 	andi	r2,r2,1
  43f7c0:	e0fffb17 	ldw	r3,-20(fp)
  43f7c4:	1884b03a 	or	r2,r3,r2
  43f7c8:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f7cc:	e0bffb17 	ldw	r2,-20(fp)
  43f7d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  43f7d4:	008010c4 	movi	r2,67
  43f7d8:	00001406 	br	43f82c <OSTaskQuery+0x19c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  43f7dc:	e13fff17 	ldw	r4,-4(fp)
  43f7e0:	e17ff617 	ldw	r5,-40(fp)
  43f7e4:	01801b04 	movi	r6,108
  43f7e8:	043833c0 	call	43833c <OS_MemCopy>
  43f7ec:	e0bff517 	ldw	r2,-44(fp)
  43f7f0:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f7f4:	0005303a 	rdctl	r2,status
  43f7f8:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f7fc:	e0fffd17 	ldw	r3,-12(fp)
  43f800:	00bfff84 	movi	r2,-2
  43f804:	1884703a 	and	r2,r3,r2
  43f808:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f80c:	e0bffc17 	ldw	r2,-16(fp)
  43f810:	1080004c 	andi	r2,r2,1
  43f814:	e0fffd17 	ldw	r3,-12(fp)
  43f818:	1884b03a 	or	r2,r3,r2
  43f81c:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f820:	e0bffd17 	ldw	r2,-12(fp)
  43f824:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  43f828:	0005883a 	mov	r2,zero
}
  43f82c:	e037883a 	mov	sp,fp
  43f830:	dfc00117 	ldw	ra,4(sp)
  43f834:	df000017 	ldw	fp,0(sp)
  43f838:	dec00204 	addi	sp,sp,8
  43f83c:	f800283a 	ret

0043f840 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  43f840:	defffc04 	addi	sp,sp,-16
  43f844:	df000315 	stw	fp,12(sp)
  43f848:	df000304 	addi	fp,sp,12
  43f84c:	e13ffd15 	stw	r4,-12(fp)
  43f850:	e17ffe15 	stw	r5,-8(fp)
  43f854:	3005883a 	mov	r2,r6
  43f858:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  43f85c:	e0bfff0b 	ldhu	r2,-4(fp)
  43f860:	1080004c 	andi	r2,r2,1
  43f864:	10000e26 	beq	r2,zero,43f8a0 <OS_TaskStkClr+0x60>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  43f868:	e0bfff0b 	ldhu	r2,-4(fp)
  43f86c:	1080008c 	andi	r2,r2,2
  43f870:	10000b26 	beq	r2,zero,43f8a0 <OS_TaskStkClr+0x60>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  43f874:	00000806 	br	43f898 <OS_TaskStkClr+0x58>
                size--;
  43f878:	e0bffe17 	ldw	r2,-8(fp)
  43f87c:	10bfffc4 	addi	r2,r2,-1
  43f880:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  43f884:	e0bffd17 	ldw	r2,-12(fp)
  43f888:	10000015 	stw	zero,0(r2)
  43f88c:	e0bffd17 	ldw	r2,-12(fp)
  43f890:	10800104 	addi	r2,r2,4
  43f894:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  43f898:	e0bffe17 	ldw	r2,-8(fp)
  43f89c:	103ff61e 	bne	r2,zero,43f878 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  43f8a0:	e037883a 	mov	sp,fp
  43f8a4:	df000017 	ldw	fp,0(sp)
  43f8a8:	dec00104 	addi	sp,sp,4
  43f8ac:	f800283a 	ret

0043f8b0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  43f8b0:	defff804 	addi	sp,sp,-32
  43f8b4:	dfc00715 	stw	ra,28(sp)
  43f8b8:	df000615 	stw	fp,24(sp)
  43f8bc:	df000604 	addi	fp,sp,24
  43f8c0:	2005883a 	mov	r2,r4
  43f8c4:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  43f8c8:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  43f8cc:	00801134 	movhi	r2,68
  43f8d0:	109e0d04 	addi	r2,r2,30772
  43f8d4:	10800003 	ldbu	r2,0(r2)
  43f8d8:	10803fcc 	andi	r2,r2,255
  43f8dc:	10004b1e 	bne	r2,zero,43fa0c <OSTimeDly+0x15c>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  43f8e0:	e0bfff0b 	ldhu	r2,-4(fp)
  43f8e4:	10004a26 	beq	r2,zero,43fa10 <OSTimeDly+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43f8e8:	0005303a 	rdctl	r2,status
  43f8ec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43f8f0:	e0fffc17 	ldw	r3,-16(fp)
  43f8f4:	00bfff84 	movi	r2,-2
  43f8f8:	1884703a 	and	r2,r3,r2
  43f8fc:	1001703a 	wrctl	status,r2
  
  return context;
  43f900:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  43f904:	e0bffa15 	stw	r2,-24(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  43f908:	00801134 	movhi	r2,68
  43f90c:	109e0e04 	addi	r2,r2,30776
  43f910:	10800017 	ldw	r2,0(r2)
  43f914:	10800d03 	ldbu	r2,52(r2)
  43f918:	e0bffb05 	stb	r2,-20(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  43f91c:	e0bffb03 	ldbu	r2,-20(fp)
  43f920:	e0fffb03 	ldbu	r3,-20(fp)
  43f924:	01001134 	movhi	r4,68
  43f928:	211e0b44 	addi	r4,r4,30765
  43f92c:	20c7883a 	add	r3,r4,r3
  43f930:	18c00003 	ldbu	r3,0(r3)
  43f934:	1809883a 	mov	r4,r3
  43f938:	00c01134 	movhi	r3,68
  43f93c:	18de0e04 	addi	r3,r3,30776
  43f940:	18c00017 	ldw	r3,0(r3)
  43f944:	18c00d43 	ldbu	r3,53(r3)
  43f948:	00c6303a 	nor	r3,zero,r3
  43f94c:	20c6703a 	and	r3,r4,r3
  43f950:	01001134 	movhi	r4,68
  43f954:	211e0b44 	addi	r4,r4,30765
  43f958:	2085883a 	add	r2,r4,r2
  43f95c:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  43f960:	e0bffb03 	ldbu	r2,-20(fp)
  43f964:	00c01134 	movhi	r3,68
  43f968:	18de0b44 	addi	r3,r3,30765
  43f96c:	1885883a 	add	r2,r3,r2
  43f970:	10800003 	ldbu	r2,0(r2)
  43f974:	10803fcc 	andi	r2,r2,255
  43f978:	10000e1e 	bne	r2,zero,43f9b4 <OSTimeDly+0x104>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  43f97c:	00801134 	movhi	r2,68
  43f980:	109e0e04 	addi	r2,r2,30776
  43f984:	10800017 	ldw	r2,0(r2)
  43f988:	10800d83 	ldbu	r2,54(r2)
  43f98c:	0084303a 	nor	r2,zero,r2
  43f990:	1007883a 	mov	r3,r2
  43f994:	00801134 	movhi	r2,68
  43f998:	109e0b04 	addi	r2,r2,30764
  43f99c:	10800003 	ldbu	r2,0(r2)
  43f9a0:	1884703a 	and	r2,r3,r2
  43f9a4:	1007883a 	mov	r3,r2
  43f9a8:	00801134 	movhi	r2,68
  43f9ac:	109e0b04 	addi	r2,r2,30764
  43f9b0:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  43f9b4:	00801134 	movhi	r2,68
  43f9b8:	109e0e04 	addi	r2,r2,30776
  43f9bc:	10800017 	ldw	r2,0(r2)
  43f9c0:	e0ffff0b 	ldhu	r3,-4(fp)
  43f9c4:	10c00b8d 	sth	r3,46(r2)
  43f9c8:	e0bffa17 	ldw	r2,-24(fp)
  43f9cc:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43f9d0:	0005303a 	rdctl	r2,status
  43f9d4:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43f9d8:	e0fffe17 	ldw	r3,-8(fp)
  43f9dc:	00bfff84 	movi	r2,-2
  43f9e0:	1884703a 	and	r2,r3,r2
  43f9e4:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43f9e8:	e0bffd17 	ldw	r2,-12(fp)
  43f9ec:	1080004c 	andi	r2,r2,1
  43f9f0:	e0fffe17 	ldw	r3,-8(fp)
  43f9f4:	1884b03a 	or	r2,r3,r2
  43f9f8:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  43f9fc:	e0bffe17 	ldw	r2,-8(fp)
  43fa00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  43fa04:	04383a80 	call	4383a8 <OS_Sched>
  43fa08:	00000106 	br	43fa10 <OSTimeDly+0x160>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
  43fa0c:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
  43fa10:	e037883a 	mov	sp,fp
  43fa14:	dfc00117 	ldw	ra,4(sp)
  43fa18:	df000017 	ldw	fp,0(sp)
  43fa1c:	dec00204 	addi	sp,sp,8
  43fa20:	f800283a 	ret

0043fa24 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  43fa24:	defff604 	addi	sp,sp,-40
  43fa28:	dfc00915 	stw	ra,36(sp)
  43fa2c:	df000815 	stw	fp,32(sp)
  43fa30:	dc400715 	stw	r17,28(sp)
  43fa34:	dc000615 	stw	r16,24(sp)
  43fa38:	df000604 	addi	fp,sp,24
  43fa3c:	2011883a 	mov	r8,r4
  43fa40:	2809883a 	mov	r4,r5
  43fa44:	3007883a 	mov	r3,r6
  43fa48:	3805883a 	mov	r2,r7
  43fa4c:	e23ffc05 	stb	r8,-16(fp)
  43fa50:	e13ffd05 	stb	r4,-12(fp)
  43fa54:	e0fffe05 	stb	r3,-8(fp)
  43fa58:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  43fa5c:	00801134 	movhi	r2,68
  43fa60:	109e0d04 	addi	r2,r2,30772
  43fa64:	10800003 	ldbu	r2,0(r2)
  43fa68:	10803fcc 	andi	r2,r2,255
  43fa6c:	10000226 	beq	r2,zero,43fa78 <OSTimeDlyHMSM+0x54>
        return (OS_ERR_TIME_DLY_ISR);
  43fa70:	00801544 	movi	r2,85
  43fa74:	00007506 	br	43fc4c <OSTimeDlyHMSM+0x228>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  43fa78:	e0bffc03 	ldbu	r2,-16(fp)
  43fa7c:	1000081e 	bne	r2,zero,43faa0 <OSTimeDlyHMSM+0x7c>
        if (minutes == 0) {
  43fa80:	e0bffd03 	ldbu	r2,-12(fp)
  43fa84:	1000061e 	bne	r2,zero,43faa0 <OSTimeDlyHMSM+0x7c>
            if (seconds == 0) {
  43fa88:	e0bffe03 	ldbu	r2,-8(fp)
  43fa8c:	1000041e 	bne	r2,zero,43faa0 <OSTimeDlyHMSM+0x7c>
                if (ms == 0) {
  43fa90:	e0bfff0b 	ldhu	r2,-4(fp)
  43fa94:	1000021e 	bne	r2,zero,43faa0 <OSTimeDlyHMSM+0x7c>
                    return (OS_ERR_TIME_ZERO_DLY);
  43fa98:	00801504 	movi	r2,84
  43fa9c:	00006b06 	br	43fc4c <OSTimeDlyHMSM+0x228>
                }
            }
        }
    }
    if (minutes > 59) {
  43faa0:	e0bffd03 	ldbu	r2,-12(fp)
  43faa4:	10800f30 	cmpltui	r2,r2,60
  43faa8:	1000021e 	bne	r2,zero,43fab4 <OSTimeDlyHMSM+0x90>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  43faac:	00801444 	movi	r2,81
  43fab0:	00006606 	br	43fc4c <OSTimeDlyHMSM+0x228>
    }
    if (seconds > 59) {
  43fab4:	e0bffe03 	ldbu	r2,-8(fp)
  43fab8:	10800f30 	cmpltui	r2,r2,60
  43fabc:	1000021e 	bne	r2,zero,43fac8 <OSTimeDlyHMSM+0xa4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  43fac0:	00801484 	movi	r2,82
  43fac4:	00006106 	br	43fc4c <OSTimeDlyHMSM+0x228>
    }
    if (ms > 999) {
  43fac8:	e0bfff0b 	ldhu	r2,-4(fp)
  43facc:	1080fa30 	cmpltui	r2,r2,1000
  43fad0:	1000021e 	bne	r2,zero,43fadc <OSTimeDlyHMSM+0xb8>
        return (OS_ERR_TIME_INVALID_MS);
  43fad4:	008014c4 	movi	r2,83
  43fad8:	00005c06 	br	43fc4c <OSTimeDlyHMSM+0x228>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  43fadc:	e0bffc03 	ldbu	r2,-16(fp)
  43fae0:	1009883a 	mov	r4,r2
  43fae4:	01438404 	movi	r5,3600
  43fae8:	04355000 	call	435500 <__mulsi3>
  43faec:	1021883a 	mov	r16,r2
  43faf0:	e0bffd03 	ldbu	r2,-12(fp)
  43faf4:	1009883a 	mov	r4,r2
  43faf8:	01400f04 	movi	r5,60
  43fafc:	04355000 	call	435500 <__mulsi3>
  43fb00:	8087883a 	add	r3,r16,r2
  43fb04:	e0bffe03 	ldbu	r2,-8(fp)
  43fb08:	1885883a 	add	r2,r3,r2
  43fb0c:	1009883a 	mov	r4,r2
  43fb10:	04436080 	call	443608 <__floatunsidf>
  43fb14:	100b883a 	mov	r5,r2
  43fb18:	180d883a 	mov	r6,r3
  43fb1c:	2809883a 	mov	r4,r5
  43fb20:	300b883a 	mov	r5,r6
  43fb24:	000d883a 	mov	r6,zero
  43fb28:	01d01674 	movhi	r7,16473
  43fb2c:	04430380 	call	443038 <__muldf3>
  43fb30:	1009883a 	mov	r4,r2
  43fb34:	180b883a 	mov	r5,r3
  43fb38:	2021883a 	mov	r16,r4
  43fb3c:	2823883a 	mov	r17,r5
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
  43fb40:	e0bfff0b 	ldhu	r2,-4(fp)
  43fb44:	1009883a 	mov	r4,r2
  43fb48:	04436080 	call	443608 <__floatunsidf>
  43fb4c:	100b883a 	mov	r5,r2
  43fb50:	180d883a 	mov	r6,r3
  43fb54:	2809883a 	mov	r4,r5
  43fb58:	300b883a 	mov	r5,r6
  43fb5c:	000d883a 	mov	r6,zero
  43fb60:	01d00534 	movhi	r7,16404
  43fb64:	0442f840 	call	442f84 <__adddf3>
  43fb68:	1009883a 	mov	r4,r2
  43fb6c:	180b883a 	mov	r5,r3
  43fb70:	2005883a 	mov	r2,r4
  43fb74:	2807883a 	mov	r3,r5
  43fb78:	1009883a 	mov	r4,r2
  43fb7c:	180b883a 	mov	r5,r3
  43fb80:	000d883a 	mov	r6,zero
  43fb84:	01d01674 	movhi	r7,16473
  43fb88:	04430380 	call	443038 <__muldf3>
  43fb8c:	1009883a 	mov	r4,r2
  43fb90:	180b883a 	mov	r5,r3
  43fb94:	2005883a 	mov	r2,r4
  43fb98:	2807883a 	mov	r3,r5
  43fb9c:	1009883a 	mov	r4,r2
  43fba0:	180b883a 	mov	r5,r3
  43fba4:	000d883a 	mov	r6,zero
  43fba8:	01d023f4 	movhi	r7,16527
  43fbac:	39d00004 	addi	r7,r7,16384
  43fbb0:	044331c0 	call	44331c <__divdf3>
  43fbb4:	1009883a 	mov	r4,r2
  43fbb8:	180b883a 	mov	r5,r3
  43fbbc:	2005883a 	mov	r2,r4
  43fbc0:	2807883a 	mov	r3,r5
  43fbc4:	8009883a 	mov	r4,r16
  43fbc8:	880b883a 	mov	r5,r17
  43fbcc:	100d883a 	mov	r6,r2
  43fbd0:	180f883a 	mov	r7,r3
  43fbd4:	0442f840 	call	442f84 <__adddf3>
  43fbd8:	1009883a 	mov	r4,r2
  43fbdc:	180b883a 	mov	r5,r3
  43fbe0:	2005883a 	mov	r2,r4
  43fbe4:	2807883a 	mov	r3,r5
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  43fbe8:	1009883a 	mov	r4,r2
  43fbec:	180b883a 	mov	r5,r3
  43fbf0:	0442bac0 	call	442bac <__fixunsdfsi>
  43fbf4:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  43fbf8:	e0bffb17 	ldw	r2,-20(fp)
  43fbfc:	1004d43a 	srli	r2,r2,16
  43fc00:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  43fc04:	e0bffb17 	ldw	r2,-20(fp)
  43fc08:	10bfffcc 	andi	r2,r2,65535
  43fc0c:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
  43fc10:	e0bffb17 	ldw	r2,-20(fp)
  43fc14:	10bfffcc 	andi	r2,r2,65535
  43fc18:	1009883a 	mov	r4,r2
  43fc1c:	043f8b00 	call	43f8b0 <OSTimeDly>
    while (loops > 0) {
  43fc20:	00000706 	br	43fc40 <OSTimeDlyHMSM+0x21c>
        OSTimeDly((INT16U)32768u);
  43fc24:	01200014 	movui	r4,32768
  43fc28:	043f8b00 	call	43f8b0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  43fc2c:	01200014 	movui	r4,32768
  43fc30:	043f8b00 	call	43f8b0 <OSTimeDly>
        loops--;
  43fc34:	e0bffa0b 	ldhu	r2,-24(fp)
  43fc38:	10bfffc4 	addi	r2,r2,-1
  43fc3c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  43fc40:	e0bffa0b 	ldhu	r2,-24(fp)
  43fc44:	103ff71e 	bne	r2,zero,43fc24 <OSTimeDlyHMSM+0x200>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  43fc48:	0005883a 	mov	r2,zero
}
  43fc4c:	e037883a 	mov	sp,fp
  43fc50:	dfc00317 	ldw	ra,12(sp)
  43fc54:	df000217 	ldw	fp,8(sp)
  43fc58:	dc400117 	ldw	r17,4(sp)
  43fc5c:	dc000017 	ldw	r16,0(sp)
  43fc60:	dec00404 	addi	sp,sp,16
  43fc64:	f800283a 	ret

0043fc68 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  43fc68:	defff004 	addi	sp,sp,-64
  43fc6c:	dfc00f15 	stw	ra,60(sp)
  43fc70:	df000e15 	stw	fp,56(sp)
  43fc74:	df000e04 	addi	fp,sp,56
  43fc78:	2005883a 	mov	r2,r4
  43fc7c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  43fc80:	e03ff215 	stw	zero,-56(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  43fc84:	e0bfff03 	ldbu	r2,-4(fp)
  43fc88:	10800530 	cmpltui	r2,r2,20
  43fc8c:	1000021e 	bne	r2,zero,43fc98 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  43fc90:	00800a84 	movi	r2,42
  43fc94:	0000a106 	br	43ff1c <OSTimeDlyResume+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43fc98:	0005303a 	rdctl	r2,status
  43fc9c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43fca0:	e0fff417 	ldw	r3,-48(fp)
  43fca4:	00bfff84 	movi	r2,-2
  43fca8:	1884703a 	and	r2,r3,r2
  43fcac:	1001703a 	wrctl	status,r2
  
  return context;
  43fcb0:	e0bff417 	ldw	r2,-48(fp)
    }
    OS_ENTER_CRITICAL();
  43fcb4:	e0bff215 	stw	r2,-56(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  43fcb8:	e0bfff03 	ldbu	r2,-4(fp)
  43fcbc:	00c01174 	movhi	r3,69
  43fcc0:	18ead504 	addi	r3,r3,-21676
  43fcc4:	1085883a 	add	r2,r2,r2
  43fcc8:	1085883a 	add	r2,r2,r2
  43fccc:	1885883a 	add	r2,r3,r2
  43fcd0:	10800017 	ldw	r2,0(r2)
  43fcd4:	e0bff315 	stw	r2,-52(fp)
    if (ptcb == (OS_TCB *)0) {
  43fcd8:	e0bff317 	ldw	r2,-52(fp)
  43fcdc:	1000111e 	bne	r2,zero,43fd24 <OSTimeDlyResume+0xbc>
  43fce0:	e0bff217 	ldw	r2,-56(fp)
  43fce4:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43fce8:	0005303a 	rdctl	r2,status
  43fcec:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43fcf0:	e0fff617 	ldw	r3,-40(fp)
  43fcf4:	00bfff84 	movi	r2,-2
  43fcf8:	1884703a 	and	r2,r3,r2
  43fcfc:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43fd00:	e0bff517 	ldw	r2,-44(fp)
  43fd04:	1080004c 	andi	r2,r2,1
  43fd08:	e0fff617 	ldw	r3,-40(fp)
  43fd0c:	1884b03a 	or	r2,r3,r2
  43fd10:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  43fd14:	e0bff617 	ldw	r2,-40(fp)
  43fd18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  43fd1c:	008010c4 	movi	r2,67
  43fd20:	00007e06 	br	43ff1c <OSTimeDlyResume+0x2b4>
    }
    if (ptcb == OS_TCB_RESERVED) {
  43fd24:	e0bff317 	ldw	r2,-52(fp)
  43fd28:	10800058 	cmpnei	r2,r2,1
  43fd2c:	1000111e 	bne	r2,zero,43fd74 <OSTimeDlyResume+0x10c>
  43fd30:	e0bff217 	ldw	r2,-56(fp)
  43fd34:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43fd38:	0005303a 	rdctl	r2,status
  43fd3c:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43fd40:	e0fff817 	ldw	r3,-32(fp)
  43fd44:	00bfff84 	movi	r2,-2
  43fd48:	1884703a 	and	r2,r3,r2
  43fd4c:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43fd50:	e0bff717 	ldw	r2,-36(fp)
  43fd54:	1080004c 	andi	r2,r2,1
  43fd58:	e0fff817 	ldw	r3,-32(fp)
  43fd5c:	1884b03a 	or	r2,r3,r2
  43fd60:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  43fd64:	e0bff817 	ldw	r2,-32(fp)
  43fd68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  43fd6c:	008010c4 	movi	r2,67
  43fd70:	00006a06 	br	43ff1c <OSTimeDlyResume+0x2b4>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  43fd74:	e0bff317 	ldw	r2,-52(fp)
  43fd78:	10800b8b 	ldhu	r2,46(r2)
  43fd7c:	10bfffcc 	andi	r2,r2,65535
  43fd80:	1000111e 	bne	r2,zero,43fdc8 <OSTimeDlyResume+0x160>
  43fd84:	e0bff217 	ldw	r2,-56(fp)
  43fd88:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43fd8c:	0005303a 	rdctl	r2,status
  43fd90:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43fd94:	e0fffa17 	ldw	r3,-24(fp)
  43fd98:	00bfff84 	movi	r2,-2
  43fd9c:	1884703a 	and	r2,r3,r2
  43fda0:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43fda4:	e0bff917 	ldw	r2,-28(fp)
  43fda8:	1080004c 	andi	r2,r2,1
  43fdac:	e0fffa17 	ldw	r3,-24(fp)
  43fdb0:	1884b03a 	or	r2,r3,r2
  43fdb4:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  43fdb8:	e0bffa17 	ldw	r2,-24(fp)
  43fdbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  43fdc0:	00801404 	movi	r2,80
  43fdc4:	00005506 	br	43ff1c <OSTimeDlyResume+0x2b4>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  43fdc8:	e0bff317 	ldw	r2,-52(fp)
  43fdcc:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  43fdd0:	e0bff317 	ldw	r2,-52(fp)
  43fdd4:	10800c03 	ldbu	r2,48(r2)
  43fdd8:	10803fcc 	andi	r2,r2,255
  43fddc:	10800dcc 	andi	r2,r2,55
  43fde0:	10000b26 	beq	r2,zero,43fe10 <OSTimeDlyResume+0x1a8>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  43fde4:	e0bff317 	ldw	r2,-52(fp)
  43fde8:	10c00c03 	ldbu	r3,48(r2)
  43fdec:	00bff204 	movi	r2,-56
  43fdf0:	1884703a 	and	r2,r3,r2
  43fdf4:	1007883a 	mov	r3,r2
  43fdf8:	e0bff317 	ldw	r2,-52(fp)
  43fdfc:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  43fe00:	e0bff317 	ldw	r2,-52(fp)
  43fe04:	00c00044 	movi	r3,1
  43fe08:	10c00c45 	stb	r3,49(r2)
  43fe0c:	00000206 	br	43fe18 <OSTimeDlyResume+0x1b0>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  43fe10:	e0bff317 	ldw	r2,-52(fp)
  43fe14:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  43fe18:	e0bff317 	ldw	r2,-52(fp)
  43fe1c:	10800c03 	ldbu	r2,48(r2)
  43fe20:	10803fcc 	andi	r2,r2,255
  43fe24:	1080020c 	andi	r2,r2,8
  43fe28:	10002c1e 	bne	r2,zero,43fedc <OSTimeDlyResume+0x274>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  43fe2c:	e0bff317 	ldw	r2,-52(fp)
  43fe30:	10c00d83 	ldbu	r3,54(r2)
  43fe34:	00801134 	movhi	r2,68
  43fe38:	109e0b04 	addi	r2,r2,30764
  43fe3c:	10800003 	ldbu	r2,0(r2)
  43fe40:	1884b03a 	or	r2,r3,r2
  43fe44:	1007883a 	mov	r3,r2
  43fe48:	00801134 	movhi	r2,68
  43fe4c:	109e0b04 	addi	r2,r2,30764
  43fe50:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  43fe54:	e0bff317 	ldw	r2,-52(fp)
  43fe58:	10800d03 	ldbu	r2,52(r2)
  43fe5c:	10803fcc 	andi	r2,r2,255
  43fe60:	e0fff317 	ldw	r3,-52(fp)
  43fe64:	18c00d03 	ldbu	r3,52(r3)
  43fe68:	18c03fcc 	andi	r3,r3,255
  43fe6c:	01001134 	movhi	r4,68
  43fe70:	211e0b44 	addi	r4,r4,30765
  43fe74:	20c7883a 	add	r3,r4,r3
  43fe78:	19000003 	ldbu	r4,0(r3)
  43fe7c:	e0fff317 	ldw	r3,-52(fp)
  43fe80:	18c00d43 	ldbu	r3,53(r3)
  43fe84:	20c6b03a 	or	r3,r4,r3
  43fe88:	01001134 	movhi	r4,68
  43fe8c:	211e0b44 	addi	r4,r4,30765
  43fe90:	2085883a 	add	r2,r4,r2
  43fe94:	10c00005 	stb	r3,0(r2)
  43fe98:	e0bff217 	ldw	r2,-56(fp)
  43fe9c:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43fea0:	0005303a 	rdctl	r2,status
  43fea4:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43fea8:	e0fffc17 	ldw	r3,-16(fp)
  43feac:	00bfff84 	movi	r2,-2
  43feb0:	1884703a 	and	r2,r3,r2
  43feb4:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43feb8:	e0bffb17 	ldw	r2,-20(fp)
  43febc:	1080004c 	andi	r2,r2,1
  43fec0:	e0fffc17 	ldw	r3,-16(fp)
  43fec4:	1884b03a 	or	r2,r3,r2
  43fec8:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  43fecc:	e0bffc17 	ldw	r2,-16(fp)
  43fed0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  43fed4:	04383a80 	call	4383a8 <OS_Sched>
  43fed8:	00000f06 	br	43ff18 <OSTimeDlyResume+0x2b0>
  43fedc:	e0bff217 	ldw	r2,-56(fp)
  43fee0:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43fee4:	0005303a 	rdctl	r2,status
  43fee8:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43feec:	e0fffe17 	ldw	r3,-8(fp)
  43fef0:	00bfff84 	movi	r2,-2
  43fef4:	1884703a 	and	r2,r3,r2
  43fef8:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43fefc:	e0bffd17 	ldw	r2,-12(fp)
  43ff00:	1080004c 	andi	r2,r2,1
  43ff04:	e0fffe17 	ldw	r3,-8(fp)
  43ff08:	1884b03a 	or	r2,r3,r2
  43ff0c:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  43ff10:	e0bffe17 	ldw	r2,-8(fp)
  43ff14:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  43ff18:	0005883a 	mov	r2,zero
}
  43ff1c:	e037883a 	mov	sp,fp
  43ff20:	dfc00117 	ldw	ra,4(sp)
  43ff24:	df000017 	ldw	fp,0(sp)
  43ff28:	dec00204 	addi	sp,sp,8
  43ff2c:	f800283a 	ret

0043ff30 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  43ff30:	defffa04 	addi	sp,sp,-24
  43ff34:	df000515 	stw	fp,20(sp)
  43ff38:	df000504 	addi	fp,sp,20
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  43ff3c:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43ff40:	0005303a 	rdctl	r2,status
  43ff44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43ff48:	e0fffd17 	ldw	r3,-12(fp)
  43ff4c:	00bfff84 	movi	r2,-2
  43ff50:	1884703a 	and	r2,r3,r2
  43ff54:	1001703a 	wrctl	status,r2
  
  return context;
  43ff58:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  43ff5c:	e0bffb15 	stw	r2,-20(fp)
    ticks = OSTime;
  43ff60:	00801134 	movhi	r2,68
  43ff64:	109e0f04 	addi	r2,r2,30780
  43ff68:	10800017 	ldw	r2,0(r2)
  43ff6c:	e0bffc15 	stw	r2,-16(fp)
  43ff70:	e0bffb17 	ldw	r2,-20(fp)
  43ff74:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  43ff78:	0005303a 	rdctl	r2,status
  43ff7c:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  43ff80:	e0ffff17 	ldw	r3,-4(fp)
  43ff84:	00bfff84 	movi	r2,-2
  43ff88:	1884703a 	and	r2,r3,r2
  43ff8c:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  43ff90:	e0bffe17 	ldw	r2,-8(fp)
  43ff94:	1080004c 	andi	r2,r2,1
  43ff98:	e0ffff17 	ldw	r3,-4(fp)
  43ff9c:	1884b03a 	or	r2,r3,r2
  43ffa0:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  43ffa4:	e0bfff17 	ldw	r2,-4(fp)
  43ffa8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  43ffac:	e0bffc17 	ldw	r2,-16(fp)
}
  43ffb0:	e037883a 	mov	sp,fp
  43ffb4:	df000017 	ldw	fp,0(sp)
  43ffb8:	dec00104 	addi	sp,sp,4
  43ffbc:	f800283a 	ret

0043ffc0 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  43ffc0:	defffa04 	addi	sp,sp,-24
  43ffc4:	df000515 	stw	fp,20(sp)
  43ffc8:	df000504 	addi	fp,sp,20
  43ffcc:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  43ffd0:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  43ffd4:	0005303a 	rdctl	r2,status
  43ffd8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  43ffdc:	e0fffc17 	ldw	r3,-16(fp)
  43ffe0:	00bfff84 	movi	r2,-2
  43ffe4:	1884703a 	and	r2,r3,r2
  43ffe8:	1001703a 	wrctl	status,r2
  
  return context;
  43ffec:	e0bffc17 	ldw	r2,-16(fp)
#endif



    OS_ENTER_CRITICAL();
  43fff0:	e0bffb15 	stw	r2,-20(fp)
    OSTime = ticks;
  43fff4:	00801134 	movhi	r2,68
  43fff8:	109e0f04 	addi	r2,r2,30780
  43fffc:	e0ffff17 	ldw	r3,-4(fp)
  440000:	10c00015 	stw	r3,0(r2)
  440004:	e0bffb17 	ldw	r2,-20(fp)
  440008:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  44000c:	0005303a 	rdctl	r2,status
  440010:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  440014:	e0fffe17 	ldw	r3,-8(fp)
  440018:	00bfff84 	movi	r2,-2
  44001c:	1884703a 	and	r2,r3,r2
  440020:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  440024:	e0bffd17 	ldw	r2,-12(fp)
  440028:	1080004c 	andi	r2,r2,1
  44002c:	e0fffe17 	ldw	r3,-8(fp)
  440030:	1884b03a 	or	r2,r3,r2
  440034:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  440038:	e0bffe17 	ldw	r2,-8(fp)
  44003c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  440040:	e037883a 	mov	sp,fp
  440044:	df000017 	ldw	fp,0(sp)
  440048:	dec00104 	addi	sp,sp,4
  44004c:	f800283a 	ret

00440050 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  440050:	defffd04 	addi	sp,sp,-12
  440054:	dfc00215 	stw	ra,8(sp)
  440058:	df000115 	stw	fp,4(sp)
  44005c:	df000104 	addi	fp,sp,4
  440060:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  440064:	e13fff17 	ldw	r4,-4(fp)
  440068:	01401134 	movhi	r5,68
  44006c:	29570304 	addi	r5,r5,23564
  440070:	04418a40 	call	4418a4 <alt_dev_llist_insert>
}
  440074:	e037883a 	mov	sp,fp
  440078:	dfc00117 	ldw	ra,4(sp)
  44007c:	df000017 	ldw	fp,0(sp)
  440080:	dec00204 	addi	sp,sp,8
  440084:	f800283a 	ret

00440088 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  440088:	defffe04 	addi	sp,sp,-8
  44008c:	dfc00115 	stw	ra,4(sp)
  440090:	df000015 	stw	fp,0(sp)
  440094:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  440098:	00801134 	movhi	r2,68
  44009c:	10970604 	addi	r2,r2,23576
  4400a0:	10800017 	ldw	r2,0(r2)
  4400a4:	10000526 	beq	r2,zero,4400bc <alt_get_errno+0x34>
  4400a8:	00801134 	movhi	r2,68
  4400ac:	10970604 	addi	r2,r2,23576
  4400b0:	10800017 	ldw	r2,0(r2)
  4400b4:	103ee83a 	callr	r2
  4400b8:	00000206 	br	4400c4 <alt_get_errno+0x3c>
  4400bc:	00801134 	movhi	r2,68
  4400c0:	109df504 	addi	r2,r2,30676
}
  4400c4:	e037883a 	mov	sp,fp
  4400c8:	dfc00117 	ldw	ra,4(sp)
  4400cc:	df000017 	ldw	fp,0(sp)
  4400d0:	dec00204 	addi	sp,sp,8
  4400d4:	f800283a 	ret

004400d8 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  4400d8:	defffa04 	addi	sp,sp,-24
  4400dc:	dfc00515 	stw	ra,20(sp)
  4400e0:	df000415 	stw	fp,16(sp)
  4400e4:	df000404 	addi	fp,sp,16
  4400e8:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  4400ec:	e0bfff17 	ldw	r2,-4(fp)
  4400f0:	10800404 	addi	r2,r2,16
  4400f4:	e0bffd15 	stw	r2,-12(fp)
  4400f8:	00800044 	movi	r2,1
  4400fc:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  440100:	e0bffe0b 	ldhu	r2,-8(fp)
  440104:	1009883a 	mov	r4,r2
  440108:	043cb540 	call	43cb54 <OSSemCreate>
  44010c:	e0fffd17 	ldw	r3,-12(fp)
  440110:	18800015 	stw	r2,0(r3)
  return *sem ? 0 : -1;
  440114:	e0bffd17 	ldw	r2,-12(fp)
  440118:	10800017 	ldw	r2,0(r2)
  44011c:	10000226 	beq	r2,zero,440128 <alt_avalon_mutex_reg+0x50>
  440120:	0005883a 	mov	r2,zero
  440124:	00000106 	br	44012c <alt_avalon_mutex_reg+0x54>
  440128:	00bfffc4 	movi	r2,-1
  44012c:	e0bffc15 	stw	r2,-16(fp)
  if (!ret_code)
  440130:	e0bffc17 	ldw	r2,-16(fp)
  440134:	1000061e 	bne	r2,zero,440150 <alt_avalon_mutex_reg+0x78>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  440138:	e13fff17 	ldw	r4,-4(fp)
  44013c:	01401134 	movhi	r5,68
  440140:	29572804 	addi	r5,r5,23712
  440144:	04418a40 	call	4418a4 <alt_dev_llist_insert>
  440148:	e0bffc15 	stw	r2,-16(fp)
  44014c:	00000506 	br	440164 <alt_avalon_mutex_reg+0x8c>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  440150:	04400880 	call	440088 <alt_get_errno>
  440154:	00c00304 	movi	r3,12
  440158:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  44015c:	00bffd04 	movi	r2,-12
  440160:	e0bffc15 	stw	r2,-16(fp)
  }

  return ret_code;
  440164:	e0bffc17 	ldw	r2,-16(fp)
}
  440168:	e037883a 	mov	sp,fp
  44016c:	dfc00117 	ldw	ra,4(sp)
  440170:	df000017 	ldw	fp,0(sp)
  440174:	dec00204 	addi	sp,sp,8
  440178:	f800283a 	ret

0044017c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  44017c:	defffd04 	addi	sp,sp,-12
  440180:	dfc00215 	stw	ra,8(sp)
  440184:	df000115 	stw	fp,4(sp)
  440188:	df000104 	addi	fp,sp,4
  44018c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( PROCESSOR1_0_CPU1, processor1_0_cpu1);
  440190:	04420740 	call	442074 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  440194:	00800044 	movi	r2,1
  440198:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  44019c:	e037883a 	mov	sp,fp
  4401a0:	dfc00117 	ldw	ra,4(sp)
  4401a4:	df000017 	ldw	fp,0(sp)
  4401a8:	dec00204 	addi	sp,sp,8
  4401ac:	f800283a 	ret

004401b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  4401b0:	defffe04 	addi	sp,sp,-8
  4401b4:	dfc00115 	stw	ra,4(sp)
  4401b8:	df000015 	stw	fp,0(sp)
  4401bc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( PROCESSOR1_0_TIMER, processor1_0_timer);
  4401c0:	01020074 	movhi	r4,2049
  4401c4:	21224004 	addi	r4,r4,-30464
  4401c8:	000b883a 	mov	r5,zero
  4401cc:	000d883a 	mov	r6,zero
  4401d0:	01c01904 	movi	r7,100
  4401d4:	04413d40 	call	4413d4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( PROCESSOR1_0_TIMESTAMP, processor1_0_timestamp);
  4401d8:	00801134 	movhi	r2,68
  4401dc:	109e1304 	addi	r2,r2,30796
  4401e0:	00c20034 	movhi	r3,2048
  4401e4:	10c00015 	stw	r3,0(r2)
  4401e8:	00801134 	movhi	r2,68
  4401ec:	109e1404 	addi	r2,r2,30800
  4401f0:	00c0bef4 	movhi	r3,763
  4401f4:	18fc2004 	addi	r3,r3,-3968
  4401f8:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_JTAG_UART_INIT ( PROCESSOR1_0_JTAG_UART, processor1_0_jtag_uart);
  4401fc:	01001134 	movhi	r4,68
  440200:	2112e104 	addi	r4,r4,19332
  440204:	000b883a 	mov	r5,zero
  440208:	018000c4 	movi	r6,3
  44020c:	04403a40 	call	4403a4 <altera_avalon_jtag_uart_init>
  440210:	01001134 	movhi	r4,68
  440214:	2112d704 	addi	r4,r4,19292
  440218:	04400500 	call	440050 <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
  44021c:	01001134 	movhi	r4,68
  440220:	2116f204 	addi	r4,r4,23496
  440224:	04400d80 	call	4400d8 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
  440228:	0001883a 	nop
}
  44022c:	e037883a 	mov	sp,fp
  440230:	dfc00117 	ldw	ra,4(sp)
  440234:	df000017 	ldw	fp,0(sp)
  440238:	dec00204 	addi	sp,sp,8
  44023c:	f800283a 	ret

00440240 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  440240:	defffa04 	addi	sp,sp,-24
  440244:	dfc00515 	stw	ra,20(sp)
  440248:	df000415 	stw	fp,16(sp)
  44024c:	df000404 	addi	fp,sp,16
  440250:	e13ffd15 	stw	r4,-12(fp)
  440254:	e17ffe15 	stw	r5,-8(fp)
  440258:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  44025c:	e0bffd17 	ldw	r2,-12(fp)
  440260:	10800017 	ldw	r2,0(r2)
  440264:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  440268:	e0bffc17 	ldw	r2,-16(fp)
  44026c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
  440270:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  440274:	10800217 	ldw	r2,8(r2)
  440278:	1809883a 	mov	r4,r3
  44027c:	e17ffe17 	ldw	r5,-8(fp)
  440280:	e1bfff17 	ldw	r6,-4(fp)
  440284:	100f883a 	mov	r7,r2
  440288:	04409f40 	call	4409f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  44028c:	e037883a 	mov	sp,fp
  440290:	dfc00117 	ldw	ra,4(sp)
  440294:	df000017 	ldw	fp,0(sp)
  440298:	dec00204 	addi	sp,sp,8
  44029c:	f800283a 	ret

004402a0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  4402a0:	defffa04 	addi	sp,sp,-24
  4402a4:	dfc00515 	stw	ra,20(sp)
  4402a8:	df000415 	stw	fp,16(sp)
  4402ac:	df000404 	addi	fp,sp,16
  4402b0:	e13ffd15 	stw	r4,-12(fp)
  4402b4:	e17ffe15 	stw	r5,-8(fp)
  4402b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  4402bc:	e0bffd17 	ldw	r2,-12(fp)
  4402c0:	10800017 	ldw	r2,0(r2)
  4402c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  4402c8:	e0bffc17 	ldw	r2,-16(fp)
  4402cc:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
  4402d0:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  4402d4:	10800217 	ldw	r2,8(r2)
  4402d8:	1809883a 	mov	r4,r3
  4402dc:	e17ffe17 	ldw	r5,-8(fp)
  4402e0:	e1bfff17 	ldw	r6,-4(fp)
  4402e4:	100f883a 	mov	r7,r2
  4402e8:	0440ce40 	call	440ce4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  4402ec:	e037883a 	mov	sp,fp
  4402f0:	dfc00117 	ldw	ra,4(sp)
  4402f4:	df000017 	ldw	fp,0(sp)
  4402f8:	dec00204 	addi	sp,sp,8
  4402fc:	f800283a 	ret

00440300 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  440300:	defffc04 	addi	sp,sp,-16
  440304:	dfc00315 	stw	ra,12(sp)
  440308:	df000215 	stw	fp,8(sp)
  44030c:	df000204 	addi	fp,sp,8
  440310:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  440314:	e0bfff17 	ldw	r2,-4(fp)
  440318:	10800017 	ldw	r2,0(r2)
  44031c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  440320:	e0bffe17 	ldw	r2,-8(fp)
  440324:	10c00a04 	addi	r3,r2,40
  440328:	e0bfff17 	ldw	r2,-4(fp)
  44032c:	10800217 	ldw	r2,8(r2)
  440330:	1809883a 	mov	r4,r3
  440334:	100b883a 	mov	r5,r2
  440338:	04408980 	call	440898 <altera_avalon_jtag_uart_close>
}
  44033c:	e037883a 	mov	sp,fp
  440340:	dfc00117 	ldw	ra,4(sp)
  440344:	df000017 	ldw	fp,0(sp)
  440348:	dec00204 	addi	sp,sp,8
  44034c:	f800283a 	ret

00440350 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  440350:	defffa04 	addi	sp,sp,-24
  440354:	dfc00515 	stw	ra,20(sp)
  440358:	df000415 	stw	fp,16(sp)
  44035c:	df000404 	addi	fp,sp,16
  440360:	e13ffd15 	stw	r4,-12(fp)
  440364:	e17ffe15 	stw	r5,-8(fp)
  440368:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  44036c:	e0bffd17 	ldw	r2,-12(fp)
  440370:	10800017 	ldw	r2,0(r2)
  440374:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  440378:	e0bffc17 	ldw	r2,-16(fp)
  44037c:	10800a04 	addi	r2,r2,40
  440380:	1009883a 	mov	r4,r2
  440384:	e17ffe17 	ldw	r5,-8(fp)
  440388:	e1bfff17 	ldw	r6,-4(fp)
  44038c:	04409000 	call	440900 <altera_avalon_jtag_uart_ioctl>
}
  440390:	e037883a 	mov	sp,fp
  440394:	dfc00117 	ldw	ra,4(sp)
  440398:	df000017 	ldw	fp,0(sp)
  44039c:	dec00204 	addi	sp,sp,8
  4403a0:	f800283a 	ret

004403a4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  4403a4:	defff404 	addi	sp,sp,-48
  4403a8:	dfc00b15 	stw	ra,44(sp)
  4403ac:	df000a15 	stw	fp,40(sp)
  4403b0:	df000a04 	addi	fp,sp,40
  4403b4:	e13ffd15 	stw	r4,-12(fp)
  4403b8:	e17ffe15 	stw	r5,-8(fp)
  4403bc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  4403c0:	e0bffd17 	ldw	r2,-12(fp)
  4403c4:	10800c04 	addi	r2,r2,48
  4403c8:	e0bff715 	stw	r2,-36(fp)
  4403cc:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  4403d0:	e0fff80b 	ldhu	r3,-32(fp)
  4403d4:	e0bffc84 	addi	r2,fp,-14
  4403d8:	1809883a 	mov	r4,r3
  4403dc:	100b883a 	mov	r5,r2
  4403e0:	04390f00 	call	4390f0 <OSFlagCreate>
  4403e4:	e0fff717 	ldw	r3,-36(fp)
  4403e8:	18800015 	stw	r2,0(r3)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  4403ec:	e0bffd17 	ldw	r2,-12(fp)
  4403f0:	10800a04 	addi	r2,r2,40
  4403f4:	e0bff915 	stw	r2,-28(fp)
  4403f8:	00800044 	movi	r2,1
  4403fc:	e0bffa0d 	sth	r2,-24(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  440400:	e0bffa0b 	ldhu	r2,-24(fp)
  440404:	1009883a 	mov	r4,r2
  440408:	043cb540 	call	43cb54 <OSSemCreate>
  44040c:	e0fff917 	ldw	r3,-28(fp)
  440410:	18800015 	stw	r2,0(r3)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  440414:	e0bffd17 	ldw	r2,-12(fp)
  440418:	10800b04 	addi	r2,r2,44
  44041c:	e0bffb15 	stw	r2,-20(fp)
  440420:	00800044 	movi	r2,1
  440424:	e0bffc0d 	sth	r2,-16(fp)
  440428:	e0bffc0b 	ldhu	r2,-16(fp)
  44042c:	1009883a 	mov	r4,r2
  440430:	043cb540 	call	43cb54 <OSSemCreate>
  440434:	e0fffb17 	ldw	r3,-20(fp)
  440438:	18800015 	stw	r2,0(r3)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  44043c:	e0bffd17 	ldw	r2,-12(fp)
  440440:	00c00044 	movi	r3,1
  440444:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  440448:	e0bffd17 	ldw	r2,-12(fp)
  44044c:	10800017 	ldw	r2,0(r2)
  440450:	10800104 	addi	r2,r2,4
  440454:	e0fffd17 	ldw	r3,-12(fp)
  440458:	18c00817 	ldw	r3,32(r3)
  44045c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  440460:	e0fffe17 	ldw	r3,-8(fp)
  440464:	e0bfff17 	ldw	r2,-4(fp)
  440468:	d8000015 	stw	zero,0(sp)
  44046c:	1809883a 	mov	r4,r3
  440470:	100b883a 	mov	r5,r2
  440474:	01801134 	movhi	r6,68
  440478:	31813804 	addi	r6,r6,1248
  44047c:	e1fffd17 	ldw	r7,-12(fp)
  440480:	04357700 	call	435770 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  440484:	e0bffd17 	ldw	r2,-12(fp)
  440488:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  44048c:	e0bffd17 	ldw	r2,-12(fp)
  440490:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  440494:	00801134 	movhi	r2,68
  440498:	109e1504 	addi	r2,r2,30804
  44049c:	10800017 	ldw	r2,0(r2)
  4404a0:	1809883a 	mov	r4,r3
  4404a4:	100b883a 	mov	r5,r2
  4404a8:	01801134 	movhi	r6,68
  4404ac:	3181e304 	addi	r6,r6,1932
  4404b0:	e1fffd17 	ldw	r7,-12(fp)
  4404b4:	04416cc0 	call	4416cc <alt_alarm_start>
  4404b8:	1000040e 	bge	r2,zero,4404cc <altera_avalon_jtag_uart_init+0x128>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  4404bc:	e0bffd17 	ldw	r2,-12(fp)
  4404c0:	00e00034 	movhi	r3,32768
  4404c4:	18ffffc4 	addi	r3,r3,-1
  4404c8:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  4404cc:	e037883a 	mov	sp,fp
  4404d0:	dfc00117 	ldw	ra,4(sp)
  4404d4:	df000017 	ldw	fp,0(sp)
  4404d8:	dec00204 	addi	sp,sp,8
  4404dc:	f800283a 	ret

004404e0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  4404e0:	defff204 	addi	sp,sp,-56
  4404e4:	dfc00d15 	stw	ra,52(sp)
  4404e8:	df000c15 	stw	fp,48(sp)
  4404ec:	df000c04 	addi	fp,sp,48
  4404f0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  4404f4:	e0bfff17 	ldw	r2,-4(fp)
  4404f8:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
  4404fc:	e0bff617 	ldw	r2,-40(fp)
  440500:	10800017 	ldw	r2,0(r2)
  440504:	e0bff715 	stw	r2,-36(fp)
  440508:	00000106 	br	440510 <altera_avalon_jtag_uart_irq+0x30>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
  44050c:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  440510:	e0bff717 	ldw	r2,-36(fp)
  440514:	10800104 	addi	r2,r2,4
  440518:	10800037 	ldwio	r2,0(r2)
  44051c:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  440520:	e0bff817 	ldw	r2,-32(fp)
  440524:	1080c00c 	andi	r2,r2,768
  440528:	10009226 	beq	r2,zero,440774 <altera_avalon_jtag_uart_irq+0x294>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  44052c:	e0bff817 	ldw	r2,-32(fp)
  440530:	1080400c 	andi	r2,r2,256
  440534:	10004826 	beq	r2,zero,440658 <altera_avalon_jtag_uart_irq+0x178>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  440538:	00800074 	movhi	r2,1
  44053c:	e0bff415 	stw	r2,-48(fp)
  440540:	00000106 	br	440548 <altera_avalon_jtag_uart_irq+0x68>
        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  440544:	0001883a 	nop
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  440548:	e0bff617 	ldw	r2,-40(fp)
  44054c:	10800d17 	ldw	r2,52(r2)
  440550:	10800044 	addi	r2,r2,1
  440554:	1081ffcc 	andi	r2,r2,2047
  440558:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  44055c:	e0bff617 	ldw	r2,-40(fp)
  440560:	10c00e17 	ldw	r3,56(r2)
  440564:	e0bff917 	ldw	r2,-28(fp)
  440568:	18802726 	beq	r3,r2,440608 <altera_avalon_jtag_uart_irq+0x128>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  44056c:	e0bff717 	ldw	r2,-36(fp)
  440570:	10800037 	ldwio	r2,0(r2)
  440574:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  440578:	e0bff417 	ldw	r2,-48(fp)
  44057c:	10a0000c 	andi	r2,r2,32768
  440580:	10002326 	beq	r2,zero,440610 <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  440584:	e0bff617 	ldw	r2,-40(fp)
  440588:	10800d17 	ldw	r2,52(r2)
  44058c:	e0fff417 	ldw	r3,-48(fp)
  440590:	e13ff617 	ldw	r4,-40(fp)
  440594:	2085883a 	add	r2,r4,r2
  440598:	10801104 	addi	r2,r2,68
  44059c:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  4405a0:	e0bff617 	ldw	r2,-40(fp)
  4405a4:	10800d17 	ldw	r2,52(r2)
  4405a8:	10800044 	addi	r2,r2,1
  4405ac:	10c1ffcc 	andi	r3,r2,2047
  4405b0:	e0bff617 	ldw	r2,-40(fp)
  4405b4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  4405b8:	e0bff617 	ldw	r2,-40(fp)
  4405bc:	10800c17 	ldw	r2,48(r2)
  4405c0:	e0bffa15 	stw	r2,-24(fp)
  4405c4:	00800044 	movi	r2,1
  4405c8:	e0bffb0d 	sth	r2,-20(fp)
  4405cc:	00800044 	movi	r2,1
  4405d0:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  4405d4:	00801134 	movhi	r2,68
  4405d8:	109dff44 	addi	r2,r2,30717
  4405dc:	10800003 	ldbu	r2,0(r2)
  4405e0:	10803fcc 	andi	r2,r2,255
  4405e4:	103fd726 	beq	r2,zero,440544 <altera_avalon_jtag_uart_irq+0x64>
  {
    OSFlagPost (group, flags, opt, &err);
  4405e8:	e17ffb0b 	ldhu	r5,-20(fp)
  4405ec:	e0fffb83 	ldbu	r3,-18(fp)
  4405f0:	e0bffdc4 	addi	r2,fp,-9
  4405f4:	e13ffa17 	ldw	r4,-24(fp)
  4405f8:	180d883a 	mov	r6,r3
  4405fc:	100f883a 	mov	r7,r2
  440600:	043a1940 	call	43a194 <OSFlagPost>
      }
  440604:	003fcf06 	br	440544 <altera_avalon_jtag_uart_irq+0x64>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  440608:	0001883a 	nop
  44060c:	00000106 	br	440614 <altera_avalon_jtag_uart_irq+0x134>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  440610:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  440614:	e0bff417 	ldw	r2,-48(fp)
  440618:	10bfffec 	andhi	r2,r2,65535
  44061c:	10000e26 	beq	r2,zero,440658 <altera_avalon_jtag_uart_irq+0x178>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  440620:	e0bff617 	ldw	r2,-40(fp)
  440624:	10c00817 	ldw	r3,32(r2)
  440628:	00bfff84 	movi	r2,-2
  44062c:	1886703a 	and	r3,r3,r2
  440630:	e0bff617 	ldw	r2,-40(fp)
  440634:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  440638:	e0bff717 	ldw	r2,-36(fp)
  44063c:	10800104 	addi	r2,r2,4
  440640:	e0fff617 	ldw	r3,-40(fp)
  440644:	18c00817 	ldw	r3,32(r3)
  440648:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  44064c:	e0bff717 	ldw	r2,-36(fp)
  440650:	10800104 	addi	r2,r2,4
  440654:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  440658:	e0bff817 	ldw	r2,-32(fp)
  44065c:	1080800c 	andi	r2,r2,512
  440660:	103faa26 	beq	r2,zero,44050c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  440664:	e0bff817 	ldw	r2,-32(fp)
  440668:	1004d43a 	srli	r2,r2,16
  44066c:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  440670:	00002706 	br	440710 <altera_avalon_jtag_uart_irq+0x230>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  440674:	e0bff717 	ldw	r2,-36(fp)
  440678:	e0fff617 	ldw	r3,-40(fp)
  44067c:	18c01017 	ldw	r3,64(r3)
  440680:	e13ff617 	ldw	r4,-40(fp)
  440684:	20c7883a 	add	r3,r4,r3
  440688:	18c21104 	addi	r3,r3,2116
  44068c:	18c00003 	ldbu	r3,0(r3)
  440690:	18c03fcc 	andi	r3,r3,255
  440694:	18c0201c 	xori	r3,r3,128
  440698:	18ffe004 	addi	r3,r3,-128
  44069c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  4406a0:	e0bff617 	ldw	r2,-40(fp)
  4406a4:	10801017 	ldw	r2,64(r2)
  4406a8:	10800044 	addi	r2,r2,1
  4406ac:	10c1ffcc 	andi	r3,r2,2047
  4406b0:	e0bff617 	ldw	r2,-40(fp)
  4406b4:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  4406b8:	e0bff617 	ldw	r2,-40(fp)
  4406bc:	10800c17 	ldw	r2,48(r2)
  4406c0:	e0bffc15 	stw	r2,-16(fp)
  4406c4:	00800084 	movi	r2,2
  4406c8:	e0bffd0d 	sth	r2,-12(fp)
  4406cc:	00800044 	movi	r2,1
  4406d0:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  4406d4:	00801134 	movhi	r2,68
  4406d8:	109dff44 	addi	r2,r2,30717
  4406dc:	10800003 	ldbu	r2,0(r2)
  4406e0:	10803fcc 	andi	r2,r2,255
  4406e4:	10000726 	beq	r2,zero,440704 <altera_avalon_jtag_uart_irq+0x224>
  {
    OSFlagPost (group, flags, opt, &err);
  4406e8:	e17ffd0b 	ldhu	r5,-12(fp)
  4406ec:	e0fffd83 	ldbu	r3,-10(fp)
  4406f0:	e0bffe04 	addi	r2,fp,-8
  4406f4:	e13ffc17 	ldw	r4,-16(fp)
  4406f8:	180d883a 	mov	r6,r3
  4406fc:	100f883a 	mov	r7,r2
  440700:	043a1940 	call	43a194 <OSFlagPost>

        space--;
  440704:	e0bff517 	ldw	r2,-44(fp)
  440708:	10bfffc4 	addi	r2,r2,-1
  44070c:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  440710:	e0bff517 	ldw	r2,-44(fp)
  440714:	10000526 	beq	r2,zero,44072c <altera_avalon_jtag_uart_irq+0x24c>
  440718:	e0bff617 	ldw	r2,-40(fp)
  44071c:	10c01017 	ldw	r3,64(r2)
  440720:	e0bff617 	ldw	r2,-40(fp)
  440724:	10800f17 	ldw	r2,60(r2)
  440728:	18bfd21e 	bne	r3,r2,440674 <altera_avalon_jtag_uart_irq+0x194>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  44072c:	e0bff517 	ldw	r2,-44(fp)
  440730:	103f7626 	beq	r2,zero,44050c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  440734:	e0bff617 	ldw	r2,-40(fp)
  440738:	10c00817 	ldw	r3,32(r2)
  44073c:	00bfff44 	movi	r2,-3
  440740:	1886703a 	and	r3,r3,r2
  440744:	e0bff617 	ldw	r2,-40(fp)
  440748:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  44074c:	e0bff617 	ldw	r2,-40(fp)
  440750:	10800017 	ldw	r2,0(r2)
  440754:	10800104 	addi	r2,r2,4
  440758:	e0fff617 	ldw	r3,-40(fp)
  44075c:	18c00817 	ldw	r3,32(r3)
  440760:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  440764:	e0bff717 	ldw	r2,-36(fp)
  440768:	10800104 	addi	r2,r2,4
  44076c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  440770:	003f6606 	br	44050c <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  440774:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  440778:	e037883a 	mov	sp,fp
  44077c:	dfc00117 	ldw	ra,4(sp)
  440780:	df000017 	ldw	fp,0(sp)
  440784:	dec00204 	addi	sp,sp,8
  440788:	f800283a 	ret

0044078c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  44078c:	defff904 	addi	sp,sp,-28
  440790:	dfc00615 	stw	ra,24(sp)
  440794:	df000515 	stw	fp,20(sp)
  440798:	df000504 	addi	fp,sp,20
  44079c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  4407a0:	e0bfff17 	ldw	r2,-4(fp)
  4407a4:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  4407a8:	e0bffb17 	ldw	r2,-20(fp)
  4407ac:	10800017 	ldw	r2,0(r2)
  4407b0:	10800104 	addi	r2,r2,4
  4407b4:	10800037 	ldwio	r2,0(r2)
  4407b8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  4407bc:	e0bffc17 	ldw	r2,-16(fp)
  4407c0:	1081000c 	andi	r2,r2,1024
  4407c4:	10000a26 	beq	r2,zero,4407f0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  4407c8:	e0bffb17 	ldw	r2,-20(fp)
  4407cc:	10800017 	ldw	r2,0(r2)
  4407d0:	10800104 	addi	r2,r2,4
  4407d4:	e0fffb17 	ldw	r3,-20(fp)
  4407d8:	18c00817 	ldw	r3,32(r3)
  4407dc:	18c10014 	ori	r3,r3,1024
  4407e0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  4407e4:	e0bffb17 	ldw	r2,-20(fp)
  4407e8:	10000915 	stw	zero,36(r2)
  4407ec:	00002206 	br	440878 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  4407f0:	e0bffb17 	ldw	r2,-20(fp)
  4407f4:	10800917 	ldw	r2,36(r2)
  4407f8:	00e00034 	movhi	r3,32768
  4407fc:	18ffff04 	addi	r3,r3,-4
  440800:	18801d36 	bltu	r3,r2,440878 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
  440804:	e0bffb17 	ldw	r2,-20(fp)
  440808:	10800917 	ldw	r2,36(r2)
  44080c:	10c00044 	addi	r3,r2,1
  440810:	e0bffb17 	ldw	r2,-20(fp)
  440814:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  440818:	e0bffb17 	ldw	r2,-20(fp)
  44081c:	10c00917 	ldw	r3,36(r2)
  440820:	e0bffb17 	ldw	r2,-20(fp)
  440824:	10800117 	ldw	r2,4(r2)
  440828:	18801336 	bltu	r3,r2,440878 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  44082c:	e0bffb17 	ldw	r2,-20(fp)
  440830:	10800c17 	ldw	r2,48(r2)
  440834:	e0bffd15 	stw	r2,-12(fp)
  440838:	00800104 	movi	r2,4
  44083c:	e0bffe0d 	sth	r2,-8(fp)
  440840:	00800044 	movi	r2,1
  440844:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  440848:	00801134 	movhi	r2,68
  44084c:	109dff44 	addi	r2,r2,30717
  440850:	10800003 	ldbu	r2,0(r2)
  440854:	10803fcc 	andi	r2,r2,255
  440858:	10000726 	beq	r2,zero,440878 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
  44085c:	e17ffe0b 	ldhu	r5,-8(fp)
  440860:	e0fffe83 	ldbu	r3,-6(fp)
  440864:	e0bffec4 	addi	r2,fp,-5
  440868:	e13ffd17 	ldw	r4,-12(fp)
  44086c:	180d883a 	mov	r6,r3
  440870:	100f883a 	mov	r7,r2
  440874:	043a1940 	call	43a194 <OSFlagPost>
  440878:	00801134 	movhi	r2,68
  44087c:	109e1504 	addi	r2,r2,30804
  440880:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  440884:	e037883a 	mov	sp,fp
  440888:	dfc00117 	ldw	ra,4(sp)
  44088c:	df000017 	ldw	fp,0(sp)
  440890:	dec00204 	addi	sp,sp,8
  440894:	f800283a 	ret

00440898 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  440898:	defffd04 	addi	sp,sp,-12
  44089c:	df000215 	stw	fp,8(sp)
  4408a0:	df000204 	addi	fp,sp,8
  4408a4:	e13ffe15 	stw	r4,-8(fp)
  4408a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  4408ac:	00000506 	br	4408c4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  4408b0:	e0bfff17 	ldw	r2,-4(fp)
  4408b4:	1090000c 	andi	r2,r2,16384
  4408b8:	10000226 	beq	r2,zero,4408c4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  4408bc:	00bffd44 	movi	r2,-11
  4408c0:	00000b06 	br	4408f0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  4408c4:	e0bffe17 	ldw	r2,-8(fp)
  4408c8:	10c01017 	ldw	r3,64(r2)
  4408cc:	e0bffe17 	ldw	r2,-8(fp)
  4408d0:	10800f17 	ldw	r2,60(r2)
  4408d4:	18800526 	beq	r3,r2,4408ec <altera_avalon_jtag_uart_close+0x54>
  4408d8:	e0bffe17 	ldw	r2,-8(fp)
  4408dc:	10c00917 	ldw	r3,36(r2)
  4408e0:	e0bffe17 	ldw	r2,-8(fp)
  4408e4:	10800117 	ldw	r2,4(r2)
  4408e8:	18bff136 	bltu	r3,r2,4408b0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  4408ec:	0005883a 	mov	r2,zero
}
  4408f0:	e037883a 	mov	sp,fp
  4408f4:	df000017 	ldw	fp,0(sp)
  4408f8:	dec00104 	addi	sp,sp,4
  4408fc:	f800283a 	ret

00440900 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  440900:	defffa04 	addi	sp,sp,-24
  440904:	df000515 	stw	fp,20(sp)
  440908:	df000504 	addi	fp,sp,20
  44090c:	e13ffd15 	stw	r4,-12(fp)
  440910:	e17ffe15 	stw	r5,-8(fp)
  440914:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  440918:	00bff9c4 	movi	r2,-25
  44091c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  440920:	e0bffe17 	ldw	r2,-8(fp)
  440924:	10da8060 	cmpeqi	r3,r2,27137
  440928:	1800031e 	bne	r3,zero,440938 <altera_avalon_jtag_uart_ioctl+0x38>
  44092c:	109a80a0 	cmpeqi	r2,r2,27138
  440930:	1000181e 	bne	r2,zero,440994 <altera_avalon_jtag_uart_ioctl+0x94>
  440934:	00002606 	br	4409d0 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  440938:	e0bffd17 	ldw	r2,-12(fp)
  44093c:	10c00117 	ldw	r3,4(r2)
  440940:	00a00034 	movhi	r2,32768
  440944:	10bfffc4 	addi	r2,r2,-1
  440948:	18802226 	beq	r3,r2,4409d4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
  44094c:	e0bfff17 	ldw	r2,-4(fp)
  440950:	10800017 	ldw	r2,0(r2)
  440954:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  440958:	e0bffc17 	ldw	r2,-16(fp)
  44095c:	10800090 	cmplti	r2,r2,2
  440960:	1000061e 	bne	r2,zero,44097c <altera_avalon_jtag_uart_ioctl+0x7c>
  440964:	e0fffc17 	ldw	r3,-16(fp)
  440968:	00a00034 	movhi	r2,32768
  44096c:	10bfffc4 	addi	r2,r2,-1
  440970:	18800226 	beq	r3,r2,44097c <altera_avalon_jtag_uart_ioctl+0x7c>
  440974:	e0bffc17 	ldw	r2,-16(fp)
  440978:	00000206 	br	440984 <altera_avalon_jtag_uart_ioctl+0x84>
  44097c:	00a00034 	movhi	r2,32768
  440980:	10bfff84 	addi	r2,r2,-2
  440984:	e0fffd17 	ldw	r3,-12(fp)
  440988:	18800115 	stw	r2,4(r3)
      rc = 0;
  44098c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  440990:	00001006 	br	4409d4 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  440994:	e0bffd17 	ldw	r2,-12(fp)
  440998:	10c00117 	ldw	r3,4(r2)
  44099c:	00a00034 	movhi	r2,32768
  4409a0:	10bfffc4 	addi	r2,r2,-1
  4409a4:	18800d26 	beq	r3,r2,4409dc <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  4409a8:	e0bffd17 	ldw	r2,-12(fp)
  4409ac:	10c00917 	ldw	r3,36(r2)
  4409b0:	e0bffd17 	ldw	r2,-12(fp)
  4409b4:	10800117 	ldw	r2,4(r2)
  4409b8:	1885803a 	cmpltu	r2,r3,r2
  4409bc:	10c03fcc 	andi	r3,r2,255
  4409c0:	e0bfff17 	ldw	r2,-4(fp)
  4409c4:	10c00015 	stw	r3,0(r2)
      rc = 0;
  4409c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  4409cc:	00000306 	br	4409dc <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
  4409d0:	00000306 	br	4409e0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  4409d4:	0001883a 	nop
  4409d8:	00000106 	br	4409e0 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  4409dc:	0001883a 	nop

  default:
    break;
  }

  return rc;
  4409e0:	e0bffb17 	ldw	r2,-20(fp)
}
  4409e4:	e037883a 	mov	sp,fp
  4409e8:	df000017 	ldw	fp,0(sp)
  4409ec:	dec00104 	addi	sp,sp,4
  4409f0:	f800283a 	ret

004409f4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  4409f4:	deffeb04 	addi	sp,sp,-84
  4409f8:	dfc01415 	stw	ra,80(sp)
  4409fc:	df001315 	stw	fp,76(sp)
  440a00:	df001304 	addi	fp,sp,76
  440a04:	e13ffc15 	stw	r4,-16(fp)
  440a08:	e17ffd15 	stw	r5,-12(fp)
  440a0c:	e1bffe15 	stw	r6,-8(fp)
  440a10:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  440a14:	e0bffd17 	ldw	r2,-12(fp)
  440a18:	e0bfee15 	stw	r2,-72(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  440a1c:	e0bffc17 	ldw	r2,-16(fp)
  440a20:	10800a17 	ldw	r2,40(r2)
  440a24:	e0bff315 	stw	r2,-52(fp)
  440a28:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  440a2c:	e0fff40b 	ldhu	r3,-48(fp)
  440a30:	e0bffb04 	addi	r2,fp,-20
  440a34:	e13ff317 	ldw	r4,-52(fp)
  440a38:	180b883a 	mov	r5,r3
  440a3c:	100d883a 	mov	r6,r2
  440a40:	043cfa00 	call	43cfa0 <OSSemPend>

  while (space > 0)
  440a44:	00006406 	br	440bd8 <altera_avalon_jtag_uart_read+0x1e4>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  440a48:	e0bffc17 	ldw	r2,-16(fp)
  440a4c:	10800d17 	ldw	r2,52(r2)
  440a50:	e0bff015 	stw	r2,-64(fp)
      out = sp->rx_out;
  440a54:	e0bffc17 	ldw	r2,-16(fp)
  440a58:	10800e17 	ldw	r2,56(r2)
  440a5c:	e0bff115 	stw	r2,-60(fp)

      if (in >= out)
  440a60:	e0fff017 	ldw	r3,-64(fp)
  440a64:	e0bff117 	ldw	r2,-60(fp)
  440a68:	18800536 	bltu	r3,r2,440a80 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
  440a6c:	e0fff017 	ldw	r3,-64(fp)
  440a70:	e0bff117 	ldw	r2,-60(fp)
  440a74:	1885c83a 	sub	r2,r3,r2
  440a78:	e0bfef15 	stw	r2,-68(fp)
  440a7c:	00000406 	br	440a90 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  440a80:	00c20004 	movi	r3,2048
  440a84:	e0bff117 	ldw	r2,-60(fp)
  440a88:	1885c83a 	sub	r2,r3,r2
  440a8c:	e0bfef15 	stw	r2,-68(fp)

      if (n == 0)
  440a90:	e0bfef17 	ldw	r2,-68(fp)
  440a94:	10001e26 	beq	r2,zero,440b10 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  440a98:	e0fffe17 	ldw	r3,-8(fp)
  440a9c:	e0bfef17 	ldw	r2,-68(fp)
  440aa0:	1880022e 	bgeu	r3,r2,440aac <altera_avalon_jtag_uart_read+0xb8>
        n = space;
  440aa4:	e0bffe17 	ldw	r2,-8(fp)
  440aa8:	e0bfef15 	stw	r2,-68(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  440aac:	e0bff117 	ldw	r2,-60(fp)
  440ab0:	10801104 	addi	r2,r2,68
  440ab4:	e0fffc17 	ldw	r3,-16(fp)
  440ab8:	1885883a 	add	r2,r3,r2
  440abc:	e13fee17 	ldw	r4,-72(fp)
  440ac0:	100b883a 	mov	r5,r2
  440ac4:	e1bfef17 	ldw	r6,-68(fp)
  440ac8:	04338680 	call	433868 <memcpy>
      ptr   += n;
  440acc:	e0ffee17 	ldw	r3,-72(fp)
  440ad0:	e0bfef17 	ldw	r2,-68(fp)
  440ad4:	1885883a 	add	r2,r3,r2
  440ad8:	e0bfee15 	stw	r2,-72(fp)
      space -= n;
  440adc:	e0fffe17 	ldw	r3,-8(fp)
  440ae0:	e0bfef17 	ldw	r2,-68(fp)
  440ae4:	1885c83a 	sub	r2,r3,r2
  440ae8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  440aec:	e0fff117 	ldw	r3,-60(fp)
  440af0:	e0bfef17 	ldw	r2,-68(fp)
  440af4:	1885883a 	add	r2,r3,r2
  440af8:	10c1ffcc 	andi	r3,r2,2047
  440afc:	e0bffc17 	ldw	r2,-16(fp)
  440b00:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  440b04:	e0bffe17 	ldw	r2,-8(fp)
  440b08:	00bfcf16 	blt	zero,r2,440a48 <altera_avalon_jtag_uart_read+0x54>
  440b0c:	00000106 	br	440b14 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  440b10:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  440b14:	e0ffee17 	ldw	r3,-72(fp)
  440b18:	e0bffd17 	ldw	r2,-12(fp)
  440b1c:	1880311e 	bne	r3,r2,440be4 <altera_avalon_jtag_uart_read+0x1f0>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  440b20:	e0bfff17 	ldw	r2,-4(fp)
  440b24:	1090000c 	andi	r2,r2,16384
  440b28:	1000301e 	bne	r2,zero,440bec <altera_avalon_jtag_uart_read+0x1f8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  440b2c:	00801134 	movhi	r2,68
  440b30:	109dff44 	addi	r2,r2,30717
  440b34:	10800003 	ldbu	r2,0(r2)
  440b38:	10803fcc 	andi	r2,r2,255
  440b3c:	10800058 	cmpnei	r2,r2,1
  440b40:	1000171e 	bne	r2,zero,440ba0 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  440b44:	e0bffc17 	ldw	r2,-16(fp)
  440b48:	10800c17 	ldw	r2,48(r2)
  440b4c:	e0bff515 	stw	r2,-44(fp)
  440b50:	00800144 	movi	r2,5
  440b54:	e0bff60d 	sth	r2,-40(fp)
  440b58:	00bfe0c4 	movi	r2,-125
  440b5c:	e0bff685 	stb	r2,-38(fp)
  440b60:	e03ff70d 	sth	zero,-36(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  440b64:	00801134 	movhi	r2,68
  440b68:	109dff44 	addi	r2,r2,30717
  440b6c:	10800003 	ldbu	r2,0(r2)
  440b70:	10803fcc 	andi	r2,r2,255
  440b74:	10001426 	beq	r2,zero,440bc8 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  440b78:	e17ff60b 	ldhu	r5,-40(fp)
  440b7c:	e0fff683 	ldbu	r3,-38(fp)
  440b80:	e0bff70b 	ldhu	r2,-36(fp)
  440b84:	e13ffb44 	addi	r4,fp,-19
  440b88:	d9000015 	stw	r4,0(sp)
  440b8c:	e13ff517 	ldw	r4,-44(fp)
  440b90:	180d883a 	mov	r6,r3
  440b94:	100f883a 	mov	r7,r2
  440b98:	04398f00 	call	4398f0 <OSFlagPend>
  440b9c:	00000a06 	br	440bc8 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  440ba0:	0001883a 	nop
  440ba4:	e0bffc17 	ldw	r2,-16(fp)
  440ba8:	10c00d17 	ldw	r3,52(r2)
  440bac:	e0bff017 	ldw	r2,-64(fp)
  440bb0:	1880051e 	bne	r3,r2,440bc8 <altera_avalon_jtag_uart_read+0x1d4>
  440bb4:	e0bffc17 	ldw	r2,-16(fp)
  440bb8:	10c00917 	ldw	r3,36(r2)
  440bbc:	e0bffc17 	ldw	r2,-16(fp)
  440bc0:	10800117 	ldw	r2,4(r2)
  440bc4:	18bff736 	bltu	r3,r2,440ba4 <altera_avalon_jtag_uart_read+0x1b0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  440bc8:	e0bffc17 	ldw	r2,-16(fp)
  440bcc:	10c00d17 	ldw	r3,52(r2)
  440bd0:	e0bff017 	ldw	r2,-64(fp)
  440bd4:	18800726 	beq	r3,r2,440bf4 <altera_avalon_jtag_uart_read+0x200>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  440bd8:	e0bffe17 	ldw	r2,-8(fp)
  440bdc:	00bf9a16 	blt	zero,r2,440a48 <altera_avalon_jtag_uart_read+0x54>
  440be0:	00000506 	br	440bf8 <altera_avalon_jtag_uart_read+0x204>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  440be4:	0001883a 	nop
  440be8:	00000306 	br	440bf8 <altera_avalon_jtag_uart_read+0x204>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  440bec:	0001883a 	nop
  440bf0:	00000106 	br	440bf8 <altera_avalon_jtag_uart_read+0x204>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  440bf4:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  440bf8:	e0bffc17 	ldw	r2,-16(fp)
  440bfc:	10800a17 	ldw	r2,40(r2)
  440c00:	1009883a 	mov	r4,r2
  440c04:	043d45c0 	call	43d45c <OSSemPost>

  if (ptr != buffer)
  440c08:	e0ffee17 	ldw	r3,-72(fp)
  440c0c:	e0bffd17 	ldw	r2,-12(fp)
  440c10:	18802226 	beq	r3,r2,440c9c <altera_avalon_jtag_uart_read+0x2a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  440c14:	0005303a 	rdctl	r2,status
  440c18:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  440c1c:	e0fff817 	ldw	r3,-32(fp)
  440c20:	00bfff84 	movi	r2,-2
  440c24:	1884703a 	and	r2,r3,r2
  440c28:	1001703a 	wrctl	status,r2
  
  return context;
  440c2c:	e0bff817 	ldw	r2,-32(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  440c30:	e0bff215 	stw	r2,-56(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  440c34:	e0bffc17 	ldw	r2,-16(fp)
  440c38:	10800817 	ldw	r2,32(r2)
  440c3c:	10c00054 	ori	r3,r2,1
  440c40:	e0bffc17 	ldw	r2,-16(fp)
  440c44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  440c48:	e0bffc17 	ldw	r2,-16(fp)
  440c4c:	10800017 	ldw	r2,0(r2)
  440c50:	10800104 	addi	r2,r2,4
  440c54:	e0fffc17 	ldw	r3,-16(fp)
  440c58:	18c00817 	ldw	r3,32(r3)
  440c5c:	10c00035 	stwio	r3,0(r2)
  440c60:	e0bff217 	ldw	r2,-56(fp)
  440c64:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  440c68:	0005303a 	rdctl	r2,status
  440c6c:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  440c70:	e0fffa17 	ldw	r3,-24(fp)
  440c74:	00bfff84 	movi	r2,-2
  440c78:	1884703a 	and	r2,r3,r2
  440c7c:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  440c80:	e0bff917 	ldw	r2,-28(fp)
  440c84:	1080004c 	andi	r2,r2,1
  440c88:	e0fffa17 	ldw	r3,-24(fp)
  440c8c:	1884b03a 	or	r2,r3,r2
  440c90:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  440c94:	e0bffa17 	ldw	r2,-24(fp)
  440c98:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  440c9c:	e0ffee17 	ldw	r3,-72(fp)
  440ca0:	e0bffd17 	ldw	r2,-12(fp)
  440ca4:	18800426 	beq	r3,r2,440cb8 <altera_avalon_jtag_uart_read+0x2c4>
    return ptr - buffer;
  440ca8:	e0ffee17 	ldw	r3,-72(fp)
  440cac:	e0bffd17 	ldw	r2,-12(fp)
  440cb0:	1885c83a 	sub	r2,r3,r2
  440cb4:	00000606 	br	440cd0 <altera_avalon_jtag_uart_read+0x2dc>
  else if (flags & O_NONBLOCK)
  440cb8:	e0bfff17 	ldw	r2,-4(fp)
  440cbc:	1090000c 	andi	r2,r2,16384
  440cc0:	10000226 	beq	r2,zero,440ccc <altera_avalon_jtag_uart_read+0x2d8>
    return -EWOULDBLOCK;
  440cc4:	00bffd44 	movi	r2,-11
  440cc8:	00000106 	br	440cd0 <altera_avalon_jtag_uart_read+0x2dc>
  else
    return -EIO;
  440ccc:	00bffec4 	movi	r2,-5
}
  440cd0:	e037883a 	mov	sp,fp
  440cd4:	dfc00117 	ldw	ra,4(sp)
  440cd8:	df000017 	ldw	fp,0(sp)
  440cdc:	dec00204 	addi	sp,sp,8
  440ce0:	f800283a 	ret

00440ce4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  440ce4:	deffec04 	addi	sp,sp,-80
  440ce8:	dfc01315 	stw	ra,76(sp)
  440cec:	df001215 	stw	fp,72(sp)
  440cf0:	df001204 	addi	fp,sp,72
  440cf4:	e13ffc15 	stw	r4,-16(fp)
  440cf8:	e17ffd15 	stw	r5,-12(fp)
  440cfc:	e1bffe15 	stw	r6,-8(fp)
  440d00:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  440d04:	e03fef15 	stw	zero,-68(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  440d08:	e0bffd17 	ldw	r2,-12(fp)
  440d0c:	e0bff115 	stw	r2,-60(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  440d10:	e0bffc17 	ldw	r2,-16(fp)
  440d14:	10800b17 	ldw	r2,44(r2)
  440d18:	e0bff415 	stw	r2,-48(fp)
  440d1c:	e03ff50d 	sth	zero,-44(fp)
  440d20:	e0fff50b 	ldhu	r3,-44(fp)
  440d24:	e0bffbc4 	addi	r2,fp,-17
  440d28:	e13ff417 	ldw	r4,-48(fp)
  440d2c:	180b883a 	mov	r5,r3
  440d30:	100d883a 	mov	r6,r2
  440d34:	043cfa00 	call	43cfa0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  440d38:	00003706 	br	440e18 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  440d3c:	e0bffc17 	ldw	r2,-16(fp)
  440d40:	10800f17 	ldw	r2,60(r2)
  440d44:	e0bff215 	stw	r2,-56(fp)
      out = sp->tx_out;
  440d48:	e0bffc17 	ldw	r2,-16(fp)
  440d4c:	10801017 	ldw	r2,64(r2)
  440d50:	e0bfef15 	stw	r2,-68(fp)

      if (in < out)
  440d54:	e0fff217 	ldw	r3,-56(fp)
  440d58:	e0bfef17 	ldw	r2,-68(fp)
  440d5c:	1880062e 	bgeu	r3,r2,440d78 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
  440d60:	e0ffef17 	ldw	r3,-68(fp)
  440d64:	e0bff217 	ldw	r2,-56(fp)
  440d68:	1885c83a 	sub	r2,r3,r2
  440d6c:	10bfffc4 	addi	r2,r2,-1
  440d70:	e0bff015 	stw	r2,-64(fp)
  440d74:	00000b06 	br	440da4 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
  440d78:	e0bfef17 	ldw	r2,-68(fp)
  440d7c:	10000526 	beq	r2,zero,440d94 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  440d80:	00c20004 	movi	r3,2048
  440d84:	e0bff217 	ldw	r2,-56(fp)
  440d88:	1885c83a 	sub	r2,r3,r2
  440d8c:	e0bff015 	stw	r2,-64(fp)
  440d90:	00000406 	br	440da4 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  440d94:	00c1ffc4 	movi	r3,2047
  440d98:	e0bff217 	ldw	r2,-56(fp)
  440d9c:	1885c83a 	sub	r2,r3,r2
  440da0:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
  440da4:	e0bff017 	ldw	r2,-64(fp)
  440da8:	10001e26 	beq	r2,zero,440e24 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
  440dac:	e0fffe17 	ldw	r3,-8(fp)
  440db0:	e0bff017 	ldw	r2,-64(fp)
  440db4:	1880022e 	bgeu	r3,r2,440dc0 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  440db8:	e0bffe17 	ldw	r2,-8(fp)
  440dbc:	e0bff015 	stw	r2,-64(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  440dc0:	e0bff217 	ldw	r2,-56(fp)
  440dc4:	10821104 	addi	r2,r2,2116
  440dc8:	e0fffc17 	ldw	r3,-16(fp)
  440dcc:	1885883a 	add	r2,r3,r2
  440dd0:	1009883a 	mov	r4,r2
  440dd4:	e17ffd17 	ldw	r5,-12(fp)
  440dd8:	e1bff017 	ldw	r6,-64(fp)
  440ddc:	04338680 	call	433868 <memcpy>
      ptr   += n;
  440de0:	e0fffd17 	ldw	r3,-12(fp)
  440de4:	e0bff017 	ldw	r2,-64(fp)
  440de8:	1885883a 	add	r2,r3,r2
  440dec:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  440df0:	e0fffe17 	ldw	r3,-8(fp)
  440df4:	e0bff017 	ldw	r2,-64(fp)
  440df8:	1885c83a 	sub	r2,r3,r2
  440dfc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  440e00:	e0fff217 	ldw	r3,-56(fp)
  440e04:	e0bff017 	ldw	r2,-64(fp)
  440e08:	1885883a 	add	r2,r3,r2
  440e0c:	10c1ffcc 	andi	r3,r2,2047
  440e10:	e0bffc17 	ldw	r2,-16(fp)
  440e14:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  440e18:	e0bffe17 	ldw	r2,-8(fp)
  440e1c:	00bfc716 	blt	zero,r2,440d3c <altera_avalon_jtag_uart_write+0x58>
  440e20:	00000106 	br	440e28 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  440e24:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  440e28:	0005303a 	rdctl	r2,status
  440e2c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  440e30:	e0fff617 	ldw	r3,-40(fp)
  440e34:	00bfff84 	movi	r2,-2
  440e38:	1884703a 	and	r2,r3,r2
  440e3c:	1001703a 	wrctl	status,r2
  
  return context;
  440e40:	e0bff617 	ldw	r2,-40(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  440e44:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  440e48:	e0bffc17 	ldw	r2,-16(fp)
  440e4c:	10800817 	ldw	r2,32(r2)
  440e50:	10c00094 	ori	r3,r2,2
  440e54:	e0bffc17 	ldw	r2,-16(fp)
  440e58:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  440e5c:	e0bffc17 	ldw	r2,-16(fp)
  440e60:	10800017 	ldw	r2,0(r2)
  440e64:	10800104 	addi	r2,r2,4
  440e68:	e0fffc17 	ldw	r3,-16(fp)
  440e6c:	18c00817 	ldw	r3,32(r3)
  440e70:	10c00035 	stwio	r3,0(r2)
  440e74:	e0bff317 	ldw	r2,-52(fp)
  440e78:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  440e7c:	0005303a 	rdctl	r2,status
  440e80:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  440e84:	e0fff817 	ldw	r3,-32(fp)
  440e88:	00bfff84 	movi	r2,-2
  440e8c:	1884703a 	and	r2,r3,r2
  440e90:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  440e94:	e0bff717 	ldw	r2,-36(fp)
  440e98:	1080004c 	andi	r2,r2,1
  440e9c:	e0fff817 	ldw	r3,-32(fp)
  440ea0:	1884b03a 	or	r2,r3,r2
  440ea4:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  440ea8:	e0bff817 	ldw	r2,-32(fp)
  440eac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  440eb0:	e0bffe17 	ldw	r2,-8(fp)
  440eb4:	00802e0e 	bge	zero,r2,440f70 <altera_avalon_jtag_uart_write+0x28c>
    {
      if (flags & O_NONBLOCK)
  440eb8:	e0bfff17 	ldw	r2,-4(fp)
  440ebc:	1090000c 	andi	r2,r2,16384
  440ec0:	10002e1e 	bne	r2,zero,440f7c <altera_avalon_jtag_uart_write+0x298>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  440ec4:	00801134 	movhi	r2,68
  440ec8:	109dff44 	addi	r2,r2,30717
  440ecc:	10800003 	ldbu	r2,0(r2)
  440ed0:	10803fcc 	andi	r2,r2,255
  440ed4:	10800058 	cmpnei	r2,r2,1
  440ed8:	1000171e 	bne	r2,zero,440f38 <altera_avalon_jtag_uart_write+0x254>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
  440edc:	e0bffc17 	ldw	r2,-16(fp)
  440ee0:	10800c17 	ldw	r2,48(r2)
  440ee4:	e0bff915 	stw	r2,-28(fp)
  440ee8:	00800184 	movi	r2,6
  440eec:	e0bffa0d 	sth	r2,-24(fp)
  440ef0:	00bfe0c4 	movi	r2,-125
  440ef4:	e0bffa85 	stb	r2,-22(fp)
  440ef8:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  440efc:	00801134 	movhi	r2,68
  440f00:	109dff44 	addi	r2,r2,30717
  440f04:	10800003 	ldbu	r2,0(r2)
  440f08:	10803fcc 	andi	r2,r2,255
  440f0c:	10001426 	beq	r2,zero,440f60 <altera_avalon_jtag_uart_write+0x27c>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  440f10:	e17ffa0b 	ldhu	r5,-24(fp)
  440f14:	e0fffa83 	ldbu	r3,-22(fp)
  440f18:	e0bffb0b 	ldhu	r2,-20(fp)
  440f1c:	e13ffb84 	addi	r4,fp,-18
  440f20:	d9000015 	stw	r4,0(sp)
  440f24:	e13ff917 	ldw	r4,-28(fp)
  440f28:	180d883a 	mov	r6,r3
  440f2c:	100f883a 	mov	r7,r2
  440f30:	04398f00 	call	4398f0 <OSFlagPend>
  440f34:	00000a06 	br	440f60 <altera_avalon_jtag_uart_write+0x27c>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  440f38:	0001883a 	nop
  440f3c:	e0bffc17 	ldw	r2,-16(fp)
  440f40:	10c01017 	ldw	r3,64(r2)
  440f44:	e0bfef17 	ldw	r2,-68(fp)
  440f48:	1880051e 	bne	r3,r2,440f60 <altera_avalon_jtag_uart_write+0x27c>
  440f4c:	e0bffc17 	ldw	r2,-16(fp)
  440f50:	10c00917 	ldw	r3,36(r2)
  440f54:	e0bffc17 	ldw	r2,-16(fp)
  440f58:	10800117 	ldw	r2,4(r2)
  440f5c:	18bff736 	bltu	r3,r2,440f3c <altera_avalon_jtag_uart_write+0x258>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  440f60:	e0bffc17 	ldw	r2,-16(fp)
  440f64:	10c01017 	ldw	r3,64(r2)
  440f68:	e0bfef17 	ldw	r2,-68(fp)
  440f6c:	18800526 	beq	r3,r2,440f84 <altera_avalon_jtag_uart_write+0x2a0>
         break;
    }
  }
  while (count > 0);
  440f70:	e0bffe17 	ldw	r2,-8(fp)
  440f74:	00bfa816 	blt	zero,r2,440e18 <altera_avalon_jtag_uart_write+0x134>
  440f78:	00000306 	br	440f88 <altera_avalon_jtag_uart_write+0x2a4>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  440f7c:	0001883a 	nop
  440f80:	00000106 	br	440f88 <altera_avalon_jtag_uart_write+0x2a4>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
  440f84:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  440f88:	e0bffc17 	ldw	r2,-16(fp)
  440f8c:	10800b17 	ldw	r2,44(r2)
  440f90:	1009883a 	mov	r4,r2
  440f94:	043d45c0 	call	43d45c <OSSemPost>

  if (ptr != start)
  440f98:	e0fffd17 	ldw	r3,-12(fp)
  440f9c:	e0bff117 	ldw	r2,-60(fp)
  440fa0:	18800426 	beq	r3,r2,440fb4 <altera_avalon_jtag_uart_write+0x2d0>
    return ptr - start;
  440fa4:	e0fffd17 	ldw	r3,-12(fp)
  440fa8:	e0bff117 	ldw	r2,-60(fp)
  440fac:	1885c83a 	sub	r2,r3,r2
  440fb0:	00000606 	br	440fcc <altera_avalon_jtag_uart_write+0x2e8>
  else if (flags & O_NONBLOCK)
  440fb4:	e0bfff17 	ldw	r2,-4(fp)
  440fb8:	1090000c 	andi	r2,r2,16384
  440fbc:	10000226 	beq	r2,zero,440fc8 <altera_avalon_jtag_uart_write+0x2e4>
    return -EWOULDBLOCK;
  440fc0:	00bffd44 	movi	r2,-11
  440fc4:	00000106 	br	440fcc <altera_avalon_jtag_uart_write+0x2e8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  440fc8:	00bffec4 	movi	r2,-5
}
  440fcc:	e037883a 	mov	sp,fp
  440fd0:	dfc00117 	ldw	ra,4(sp)
  440fd4:	df000017 	ldw	fp,0(sp)
  440fd8:	dec00204 	addi	sp,sp,8
  440fdc:	f800283a 	ret

00440fe0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  440fe0:	defffe04 	addi	sp,sp,-8
  440fe4:	dfc00115 	stw	ra,4(sp)
  440fe8:	df000015 	stw	fp,0(sp)
  440fec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  440ff0:	00801134 	movhi	r2,68
  440ff4:	10970604 	addi	r2,r2,23576
  440ff8:	10800017 	ldw	r2,0(r2)
  440ffc:	10000526 	beq	r2,zero,441014 <alt_get_errno+0x34>
  441000:	00801134 	movhi	r2,68
  441004:	10970604 	addi	r2,r2,23576
  441008:	10800017 	ldw	r2,0(r2)
  44100c:	103ee83a 	callr	r2
  441010:	00000206 	br	44101c <alt_get_errno+0x3c>
  441014:	00801134 	movhi	r2,68
  441018:	109df504 	addi	r2,r2,30676
}
  44101c:	e037883a 	mov	sp,fp
  441020:	dfc00117 	ldw	ra,4(sp)
  441024:	df000017 	ldw	fp,0(sp)
  441028:	dec00204 	addi	sp,sp,8
  44102c:	f800283a 	ret

00441030 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  441030:	defff904 	addi	sp,sp,-28
  441034:	df000615 	stw	fp,24(sp)
  441038:	df000604 	addi	fp,sp,24
  44103c:	e13ffe15 	stw	r4,-8(fp)
  441040:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  441044:	00bfffc4 	movi	r2,-1
  441048:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  44104c:	0005317a 	rdctl	r2,cpuid
  441050:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  441054:	e0bffb17 	ldw	r2,-20(fp)
  441058:	1006943a 	slli	r3,r2,16
  44105c:	e0bfff17 	ldw	r2,-4(fp)
  441060:	1884b03a 	or	r2,r3,r2
  441064:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  441068:	e0bffe17 	ldw	r2,-8(fp)
  44106c:	10800317 	ldw	r2,12(r2)
  441070:	e0fffc17 	ldw	r3,-16(fp)
  441074:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  441078:	e0bffe17 	ldw	r2,-8(fp)
  44107c:	10800317 	ldw	r2,12(r2)
  441080:	10800037 	ldwio	r2,0(r2)
  441084:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
  441088:	e0fffd17 	ldw	r3,-12(fp)
  44108c:	e0bffc17 	ldw	r2,-16(fp)
  441090:	1880011e 	bne	r3,r2,441098 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  441094:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  441098:	e0bffa17 	ldw	r2,-24(fp)
}
  44109c:	e037883a 	mov	sp,fp
  4410a0:	df000017 	ldw	fp,0(sp)
  4410a4:	dec00104 	addi	sp,sp,4
  4410a8:	f800283a 	ret

004410ac <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  4410ac:	defffc04 	addi	sp,sp,-16
  4410b0:	dfc00315 	stw	ra,12(sp)
  4410b4:	df000215 	stw	fp,8(sp)
  4410b8:	df000204 	addi	fp,sp,8
  4410bc:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  4410c0:	e13fff17 	ldw	r4,-4(fp)
  4410c4:	d1603104 	addi	r5,gp,-32572
  4410c8:	04419fc0 	call	4419fc <alt_find_dev>
  4410cc:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  4410d0:	e0bffe17 	ldw	r2,-8(fp)
  4410d4:	1000031e 	bne	r2,zero,4410e4 <altera_avalon_mutex_open+0x38>
  {
    ALT_ERRNO = ENODEV;
  4410d8:	0440fe00 	call	440fe0 <alt_get_errno>
  4410dc:	00c004c4 	movi	r3,19
  4410e0:	10c00015 	stw	r3,0(r2)
  }

  return dev;
  4410e4:	e0bffe17 	ldw	r2,-8(fp)
}
  4410e8:	e037883a 	mov	sp,fp
  4410ec:	dfc00117 	ldw	ra,4(sp)
  4410f0:	df000017 	ldw	fp,0(sp)
  4410f4:	dec00204 	addi	sp,sp,8
  4410f8:	f800283a 	ret

004410fc <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  4410fc:	defffe04 	addi	sp,sp,-8
  441100:	df000115 	stw	fp,4(sp)
  441104:	df000104 	addi	fp,sp,4
  441108:	e13fff15 	stw	r4,-4(fp)
  return;
  44110c:	0001883a 	nop
}
  441110:	e037883a 	mov	sp,fp
  441114:	df000017 	ldw	fp,0(sp)
  441118:	dec00104 	addi	sp,sp,4
  44111c:	f800283a 	ret

00441120 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  441120:	defffa04 	addi	sp,sp,-24
  441124:	dfc00515 	stw	ra,20(sp)
  441128:	df000415 	stw	fp,16(sp)
  44112c:	df000404 	addi	fp,sp,16
  441130:	e13ffe15 	stw	r4,-8(fp)
  441134:	e17fff15 	stw	r5,-4(fp)
  /*
   * When running in a multi threaded environment, obtain the "lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);
  441138:	e0bffe17 	ldw	r2,-8(fp)
  44113c:	10800417 	ldw	r2,16(r2)
  441140:	e0bffc15 	stw	r2,-16(fp)
  441144:	e03ffd0d 	sth	zero,-12(fp)
  441148:	e0fffd0b 	ldhu	r3,-12(fp)
  44114c:	e0bffd84 	addi	r2,fp,-10
  441150:	e13ffc17 	ldw	r4,-16(fp)
  441154:	180b883a 	mov	r5,r3
  441158:	100d883a 	mov	r6,r2
  44115c:	043cfa00 	call	43cfa0 <OSSemPend>

  while ( alt_mutex_trylock( dev, value ) != 0);
  441160:	0001883a 	nop
  441164:	e13ffe17 	ldw	r4,-8(fp)
  441168:	e17fff17 	ldw	r5,-4(fp)
  44116c:	04410300 	call	441030 <alt_mutex_trylock>
  441170:	103ffc1e 	bne	r2,zero,441164 <altera_avalon_mutex_lock+0x44>
}
  441174:	e037883a 	mov	sp,fp
  441178:	dfc00117 	ldw	ra,4(sp)
  44117c:	df000017 	ldw	fp,0(sp)
  441180:	dec00204 	addi	sp,sp,8
  441184:	f800283a 	ret

00441188 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  441188:	defff904 	addi	sp,sp,-28
  44118c:	dfc00615 	stw	ra,24(sp)
  441190:	df000515 	stw	fp,20(sp)
  441194:	df000504 	addi	fp,sp,20
  441198:	e13ffe15 	stw	r4,-8(fp)
  44119c:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);
  4411a0:	e0bffe17 	ldw	r2,-8(fp)
  4411a4:	10800417 	ldw	r2,16(r2)
  4411a8:	e0bffc15 	stw	r2,-16(fp)
  4411ac:	e03ffd0d 	sth	zero,-12(fp)
  4411b0:	e0fffd0b 	ldhu	r3,-12(fp)
  4411b4:	e0bffd84 	addi	r2,fp,-10
  4411b8:	e13ffc17 	ldw	r4,-16(fp)
  4411bc:	180b883a 	mov	r5,r3
  4411c0:	100d883a 	mov	r6,r2
  4411c4:	043cfa00 	call	43cfa0 <OSSemPend>

  ret_code = alt_mutex_trylock( dev, value);
  4411c8:	e13ffe17 	ldw	r4,-8(fp)
  4411cc:	e17fff17 	ldw	r5,-4(fp)
  4411d0:	04410300 	call	441030 <alt_mutex_trylock>
  4411d4:	e0bffb15 	stw	r2,-20(fp)

  /*
  * If the try failed then release the thread Mutex  
  */
  if (ret_code)
  4411d8:	e0bffb17 	ldw	r2,-20(fp)
  4411dc:	10000426 	beq	r2,zero,4411f0 <altera_avalon_mutex_trylock+0x68>
  {
    ALT_SEM_POST (dev->lock);
  4411e0:	e0bffe17 	ldw	r2,-8(fp)
  4411e4:	10800417 	ldw	r2,16(r2)
  4411e8:	1009883a 	mov	r4,r2
  4411ec:	043d45c0 	call	43d45c <OSSemPost>
  }

  return ret_code;
  4411f0:	e0bffb17 	ldw	r2,-20(fp)
}
  4411f4:	e037883a 	mov	sp,fp
  4411f8:	dfc00117 	ldw	ra,4(sp)
  4411fc:	df000017 	ldw	fp,0(sp)
  441200:	dec00204 	addi	sp,sp,8
  441204:	f800283a 	ret

00441208 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  441208:	defffc04 	addi	sp,sp,-16
  44120c:	dfc00315 	stw	ra,12(sp)
  441210:	df000215 	stw	fp,8(sp)
  441214:	df000204 	addi	fp,sp,8
  441218:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  44121c:	0005317a 	rdctl	r2,cpuid
  441220:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  441224:	e0bfff17 	ldw	r2,-4(fp)
  441228:	10800317 	ldw	r2,12(r2)
  44122c:	10800104 	addi	r2,r2,4
  441230:	00c00044 	movi	r3,1
  441234:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  441238:	e0bfff17 	ldw	r2,-4(fp)
  44123c:	10800317 	ldw	r2,12(r2)
  441240:	e0fffe17 	ldw	r3,-8(fp)
  441244:	1806943a 	slli	r3,r3,16
  441248:	10c00035 	stwio	r3,0(r2)
                                  id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST);

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
  44124c:	e0bfff17 	ldw	r2,-4(fp)
  441250:	10800417 	ldw	r2,16(r2)
  441254:	1009883a 	mov	r4,r2
  441258:	043d45c0 	call	43d45c <OSSemPost>
}
  44125c:	e037883a 	mov	sp,fp
  441260:	dfc00117 	ldw	ra,4(sp)
  441264:	df000017 	ldw	fp,0(sp)
  441268:	dec00204 	addi	sp,sp,8
  44126c:	f800283a 	ret

00441270 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  441270:	defff904 	addi	sp,sp,-28
  441274:	df000615 	stw	fp,24(sp)
  441278:	df000604 	addi	fp,sp,24
  44127c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  441280:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  441284:	0005317a 	rdctl	r2,cpuid
  441288:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  44128c:	e0bfff17 	ldw	r2,-4(fp)
  441290:	10800317 	ldw	r2,12(r2)
  441294:	10800037 	ldwio	r2,0(r2)
  441298:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  44129c:	e0bffc17 	ldw	r2,-16(fp)
  4412a0:	1004d43a 	srli	r2,r2,16
  4412a4:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  4412a8:	e0fffd17 	ldw	r3,-12(fp)
  4412ac:	e0bffb17 	ldw	r2,-20(fp)
  4412b0:	1880071e 	bne	r3,r2,4412d0 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  4412b4:	e0bffc17 	ldw	r2,-16(fp)
  4412b8:	10bfffcc 	andi	r2,r2,65535
  4412bc:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  4412c0:	e0bffe17 	ldw	r2,-8(fp)
  4412c4:	10000226 	beq	r2,zero,4412d0 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
  4412c8:	00800044 	movi	r2,1
  4412cc:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  4412d0:	e0bffa17 	ldw	r2,-24(fp)
}
  4412d4:	e037883a 	mov	sp,fp
  4412d8:	df000017 	ldw	fp,0(sp)
  4412dc:	dec00104 	addi	sp,sp,4
  4412e0:	f800283a 	ret

004412e4 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  4412e4:	defffc04 	addi	sp,sp,-16
  4412e8:	df000315 	stw	fp,12(sp)
  4412ec:	df000304 	addi	fp,sp,12
  4412f0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  4412f4:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  4412f8:	e0bfff17 	ldw	r2,-4(fp)
  4412fc:	10800317 	ldw	r2,12(r2)
  441300:	10800104 	addi	r2,r2,4
  441304:	10800037 	ldwio	r2,0(r2)
  441308:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  44130c:	e0bffe17 	ldw	r2,-8(fp)
  441310:	1080004c 	andi	r2,r2,1
  441314:	10000226 	beq	r2,zero,441320 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
  441318:	00800044 	movi	r2,1
  44131c:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  441320:	e0bffd17 	ldw	r2,-12(fp)
}
  441324:	e037883a 	mov	sp,fp
  441328:	df000017 	ldw	fp,0(sp)
  44132c:	dec00104 	addi	sp,sp,4
  441330:	f800283a 	ret

00441334 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  441334:	defff904 	addi	sp,sp,-28
  441338:	dfc00615 	stw	ra,24(sp)
  44133c:	df000515 	stw	fp,20(sp)
  441340:	df000504 	addi	fp,sp,20
  441344:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  441348:	0007883a 	mov	r3,zero
  44134c:	e0bfff17 	ldw	r2,-4(fp)
  441350:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  441354:	e0bfff17 	ldw	r2,-4(fp)
  441358:	10800104 	addi	r2,r2,4
  44135c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  441360:	0005303a 	rdctl	r2,status
  441364:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  441368:	e0fffc17 	ldw	r3,-16(fp)
  44136c:	00bfff84 	movi	r2,-2
  441370:	1884703a 	and	r2,r3,r2
  441374:	1001703a 	wrctl	status,r2
  
  return context;
  441378:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  44137c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  441380:	0441f700 	call	441f70 <alt_tick>
  441384:	e0bffb17 	ldw	r2,-20(fp)
  441388:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  44138c:	0005303a 	rdctl	r2,status
  441390:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  441394:	e0fffe17 	ldw	r3,-8(fp)
  441398:	00bfff84 	movi	r2,-2
  44139c:	1884703a 	and	r2,r3,r2
  4413a0:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4413a4:	e0bffd17 	ldw	r2,-12(fp)
  4413a8:	1080004c 	andi	r2,r2,1
  4413ac:	e0fffe17 	ldw	r3,-8(fp)
  4413b0:	1884b03a 	or	r2,r3,r2
  4413b4:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  4413b8:	e0bffe17 	ldw	r2,-8(fp)
  4413bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  4413c0:	e037883a 	mov	sp,fp
  4413c4:	dfc00117 	ldw	ra,4(sp)
  4413c8:	df000017 	ldw	fp,0(sp)
  4413cc:	dec00204 	addi	sp,sp,8
  4413d0:	f800283a 	ret

004413d4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  4413d4:	defff804 	addi	sp,sp,-32
  4413d8:	dfc00715 	stw	ra,28(sp)
  4413dc:	df000615 	stw	fp,24(sp)
  4413e0:	df000604 	addi	fp,sp,24
  4413e4:	e13ffc15 	stw	r4,-16(fp)
  4413e8:	e17ffd15 	stw	r5,-12(fp)
  4413ec:	e1bffe15 	stw	r6,-8(fp)
  4413f0:	e1ffff15 	stw	r7,-4(fp)
  4413f4:	e0bfff17 	ldw	r2,-4(fp)
  4413f8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  4413fc:	00801134 	movhi	r2,68
  441400:	109e1504 	addi	r2,r2,30804
  441404:	10800017 	ldw	r2,0(r2)
  441408:	1000041e 	bne	r2,zero,44141c <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  44140c:	00801134 	movhi	r2,68
  441410:	109e1504 	addi	r2,r2,30804
  441414:	e0fffb17 	ldw	r3,-20(fp)
  441418:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  44141c:	e0bffc17 	ldw	r2,-16(fp)
  441420:	10800104 	addi	r2,r2,4
  441424:	00c001c4 	movi	r3,7
  441428:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  44142c:	d8000015 	stw	zero,0(sp)
  441430:	e13ffd17 	ldw	r4,-12(fp)
  441434:	e17ffe17 	ldw	r5,-8(fp)
  441438:	01801134 	movhi	r6,68
  44143c:	3184cd04 	addi	r6,r6,4916
  441440:	e1fffc17 	ldw	r7,-16(fp)
  441444:	04357700 	call	435770 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  441448:	e037883a 	mov	sp,fp
  44144c:	dfc00117 	ldw	ra,4(sp)
  441450:	df000017 	ldw	fp,0(sp)
  441454:	dec00204 	addi	sp,sp,8
  441458:	f800283a 	ret

0044145c <alt_timestamp_start>:
 * The return value of this function is 0 upon sucess and -1 if in timestamp
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  44145c:	defffe04 	addi	sp,sp,-8
  441460:	df000115 	stw	fp,4(sp)
  441464:	df000104 	addi	fp,sp,4
  void* base = altera_avalon_timer_ts_base;
  441468:	00801134 	movhi	r2,68
  44146c:	109e1304 	addi	r2,r2,30796
  441470:	10800017 	ldw	r2,0(r2)
  441474:	e0bfff15 	stw	r2,-4(fp)

  if (!altera_avalon_timer_ts_freq)
  441478:	00801134 	movhi	r2,68
  44147c:	109e1404 	addi	r2,r2,30800
  441480:	10800017 	ldw	r2,0(r2)
  441484:	1000021e 	bne	r2,zero,441490 <alt_timestamp_start+0x34>
  {
    return -1;
  441488:	00bfffc4 	movi	r2,-1
  44148c:	00001906 	br	4414f4 <alt_timestamp_start+0x98>
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
  441490:	e0bfff17 	ldw	r2,-4(fp)
  441494:	10800104 	addi	r2,r2,4
  441498:	00c00204 	movi	r3,8
  44149c:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
  4414a0:	e0bfff17 	ldw	r2,-4(fp)
  4414a4:	10800204 	addi	r2,r2,8
  4414a8:	00ffffd4 	movui	r3,65535
  4414ac:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
  4414b0:	e0bfff17 	ldw	r2,-4(fp)
  4414b4:	10800304 	addi	r2,r2,12
  4414b8:	00ffffd4 	movui	r3,65535
  4414bc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
  4414c0:	e0bfff17 	ldw	r2,-4(fp)
  4414c4:	10800404 	addi	r2,r2,16
  4414c8:	00ffffd4 	movui	r3,65535
  4414cc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
  4414d0:	e0bfff17 	ldw	r2,-4(fp)
  4414d4:	10800504 	addi	r2,r2,20
  4414d8:	00ffffd4 	movui	r3,65535
  4414dc:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
  4414e0:	e0bfff17 	ldw	r2,-4(fp)
  4414e4:	10800104 	addi	r2,r2,4
  4414e8:	00c00104 	movi	r3,4
  4414ec:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
  4414f0:	0005883a 	mov	r2,zero
}
  4414f4:	e037883a 	mov	sp,fp
  4414f8:	df000017 	ldw	fp,0(sp)
  4414fc:	dec00104 	addi	sp,sp,4
  441500:	f800283a 	ret

00441504 <alt_timestamp>:
 * The returned timestamp counts up from the last time the period register
 * was reset. 
 */

alt_timestamp_type alt_timestamp(void)
{
  441504:	deffec04 	addi	sp,sp,-80
  441508:	df001315 	stw	fp,76(sp)
  44150c:	ddc01215 	stw	r23,72(sp)
  441510:	dd801115 	stw	r22,68(sp)
  441514:	dd401015 	stw	r21,64(sp)
  441518:	dd000f15 	stw	r20,60(sp)
  44151c:	dcc00e15 	stw	r19,56(sp)
  441520:	dc800d15 	stw	r18,52(sp)
  441524:	dc400c15 	stw	r17,48(sp)
  441528:	dc000b15 	stw	r16,44(sp)
  44152c:	df000b04 	addi	fp,sp,44

  void* base = altera_avalon_timer_ts_base;
  441530:	00801134 	movhi	r2,68
  441534:	109e1304 	addi	r2,r2,30796
  441538:	10800017 	ldw	r2,0(r2)
  44153c:	e0bff515 	stw	r2,-44(fp)

  if (!altera_avalon_timer_ts_freq)
  441540:	00801134 	movhi	r2,68
  441544:	109e1404 	addi	r2,r2,30800
  441548:	10800017 	ldw	r2,0(r2)
  44154c:	1000031e 	bne	r2,zero,44155c <alt_timestamp+0x58>
  {
	if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        return 0xFFFFFFFFFFFFFFFFULL;
  441550:	017fffc4 	movi	r5,-1
  441554:	01bfffc4 	movi	r6,-1
  441558:	00004206 	br	441664 <alt_timestamp+0x160>
    }
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
  44155c:	e0bff517 	ldw	r2,-44(fp)
  441560:	15c00604 	addi	r23,r2,24
  441564:	0005883a 	mov	r2,zero
  441568:	b8800035 	stwio	r2,0(r23)
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
  44156c:	e0bff517 	ldw	r2,-44(fp)
  441570:	10800604 	addi	r2,r2,24
  441574:	10800037 	ldwio	r2,0(r2)
  441578:	e0bffe15 	stw	r2,-8(fp)
  44157c:	0005883a 	mov	r2,zero
  441580:	e0bfff15 	stw	r2,-4(fp)
  441584:	e0fffe17 	ldw	r3,-8(fp)
  441588:	18bfffcc 	andi	r2,r3,65535
  44158c:	e0bff615 	stw	r2,-40(fp)
  441590:	e0ffff17 	ldw	r3,-4(fp)
  441594:	1804703a 	and	r2,r3,zero
  441598:	e0bff715 	stw	r2,-36(fp)
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
  44159c:	e0bff517 	ldw	r2,-44(fp)
  4415a0:	10800704 	addi	r2,r2,28
  4415a4:	10800037 	ldwio	r2,0(r2)
  4415a8:	102b883a 	mov	r21,r2
  4415ac:	002d883a 	mov	r22,zero
  4415b0:	a8bfffcc 	andi	r2,r21,65535
  4415b4:	e0bff815 	stw	r2,-32(fp)
  4415b8:	b004703a 	and	r2,r22,zero
  4415bc:	e0bff915 	stw	r2,-28(fp)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
  4415c0:	e0bff517 	ldw	r2,-44(fp)
  4415c4:	10800804 	addi	r2,r2,32
  4415c8:	10800037 	ldwio	r2,0(r2)
  4415cc:	1027883a 	mov	r19,r2
  4415d0:	0029883a 	mov	r20,zero
  4415d4:	98bfffcc 	andi	r2,r19,65535
  4415d8:	e0bffa15 	stw	r2,-24(fp)
  4415dc:	a004703a 	and	r2,r20,zero
  4415e0:	e0bffb15 	stw	r2,-20(fp)
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
  4415e4:	e0bff517 	ldw	r2,-44(fp)
  4415e8:	10800904 	addi	r2,r2,36
  4415ec:	10800037 	ldwio	r2,0(r2)
  4415f0:	1023883a 	mov	r17,r2
  4415f4:	0025883a 	mov	r18,zero
  4415f8:	88bfffcc 	andi	r2,r17,65535
  4415fc:	e0bffc15 	stw	r2,-16(fp)
  441600:	9004703a 	and	r2,r18,zero
  441604:	e0bffd15 	stw	r2,-12(fp)
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
  441608:	e0bffc17 	ldw	r2,-16(fp)
  44160c:	1020943a 	slli	r16,r2,16
  441610:	001f883a 	mov	r15,zero
  441614:	e0bffa17 	ldw	r2,-24(fp)
  441618:	1008983a 	sll	r4,r2,zero
  44161c:	0007883a 	mov	r3,zero
  441620:	78dab03a 	or	r13,r15,r3
  441624:	811cb03a 	or	r14,r16,r4
  441628:	e0bff817 	ldw	r2,-32(fp)
  44162c:	1004d43a 	srli	r2,r2,16
  441630:	e0fff917 	ldw	r3,-28(fp)
  441634:	1810943a 	slli	r8,r3,16
  441638:	1210b03a 	or	r8,r2,r8
  44163c:	e0bff817 	ldw	r2,-32(fp)
  441640:	100e943a 	slli	r7,r2,16
  441644:	69d6b03a 	or	r11,r13,r7
  441648:	7218b03a 	or	r12,r14,r8
  44164c:	e0bff617 	ldw	r2,-40(fp)
  441650:	12d2b03a 	or	r9,r2,r11
  441654:	e0bff717 	ldw	r2,-36(fp)
  441658:	1314b03a 	or	r10,r2,r12
  44165c:	024a303a 	nor	r5,zero,r9
  441660:	028c303a 	nor	r6,zero,r10
  441664:	2807883a 	mov	r3,r5
  441668:	3009883a 	mov	r4,r6
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
    }  
  }
}
  44166c:	1805883a 	mov	r2,r3
  441670:	2007883a 	mov	r3,r4
  441674:	e037883a 	mov	sp,fp
  441678:	df000817 	ldw	fp,32(sp)
  44167c:	ddc00717 	ldw	r23,28(sp)
  441680:	dd800617 	ldw	r22,24(sp)
  441684:	dd400517 	ldw	r21,20(sp)
  441688:	dd000417 	ldw	r20,16(sp)
  44168c:	dcc00317 	ldw	r19,12(sp)
  441690:	dc800217 	ldw	r18,8(sp)
  441694:	dc400117 	ldw	r17,4(sp)
  441698:	dc000017 	ldw	r16,0(sp)
  44169c:	dec00904 	addi	sp,sp,36
  4416a0:	f800283a 	ret

004416a4 <alt_timestamp_freq>:
 * Return the number of timestamp ticks per second. This will be 0 if no
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
  4416a4:	deffff04 	addi	sp,sp,-4
  4416a8:	df000015 	stw	fp,0(sp)
  4416ac:	d839883a 	mov	fp,sp
  return altera_avalon_timer_ts_freq;
  4416b0:	00801134 	movhi	r2,68
  4416b4:	109e1404 	addi	r2,r2,30800
  4416b8:	10800017 	ldw	r2,0(r2)
}
  4416bc:	e037883a 	mov	sp,fp
  4416c0:	df000017 	ldw	fp,0(sp)
  4416c4:	dec00104 	addi	sp,sp,4
  4416c8:	f800283a 	ret

004416cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  4416cc:	defff404 	addi	sp,sp,-48
  4416d0:	df000b15 	stw	fp,44(sp)
  4416d4:	df000b04 	addi	fp,sp,44
  4416d8:	e13ffc15 	stw	r4,-16(fp)
  4416dc:	e17ffd15 	stw	r5,-12(fp)
  4416e0:	e1bffe15 	stw	r6,-8(fp)
  4416e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  4416e8:	e03ff515 	stw	zero,-44(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  4416ec:	00801134 	movhi	r2,68
  4416f0:	109e1504 	addi	r2,r2,30804
  4416f4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  4416f8:	10004a26 	beq	r2,zero,441824 <alt_alarm_start+0x158>
  {
    if (alarm)
  4416fc:	e0bffc17 	ldw	r2,-16(fp)
  441700:	10004626 	beq	r2,zero,44181c <alt_alarm_start+0x150>
    {
      alarm->callback = callback;
  441704:	e0bffc17 	ldw	r2,-16(fp)
  441708:	e0fffe17 	ldw	r3,-8(fp)
  44170c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  441710:	e0bffc17 	ldw	r2,-16(fp)
  441714:	e0ffff17 	ldw	r3,-4(fp)
  441718:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  44171c:	0005303a 	rdctl	r2,status
  441720:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  441724:	e0fff717 	ldw	r3,-36(fp)
  441728:	00bfff84 	movi	r2,-2
  44172c:	1884703a 	and	r2,r3,r2
  441730:	1001703a 	wrctl	status,r2
  
  return context;
  441734:	e0bff717 	ldw	r2,-36(fp)
 
      irq_context = alt_irq_disable_all ();
  441738:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  44173c:	00801134 	movhi	r2,68
  441740:	109e1604 	addi	r2,r2,30808
  441744:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  441748:	e0bff515 	stw	r2,-44(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  44174c:	e0fffd17 	ldw	r3,-12(fp)
  441750:	e0bff517 	ldw	r2,-44(fp)
  441754:	1885883a 	add	r2,r3,r2
  441758:	10c00044 	addi	r3,r2,1
  44175c:	e0bffc17 	ldw	r2,-16(fp)
  441760:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  441764:	e0bffc17 	ldw	r2,-16(fp)
  441768:	10c00217 	ldw	r3,8(r2)
  44176c:	e0bff517 	ldw	r2,-44(fp)
  441770:	1880042e 	bgeu	r3,r2,441784 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  441774:	e0bffc17 	ldw	r2,-16(fp)
  441778:	00c00044 	movi	r3,1
  44177c:	10c00405 	stb	r3,16(r2)
  441780:	00000206 	br	44178c <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  441784:	e0bffc17 	ldw	r2,-16(fp)
  441788:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  44178c:	e0bffc17 	ldw	r2,-16(fp)
  441790:	00c01134 	movhi	r3,68
  441794:	18d72a04 	addi	r3,r3,23720
  441798:	e0fff815 	stw	r3,-32(fp)
  44179c:	e0bff915 	stw	r2,-28(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  4417a0:	e0bff917 	ldw	r2,-28(fp)
  4417a4:	e0fff817 	ldw	r3,-32(fp)
  4417a8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  4417ac:	e0bff817 	ldw	r2,-32(fp)
  4417b0:	10c00017 	ldw	r3,0(r2)
  4417b4:	e0bff917 	ldw	r2,-28(fp)
  4417b8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  4417bc:	e0bff817 	ldw	r2,-32(fp)
  4417c0:	10800017 	ldw	r2,0(r2)
  4417c4:	e0fff917 	ldw	r3,-28(fp)
  4417c8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  4417cc:	e0bff817 	ldw	r2,-32(fp)
  4417d0:	e0fff917 	ldw	r3,-28(fp)
  4417d4:	10c00015 	stw	r3,0(r2)
  4417d8:	e0bff617 	ldw	r2,-40(fp)
  4417dc:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4417e0:	0005303a 	rdctl	r2,status
  4417e4:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4417e8:	e0fffb17 	ldw	r3,-20(fp)
  4417ec:	00bfff84 	movi	r2,-2
  4417f0:	1884703a 	and	r2,r3,r2
  4417f4:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4417f8:	e0bffa17 	ldw	r2,-24(fp)
  4417fc:	1080004c 	andi	r2,r2,1
  441800:	e0fffb17 	ldw	r3,-20(fp)
  441804:	1884b03a 	or	r2,r3,r2
  441808:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  44180c:	e0bffb17 	ldw	r2,-20(fp)
  441810:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  441814:	0005883a 	mov	r2,zero
  441818:	00000306 	br	441828 <alt_alarm_start+0x15c>
    }
    else
    {
      return -EINVAL;
  44181c:	00bffa84 	movi	r2,-22
  441820:	00000106 	br	441828 <alt_alarm_start+0x15c>
    }
  }
  else
  {
    return -ENOTSUP;
  441824:	00bfde84 	movi	r2,-134
  }
}
  441828:	e037883a 	mov	sp,fp
  44182c:	df000017 	ldw	fp,0(sp)
  441830:	dec00104 	addi	sp,sp,4
  441834:	f800283a 	ret

00441838 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  441838:	deffff04 	addi	sp,sp,-4
  44183c:	df000015 	stw	fp,0(sp)
  441840:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  441844:	e037883a 	mov	sp,fp
  441848:	df000017 	ldw	fp,0(sp)
  44184c:	dec00104 	addi	sp,sp,4
  441850:	f800283a 	ret

00441854 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  441854:	defffe04 	addi	sp,sp,-8
  441858:	dfc00115 	stw	ra,4(sp)
  44185c:	df000015 	stw	fp,0(sp)
  441860:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  441864:	00801134 	movhi	r2,68
  441868:	10970604 	addi	r2,r2,23576
  44186c:	10800017 	ldw	r2,0(r2)
  441870:	10000526 	beq	r2,zero,441888 <alt_get_errno+0x34>
  441874:	00801134 	movhi	r2,68
  441878:	10970604 	addi	r2,r2,23576
  44187c:	10800017 	ldw	r2,0(r2)
  441880:	103ee83a 	callr	r2
  441884:	00000206 	br	441890 <alt_get_errno+0x3c>
  441888:	00801134 	movhi	r2,68
  44188c:	109df504 	addi	r2,r2,30676
}
  441890:	e037883a 	mov	sp,fp
  441894:	dfc00117 	ldw	ra,4(sp)
  441898:	df000017 	ldw	fp,0(sp)
  44189c:	dec00204 	addi	sp,sp,8
  4418a0:	f800283a 	ret

004418a4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  4418a4:	defffa04 	addi	sp,sp,-24
  4418a8:	dfc00515 	stw	ra,20(sp)
  4418ac:	df000415 	stw	fp,16(sp)
  4418b0:	df000404 	addi	fp,sp,16
  4418b4:	e13ffe15 	stw	r4,-8(fp)
  4418b8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  4418bc:	e0bffe17 	ldw	r2,-8(fp)
  4418c0:	10000326 	beq	r2,zero,4418d0 <alt_dev_llist_insert+0x2c>
  4418c4:	e0bffe17 	ldw	r2,-8(fp)
  4418c8:	10800217 	ldw	r2,8(r2)
  4418cc:	1000051e 	bne	r2,zero,4418e4 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
  4418d0:	04418540 	call	441854 <alt_get_errno>
  4418d4:	00c00584 	movi	r3,22
  4418d8:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  4418dc:	00bffa84 	movi	r2,-22
  4418e0:	00001306 	br	441930 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  4418e4:	e0bffe17 	ldw	r2,-8(fp)
  4418e8:	e0ffff17 	ldw	r3,-4(fp)
  4418ec:	e0fffc15 	stw	r3,-16(fp)
  4418f0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  4418f4:	e0bffd17 	ldw	r2,-12(fp)
  4418f8:	e0fffc17 	ldw	r3,-16(fp)
  4418fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  441900:	e0bffc17 	ldw	r2,-16(fp)
  441904:	10c00017 	ldw	r3,0(r2)
  441908:	e0bffd17 	ldw	r2,-12(fp)
  44190c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  441910:	e0bffc17 	ldw	r2,-16(fp)
  441914:	10800017 	ldw	r2,0(r2)
  441918:	e0fffd17 	ldw	r3,-12(fp)
  44191c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  441920:	e0bffc17 	ldw	r2,-16(fp)
  441924:	e0fffd17 	ldw	r3,-12(fp)
  441928:	10c00015 	stw	r3,0(r2)

  return 0;  
  44192c:	0005883a 	mov	r2,zero
}
  441930:	e037883a 	mov	sp,fp
  441934:	dfc00117 	ldw	ra,4(sp)
  441938:	df000017 	ldw	fp,0(sp)
  44193c:	dec00204 	addi	sp,sp,8
  441940:	f800283a 	ret

00441944 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  441944:	defffd04 	addi	sp,sp,-12
  441948:	dfc00215 	stw	ra,8(sp)
  44194c:	df000115 	stw	fp,4(sp)
  441950:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  441954:	00801134 	movhi	r2,68
  441958:	108fb404 	addi	r2,r2,16080
  44195c:	e0bfff15 	stw	r2,-4(fp)
  441960:	00000606 	br	44197c <_do_ctors+0x38>
        (*ctor) (); 
  441964:	e0bfff17 	ldw	r2,-4(fp)
  441968:	10800017 	ldw	r2,0(r2)
  44196c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  441970:	e0bfff17 	ldw	r2,-4(fp)
  441974:	10bfff04 	addi	r2,r2,-4
  441978:	e0bfff15 	stw	r2,-4(fp)
  44197c:	e0ffff17 	ldw	r3,-4(fp)
  441980:	00801134 	movhi	r2,68
  441984:	108fb504 	addi	r2,r2,16084
  441988:	18bff62e 	bgeu	r3,r2,441964 <_do_ctors+0x20>
        (*ctor) (); 
}
  44198c:	e037883a 	mov	sp,fp
  441990:	dfc00117 	ldw	ra,4(sp)
  441994:	df000017 	ldw	fp,0(sp)
  441998:	dec00204 	addi	sp,sp,8
  44199c:	f800283a 	ret

004419a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  4419a0:	defffd04 	addi	sp,sp,-12
  4419a4:	dfc00215 	stw	ra,8(sp)
  4419a8:	df000115 	stw	fp,4(sp)
  4419ac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  4419b0:	00801134 	movhi	r2,68
  4419b4:	108fb404 	addi	r2,r2,16080
  4419b8:	e0bfff15 	stw	r2,-4(fp)
  4419bc:	00000606 	br	4419d8 <_do_dtors+0x38>
        (*dtor) (); 
  4419c0:	e0bfff17 	ldw	r2,-4(fp)
  4419c4:	10800017 	ldw	r2,0(r2)
  4419c8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  4419cc:	e0bfff17 	ldw	r2,-4(fp)
  4419d0:	10bfff04 	addi	r2,r2,-4
  4419d4:	e0bfff15 	stw	r2,-4(fp)
  4419d8:	e0ffff17 	ldw	r3,-4(fp)
  4419dc:	00801134 	movhi	r2,68
  4419e0:	108fb504 	addi	r2,r2,16084
  4419e4:	18bff62e 	bgeu	r3,r2,4419c0 <_do_dtors+0x20>
        (*dtor) (); 
}
  4419e8:	e037883a 	mov	sp,fp
  4419ec:	dfc00117 	ldw	ra,4(sp)
  4419f0:	df000017 	ldw	fp,0(sp)
  4419f4:	dec00204 	addi	sp,sp,8
  4419f8:	f800283a 	ret

004419fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  4419fc:	defffa04 	addi	sp,sp,-24
  441a00:	dfc00515 	stw	ra,20(sp)
  441a04:	df000415 	stw	fp,16(sp)
  441a08:	df000404 	addi	fp,sp,16
  441a0c:	e13ffe15 	stw	r4,-8(fp)
  441a10:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  441a14:	e0bfff17 	ldw	r2,-4(fp)
  441a18:	10800017 	ldw	r2,0(r2)
  441a1c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  441a20:	e13ffe17 	ldw	r4,-8(fp)
  441a24:	0432a7c0 	call	432a7c <strlen>
  441a28:	10800044 	addi	r2,r2,1
  441a2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  441a30:	00000d06 	br	441a68 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  441a34:	e0bffc17 	ldw	r2,-16(fp)
  441a38:	10c00217 	ldw	r3,8(r2)
  441a3c:	e0bffd17 	ldw	r2,-12(fp)
  441a40:	1809883a 	mov	r4,r3
  441a44:	e17ffe17 	ldw	r5,-8(fp)
  441a48:	100d883a 	mov	r6,r2
  441a4c:	04428600 	call	442860 <memcmp>
  441a50:	1000021e 	bne	r2,zero,441a5c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  441a54:	e0bffc17 	ldw	r2,-16(fp)
  441a58:	00000706 	br	441a78 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  441a5c:	e0bffc17 	ldw	r2,-16(fp)
  441a60:	10800017 	ldw	r2,0(r2)
  441a64:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  441a68:	e0fffc17 	ldw	r3,-16(fp)
  441a6c:	e0bfff17 	ldw	r2,-4(fp)
  441a70:	18bff01e 	bne	r3,r2,441a34 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  441a74:	0005883a 	mov	r2,zero
}
  441a78:	e037883a 	mov	sp,fp
  441a7c:	dfc00117 	ldw	ra,4(sp)
  441a80:	df000017 	ldw	fp,0(sp)
  441a84:	dec00204 	addi	sp,sp,8
  441a88:	f800283a 	ret

00441a8c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  441a8c:	defffe04 	addi	sp,sp,-8
  441a90:	dfc00115 	stw	ra,4(sp)
  441a94:	df000015 	stw	fp,0(sp)
  441a98:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  441a9c:	0009883a 	mov	r4,zero
  441aa0:	01410004 	movi	r5,1024
  441aa4:	04427880 	call	442788 <alt_icache_flush>
#endif
}
  441aa8:	e037883a 	mov	sp,fp
  441aac:	dfc00117 	ldw	ra,4(sp)
  441ab0:	df000017 	ldw	fp,0(sp)
  441ab4:	dec00204 	addi	sp,sp,8
  441ab8:	f800283a 	ret

00441abc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  441abc:	defff804 	addi	sp,sp,-32
  441ac0:	dfc00715 	stw	ra,28(sp)
  441ac4:	df000615 	stw	fp,24(sp)
  441ac8:	dc000515 	stw	r16,20(sp)
  441acc:	df000504 	addi	fp,sp,20
  441ad0:	e13ffc15 	stw	r4,-16(fp)
  441ad4:	e17ffd15 	stw	r5,-12(fp)
  441ad8:	e1bffe15 	stw	r6,-8(fp)
  441adc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  441ae0:	e13ffd17 	ldw	r4,-12(fp)
  441ae4:	e17ffe17 	ldw	r5,-8(fp)
  441ae8:	e1bfff17 	ldw	r6,-4(fp)
  441aec:	0441d540 	call	441d54 <open>
  441af0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  441af4:	e0bffb17 	ldw	r2,-20(fp)
  441af8:	10002216 	blt	r2,zero,441b84 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  441afc:	04001134 	movhi	r16,68
  441b00:	84127704 	addi	r16,r16,18908
  441b04:	e0bffb17 	ldw	r2,-20(fp)
  441b08:	1009883a 	mov	r4,r2
  441b0c:	01400304 	movi	r5,12
  441b10:	04355000 	call	435500 <__mulsi3>
  441b14:	8085883a 	add	r2,r16,r2
  441b18:	10c00017 	ldw	r3,0(r2)
  441b1c:	e0bffc17 	ldw	r2,-16(fp)
  441b20:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  441b24:	04001134 	movhi	r16,68
  441b28:	84127704 	addi	r16,r16,18908
  441b2c:	e0bffb17 	ldw	r2,-20(fp)
  441b30:	1009883a 	mov	r4,r2
  441b34:	01400304 	movi	r5,12
  441b38:	04355000 	call	435500 <__mulsi3>
  441b3c:	8085883a 	add	r2,r16,r2
  441b40:	10800104 	addi	r2,r2,4
  441b44:	10c00017 	ldw	r3,0(r2)
  441b48:	e0bffc17 	ldw	r2,-16(fp)
  441b4c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  441b50:	04001134 	movhi	r16,68
  441b54:	84127704 	addi	r16,r16,18908
  441b58:	e0bffb17 	ldw	r2,-20(fp)
  441b5c:	1009883a 	mov	r4,r2
  441b60:	01400304 	movi	r5,12
  441b64:	04355000 	call	435500 <__mulsi3>
  441b68:	8085883a 	add	r2,r16,r2
  441b6c:	10800204 	addi	r2,r2,8
  441b70:	10c00017 	ldw	r3,0(r2)
  441b74:	e0bffc17 	ldw	r2,-16(fp)
  441b78:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  441b7c:	e13ffb17 	ldw	r4,-20(fp)
  441b80:	0435fd00 	call	435fd0 <alt_release_fd>
  }
} 
  441b84:	e037883a 	mov	sp,fp
  441b88:	dfc00217 	ldw	ra,8(sp)
  441b8c:	df000117 	ldw	fp,4(sp)
  441b90:	dc000017 	ldw	r16,0(sp)
  441b94:	dec00304 	addi	sp,sp,12
  441b98:	f800283a 	ret

00441b9c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  441b9c:	defffb04 	addi	sp,sp,-20
  441ba0:	dfc00415 	stw	ra,16(sp)
  441ba4:	df000315 	stw	fp,12(sp)
  441ba8:	df000304 	addi	fp,sp,12
  441bac:	e13ffd15 	stw	r4,-12(fp)
  441bb0:	e17ffe15 	stw	r5,-8(fp)
  441bb4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  441bb8:	01001134 	movhi	r4,68
  441bbc:	21127a04 	addi	r4,r4,18920
  441bc0:	e17ffd17 	ldw	r5,-12(fp)
  441bc4:	01800044 	movi	r6,1
  441bc8:	01c07fc4 	movi	r7,511
  441bcc:	0441abc0 	call	441abc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  441bd0:	01001134 	movhi	r4,68
  441bd4:	21127704 	addi	r4,r4,18908
  441bd8:	e17ffe17 	ldw	r5,-8(fp)
  441bdc:	000d883a 	mov	r6,zero
  441be0:	01c07fc4 	movi	r7,511
  441be4:	0441abc0 	call	441abc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  441be8:	01001134 	movhi	r4,68
  441bec:	21127d04 	addi	r4,r4,18932
  441bf0:	e17fff17 	ldw	r5,-4(fp)
  441bf4:	01800044 	movi	r6,1
  441bf8:	01c07fc4 	movi	r7,511
  441bfc:	0441abc0 	call	441abc <alt_open_fd>
}  
  441c00:	e037883a 	mov	sp,fp
  441c04:	dfc00117 	ldw	ra,4(sp)
  441c08:	df000017 	ldw	fp,0(sp)
  441c0c:	dec00204 	addi	sp,sp,8
  441c10:	f800283a 	ret

00441c14 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  441c14:	defffe04 	addi	sp,sp,-8
  441c18:	dfc00115 	stw	ra,4(sp)
  441c1c:	df000015 	stw	fp,0(sp)
  441c20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  441c24:	00801134 	movhi	r2,68
  441c28:	10970604 	addi	r2,r2,23576
  441c2c:	10800017 	ldw	r2,0(r2)
  441c30:	10000526 	beq	r2,zero,441c48 <alt_get_errno+0x34>
  441c34:	00801134 	movhi	r2,68
  441c38:	10970604 	addi	r2,r2,23576
  441c3c:	10800017 	ldw	r2,0(r2)
  441c40:	103ee83a 	callr	r2
  441c44:	00000206 	br	441c50 <alt_get_errno+0x3c>
  441c48:	00801134 	movhi	r2,68
  441c4c:	109df504 	addi	r2,r2,30676
}
  441c50:	e037883a 	mov	sp,fp
  441c54:	dfc00117 	ldw	ra,4(sp)
  441c58:	df000017 	ldw	fp,0(sp)
  441c5c:	dec00204 	addi	sp,sp,8
  441c60:	f800283a 	ret

00441c64 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  441c64:	defffb04 	addi	sp,sp,-20
  441c68:	dfc00415 	stw	ra,16(sp)
  441c6c:	df000315 	stw	fp,12(sp)
  441c70:	dc000215 	stw	r16,8(sp)
  441c74:	df000204 	addi	fp,sp,8
  441c78:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  441c7c:	e0bfff17 	ldw	r2,-4(fp)
  441c80:	10800217 	ldw	r2,8(r2)
  441c84:	10d00034 	orhi	r3,r2,16384
  441c88:	e0bfff17 	ldw	r2,-4(fp)
  441c8c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  441c90:	e03ffe15 	stw	zero,-8(fp)
  441c94:	00002206 	br	441d20 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  441c98:	04001134 	movhi	r16,68
  441c9c:	84127704 	addi	r16,r16,18908
  441ca0:	e0bffe17 	ldw	r2,-8(fp)
  441ca4:	1009883a 	mov	r4,r2
  441ca8:	01400304 	movi	r5,12
  441cac:	04355000 	call	435500 <__mulsi3>
  441cb0:	8085883a 	add	r2,r16,r2
  441cb4:	10c00017 	ldw	r3,0(r2)
  441cb8:	e0bfff17 	ldw	r2,-4(fp)
  441cbc:	10800017 	ldw	r2,0(r2)
  441cc0:	1880141e 	bne	r3,r2,441d14 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  441cc4:	04001134 	movhi	r16,68
  441cc8:	84127704 	addi	r16,r16,18908
  441ccc:	e0bffe17 	ldw	r2,-8(fp)
  441cd0:	1009883a 	mov	r4,r2
  441cd4:	01400304 	movi	r5,12
  441cd8:	04355000 	call	435500 <__mulsi3>
  441cdc:	8085883a 	add	r2,r16,r2
  441ce0:	10800204 	addi	r2,r2,8
  441ce4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  441ce8:	10000a0e 	bge	r2,zero,441d14 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  441cec:	e13ffe17 	ldw	r4,-8(fp)
  441cf0:	01400304 	movi	r5,12
  441cf4:	04355000 	call	435500 <__mulsi3>
  441cf8:	00c01134 	movhi	r3,68
  441cfc:	18d27704 	addi	r3,r3,18908
  441d00:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  441d04:	e0bfff17 	ldw	r2,-4(fp)
  441d08:	18800226 	beq	r3,r2,441d14 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  441d0c:	00bffcc4 	movi	r2,-13
  441d10:	00000a06 	br	441d3c <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  441d14:	e0bffe17 	ldw	r2,-8(fp)
  441d18:	10800044 	addi	r2,r2,1
  441d1c:	e0bffe15 	stw	r2,-8(fp)
  441d20:	00801134 	movhi	r2,68
  441d24:	10970504 	addi	r2,r2,23572
  441d28:	10800017 	ldw	r2,0(r2)
  441d2c:	1007883a 	mov	r3,r2
  441d30:	e0bffe17 	ldw	r2,-8(fp)
  441d34:	18bfd82e 	bgeu	r3,r2,441c98 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  441d38:	0005883a 	mov	r2,zero
}
  441d3c:	e037883a 	mov	sp,fp
  441d40:	dfc00217 	ldw	ra,8(sp)
  441d44:	df000117 	ldw	fp,4(sp)
  441d48:	dc000017 	ldw	r16,0(sp)
  441d4c:	dec00304 	addi	sp,sp,12
  441d50:	f800283a 	ret

00441d54 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  441d54:	defff604 	addi	sp,sp,-40
  441d58:	dfc00915 	stw	ra,36(sp)
  441d5c:	df000815 	stw	fp,32(sp)
  441d60:	df000804 	addi	fp,sp,32
  441d64:	e13ffd15 	stw	r4,-12(fp)
  441d68:	e17ffe15 	stw	r5,-8(fp)
  441d6c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  441d70:	00bfffc4 	movi	r2,-1
  441d74:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  441d78:	00bffb44 	movi	r2,-19
  441d7c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  441d80:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  441d84:	e13ffd17 	ldw	r4,-12(fp)
  441d88:	01401134 	movhi	r5,68
  441d8c:	29570304 	addi	r5,r5,23564
  441d90:	04419fc0 	call	4419fc <alt_find_dev>
  441d94:	e0bff815 	stw	r2,-32(fp)
  441d98:	e0bff817 	ldw	r2,-32(fp)
  441d9c:	1000051e 	bne	r2,zero,441db4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  441da0:	e13ffd17 	ldw	r4,-12(fp)
  441da4:	04425600 	call	442560 <alt_find_file>
  441da8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  441dac:	00800044 	movi	r2,1
  441db0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  441db4:	e0bff817 	ldw	r2,-32(fp)
  441db8:	10002a26 	beq	r2,zero,441e64 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  441dbc:	e13ff817 	ldw	r4,-32(fp)
  441dc0:	04426740 	call	442674 <alt_get_fd>
  441dc4:	e0bff915 	stw	r2,-28(fp)
  441dc8:	e0bff917 	ldw	r2,-28(fp)
  441dcc:	1000030e 	bge	r2,zero,441ddc <open+0x88>
    {
      status = index;
  441dd0:	e0bff917 	ldw	r2,-28(fp)
  441dd4:	e0bffa15 	stw	r2,-24(fp)
  441dd8:	00002406 	br	441e6c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  441ddc:	e13ff917 	ldw	r4,-28(fp)
  441de0:	01400304 	movi	r5,12
  441de4:	04355000 	call	435500 <__mulsi3>
  441de8:	00c01134 	movhi	r3,68
  441dec:	18d27704 	addi	r3,r3,18908
  441df0:	10c5883a 	add	r2,r2,r3
  441df4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  441df8:	e0fffe17 	ldw	r3,-8(fp)
  441dfc:	00900034 	movhi	r2,16384
  441e00:	10bfffc4 	addi	r2,r2,-1
  441e04:	1886703a 	and	r3,r3,r2
  441e08:	e0bffc17 	ldw	r2,-16(fp)
  441e0c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  441e10:	e0bffb17 	ldw	r2,-20(fp)
  441e14:	1000051e 	bne	r2,zero,441e2c <open+0xd8>
  441e18:	e13ffc17 	ldw	r4,-16(fp)
  441e1c:	0441c640 	call	441c64 <alt_file_locked>
  441e20:	e0bffa15 	stw	r2,-24(fp)
  441e24:	e0bffa17 	ldw	r2,-24(fp)
  441e28:	10001016 	blt	r2,zero,441e6c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  441e2c:	e0bff817 	ldw	r2,-32(fp)
  441e30:	10800317 	ldw	r2,12(r2)
  441e34:	10000826 	beq	r2,zero,441e58 <open+0x104>
  441e38:	e0bff817 	ldw	r2,-32(fp)
  441e3c:	10800317 	ldw	r2,12(r2)
  441e40:	e13ffc17 	ldw	r4,-16(fp)
  441e44:	e17ffd17 	ldw	r5,-12(fp)
  441e48:	e1bffe17 	ldw	r6,-8(fp)
  441e4c:	e1ffff17 	ldw	r7,-4(fp)
  441e50:	103ee83a 	callr	r2
  441e54:	00000106 	br	441e5c <open+0x108>
  441e58:	0005883a 	mov	r2,zero
  441e5c:	e0bffa15 	stw	r2,-24(fp)
  441e60:	00000206 	br	441e6c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  441e64:	00bffb44 	movi	r2,-19
  441e68:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  441e6c:	e0bffa17 	ldw	r2,-24(fp)
  441e70:	1000080e 	bge	r2,zero,441e94 <open+0x140>
  {
    alt_release_fd (index);  
  441e74:	e13ff917 	ldw	r4,-28(fp)
  441e78:	0435fd00 	call	435fd0 <alt_release_fd>
    ALT_ERRNO = -status;
  441e7c:	0441c140 	call	441c14 <alt_get_errno>
  441e80:	e0fffa17 	ldw	r3,-24(fp)
  441e84:	00c7c83a 	sub	r3,zero,r3
  441e88:	10c00015 	stw	r3,0(r2)
    return -1;
  441e8c:	00bfffc4 	movi	r2,-1
  441e90:	00000106 	br	441e98 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  441e94:	e0bff917 	ldw	r2,-28(fp)
}
  441e98:	e037883a 	mov	sp,fp
  441e9c:	dfc00117 	ldw	ra,4(sp)
  441ea0:	df000017 	ldw	fp,0(sp)
  441ea4:	dec00204 	addi	sp,sp,8
  441ea8:	f800283a 	ret

00441eac <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  441eac:	defff904 	addi	sp,sp,-28
  441eb0:	df000615 	stw	fp,24(sp)
  441eb4:	df000604 	addi	fp,sp,24
  441eb8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  441ebc:	0005303a 	rdctl	r2,status
  441ec0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  441ec4:	e0fffb17 	ldw	r3,-20(fp)
  441ec8:	00bfff84 	movi	r2,-2
  441ecc:	1884703a 	and	r2,r3,r2
  441ed0:	1001703a 	wrctl	status,r2
  
  return context;
  441ed4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  441ed8:	e0bffa15 	stw	r2,-24(fp)
  alt_llist_remove (&alarm->llist);
  441edc:	e0bfff17 	ldw	r2,-4(fp)
  441ee0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  441ee4:	e0bffc17 	ldw	r2,-16(fp)
  441ee8:	10800017 	ldw	r2,0(r2)
  441eec:	e0fffc17 	ldw	r3,-16(fp)
  441ef0:	18c00117 	ldw	r3,4(r3)
  441ef4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  441ef8:	e0bffc17 	ldw	r2,-16(fp)
  441efc:	10800117 	ldw	r2,4(r2)
  441f00:	e0fffc17 	ldw	r3,-16(fp)
  441f04:	18c00017 	ldw	r3,0(r3)
  441f08:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  441f0c:	e0bffc17 	ldw	r2,-16(fp)
  441f10:	e0fffc17 	ldw	r3,-16(fp)
  441f14:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  441f18:	e0bffc17 	ldw	r2,-16(fp)
  441f1c:	e0fffc17 	ldw	r3,-16(fp)
  441f20:	10c00015 	stw	r3,0(r2)
  441f24:	e0bffa17 	ldw	r2,-24(fp)
  441f28:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  441f2c:	0005303a 	rdctl	r2,status
  441f30:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  441f34:	e0fffe17 	ldw	r3,-8(fp)
  441f38:	00bfff84 	movi	r2,-2
  441f3c:	1884703a 	and	r2,r3,r2
  441f40:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  441f44:	e0bffd17 	ldw	r2,-12(fp)
  441f48:	1080004c 	andi	r2,r2,1
  441f4c:	e0fffe17 	ldw	r3,-8(fp)
  441f50:	1884b03a 	or	r2,r3,r2
  441f54:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  441f58:	e0bffe17 	ldw	r2,-8(fp)
  441f5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  441f60:	e037883a 	mov	sp,fp
  441f64:	df000017 	ldw	fp,0(sp)
  441f68:	dec00104 	addi	sp,sp,4
  441f6c:	f800283a 	ret

00441f70 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  441f70:	defffb04 	addi	sp,sp,-20
  441f74:	dfc00415 	stw	ra,16(sp)
  441f78:	df000315 	stw	fp,12(sp)
  441f7c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  441f80:	d0a03317 	ldw	r2,-32564(gp)
  441f84:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  441f88:	d0a71f17 	ldw	r2,-25476(gp)
  441f8c:	10800044 	addi	r2,r2,1
  441f90:	d0a71f15 	stw	r2,-25476(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  441f94:	00002e06 	br	442050 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  441f98:	e0bffd17 	ldw	r2,-12(fp)
  441f9c:	10800017 	ldw	r2,0(r2)
  441fa0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  441fa4:	e0bffd17 	ldw	r2,-12(fp)
  441fa8:	10800403 	ldbu	r2,16(r2)
  441fac:	10803fcc 	andi	r2,r2,255
  441fb0:	10000426 	beq	r2,zero,441fc4 <alt_tick+0x54>
  441fb4:	d0a71f17 	ldw	r2,-25476(gp)
  441fb8:	1000021e 	bne	r2,zero,441fc4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  441fbc:	e0bffd17 	ldw	r2,-12(fp)
  441fc0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  441fc4:	e0bffd17 	ldw	r2,-12(fp)
  441fc8:	10800217 	ldw	r2,8(r2)
  441fcc:	d0e71f17 	ldw	r3,-25476(gp)
  441fd0:	18801d36 	bltu	r3,r2,442048 <alt_tick+0xd8>
  441fd4:	e0bffd17 	ldw	r2,-12(fp)
  441fd8:	10800403 	ldbu	r2,16(r2)
  441fdc:	10803fcc 	andi	r2,r2,255
  441fe0:	1000191e 	bne	r2,zero,442048 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  441fe4:	e0bffd17 	ldw	r2,-12(fp)
  441fe8:	10c00317 	ldw	r3,12(r2)
  441fec:	e0bffd17 	ldw	r2,-12(fp)
  441ff0:	10800517 	ldw	r2,20(r2)
  441ff4:	1009883a 	mov	r4,r2
  441ff8:	183ee83a 	callr	r3
  441ffc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  442000:	e0bfff17 	ldw	r2,-4(fp)
  442004:	1000031e 	bne	r2,zero,442014 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  442008:	e13ffd17 	ldw	r4,-12(fp)
  44200c:	0441eac0 	call	441eac <alt_alarm_stop>
  442010:	00000d06 	br	442048 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  442014:	e0bffd17 	ldw	r2,-12(fp)
  442018:	10c00217 	ldw	r3,8(r2)
  44201c:	e0bfff17 	ldw	r2,-4(fp)
  442020:	1887883a 	add	r3,r3,r2
  442024:	e0bffd17 	ldw	r2,-12(fp)
  442028:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  44202c:	e0bffd17 	ldw	r2,-12(fp)
  442030:	10c00217 	ldw	r3,8(r2)
  442034:	d0a71f17 	ldw	r2,-25476(gp)
  442038:	1880032e 	bgeu	r3,r2,442048 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  44203c:	e0bffd17 	ldw	r2,-12(fp)
  442040:	00c00044 	movi	r3,1
  442044:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  442048:	e0bffe17 	ldw	r2,-8(fp)
  44204c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  442050:	e0fffd17 	ldw	r3,-12(fp)
  442054:	d0a03304 	addi	r2,gp,-32564
  442058:	18bfcf1e 	bne	r3,r2,441f98 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  44205c:	04376d80 	call	4376d8 <OSTimeTick>
}
  442060:	e037883a 	mov	sp,fp
  442064:	dfc00117 	ldw	ra,4(sp)
  442068:	df000017 	ldw	fp,0(sp)
  44206c:	dec00204 	addi	sp,sp,8
  442070:	f800283a 	ret

00442074 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  442074:	deffff04 	addi	sp,sp,-4
  442078:	df000015 	stw	fp,0(sp)
  44207c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  442080:	000170fa 	wrctl	ienable,zero
}
  442084:	e037883a 	mov	sp,fp
  442088:	df000017 	ldw	fp,0(sp)
  44208c:	dec00104 	addi	sp,sp,4
  442090:	f800283a 	ret

00442094 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  442094:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  442098:	d0e00717 	ldw	r3,-32740(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  44209c:	d1271717 	ldw	r4,-25508(gp)

      stw ra,  0(sp)
  4420a0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  4420a4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  4420a8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  4420ac:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  4420b0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  4420b4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  4420b8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  4420bc:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  4420c0:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  4420c4:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  4420c8:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  4420cc:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  4420d0:	04424980 	call	442498 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  4420d4:	d1271217 	ldw	r4,-25528(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  4420d8:	d1670a07 	ldb	r5,-25560(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  4420dc:	d1271715 	stw	r4,-25508(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  4420e0:	d1670a45 	stb	r5,-25559(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  4420e4:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  4420e8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  4420ec:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  4420f0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  4420f4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  4420f8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  4420fc:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  442100:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  442104:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  442108:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  44210c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  442110:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  442114:	d0e00715 	stw	r3,-32740(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  442118:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  44211c:	f800283a 	ret

00442120 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  442120:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  442124:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  442128:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  44212c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  442130:	04424980 	call	442498 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  442134:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  442138:	d4a70845 	stb	r18,-25567(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  44213c:	003fe506 	br	4420d4 <OSCtxSw+0x40>

00442140 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  442140:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  442144:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  442148:	10800054 	ori	r2,r2,1
      wrctl status, r2
  44214c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  442150:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  442154:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  442158:	dec00204 	addi	sp,sp,8

      callr r2
  44215c:	103ee83a 	callr	r2

      nop
  442160:	0001883a 	nop

00442164 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  442164:	defff704 	addi	sp,sp,-36
  442168:	dfc00815 	stw	ra,32(sp)
  44216c:	df000715 	stw	fp,28(sp)
  442170:	df000704 	addi	fp,sp,28
  442174:	e13ffc15 	stw	r4,-16(fp)
  442178:	e17ffd15 	stw	r5,-12(fp)
  44217c:	e1bffe15 	stw	r6,-8(fp)
  442180:	3805883a 	mov	r2,r7
  442184:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  442188:	e0fffe17 	ldw	r3,-8(fp)
  44218c:	00bfff04 	movi	r2,-4
  442190:	1884703a 	and	r2,r3,r2
  442194:	10bf0004 	addi	r2,r2,-1024
  442198:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  44219c:	e0bff917 	ldw	r2,-28(fp)
  4421a0:	10000015 	stw	zero,0(r2)
  4421a4:	e0bff917 	ldw	r2,-28(fp)
  4421a8:	10c0bb04 	addi	r3,r2,748
  4421ac:	e0bff917 	ldw	r2,-28(fp)
  4421b0:	10c00115 	stw	r3,4(r2)
  4421b4:	e0bff917 	ldw	r2,-28(fp)
  4421b8:	10c0d204 	addi	r3,r2,840
  4421bc:	e0bff917 	ldw	r2,-28(fp)
  4421c0:	10c00215 	stw	r3,8(r2)
  4421c4:	e0bff917 	ldw	r2,-28(fp)
  4421c8:	10c0e904 	addi	r3,r2,932
  4421cc:	e0bff917 	ldw	r2,-28(fp)
  4421d0:	10c00315 	stw	r3,12(r2)
  4421d4:	e0bff917 	ldw	r2,-28(fp)
  4421d8:	10000415 	stw	zero,16(r2)
  4421dc:	e0bff917 	ldw	r2,-28(fp)
  4421e0:	10800504 	addi	r2,r2,20
  4421e4:	1009883a 	mov	r4,r2
  4421e8:	000b883a 	mov	r5,zero
  4421ec:	01800644 	movi	r6,25
  4421f0:	0434f200 	call	434f20 <memset>
  4421f4:	e0bff917 	ldw	r2,-28(fp)
  4421f8:	10000c15 	stw	zero,48(r2)
  4421fc:	e0bff917 	ldw	r2,-28(fp)
  442200:	00c01134 	movhi	r3,68
  442204:	18d02504 	addi	r3,r3,16532
  442208:	10c00d15 	stw	r3,52(r2)
  44220c:	e0bff917 	ldw	r2,-28(fp)
  442210:	10000e15 	stw	zero,56(r2)
  442214:	e0bff917 	ldw	r2,-28(fp)
  442218:	10000f15 	stw	zero,60(r2)
  44221c:	e0bff917 	ldw	r2,-28(fp)
  442220:	10001015 	stw	zero,64(r2)
  442224:	e0bff917 	ldw	r2,-28(fp)
  442228:	10001115 	stw	zero,68(r2)
  44222c:	e0bff917 	ldw	r2,-28(fp)
  442230:	10001215 	stw	zero,72(r2)
  442234:	e0bff917 	ldw	r2,-28(fp)
  442238:	10001315 	stw	zero,76(r2)
  44223c:	e0bff917 	ldw	r2,-28(fp)
  442240:	10001415 	stw	zero,80(r2)
  442244:	e0bff917 	ldw	r2,-28(fp)
  442248:	10001515 	stw	zero,84(r2)
  44224c:	e0bff917 	ldw	r2,-28(fp)
  442250:	10001615 	stw	zero,88(r2)
  442254:	e0bff917 	ldw	r2,-28(fp)
  442258:	10001715 	stw	zero,92(r2)
  44225c:	e0bff917 	ldw	r2,-28(fp)
  442260:	10001805 	stb	zero,96(r2)
  442264:	e0bff917 	ldw	r2,-28(fp)
  442268:	10801f04 	addi	r2,r2,124
  44226c:	1009883a 	mov	r4,r2
  442270:	000b883a 	mov	r5,zero
  442274:	01800904 	movi	r6,36
  442278:	0434f200 	call	434f20 <memset>
  44227c:	e0bff917 	ldw	r2,-28(fp)
  442280:	10002815 	stw	zero,160(r2)
  442284:	e0bff917 	ldw	r2,-28(fp)
  442288:	00c00044 	movi	r3,1
  44228c:	10c02915 	stw	r3,164(r2)
  442290:	10002a15 	stw	zero,168(r2)
  442294:	e0bff917 	ldw	r2,-28(fp)
  442298:	00ccc384 	movi	r3,13070
  44229c:	10c02b0d 	sth	r3,172(r2)
  4422a0:	e0bff917 	ldw	r2,-28(fp)
  4422a4:	00eaf344 	movi	r3,-21555
  4422a8:	10c02b8d 	sth	r3,174(r2)
  4422ac:	e0bff917 	ldw	r2,-28(fp)
  4422b0:	00c48d04 	movi	r3,4660
  4422b4:	10c02c0d 	sth	r3,176(r2)
  4422b8:	e0bff917 	ldw	r2,-28(fp)
  4422bc:	00f99b44 	movi	r3,-6547
  4422c0:	10c02c8d 	sth	r3,178(r2)
  4422c4:	e0bff917 	ldw	r2,-28(fp)
  4422c8:	00f7bb04 	movi	r3,-8468
  4422cc:	10c02d0d 	sth	r3,180(r2)
  4422d0:	e0bff917 	ldw	r2,-28(fp)
  4422d4:	00c00144 	movi	r3,5
  4422d8:	10c02d8d 	sth	r3,182(r2)
  4422dc:	e0bff917 	ldw	r2,-28(fp)
  4422e0:	00c002c4 	movi	r3,11
  4422e4:	10c02e0d 	sth	r3,184(r2)
  4422e8:	e0bff917 	ldw	r2,-28(fp)
  4422ec:	10002f15 	stw	zero,188(r2)
  4422f0:	e0bff917 	ldw	r2,-28(fp)
  4422f4:	10003015 	stw	zero,192(r2)
  4422f8:	e0bff917 	ldw	r2,-28(fp)
  4422fc:	10003115 	stw	zero,196(r2)
  442300:	e0bff917 	ldw	r2,-28(fp)
  442304:	10003215 	stw	zero,200(r2)
  442308:	e0bff917 	ldw	r2,-28(fp)
  44230c:	10003315 	stw	zero,204(r2)
  442310:	e0bff917 	ldw	r2,-28(fp)
  442314:	10003415 	stw	zero,208(r2)
  442318:	e0bff917 	ldw	r2,-28(fp)
  44231c:	10003e15 	stw	zero,248(r2)
  442320:	e0bff917 	ldw	r2,-28(fp)
  442324:	10003f15 	stw	zero,252(r2)
  442328:	e0bff917 	ldw	r2,-28(fp)
  44232c:	10004015 	stw	zero,256(r2)
  442330:	e0bff917 	ldw	r2,-28(fp)
  442334:	10004115 	stw	zero,260(r2)
  442338:	e0bff917 	ldw	r2,-28(fp)
  44233c:	10004215 	stw	zero,264(r2)
  442340:	e0bff917 	ldw	r2,-28(fp)
  442344:	10004315 	stw	zero,268(r2)
  442348:	e0bff917 	ldw	r2,-28(fp)
  44234c:	10004415 	stw	zero,272(r2)
  442350:	e0bff917 	ldw	r2,-28(fp)
  442354:	10004515 	stw	zero,276(r2)
  442358:	e0bff917 	ldw	r2,-28(fp)
  44235c:	10004615 	stw	zero,280(r2)
  442360:	e0bff917 	ldw	r2,-28(fp)
  442364:	10004715 	stw	zero,284(r2)
  442368:	e0bff917 	ldw	r2,-28(fp)
  44236c:	10003505 	stb	zero,212(r2)
  442370:	e0bff917 	ldw	r2,-28(fp)
  442374:	10003705 	stb	zero,220(r2)
  442378:	e0bff917 	ldw	r2,-28(fp)
  44237c:	10003d15 	stw	zero,244(r2)
  442380:	e0bff917 	ldw	r2,-28(fp)
  442384:	10005215 	stw	zero,328(r2)
  442388:	e0bff917 	ldw	r2,-28(fp)
  44238c:	10005315 	stw	zero,332(r2)
  442390:	e0bff917 	ldw	r2,-28(fp)
  442394:	10005415 	stw	zero,336(r2)
  442398:	e0bff917 	ldw	r2,-28(fp)
  44239c:	10005515 	stw	zero,340(r2)
  4423a0:	e0bff917 	ldw	r2,-28(fp)
  4423a4:	1000b515 	stw	zero,724(r2)
  4423a8:	e0bff917 	ldw	r2,-28(fp)
  4423ac:	10007515 	stw	zero,468(r2)
  4423b0:	e0bff917 	ldw	r2,-28(fp)
  4423b4:	1000b715 	stw	zero,732(r2)
  4423b8:	e0bff917 	ldw	r2,-28(fp)
  4423bc:	1000b815 	stw	zero,736(r2)
  4423c0:	e0bff917 	ldw	r2,-28(fp)
  4423c4:	1000b915 	stw	zero,740(r2)
  4423c8:	e0bff917 	ldw	r2,-28(fp)
  4423cc:	1000ba15 	stw	zero,744(r2)
  4423d0:	e0bff917 	ldw	r2,-28(fp)
  4423d4:	1080bb04 	addi	r2,r2,748
  4423d8:	1009883a 	mov	r4,r2
  4423dc:	000b883a 	mov	r5,zero
  4423e0:	01804504 	movi	r6,276
  4423e4:	0434f200 	call	434f20 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  4423e8:	e0bff917 	ldw	r2,-28(fp)
  4423ec:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  4423f0:	e0bffa17 	ldw	r2,-24(fp)
  4423f4:	10bff304 	addi	r2,r2,-52
  4423f8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  4423fc:	e0bffb17 	ldw	r2,-20(fp)
  442400:	10800c04 	addi	r2,r2,48
  442404:	e0fffc17 	ldw	r3,-16(fp)
  442408:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  44240c:	e0bffb17 	ldw	r2,-20(fp)
  442410:	10800b04 	addi	r2,r2,44
  442414:	e0fffd17 	ldw	r3,-12(fp)
  442418:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  44241c:	e0bffb17 	ldw	r2,-20(fp)
  442420:	10800a04 	addi	r2,r2,40
  442424:	e0fff917 	ldw	r3,-28(fp)
  442428:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  44242c:	00801134 	movhi	r2,68
  442430:	10885004 	addi	r2,r2,8512
  442434:	10c00104 	addi	r3,r2,4
  442438:	e0bffb17 	ldw	r2,-20(fp)
  44243c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  442440:	e0bffb17 	ldw	r2,-20(fp)
}
  442444:	e037883a 	mov	sp,fp
  442448:	dfc00117 	ldw	ra,4(sp)
  44244c:	df000017 	ldw	fp,0(sp)
  442450:	dec00204 	addi	sp,sp,8
  442454:	f800283a 	ret

00442458 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  442458:	defffe04 	addi	sp,sp,-8
  44245c:	df000115 	stw	fp,4(sp)
  442460:	df000104 	addi	fp,sp,4
  442464:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  442468:	e037883a 	mov	sp,fp
  44246c:	df000017 	ldw	fp,0(sp)
  442470:	dec00104 	addi	sp,sp,4
  442474:	f800283a 	ret

00442478 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  442478:	defffe04 	addi	sp,sp,-8
  44247c:	df000115 	stw	fp,4(sp)
  442480:	df000104 	addi	fp,sp,4
  442484:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  442488:	e037883a 	mov	sp,fp
  44248c:	df000017 	ldw	fp,0(sp)
  442490:	dec00104 	addi	sp,sp,4
  442494:	f800283a 	ret

00442498 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  442498:	deffff04 	addi	sp,sp,-4
  44249c:	df000015 	stw	fp,0(sp)
  4424a0:	d839883a 	mov	fp,sp
}
  4424a4:	e037883a 	mov	sp,fp
  4424a8:	df000017 	ldw	fp,0(sp)
  4424ac:	dec00104 	addi	sp,sp,4
  4424b0:	f800283a 	ret

004424b4 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  4424b4:	deffff04 	addi	sp,sp,-4
  4424b8:	df000015 	stw	fp,0(sp)
  4424bc:	d839883a 	mov	fp,sp
}
  4424c0:	e037883a 	mov	sp,fp
  4424c4:	df000017 	ldw	fp,0(sp)
  4424c8:	dec00104 	addi	sp,sp,4
  4424cc:	f800283a 	ret

004424d0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  4424d0:	deffff04 	addi	sp,sp,-4
  4424d4:	df000015 	stw	fp,0(sp)
  4424d8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  4424dc:	e037883a 	mov	sp,fp
  4424e0:	df000017 	ldw	fp,0(sp)
  4424e4:	dec00104 	addi	sp,sp,4
  4424e8:	f800283a 	ret

004424ec <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  4424ec:	deffff04 	addi	sp,sp,-4
  4424f0:	df000015 	stw	fp,0(sp)
  4424f4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  4424f8:	e037883a 	mov	sp,fp
  4424fc:	df000017 	ldw	fp,0(sp)
  442500:	dec00104 	addi	sp,sp,4
  442504:	f800283a 	ret

00442508 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  442508:	deffff04 	addi	sp,sp,-4
  44250c:	df000015 	stw	fp,0(sp)
  442510:	d839883a 	mov	fp,sp
}
  442514:	e037883a 	mov	sp,fp
  442518:	df000017 	ldw	fp,0(sp)
  44251c:	dec00104 	addi	sp,sp,4
  442520:	f800283a 	ret

00442524 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  442524:	deffff04 	addi	sp,sp,-4
  442528:	df000015 	stw	fp,0(sp)
  44252c:	d839883a 	mov	fp,sp
}
  442530:	e037883a 	mov	sp,fp
  442534:	df000017 	ldw	fp,0(sp)
  442538:	dec00104 	addi	sp,sp,4
  44253c:	f800283a 	ret

00442540 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  442540:	defffe04 	addi	sp,sp,-8
  442544:	df000115 	stw	fp,4(sp)
  442548:	df000104 	addi	fp,sp,4
  44254c:	e13fff15 	stw	r4,-4(fp)
}
  442550:	e037883a 	mov	sp,fp
  442554:	df000017 	ldw	fp,0(sp)
  442558:	dec00104 	addi	sp,sp,4
  44255c:	f800283a 	ret

00442560 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  442560:	defffb04 	addi	sp,sp,-20
  442564:	dfc00415 	stw	ra,16(sp)
  442568:	df000315 	stw	fp,12(sp)
  44256c:	df000304 	addi	fp,sp,12
  442570:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  442574:	00801134 	movhi	r2,68
  442578:	10970104 	addi	r2,r2,23556
  44257c:	10800017 	ldw	r2,0(r2)
  442580:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  442584:	00003106 	br	44264c <alt_find_file+0xec>
  {
    len = strlen(next->name);
  442588:	e0bffd17 	ldw	r2,-12(fp)
  44258c:	10800217 	ldw	r2,8(r2)
  442590:	1009883a 	mov	r4,r2
  442594:	0432a7c0 	call	432a7c <strlen>
  442598:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  44259c:	e0bffd17 	ldw	r2,-12(fp)
  4425a0:	10c00217 	ldw	r3,8(r2)
  4425a4:	e0bffe17 	ldw	r2,-8(fp)
  4425a8:	10bfffc4 	addi	r2,r2,-1
  4425ac:	1885883a 	add	r2,r3,r2
  4425b0:	10800003 	ldbu	r2,0(r2)
  4425b4:	10803fcc 	andi	r2,r2,255
  4425b8:	1080201c 	xori	r2,r2,128
  4425bc:	10bfe004 	addi	r2,r2,-128
  4425c0:	10800bd8 	cmpnei	r2,r2,47
  4425c4:	1000031e 	bne	r2,zero,4425d4 <alt_find_file+0x74>
    {
      len -= 1;
  4425c8:	e0bffe17 	ldw	r2,-8(fp)
  4425cc:	10bfffc4 	addi	r2,r2,-1
  4425d0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  4425d4:	e0bffe17 	ldw	r2,-8(fp)
  4425d8:	e0ffff17 	ldw	r3,-4(fp)
  4425dc:	1885883a 	add	r2,r3,r2
  4425e0:	10800003 	ldbu	r2,0(r2)
  4425e4:	10803fcc 	andi	r2,r2,255
  4425e8:	1080201c 	xori	r2,r2,128
  4425ec:	10bfe004 	addi	r2,r2,-128
  4425f0:	10800be0 	cmpeqi	r2,r2,47
  4425f4:	1000081e 	bne	r2,zero,442618 <alt_find_file+0xb8>
  4425f8:	e0bffe17 	ldw	r2,-8(fp)
  4425fc:	e0ffff17 	ldw	r3,-4(fp)
  442600:	1885883a 	add	r2,r3,r2
  442604:	10800003 	ldbu	r2,0(r2)
  442608:	10803fcc 	andi	r2,r2,255
  44260c:	1080201c 	xori	r2,r2,128
  442610:	10bfe004 	addi	r2,r2,-128
  442614:	10000a1e 	bne	r2,zero,442640 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  442618:	e0bffd17 	ldw	r2,-12(fp)
  44261c:	10c00217 	ldw	r3,8(r2)
  442620:	e0bffe17 	ldw	r2,-8(fp)
  442624:	1809883a 	mov	r4,r3
  442628:	e17fff17 	ldw	r5,-4(fp)
  44262c:	100d883a 	mov	r6,r2
  442630:	04428600 	call	442860 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  442634:	1000021e 	bne	r2,zero,442640 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  442638:	e0bffd17 	ldw	r2,-12(fp)
  44263c:	00000806 	br	442660 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  442640:	e0bffd17 	ldw	r2,-12(fp)
  442644:	10800017 	ldw	r2,0(r2)
  442648:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  44264c:	e0fffd17 	ldw	r3,-12(fp)
  442650:	00801134 	movhi	r2,68
  442654:	10970104 	addi	r2,r2,23556
  442658:	18bfcb1e 	bne	r3,r2,442588 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  44265c:	0005883a 	mov	r2,zero
}
  442660:	e037883a 	mov	sp,fp
  442664:	dfc00117 	ldw	ra,4(sp)
  442668:	df000017 	ldw	fp,0(sp)
  44266c:	dec00204 	addi	sp,sp,8
  442670:	f800283a 	ret

00442674 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  442674:	defff804 	addi	sp,sp,-32
  442678:	dfc00715 	stw	ra,28(sp)
  44267c:	df000615 	stw	fp,24(sp)
  442680:	dc000515 	stw	r16,20(sp)
  442684:	df000504 	addi	fp,sp,20
  442688:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  44268c:	00bffa04 	movi	r2,-24
  442690:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  442694:	00801134 	movhi	r2,68
  442698:	109df604 	addi	r2,r2,30680
  44269c:	10800017 	ldw	r2,0(r2)
  4426a0:	e0bffd15 	stw	r2,-12(fp)
  4426a4:	e03ffe0d 	sth	zero,-8(fp)
  4426a8:	e0fffe0b 	ldhu	r3,-8(fp)
  4426ac:	e0bffe84 	addi	r2,fp,-6
  4426b0:	e13ffd17 	ldw	r4,-12(fp)
  4426b4:	180b883a 	mov	r5,r3
  4426b8:	100d883a 	mov	r6,r2
  4426bc:	043cfa00 	call	43cfa0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  4426c0:	e03ffb15 	stw	zero,-20(fp)
  4426c4:	00002106 	br	44274c <alt_get_fd+0xd8>
  {
    if (!alt_fd_list[i].dev)
  4426c8:	04001134 	movhi	r16,68
  4426cc:	84127704 	addi	r16,r16,18908
  4426d0:	e0bffb17 	ldw	r2,-20(fp)
  4426d4:	1009883a 	mov	r4,r2
  4426d8:	01400304 	movi	r5,12
  4426dc:	04355000 	call	435500 <__mulsi3>
  4426e0:	8085883a 	add	r2,r16,r2
  4426e4:	10800017 	ldw	r2,0(r2)
  4426e8:	1000151e 	bne	r2,zero,442740 <alt_get_fd+0xcc>
    {
      alt_fd_list[i].dev = dev;
  4426ec:	04001134 	movhi	r16,68
  4426f0:	84127704 	addi	r16,r16,18908
  4426f4:	e0bffb17 	ldw	r2,-20(fp)
  4426f8:	1009883a 	mov	r4,r2
  4426fc:	01400304 	movi	r5,12
  442700:	04355000 	call	435500 <__mulsi3>
  442704:	8085883a 	add	r2,r16,r2
  442708:	e0ffff17 	ldw	r3,-4(fp)
  44270c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  442710:	00801134 	movhi	r2,68
  442714:	10970504 	addi	r2,r2,23572
  442718:	10c00017 	ldw	r3,0(r2)
  44271c:	e0bffb17 	ldw	r2,-20(fp)
  442720:	1880040e 	bge	r3,r2,442734 <alt_get_fd+0xc0>
      {
        alt_max_fd = i;
  442724:	00801134 	movhi	r2,68
  442728:	10970504 	addi	r2,r2,23572
  44272c:	e0fffb17 	ldw	r3,-20(fp)
  442730:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  442734:	e0bffb17 	ldw	r2,-20(fp)
  442738:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  44273c:	00000606 	br	442758 <alt_get_fd+0xe4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  442740:	e0bffb17 	ldw	r2,-20(fp)
  442744:	10800044 	addi	r2,r2,1
  442748:	e0bffb15 	stw	r2,-20(fp)
  44274c:	e0bffb17 	ldw	r2,-20(fp)
  442750:	10800810 	cmplti	r2,r2,32
  442754:	103fdc1e 	bne	r2,zero,4426c8 <alt_get_fd+0x54>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  442758:	00801134 	movhi	r2,68
  44275c:	109df604 	addi	r2,r2,30680
  442760:	10800017 	ldw	r2,0(r2)
  442764:	1009883a 	mov	r4,r2
  442768:	043d45c0 	call	43d45c <OSSemPost>

  return rc;
  44276c:	e0bffc17 	ldw	r2,-16(fp)
}
  442770:	e037883a 	mov	sp,fp
  442774:	dfc00217 	ldw	ra,8(sp)
  442778:	df000117 	ldw	fp,4(sp)
  44277c:	dc000017 	ldw	r16,0(sp)
  442780:	dec00304 	addi	sp,sp,12
  442784:	f800283a 	ret

00442788 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  442788:	defffb04 	addi	sp,sp,-20
  44278c:	df000415 	stw	fp,16(sp)
  442790:	df000404 	addi	fp,sp,16
  442794:	e13ffe15 	stw	r4,-8(fp)
  442798:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  44279c:	e0bfff17 	ldw	r2,-4(fp)
  4427a0:	10810070 	cmpltui	r2,r2,1025
  4427a4:	1000021e 	bne	r2,zero,4427b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  4427a8:	00810004 	movi	r2,1024
  4427ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  4427b0:	e0fffe17 	ldw	r3,-8(fp)
  4427b4:	e0bfff17 	ldw	r2,-4(fp)
  4427b8:	1885883a 	add	r2,r3,r2
  4427bc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  4427c0:	e0bffe17 	ldw	r2,-8(fp)
  4427c4:	e0bffc15 	stw	r2,-16(fp)
  4427c8:	00000506 	br	4427e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  4427cc:	e0bffc17 	ldw	r2,-16(fp)
  4427d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  4427d4:	e0bffc17 	ldw	r2,-16(fp)
  4427d8:	10800804 	addi	r2,r2,32
  4427dc:	e0bffc15 	stw	r2,-16(fp)
  4427e0:	e0fffc17 	ldw	r3,-16(fp)
  4427e4:	e0bffd17 	ldw	r2,-12(fp)
  4427e8:	18bff836 	bltu	r3,r2,4427cc <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  4427ec:	e0bffe17 	ldw	r2,-8(fp)
  4427f0:	108007cc 	andi	r2,r2,31
  4427f4:	10000226 	beq	r2,zero,442800 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  4427f8:	e0bffc17 	ldw	r2,-16(fp)
  4427fc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  442800:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  442804:	e037883a 	mov	sp,fp
  442808:	df000017 	ldw	fp,0(sp)
  44280c:	dec00104 	addi	sp,sp,4
  442810:	f800283a 	ret

00442814 <atexit>:
  442814:	200b883a 	mov	r5,r4
  442818:	000d883a 	mov	r6,zero
  44281c:	0009883a 	mov	r4,zero
  442820:	000f883a 	mov	r7,zero
  442824:	04428dc1 	jmpi	4428dc <__register_exitproc>

00442828 <exit>:
  442828:	defffe04 	addi	sp,sp,-8
  44282c:	000b883a 	mov	r5,zero
  442830:	dc000015 	stw	r16,0(sp)
  442834:	dfc00115 	stw	ra,4(sp)
  442838:	2021883a 	mov	r16,r4
  44283c:	0442a0c0 	call	442a0c <__call_exitprocs>
  442840:	00801134 	movhi	r2,68
  442844:	1096fd04 	addi	r2,r2,23540
  442848:	11000017 	ldw	r4,0(r2)
  44284c:	20800f17 	ldw	r2,60(r4)
  442850:	10000126 	beq	r2,zero,442858 <exit+0x30>
  442854:	103ee83a 	callr	r2
  442858:	8009883a 	mov	r4,r16
  44285c:	0443e900 	call	443e90 <_exit>

00442860 <memcmp>:
  442860:	01c000c4 	movi	r7,3
  442864:	3980192e 	bgeu	r7,r6,4428cc <memcmp+0x6c>
  442868:	2904b03a 	or	r2,r5,r4
  44286c:	11c4703a 	and	r2,r2,r7
  442870:	10000f26 	beq	r2,zero,4428b0 <memcmp+0x50>
  442874:	20c00003 	ldbu	r3,0(r4)
  442878:	28800003 	ldbu	r2,0(r5)
  44287c:	1880151e 	bne	r3,r2,4428d4 <memcmp+0x74>
  442880:	31bfff84 	addi	r6,r6,-2
  442884:	01ffffc4 	movi	r7,-1
  442888:	00000406 	br	44289c <memcmp+0x3c>
  44288c:	20c00003 	ldbu	r3,0(r4)
  442890:	28800003 	ldbu	r2,0(r5)
  442894:	31bfffc4 	addi	r6,r6,-1
  442898:	18800e1e 	bne	r3,r2,4428d4 <memcmp+0x74>
  44289c:	21000044 	addi	r4,r4,1
  4428a0:	29400044 	addi	r5,r5,1
  4428a4:	31fff91e 	bne	r6,r7,44288c <memcmp+0x2c>
  4428a8:	0005883a 	mov	r2,zero
  4428ac:	f800283a 	ret
  4428b0:	20c00017 	ldw	r3,0(r4)
  4428b4:	28800017 	ldw	r2,0(r5)
  4428b8:	1880041e 	bne	r3,r2,4428cc <memcmp+0x6c>
  4428bc:	31bfff04 	addi	r6,r6,-4
  4428c0:	21000104 	addi	r4,r4,4
  4428c4:	29400104 	addi	r5,r5,4
  4428c8:	39bff936 	bltu	r7,r6,4428b0 <memcmp+0x50>
  4428cc:	303fe91e 	bne	r6,zero,442874 <memcmp+0x14>
  4428d0:	003ff506 	br	4428a8 <memcmp+0x48>
  4428d4:	1885c83a 	sub	r2,r3,r2
  4428d8:	f800283a 	ret

004428dc <__register_exitproc>:
  4428dc:	defffa04 	addi	sp,sp,-24
  4428e0:	00801134 	movhi	r2,68
  4428e4:	1096fd04 	addi	r2,r2,23540
  4428e8:	dc000315 	stw	r16,12(sp)
  4428ec:	14000017 	ldw	r16,0(r2)
  4428f0:	dc400415 	stw	r17,16(sp)
  4428f4:	dfc00515 	stw	ra,20(sp)
  4428f8:	80805217 	ldw	r2,328(r16)
  4428fc:	2023883a 	mov	r17,r4
  442900:	10003e26 	beq	r2,zero,4429fc <__register_exitproc+0x120>
  442904:	10c00117 	ldw	r3,4(r2)
  442908:	020007c4 	movi	r8,31
  44290c:	40c0180e 	bge	r8,r3,442970 <__register_exitproc+0x94>
  442910:	00800034 	movhi	r2,0
  442914:	10800004 	addi	r2,r2,0
  442918:	1000061e 	bne	r2,zero,442934 <__register_exitproc+0x58>
  44291c:	00bfffc4 	movi	r2,-1
  442920:	dfc00517 	ldw	ra,20(sp)
  442924:	dc400417 	ldw	r17,16(sp)
  442928:	dc000317 	ldw	r16,12(sp)
  44292c:	dec00604 	addi	sp,sp,24
  442930:	f800283a 	ret
  442934:	01006404 	movi	r4,400
  442938:	d9400015 	stw	r5,0(sp)
  44293c:	d9800115 	stw	r6,4(sp)
  442940:	d9c00215 	stw	r7,8(sp)
  442944:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  442948:	d9400017 	ldw	r5,0(sp)
  44294c:	d9800117 	ldw	r6,4(sp)
  442950:	d9c00217 	ldw	r7,8(sp)
  442954:	103ff126 	beq	r2,zero,44291c <__register_exitproc+0x40>
  442958:	80c05217 	ldw	r3,328(r16)
  44295c:	10000115 	stw	zero,4(r2)
  442960:	10c00015 	stw	r3,0(r2)
  442964:	80805215 	stw	r2,328(r16)
  442968:	10006215 	stw	zero,392(r2)
  44296c:	10006315 	stw	zero,396(r2)
  442970:	10c00117 	ldw	r3,4(r2)
  442974:	88000d1e 	bne	r17,zero,4429ac <__register_exitproc+0xd0>
  442978:	19000084 	addi	r4,r3,2
  44297c:	2109883a 	add	r4,r4,r4
  442980:	18c00044 	addi	r3,r3,1
  442984:	2109883a 	add	r4,r4,r4
  442988:	1109883a 	add	r4,r2,r4
  44298c:	10c00115 	stw	r3,4(r2)
  442990:	0005883a 	mov	r2,zero
  442994:	21400015 	stw	r5,0(r4)
  442998:	dfc00517 	ldw	ra,20(sp)
  44299c:	dc400417 	ldw	r17,16(sp)
  4429a0:	dc000317 	ldw	r16,12(sp)
  4429a4:	dec00604 	addi	sp,sp,24
  4429a8:	f800283a 	ret
  4429ac:	02400044 	movi	r9,1
  4429b0:	12806217 	ldw	r10,392(r2)
  4429b4:	48d2983a 	sll	r9,r9,r3
  4429b8:	19000804 	addi	r4,r3,32
  4429bc:	18d1883a 	add	r8,r3,r3
  4429c0:	2109883a 	add	r4,r4,r4
  4429c4:	4211883a 	add	r8,r8,r8
  4429c8:	2109883a 	add	r4,r4,r4
  4429cc:	1109883a 	add	r4,r2,r4
  4429d0:	1211883a 	add	r8,r2,r8
  4429d4:	5254b03a 	or	r10,r10,r9
  4429d8:	21c02215 	stw	r7,136(r4)
  4429dc:	41802215 	stw	r6,136(r8)
  4429e0:	12806215 	stw	r10,392(r2)
  4429e4:	01000084 	movi	r4,2
  4429e8:	893fe31e 	bne	r17,r4,442978 <__register_exitproc+0x9c>
  4429ec:	11006317 	ldw	r4,396(r2)
  4429f0:	2252b03a 	or	r9,r4,r9
  4429f4:	12406315 	stw	r9,396(r2)
  4429f8:	003fdf06 	br	442978 <__register_exitproc+0x9c>
  4429fc:	00801174 	movhi	r2,69
  442a00:	10aaea04 	addi	r2,r2,-21592
  442a04:	80805215 	stw	r2,328(r16)
  442a08:	003fbe06 	br	442904 <__register_exitproc+0x28>

00442a0c <__call_exitprocs>:
  442a0c:	00801134 	movhi	r2,68
  442a10:	1096fd04 	addi	r2,r2,23540
  442a14:	10800017 	ldw	r2,0(r2)
  442a18:	defff304 	addi	sp,sp,-52
  442a1c:	df000b15 	stw	fp,44(sp)
  442a20:	d8800015 	stw	r2,0(sp)
  442a24:	10805204 	addi	r2,r2,328
  442a28:	dd400815 	stw	r21,32(sp)
  442a2c:	dfc00c15 	stw	ra,48(sp)
  442a30:	ddc00a15 	stw	r23,40(sp)
  442a34:	dd800915 	stw	r22,36(sp)
  442a38:	dd000715 	stw	r20,28(sp)
  442a3c:	dcc00615 	stw	r19,24(sp)
  442a40:	dc800515 	stw	r18,20(sp)
  442a44:	dc400415 	stw	r17,16(sp)
  442a48:	dc000315 	stw	r16,12(sp)
  442a4c:	d9000115 	stw	r4,4(sp)
  442a50:	2839883a 	mov	fp,r5
  442a54:	d8800215 	stw	r2,8(sp)
  442a58:	057fffc4 	movi	r21,-1
  442a5c:	d8800017 	ldw	r2,0(sp)
  442a60:	ddc00217 	ldw	r23,8(sp)
  442a64:	14805217 	ldw	r18,328(r2)
  442a68:	90001726 	beq	r18,zero,442ac8 <__call_exitprocs+0xbc>
  442a6c:	94400117 	ldw	r17,4(r18)
  442a70:	8c3fffc4 	addi	r16,r17,-1
  442a74:	80001116 	blt	r16,zero,442abc <__call_exitprocs+0xb0>
  442a78:	8c400044 	addi	r17,r17,1
  442a7c:	8427883a 	add	r19,r16,r16
  442a80:	8c63883a 	add	r17,r17,r17
  442a84:	95802204 	addi	r22,r18,136
  442a88:	9ce7883a 	add	r19,r19,r19
  442a8c:	8c63883a 	add	r17,r17,r17
  442a90:	b4e7883a 	add	r19,r22,r19
  442a94:	9463883a 	add	r17,r18,r17
  442a98:	e0001726 	beq	fp,zero,442af8 <__call_exitprocs+0xec>
  442a9c:	8c87c83a 	sub	r3,r17,r18
  442aa0:	b0c7883a 	add	r3,r22,r3
  442aa4:	18c01e17 	ldw	r3,120(r3)
  442aa8:	1f001326 	beq	r3,fp,442af8 <__call_exitprocs+0xec>
  442aac:	843fffc4 	addi	r16,r16,-1
  442ab0:	9cffff04 	addi	r19,r19,-4
  442ab4:	8c7fff04 	addi	r17,r17,-4
  442ab8:	857ff71e 	bne	r16,r21,442a98 <__call_exitprocs+0x8c>
  442abc:	00800034 	movhi	r2,0
  442ac0:	10800004 	addi	r2,r2,0
  442ac4:	10002a1e 	bne	r2,zero,442b70 <__call_exitprocs+0x164>
  442ac8:	dfc00c17 	ldw	ra,48(sp)
  442acc:	df000b17 	ldw	fp,44(sp)
  442ad0:	ddc00a17 	ldw	r23,40(sp)
  442ad4:	dd800917 	ldw	r22,36(sp)
  442ad8:	dd400817 	ldw	r21,32(sp)
  442adc:	dd000717 	ldw	r20,28(sp)
  442ae0:	dcc00617 	ldw	r19,24(sp)
  442ae4:	dc800517 	ldw	r18,20(sp)
  442ae8:	dc400417 	ldw	r17,16(sp)
  442aec:	dc000317 	ldw	r16,12(sp)
  442af0:	dec00d04 	addi	sp,sp,52
  442af4:	f800283a 	ret
  442af8:	91000117 	ldw	r4,4(r18)
  442afc:	88c00017 	ldw	r3,0(r17)
  442b00:	213fffc4 	addi	r4,r4,-1
  442b04:	24001526 	beq	r4,r16,442b5c <__call_exitprocs+0x150>
  442b08:	88000015 	stw	zero,0(r17)
  442b0c:	183fe726 	beq	r3,zero,442aac <__call_exitprocs+0xa0>
  442b10:	00800044 	movi	r2,1
  442b14:	1408983a 	sll	r4,r2,r16
  442b18:	91406217 	ldw	r5,392(r18)
  442b1c:	95000117 	ldw	r20,4(r18)
  442b20:	214a703a 	and	r5,r4,r5
  442b24:	28000b26 	beq	r5,zero,442b54 <__call_exitprocs+0x148>
  442b28:	91406317 	ldw	r5,396(r18)
  442b2c:	2148703a 	and	r4,r4,r5
  442b30:	20000c1e 	bne	r4,zero,442b64 <__call_exitprocs+0x158>
  442b34:	99400017 	ldw	r5,0(r19)
  442b38:	d9000117 	ldw	r4,4(sp)
  442b3c:	183ee83a 	callr	r3
  442b40:	90c00117 	ldw	r3,4(r18)
  442b44:	1d3fc51e 	bne	r3,r20,442a5c <__call_exitprocs+0x50>
  442b48:	b8c00017 	ldw	r3,0(r23)
  442b4c:	1cbfd726 	beq	r3,r18,442aac <__call_exitprocs+0xa0>
  442b50:	003fc206 	br	442a5c <__call_exitprocs+0x50>
  442b54:	183ee83a 	callr	r3
  442b58:	003ff906 	br	442b40 <__call_exitprocs+0x134>
  442b5c:	94000115 	stw	r16,4(r18)
  442b60:	003fea06 	br	442b0c <__call_exitprocs+0x100>
  442b64:	99000017 	ldw	r4,0(r19)
  442b68:	183ee83a 	callr	r3
  442b6c:	003ff406 	br	442b40 <__call_exitprocs+0x134>
  442b70:	90c00117 	ldw	r3,4(r18)
  442b74:	1800071e 	bne	r3,zero,442b94 <__call_exitprocs+0x188>
  442b78:	90c00017 	ldw	r3,0(r18)
  442b7c:	18000926 	beq	r3,zero,442ba4 <__call_exitprocs+0x198>
  442b80:	9009883a 	mov	r4,r18
  442b84:	b8c00015 	stw	r3,0(r23)
  442b88:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  442b8c:	bc800017 	ldw	r18,0(r23)
  442b90:	003fb506 	br	442a68 <__call_exitprocs+0x5c>
  442b94:	90c00017 	ldw	r3,0(r18)
  442b98:	902f883a 	mov	r23,r18
  442b9c:	1825883a 	mov	r18,r3
  442ba0:	003fb106 	br	442a68 <__call_exitprocs+0x5c>
  442ba4:	0007883a 	mov	r3,zero
  442ba8:	003ffb06 	br	442b98 <__call_exitprocs+0x18c>

00442bac <__fixunsdfsi>:
  442bac:	defffd04 	addi	sp,sp,-12
  442bb0:	000d883a 	mov	r6,zero
  442bb4:	01d07834 	movhi	r7,16864
  442bb8:	dc400115 	stw	r17,4(sp)
  442bbc:	dc000015 	stw	r16,0(sp)
  442bc0:	dfc00215 	stw	ra,8(sp)
  442bc4:	2023883a 	mov	r17,r4
  442bc8:	2821883a 	mov	r16,r5
  442bcc:	04434d00 	call	4434d0 <__gedf2>
  442bd0:	1000080e 	bge	r2,zero,442bf4 <__fixunsdfsi+0x48>
  442bd4:	8809883a 	mov	r4,r17
  442bd8:	800b883a 	mov	r5,r16
  442bdc:	04435340 	call	443534 <__fixdfsi>
  442be0:	dfc00217 	ldw	ra,8(sp)
  442be4:	dc400117 	ldw	r17,4(sp)
  442be8:	dc000017 	ldw	r16,0(sp)
  442bec:	dec00304 	addi	sp,sp,12
  442bf0:	f800283a 	ret
  442bf4:	000d883a 	mov	r6,zero
  442bf8:	01d07834 	movhi	r7,16864
  442bfc:	8809883a 	mov	r4,r17
  442c00:	800b883a 	mov	r5,r16
  442c04:	0442fd80 	call	442fd8 <__subdf3>
  442c08:	180b883a 	mov	r5,r3
  442c0c:	1009883a 	mov	r4,r2
  442c10:	04435340 	call	443534 <__fixdfsi>
  442c14:	00e00034 	movhi	r3,32768
  442c18:	10c5883a 	add	r2,r2,r3
  442c1c:	dfc00217 	ldw	ra,8(sp)
  442c20:	dc400117 	ldw	r17,4(sp)
  442c24:	dc000017 	ldw	r16,0(sp)
  442c28:	dec00304 	addi	sp,sp,12
  442c2c:	f800283a 	ret

00442c30 <_fpadd_parts>:
  442c30:	2005883a 	mov	r2,r4
  442c34:	21000017 	ldw	r4,0(r4)
  442c38:	01c00044 	movi	r7,1
  442c3c:	3900622e 	bgeu	r7,r4,442dc8 <_fpadd_parts+0x198>
  442c40:	28c00017 	ldw	r3,0(r5)
  442c44:	38c05f2e 	bgeu	r7,r3,442dc4 <_fpadd_parts+0x194>
  442c48:	01c00104 	movi	r7,4
  442c4c:	21c0c626 	beq	r4,r7,442f68 <_fpadd_parts+0x338>
  442c50:	19c05c26 	beq	r3,r7,442dc4 <_fpadd_parts+0x194>
  442c54:	01c00084 	movi	r7,2
  442c58:	19c06b26 	beq	r3,r7,442e08 <_fpadd_parts+0x1d8>
  442c5c:	21c05926 	beq	r4,r7,442dc4 <_fpadd_parts+0x194>
  442c60:	11c00217 	ldw	r7,8(r2)
  442c64:	2ac00217 	ldw	r11,8(r5)
  442c68:	13000317 	ldw	r12,12(r2)
  442c6c:	13400417 	ldw	r13,16(r2)
  442c70:	3ac9c83a 	sub	r4,r7,r11
  442c74:	2a000317 	ldw	r8,12(r5)
  442c78:	2a400417 	ldw	r9,16(r5)
  442c7c:	2015883a 	mov	r10,r4
  442c80:	20007516 	blt	r4,zero,442e58 <_fpadd_parts+0x228>
  442c84:	00c00fc4 	movi	r3,63
  442c88:	1a805016 	blt	r3,r10,442dcc <_fpadd_parts+0x19c>
  442c8c:	0100870e 	bge	zero,r4,442eac <_fpadd_parts+0x27c>
  442c90:	50fff804 	addi	r3,r10,-32
  442c94:	18009916 	blt	r3,zero,442efc <_fpadd_parts+0x2cc>
  442c98:	48d6d83a 	srl	r11,r9,r3
  442c9c:	001d883a 	mov	r14,zero
  442ca0:	18009e16 	blt	r3,zero,442f1c <_fpadd_parts+0x2ec>
  442ca4:	01000044 	movi	r4,1
  442ca8:	20c6983a 	sll	r3,r4,r3
  442cac:	0015883a 	mov	r10,zero
  442cb0:	513fffc4 	addi	r4,r10,-1
  442cb4:	2295403a 	cmpgeu	r10,r4,r10
  442cb8:	1a87c83a 	sub	r3,r3,r10
  442cbc:	1a52703a 	and	r9,r3,r9
  442cc0:	2210703a 	and	r8,r4,r8
  442cc4:	4250b03a 	or	r8,r8,r9
  442cc8:	4010c03a 	cmpne	r8,r8,zero
  442ccc:	42d0b03a 	or	r8,r8,r11
  442cd0:	7013883a 	mov	r9,r14
  442cd4:	11000117 	ldw	r4,4(r2)
  442cd8:	28800117 	ldw	r2,4(r5)
  442cdc:	20804126 	beq	r4,r2,442de4 <_fpadd_parts+0x1b4>
  442ce0:	20006326 	beq	r4,zero,442e70 <_fpadd_parts+0x240>
  442ce4:	4305c83a 	sub	r2,r8,r12
  442ce8:	4091803a 	cmpltu	r8,r8,r2
  442cec:	4b47c83a 	sub	r3,r9,r13
  442cf0:	1a07c83a 	sub	r3,r3,r8
  442cf4:	18006316 	blt	r3,zero,442e84 <_fpadd_parts+0x254>
  442cf8:	30000115 	stw	zero,4(r6)
  442cfc:	31c00215 	stw	r7,8(r6)
  442d00:	30800315 	stw	r2,12(r6)
  442d04:	30c00415 	stw	r3,16(r6)
  442d08:	11ffffc4 	addi	r7,r2,-1
  442d0c:	388b403a 	cmpgeu	r5,r7,r2
  442d10:	194bc83a 	sub	r5,r3,r5
  442d14:	01040034 	movhi	r4,4096
  442d18:	213fffc4 	addi	r4,r4,-1
  442d1c:	21401736 	bltu	r4,r5,442d7c <_fpadd_parts+0x14c>
  442d20:	29008226 	beq	r5,r4,442f2c <_fpadd_parts+0x2fc>
  442d24:	31400217 	ldw	r5,8(r6)
  442d28:	02840034 	movhi	r10,4096
  442d2c:	52bfffc4 	addi	r10,r10,-1
  442d30:	033fff84 	movi	r12,-2
  442d34:	297fffc4 	addi	r5,r5,-1
  442d38:	00000106 	br	442d40 <_fpadd_parts+0x110>
  442d3c:	3a804a26 	beq	r7,r10,442e68 <_fpadd_parts+0x238>
  442d40:	1089883a 	add	r4,r2,r2
  442d44:	2091803a 	cmpltu	r8,r4,r2
  442d48:	18c7883a 	add	r3,r3,r3
  442d4c:	227fffc4 	addi	r9,r4,-1
  442d50:	40d1883a 	add	r8,r8,r3
  442d54:	490f403a 	cmpgeu	r7,r9,r4
  442d58:	41cfc83a 	sub	r7,r8,r7
  442d5c:	2817883a 	mov	r11,r5
  442d60:	2005883a 	mov	r2,r4
  442d64:	4007883a 	mov	r3,r8
  442d68:	297fffc4 	addi	r5,r5,-1
  442d6c:	51fff32e 	bgeu	r10,r7,442d3c <_fpadd_parts+0x10c>
  442d70:	31000315 	stw	r4,12(r6)
  442d74:	32000415 	stw	r8,16(r6)
  442d78:	32c00215 	stw	r11,8(r6)
  442d7c:	010000c4 	movi	r4,3
  442d80:	31000015 	stw	r4,0(r6)
  442d84:	01080034 	movhi	r4,8192
  442d88:	213fffc4 	addi	r4,r4,-1
  442d8c:	20c00b2e 	bgeu	r4,r3,442dbc <_fpadd_parts+0x18c>
  442d90:	180e97fa 	slli	r7,r3,31
  442d94:	1008d07a 	srli	r4,r2,1
  442d98:	31400217 	ldw	r5,8(r6)
  442d9c:	1806d07a 	srli	r3,r3,1
  442da0:	1080004c 	andi	r2,r2,1
  442da4:	3908b03a 	or	r4,r7,r4
  442da8:	1108b03a 	or	r4,r2,r4
  442dac:	29400044 	addi	r5,r5,1
  442db0:	31000315 	stw	r4,12(r6)
  442db4:	30c00415 	stw	r3,16(r6)
  442db8:	31400215 	stw	r5,8(r6)
  442dbc:	3005883a 	mov	r2,r6
  442dc0:	f800283a 	ret
  442dc4:	2805883a 	mov	r2,r5
  442dc8:	f800283a 	ret
  442dcc:	59c01e0e 	bge	r11,r7,442e48 <_fpadd_parts+0x218>
  442dd0:	11000117 	ldw	r4,4(r2)
  442dd4:	28800117 	ldw	r2,4(r5)
  442dd8:	0011883a 	mov	r8,zero
  442ddc:	0013883a 	mov	r9,zero
  442de0:	20bfbf1e 	bne	r4,r2,442ce0 <_fpadd_parts+0xb0>
  442de4:	4305883a 	add	r2,r8,r12
  442de8:	1207803a 	cmpltu	r3,r2,r8
  442dec:	4b53883a 	add	r9,r9,r13
  442df0:	1a47883a 	add	r3,r3,r9
  442df4:	31000115 	stw	r4,4(r6)
  442df8:	31c00215 	stw	r7,8(r6)
  442dfc:	30800315 	stw	r2,12(r6)
  442e00:	30c00415 	stw	r3,16(r6)
  442e04:	003fdd06 	br	442d7c <_fpadd_parts+0x14c>
  442e08:	20ffef1e 	bne	r4,r3,442dc8 <_fpadd_parts+0x198>
  442e0c:	31000015 	stw	r4,0(r6)
  442e10:	10c00117 	ldw	r3,4(r2)
  442e14:	30c00115 	stw	r3,4(r6)
  442e18:	10c00217 	ldw	r3,8(r2)
  442e1c:	11000117 	ldw	r4,4(r2)
  442e20:	29400117 	ldw	r5,4(r5)
  442e24:	30c00215 	stw	r3,8(r6)
  442e28:	10c00317 	ldw	r3,12(r2)
  442e2c:	2908703a 	and	r4,r5,r4
  442e30:	30c00315 	stw	r3,12(r6)
  442e34:	10c00417 	ldw	r3,16(r2)
  442e38:	31000115 	stw	r4,4(r6)
  442e3c:	3005883a 	mov	r2,r6
  442e40:	30c00415 	stw	r3,16(r6)
  442e44:	f800283a 	ret
  442e48:	580f883a 	mov	r7,r11
  442e4c:	0019883a 	mov	r12,zero
  442e50:	001b883a 	mov	r13,zero
  442e54:	003f9f06 	br	442cd4 <_fpadd_parts+0xa4>
  442e58:	0115c83a 	sub	r10,zero,r4
  442e5c:	00c00fc4 	movi	r3,63
  442e60:	1abfda16 	blt	r3,r10,442dcc <_fpadd_parts+0x19c>
  442e64:	003f8906 	br	442c8c <_fpadd_parts+0x5c>
  442e68:	627fb52e 	bgeu	r12,r9,442d40 <_fpadd_parts+0x110>
  442e6c:	003fc006 	br	442d70 <_fpadd_parts+0x140>
  442e70:	6205c83a 	sub	r2,r12,r8
  442e74:	6099803a 	cmpltu	r12,r12,r2
  442e78:	6a47c83a 	sub	r3,r13,r9
  442e7c:	1b07c83a 	sub	r3,r3,r12
  442e80:	183f9d0e 	bge	r3,zero,442cf8 <_fpadd_parts+0xc8>
  442e84:	0085c83a 	sub	r2,zero,r2
  442e88:	1008c03a 	cmpne	r4,r2,zero
  442e8c:	00c7c83a 	sub	r3,zero,r3
  442e90:	1907c83a 	sub	r3,r3,r4
  442e94:	01000044 	movi	r4,1
  442e98:	31000115 	stw	r4,4(r6)
  442e9c:	31c00215 	stw	r7,8(r6)
  442ea0:	30800315 	stw	r2,12(r6)
  442ea4:	30c00415 	stw	r3,16(r6)
  442ea8:	003f9706 	br	442d08 <_fpadd_parts+0xd8>
  442eac:	203f8926 	beq	r4,zero,442cd4 <_fpadd_parts+0xa4>
  442eb0:	50fff804 	addi	r3,r10,-32
  442eb4:	3a8f883a 	add	r7,r7,r10
  442eb8:	18002316 	blt	r3,zero,442f48 <_fpadd_parts+0x318>
  442ebc:	68d6d83a 	srl	r11,r13,r3
  442ec0:	001d883a 	mov	r14,zero
  442ec4:	18001c16 	blt	r3,zero,442f38 <_fpadd_parts+0x308>
  442ec8:	01000044 	movi	r4,1
  442ecc:	20c6983a 	sll	r3,r4,r3
  442ed0:	0015883a 	mov	r10,zero
  442ed4:	513fffc4 	addi	r4,r10,-1
  442ed8:	2295403a 	cmpgeu	r10,r4,r10
  442edc:	1a87c83a 	sub	r3,r3,r10
  442ee0:	1b5a703a 	and	r13,r3,r13
  442ee4:	2318703a 	and	r12,r4,r12
  442ee8:	6358b03a 	or	r12,r12,r13
  442eec:	6018c03a 	cmpne	r12,r12,zero
  442ef0:	62d8b03a 	or	r12,r12,r11
  442ef4:	701b883a 	mov	r13,r14
  442ef8:	003f7606 	br	442cd4 <_fpadd_parts+0xa4>
  442efc:	4808907a 	slli	r4,r9,1
  442f00:	02c007c4 	movi	r11,31
  442f04:	5a97c83a 	sub	r11,r11,r10
  442f08:	22c8983a 	sll	r4,r4,r11
  442f0c:	4296d83a 	srl	r11,r8,r10
  442f10:	4a9cd83a 	srl	r14,r9,r10
  442f14:	22d6b03a 	or	r11,r4,r11
  442f18:	003f6106 	br	442ca0 <_fpadd_parts+0x70>
  442f1c:	00c00044 	movi	r3,1
  442f20:	1a94983a 	sll	r10,r3,r10
  442f24:	0007883a 	mov	r3,zero
  442f28:	003f6106 	br	442cb0 <_fpadd_parts+0x80>
  442f2c:	013fff84 	movi	r4,-2
  442f30:	21ff7c2e 	bgeu	r4,r7,442d24 <_fpadd_parts+0xf4>
  442f34:	003f9106 	br	442d7c <_fpadd_parts+0x14c>
  442f38:	00c00044 	movi	r3,1
  442f3c:	1a94983a 	sll	r10,r3,r10
  442f40:	0007883a 	mov	r3,zero
  442f44:	003fe306 	br	442ed4 <_fpadd_parts+0x2a4>
  442f48:	6816907a 	slli	r11,r13,1
  442f4c:	010007c4 	movi	r4,31
  442f50:	2289c83a 	sub	r4,r4,r10
  442f54:	5908983a 	sll	r4,r11,r4
  442f58:	6296d83a 	srl	r11,r12,r10
  442f5c:	6a9cd83a 	srl	r14,r13,r10
  442f60:	22d6b03a 	or	r11,r4,r11
  442f64:	003fd706 	br	442ec4 <_fpadd_parts+0x294>
  442f68:	193f971e 	bne	r3,r4,442dc8 <_fpadd_parts+0x198>
  442f6c:	11000117 	ldw	r4,4(r2)
  442f70:	28c00117 	ldw	r3,4(r5)
  442f74:	20ff9426 	beq	r4,r3,442dc8 <_fpadd_parts+0x198>
  442f78:	00801134 	movhi	r2,68
  442f7c:	10902604 	addi	r2,r2,16536
  442f80:	f800283a 	ret

00442f84 <__adddf3>:
  442f84:	deffec04 	addi	sp,sp,-80
  442f88:	d9001115 	stw	r4,68(sp)
  442f8c:	d9401215 	stw	r5,72(sp)
  442f90:	d9001104 	addi	r4,sp,68
  442f94:	d9400a04 	addi	r5,sp,40
  442f98:	dfc01315 	stw	ra,76(sp)
  442f9c:	d9c01015 	stw	r7,64(sp)
  442fa0:	d9800f15 	stw	r6,60(sp)
  442fa4:	0443c340 	call	443c34 <__unpack_d>
  442fa8:	d9000f04 	addi	r4,sp,60
  442fac:	d9400504 	addi	r5,sp,20
  442fb0:	0443c340 	call	443c34 <__unpack_d>
  442fb4:	d9000a04 	addi	r4,sp,40
  442fb8:	d9400504 	addi	r5,sp,20
  442fbc:	d80d883a 	mov	r6,sp
  442fc0:	0442c300 	call	442c30 <_fpadd_parts>
  442fc4:	1009883a 	mov	r4,r2
  442fc8:	0443a100 	call	443a10 <__pack_d>
  442fcc:	dfc01317 	ldw	ra,76(sp)
  442fd0:	dec01404 	addi	sp,sp,80
  442fd4:	f800283a 	ret

00442fd8 <__subdf3>:
  442fd8:	deffec04 	addi	sp,sp,-80
  442fdc:	d9001115 	stw	r4,68(sp)
  442fe0:	d9401215 	stw	r5,72(sp)
  442fe4:	d9001104 	addi	r4,sp,68
  442fe8:	d9400a04 	addi	r5,sp,40
  442fec:	dfc01315 	stw	ra,76(sp)
  442ff0:	d9c01015 	stw	r7,64(sp)
  442ff4:	d9800f15 	stw	r6,60(sp)
  442ff8:	0443c340 	call	443c34 <__unpack_d>
  442ffc:	d9000f04 	addi	r4,sp,60
  443000:	d9400504 	addi	r5,sp,20
  443004:	0443c340 	call	443c34 <__unpack_d>
  443008:	d8800617 	ldw	r2,24(sp)
  44300c:	d9000a04 	addi	r4,sp,40
  443010:	d9400504 	addi	r5,sp,20
  443014:	d80d883a 	mov	r6,sp
  443018:	1080005c 	xori	r2,r2,1
  44301c:	d8800615 	stw	r2,24(sp)
  443020:	0442c300 	call	442c30 <_fpadd_parts>
  443024:	1009883a 	mov	r4,r2
  443028:	0443a100 	call	443a10 <__pack_d>
  44302c:	dfc01317 	ldw	ra,76(sp)
  443030:	dec01404 	addi	sp,sp,80
  443034:	f800283a 	ret

00443038 <__muldf3>:
  443038:	deffe404 	addi	sp,sp,-112
  44303c:	d9001115 	stw	r4,68(sp)
  443040:	d9401215 	stw	r5,72(sp)
  443044:	d9001104 	addi	r4,sp,68
  443048:	d9400a04 	addi	r5,sp,40
  44304c:	dfc01b15 	stw	ra,108(sp)
  443050:	d9800f15 	stw	r6,60(sp)
  443054:	d9c01015 	stw	r7,64(sp)
  443058:	ddc01a15 	stw	r23,104(sp)
  44305c:	dd801915 	stw	r22,100(sp)
  443060:	dd401815 	stw	r21,96(sp)
  443064:	dd001715 	stw	r20,92(sp)
  443068:	dcc01615 	stw	r19,88(sp)
  44306c:	dc801515 	stw	r18,84(sp)
  443070:	dc401415 	stw	r17,80(sp)
  443074:	dc001315 	stw	r16,76(sp)
  443078:	0443c340 	call	443c34 <__unpack_d>
  44307c:	d9000f04 	addi	r4,sp,60
  443080:	d9400504 	addi	r5,sp,20
  443084:	0443c340 	call	443c34 <__unpack_d>
  443088:	d8c00a17 	ldw	r3,40(sp)
  44308c:	00800044 	movi	r2,1
  443090:	10c01136 	bltu	r2,r3,4430d8 <__muldf3+0xa0>
  443094:	d8c00b17 	ldw	r3,44(sp)
  443098:	d8800617 	ldw	r2,24(sp)
  44309c:	d9000a04 	addi	r4,sp,40
  4430a0:	1884c03a 	cmpne	r2,r3,r2
  4430a4:	d8800b15 	stw	r2,44(sp)
  4430a8:	0443a100 	call	443a10 <__pack_d>
  4430ac:	dfc01b17 	ldw	ra,108(sp)
  4430b0:	ddc01a17 	ldw	r23,104(sp)
  4430b4:	dd801917 	ldw	r22,100(sp)
  4430b8:	dd401817 	ldw	r21,96(sp)
  4430bc:	dd001717 	ldw	r20,92(sp)
  4430c0:	dcc01617 	ldw	r19,88(sp)
  4430c4:	dc801517 	ldw	r18,84(sp)
  4430c8:	dc401417 	ldw	r17,80(sp)
  4430cc:	dc001317 	ldw	r16,76(sp)
  4430d0:	dec01c04 	addi	sp,sp,112
  4430d4:	f800283a 	ret
  4430d8:	d9000517 	ldw	r4,20(sp)
  4430dc:	11000636 	bltu	r2,r4,4430f8 <__muldf3+0xc0>
  4430e0:	d8800617 	ldw	r2,24(sp)
  4430e4:	d8c00b17 	ldw	r3,44(sp)
  4430e8:	d9000504 	addi	r4,sp,20
  4430ec:	1884c03a 	cmpne	r2,r3,r2
  4430f0:	d8800615 	stw	r2,24(sp)
  4430f4:	003fec06 	br	4430a8 <__muldf3+0x70>
  4430f8:	00800104 	movi	r2,4
  4430fc:	1880051e 	bne	r3,r2,443114 <__muldf3+0xdc>
  443100:	00800084 	movi	r2,2
  443104:	20bfe31e 	bne	r4,r2,443094 <__muldf3+0x5c>
  443108:	01001134 	movhi	r4,68
  44310c:	21102604 	addi	r4,r4,16536
  443110:	003fe506 	br	4430a8 <__muldf3+0x70>
  443114:	2080031e 	bne	r4,r2,443124 <__muldf3+0xec>
  443118:	00800084 	movi	r2,2
  44311c:	18bffa26 	beq	r3,r2,443108 <__muldf3+0xd0>
  443120:	003fef06 	br	4430e0 <__muldf3+0xa8>
  443124:	00800084 	movi	r2,2
  443128:	18bfda26 	beq	r3,r2,443094 <__muldf3+0x5c>
  44312c:	20bfec26 	beq	r4,r2,4430e0 <__muldf3+0xa8>
  443130:	dc000d17 	ldw	r16,52(sp)
  443134:	dd000817 	ldw	r20,32(sp)
  443138:	dc800917 	ldw	r18,36(sp)
  44313c:	8009883a 	mov	r4,r16
  443140:	000b883a 	mov	r5,zero
  443144:	a00d883a 	mov	r6,r20
  443148:	000f883a 	mov	r7,zero
  44314c:	04438540 	call	443854 <__muldi3>
  443150:	dc400e17 	ldw	r17,56(sp)
  443154:	9009883a 	mov	r4,r18
  443158:	800d883a 	mov	r6,r16
  44315c:	000b883a 	mov	r5,zero
  443160:	000f883a 	mov	r7,zero
  443164:	102f883a 	mov	r23,r2
  443168:	1827883a 	mov	r19,r3
  44316c:	04438540 	call	443854 <__muldi3>
  443170:	900d883a 	mov	r6,r18
  443174:	8809883a 	mov	r4,r17
  443178:	000b883a 	mov	r5,zero
  44317c:	000f883a 	mov	r7,zero
  443180:	102b883a 	mov	r21,r2
  443184:	1821883a 	mov	r16,r3
  443188:	04438540 	call	443854 <__muldi3>
  44318c:	8809883a 	mov	r4,r17
  443190:	000b883a 	mov	r5,zero
  443194:	a00d883a 	mov	r6,r20
  443198:	000f883a 	mov	r7,zero
  44319c:	102d883a 	mov	r22,r2
  4431a0:	1825883a 	mov	r18,r3
  4431a4:	04438540 	call	443854 <__muldi3>
  4431a8:	154b883a 	add	r5,r2,r21
  4431ac:	2889803a 	cmpltu	r4,r5,r2
  4431b0:	1c07883a 	add	r3,r3,r16
  4431b4:	20c9883a 	add	r4,r4,r3
  4431b8:	24004b36 	bltu	r4,r16,4432e8 <__muldf3+0x2b0>
  4431bc:	8100011e 	bne	r16,r4,4431c4 <__muldf3+0x18c>
  4431c0:	2d404936 	bltu	r5,r21,4432e8 <__muldf3+0x2b0>
  4431c4:	0011883a 	mov	r8,zero
  4431c8:	0007883a 	mov	r3,zero
  4431cc:	2ccb883a 	add	r5,r5,r19
  4431d0:	b80d883a 	mov	r6,r23
  4431d4:	2cc0012e 	bgeu	r5,r19,4431dc <__muldf3+0x1a4>
  4431d8:	02000044 	movi	r8,1
  4431dc:	258f883a 	add	r7,r4,r22
  4431e0:	3909803a 	cmpltu	r4,r7,r4
  4431e4:	da400c17 	ldw	r9,48(sp)
  4431e8:	2489883a 	add	r4,r4,r18
  4431ec:	d8800717 	ldw	r2,28(sp)
  4431f0:	20c9883a 	add	r4,r4,r3
  4431f4:	da800b17 	ldw	r10,44(sp)
  4431f8:	d8c00617 	ldw	r3,24(sp)
  4431fc:	3a11883a 	add	r8,r7,r8
  443200:	4885883a 	add	r2,r9,r2
  443204:	50c6c03a 	cmpne	r3,r10,r3
  443208:	41cf803a 	cmpltu	r7,r8,r7
  44320c:	12400104 	addi	r9,r2,4
  443210:	d8c00115 	stw	r3,4(sp)
  443214:	3909883a 	add	r4,r7,r4
  443218:	da400215 	stw	r9,8(sp)
  44321c:	03480034 	movhi	r13,8192
  443220:	6b7fffc4 	addi	r13,r13,-1
  443224:	4007883a 	mov	r3,r8
  443228:	6900102e 	bgeu	r13,r4,44326c <__muldf3+0x234>
  44322c:	10800144 	addi	r2,r2,5
  443230:	180ed07a 	srli	r7,r3,1
  443234:	18c0004c 	andi	r3,r3,1
  443238:	201097fa 	slli	r8,r4,31
  44323c:	281697fa 	slli	r11,r5,31
  443240:	2008d07a 	srli	r4,r4,1
  443244:	3014d07a 	srli	r10,r6,1
  443248:	2812d07a 	srli	r9,r5,1
  44324c:	1019883a 	mov	r12,r2
  443250:	18000226 	beq	r3,zero,44325c <__muldf3+0x224>
  443254:	5a8cb03a 	or	r6,r11,r10
  443258:	49600034 	orhi	r5,r9,32768
  44325c:	41c6b03a 	or	r3,r8,r7
  443260:	10800044 	addi	r2,r2,1
  443264:	693ff236 	bltu	r13,r4,443230 <__muldf3+0x1f8>
  443268:	db000215 	stw	r12,8(sp)
  44326c:	03440034 	movhi	r13,4096
  443270:	6b7fffc4 	addi	r13,r13,-1
  443274:	69001336 	bltu	r13,r4,4432c4 <__muldf3+0x28c>
  443278:	d8800217 	ldw	r2,8(sp)
  44327c:	10bfffc4 	addi	r2,r2,-1
  443280:	18d3883a 	add	r9,r3,r3
  443284:	48c7803a 	cmpltu	r3,r9,r3
  443288:	2109883a 	add	r4,r4,r4
  44328c:	190f883a 	add	r7,r3,r4
  443290:	3191883a 	add	r8,r6,r6
  443294:	4197803a 	cmpltu	r11,r8,r6
  443298:	2955883a 	add	r10,r5,r5
  44329c:	1019883a 	mov	r12,r2
  4432a0:	4807883a 	mov	r3,r9
  4432a4:	3809883a 	mov	r4,r7
  4432a8:	2800010e 	bge	r5,zero,4432b0 <__muldf3+0x278>
  4432ac:	48c00054 	ori	r3,r9,1
  4432b0:	400d883a 	mov	r6,r8
  4432b4:	5a8b883a 	add	r5,r11,r10
  4432b8:	10bfffc4 	addi	r2,r2,-1
  4432bc:	69fff02e 	bgeu	r13,r7,443280 <__muldf3+0x248>
  4432c0:	db000215 	stw	r12,8(sp)
  4432c4:	18803fcc 	andi	r2,r3,255
  4432c8:	01c02004 	movi	r7,128
  4432cc:	11c00926 	beq	r2,r7,4432f4 <__muldf3+0x2bc>
  4432d0:	008000c4 	movi	r2,3
  4432d4:	d9000415 	stw	r4,16(sp)
  4432d8:	d8c00315 	stw	r3,12(sp)
  4432dc:	d8800015 	stw	r2,0(sp)
  4432e0:	d809883a 	mov	r4,sp
  4432e4:	003f7006 	br	4430a8 <__muldf3+0x70>
  4432e8:	0011883a 	mov	r8,zero
  4432ec:	00c00044 	movi	r3,1
  4432f0:	003fb606 	br	4431cc <__muldf3+0x194>
  4432f4:	19c0400c 	andi	r7,r3,256
  4432f8:	383ff51e 	bne	r7,zero,4432d0 <__muldf3+0x298>
  4432fc:	314ab03a 	or	r5,r6,r5
  443300:	283ff326 	beq	r5,zero,4432d0 <__muldf3+0x298>
  443304:	1885883a 	add	r2,r3,r2
  443308:	10cb803a 	cmpltu	r5,r2,r3
  44330c:	00ffc004 	movi	r3,-256
  443310:	10c6703a 	and	r3,r2,r3
  443314:	2909883a 	add	r4,r5,r4
  443318:	003fed06 	br	4432d0 <__muldf3+0x298>

0044331c <__divdf3>:
  44331c:	defff104 	addi	sp,sp,-60
  443320:	d9000c15 	stw	r4,48(sp)
  443324:	d9400d15 	stw	r5,52(sp)
  443328:	d9000c04 	addi	r4,sp,48
  44332c:	d9400504 	addi	r5,sp,20
  443330:	dfc00e15 	stw	ra,56(sp)
  443334:	d9800a15 	stw	r6,40(sp)
  443338:	d9c00b15 	stw	r7,44(sp)
  44333c:	0443c340 	call	443c34 <__unpack_d>
  443340:	d9000a04 	addi	r4,sp,40
  443344:	d80b883a 	mov	r5,sp
  443348:	0443c340 	call	443c34 <__unpack_d>
  44334c:	d8c00517 	ldw	r3,20(sp)
  443350:	00800044 	movi	r2,1
  443354:	10c00536 	bltu	r2,r3,44336c <__divdf3+0x50>
  443358:	d9000504 	addi	r4,sp,20
  44335c:	0443a100 	call	443a10 <__pack_d>
  443360:	dfc00e17 	ldw	ra,56(sp)
  443364:	dec00f04 	addi	sp,sp,60
  443368:	f800283a 	ret
  44336c:	d9000017 	ldw	r4,0(sp)
  443370:	11000536 	bltu	r2,r4,443388 <__divdf3+0x6c>
  443374:	d809883a 	mov	r4,sp
  443378:	0443a100 	call	443a10 <__pack_d>
  44337c:	dfc00e17 	ldw	ra,56(sp)
  443380:	dec00f04 	addi	sp,sp,60
  443384:	f800283a 	ret
  443388:	d9800617 	ldw	r6,24(sp)
  44338c:	d9400117 	ldw	r5,4(sp)
  443390:	00800104 	movi	r2,4
  443394:	314af03a 	xor	r5,r6,r5
  443398:	d9400615 	stw	r5,24(sp)
  44339c:	18800226 	beq	r3,r2,4433a8 <__divdf3+0x8c>
  4433a0:	01400084 	movi	r5,2
  4433a4:	1940041e 	bne	r3,r5,4433b8 <__divdf3+0x9c>
  4433a8:	193feb1e 	bne	r3,r4,443358 <__divdf3+0x3c>
  4433ac:	01001134 	movhi	r4,68
  4433b0:	21102604 	addi	r4,r4,16536
  4433b4:	003fe906 	br	44335c <__divdf3+0x40>
  4433b8:	20803326 	beq	r4,r2,443488 <__divdf3+0x16c>
  4433bc:	21403726 	beq	r4,r5,44349c <__divdf3+0x180>
  4433c0:	d8800217 	ldw	r2,8(sp)
  4433c4:	d9000717 	ldw	r4,28(sp)
  4433c8:	d8c00917 	ldw	r3,36(sp)
  4433cc:	da000417 	ldw	r8,16(sp)
  4433d0:	2089c83a 	sub	r4,r4,r2
  4433d4:	d9000715 	stw	r4,28(sp)
  4433d8:	d8800817 	ldw	r2,32(sp)
  4433dc:	dbc00317 	ldw	r15,12(sp)
  4433e0:	1a000236 	bltu	r3,r8,4433ec <__divdf3+0xd0>
  4433e4:	40c0081e 	bne	r8,r3,443408 <__divdf3+0xec>
  4433e8:	13c0072e 	bgeu	r2,r15,443408 <__divdf3+0xec>
  4433ec:	108b883a 	add	r5,r2,r2
  4433f0:	288d803a 	cmpltu	r6,r5,r2
  4433f4:	18c7883a 	add	r3,r3,r3
  4433f8:	213fffc4 	addi	r4,r4,-1
  4433fc:	2805883a 	mov	r2,r5
  443400:	30c7883a 	add	r3,r6,r3
  443404:	d9000715 	stw	r4,28(sp)
  443408:	01400f44 	movi	r5,61
  44340c:	000f883a 	mov	r7,zero
  443410:	01040034 	movhi	r4,4096
  443414:	0019883a 	mov	r12,zero
  443418:	001b883a 	mov	r13,zero
  44341c:	201697fa 	slli	r11,r4,31
  443420:	3814d07a 	srli	r10,r7,1
  443424:	297fffc4 	addi	r5,r5,-1
  443428:	1a000936 	bltu	r3,r8,443450 <__divdf3+0x134>
  44342c:	13cdc83a 	sub	r6,r2,r15
  443430:	1193803a 	cmpltu	r9,r2,r6
  443434:	1a1dc83a 	sub	r14,r3,r8
  443438:	40c0011e 	bne	r8,r3,443440 <__divdf3+0x124>
  44343c:	13c00436 	bltu	r2,r15,443450 <__divdf3+0x134>
  443440:	3005883a 	mov	r2,r6
  443444:	7247c83a 	sub	r3,r14,r9
  443448:	61d8b03a 	or	r12,r12,r7
  44344c:	691ab03a 	or	r13,r13,r4
  443450:	108d883a 	add	r6,r2,r2
  443454:	3093803a 	cmpltu	r9,r6,r2
  443458:	18c7883a 	add	r3,r3,r3
  44345c:	5a8eb03a 	or	r7,r11,r10
  443460:	2008d07a 	srli	r4,r4,1
  443464:	3005883a 	mov	r2,r6
  443468:	48c7883a 	add	r3,r9,r3
  44346c:	283feb1e 	bne	r5,zero,44341c <__divdf3+0x100>
  443470:	61003fcc 	andi	r4,r12,255
  443474:	01402004 	movi	r5,128
  443478:	21400b26 	beq	r4,r5,4434a8 <__divdf3+0x18c>
  44347c:	db000815 	stw	r12,32(sp)
  443480:	db400915 	stw	r13,36(sp)
  443484:	003fb406 	br	443358 <__divdf3+0x3c>
  443488:	d8000815 	stw	zero,32(sp)
  44348c:	d8000915 	stw	zero,36(sp)
  443490:	d8000715 	stw	zero,28(sp)
  443494:	d9000504 	addi	r4,sp,20
  443498:	003fb006 	br	44335c <__divdf3+0x40>
  44349c:	d8800515 	stw	r2,20(sp)
  4434a0:	d9000504 	addi	r4,sp,20
  4434a4:	003fad06 	br	44335c <__divdf3+0x40>
  4434a8:	6140400c 	andi	r5,r12,256
  4434ac:	283ff31e 	bne	r5,zero,44347c <__divdf3+0x160>
  4434b0:	30c4b03a 	or	r2,r6,r3
  4434b4:	103ff126 	beq	r2,zero,44347c <__divdf3+0x160>
  4434b8:	6109883a 	add	r4,r12,r4
  4434bc:	2305803a 	cmpltu	r2,r4,r12
  4434c0:	033fc004 	movi	r12,-256
  4434c4:	2318703a 	and	r12,r4,r12
  4434c8:	135b883a 	add	r13,r2,r13
  4434cc:	003feb06 	br	44347c <__divdf3+0x160>

004434d0 <__gedf2>:
  4434d0:	defff104 	addi	sp,sp,-60
  4434d4:	d9000c15 	stw	r4,48(sp)
  4434d8:	d9400d15 	stw	r5,52(sp)
  4434dc:	d9000c04 	addi	r4,sp,48
  4434e0:	d9400504 	addi	r5,sp,20
  4434e4:	dfc00e15 	stw	ra,56(sp)
  4434e8:	d9800a15 	stw	r6,40(sp)
  4434ec:	d9c00b15 	stw	r7,44(sp)
  4434f0:	0443c340 	call	443c34 <__unpack_d>
  4434f4:	d9000a04 	addi	r4,sp,40
  4434f8:	d80b883a 	mov	r5,sp
  4434fc:	0443c340 	call	443c34 <__unpack_d>
  443500:	d8c00517 	ldw	r3,20(sp)
  443504:	00800044 	movi	r2,1
  443508:	10c0082e 	bgeu	r2,r3,44352c <__gedf2+0x5c>
  44350c:	d8c00017 	ldw	r3,0(sp)
  443510:	10c0062e 	bgeu	r2,r3,44352c <__gedf2+0x5c>
  443514:	d9000504 	addi	r4,sp,20
  443518:	d80b883a 	mov	r5,sp
  44351c:	0443d380 	call	443d38 <__fpcmp_parts_d>
  443520:	dfc00e17 	ldw	ra,56(sp)
  443524:	dec00f04 	addi	sp,sp,60
  443528:	f800283a 	ret
  44352c:	00bfffc4 	movi	r2,-1
  443530:	003ffb06 	br	443520 <__gedf2+0x50>

00443534 <__fixdfsi>:
  443534:	defff804 	addi	sp,sp,-32
  443538:	d9000515 	stw	r4,20(sp)
  44353c:	d9400615 	stw	r5,24(sp)
  443540:	d9000504 	addi	r4,sp,20
  443544:	d80b883a 	mov	r5,sp
  443548:	dfc00715 	stw	ra,28(sp)
  44354c:	0443c340 	call	443c34 <__unpack_d>
  443550:	d8800017 	ldw	r2,0(sp)
  443554:	00c00084 	movi	r3,2
  443558:	10c01c26 	beq	r2,r3,4435cc <__fixdfsi+0x98>
  44355c:	00c00044 	movi	r3,1
  443560:	18801a2e 	bgeu	r3,r2,4435cc <__fixdfsi+0x98>
  443564:	00c00104 	movi	r3,4
  443568:	10c01126 	beq	r2,r3,4435b0 <__fixdfsi+0x7c>
  44356c:	d8800217 	ldw	r2,8(sp)
  443570:	10001616 	blt	r2,zero,4435cc <__fixdfsi+0x98>
  443574:	00c00784 	movi	r3,30
  443578:	18800d16 	blt	r3,r2,4435b0 <__fixdfsi+0x7c>
  44357c:	00c00f04 	movi	r3,60
  443580:	1885c83a 	sub	r2,r3,r2
  443584:	10fff804 	addi	r3,r2,-32
  443588:	d9400317 	ldw	r5,12(sp)
  44358c:	d9000417 	ldw	r4,16(sp)
  443590:	18001616 	blt	r3,zero,4435ec <__fixdfsi+0xb8>
  443594:	20c4d83a 	srl	r2,r4,r3
  443598:	d8c00117 	ldw	r3,4(sp)
  44359c:	18000126 	beq	r3,zero,4435a4 <__fixdfsi+0x70>
  4435a0:	0085c83a 	sub	r2,zero,r2
  4435a4:	dfc00717 	ldw	ra,28(sp)
  4435a8:	dec00804 	addi	sp,sp,32
  4435ac:	f800283a 	ret
  4435b0:	d8800117 	ldw	r2,4(sp)
  4435b4:	1000091e 	bne	r2,zero,4435dc <__fixdfsi+0xa8>
  4435b8:	00a00034 	movhi	r2,32768
  4435bc:	10bfffc4 	addi	r2,r2,-1
  4435c0:	dfc00717 	ldw	ra,28(sp)
  4435c4:	dec00804 	addi	sp,sp,32
  4435c8:	f800283a 	ret
  4435cc:	0005883a 	mov	r2,zero
  4435d0:	dfc00717 	ldw	ra,28(sp)
  4435d4:	dec00804 	addi	sp,sp,32
  4435d8:	f800283a 	ret
  4435dc:	00a00034 	movhi	r2,32768
  4435e0:	dfc00717 	ldw	ra,28(sp)
  4435e4:	dec00804 	addi	sp,sp,32
  4435e8:	f800283a 	ret
  4435ec:	2008907a 	slli	r4,r4,1
  4435f0:	018007c4 	movi	r6,31
  4435f4:	308dc83a 	sub	r6,r6,r2
  4435f8:	2188983a 	sll	r4,r4,r6
  4435fc:	2884d83a 	srl	r2,r5,r2
  443600:	2084b03a 	or	r2,r4,r2
  443604:	003fe406 	br	443598 <__fixdfsi+0x64>

00443608 <__floatunsidf>:
  443608:	defff904 	addi	sp,sp,-28
  44360c:	dc000515 	stw	r16,20(sp)
  443610:	dfc00615 	stw	ra,24(sp)
  443614:	d8000115 	stw	zero,4(sp)
  443618:	2021883a 	mov	r16,r4
  44361c:	20001726 	beq	r4,zero,44367c <__floatunsidf+0x74>
  443620:	008000c4 	movi	r2,3
  443624:	d8800015 	stw	r2,0(sp)
  443628:	00800f04 	movi	r2,60
  44362c:	d8800215 	stw	r2,8(sp)
  443630:	04439640 	call	443964 <__clzsi2>
  443634:	10c00744 	addi	r3,r2,29
  443638:	18001816 	blt	r3,zero,44369c <__floatunsidf+0x94>
  44363c:	18002d26 	beq	r3,zero,4436f4 <__floatunsidf+0xec>
  443640:	113fff44 	addi	r4,r2,-3
  443644:	20002e16 	blt	r4,zero,443700 <__floatunsidf+0xf8>
  443648:	8108983a 	sll	r4,r16,r4
  44364c:	0021883a 	mov	r16,zero
  443650:	014007c4 	movi	r5,31
  443654:	2885c83a 	sub	r2,r5,r2
  443658:	dc000315 	stw	r16,12(sp)
  44365c:	d9000415 	stw	r4,16(sp)
  443660:	d8800215 	stw	r2,8(sp)
  443664:	d809883a 	mov	r4,sp
  443668:	0443a100 	call	443a10 <__pack_d>
  44366c:	dfc00617 	ldw	ra,24(sp)
  443670:	dc000517 	ldw	r16,20(sp)
  443674:	dec00704 	addi	sp,sp,28
  443678:	f800283a 	ret
  44367c:	00800084 	movi	r2,2
  443680:	d809883a 	mov	r4,sp
  443684:	d8800015 	stw	r2,0(sp)
  443688:	0443a100 	call	443a10 <__pack_d>
  44368c:	dfc00617 	ldw	ra,24(sp)
  443690:	dc000517 	ldw	r16,20(sp)
  443694:	dec00704 	addi	sp,sp,28
  443698:	f800283a 	ret
  44369c:	00c7c83a 	sub	r3,zero,r3
  4436a0:	193ff804 	addi	r4,r3,-32
  4436a4:	20001c16 	blt	r4,zero,443718 <__floatunsidf+0x110>
  4436a8:	000b883a 	mov	r5,zero
  4436ac:	2009d7fa 	srai	r4,r4,31
  4436b0:	80c6d83a 	srl	r3,r16,r3
  4436b4:	297fffc4 	addi	r5,r5,-1
  4436b8:	2c20703a 	and	r16,r5,r16
  4436bc:	8020c03a 	cmpne	r16,r16,zero
  4436c0:	1906703a 	and	r3,r3,r4
  4436c4:	010007c4 	movi	r4,31
  4436c8:	80c6b03a 	or	r3,r16,r3
  4436cc:	2085c83a 	sub	r2,r4,r2
  4436d0:	d809883a 	mov	r4,sp
  4436d4:	d8c00315 	stw	r3,12(sp)
  4436d8:	d8000415 	stw	zero,16(sp)
  4436dc:	d8800215 	stw	r2,8(sp)
  4436e0:	0443a100 	call	443a10 <__pack_d>
  4436e4:	dfc00617 	ldw	ra,24(sp)
  4436e8:	dc000517 	ldw	r16,20(sp)
  4436ec:	dec00704 	addi	sp,sp,28
  4436f0:	f800283a 	ret
  4436f4:	dc000315 	stw	r16,12(sp)
  4436f8:	d8000415 	stw	zero,16(sp)
  4436fc:	003fd906 	br	443664 <__floatunsidf+0x5c>
  443700:	800ad07a 	srli	r5,r16,1
  443704:	010007c4 	movi	r4,31
  443708:	20c9c83a 	sub	r4,r4,r3
  44370c:	2908d83a 	srl	r4,r5,r4
  443710:	80e0983a 	sll	r16,r16,r3
  443714:	003fce06 	br	443650 <__floatunsidf+0x48>
  443718:	01400044 	movi	r5,1
  44371c:	28ca983a 	sll	r5,r5,r3
  443720:	003fe206 	br	4436ac <__floatunsidf+0xa4>

00443724 <udivmodsi4>:
  443724:	2005883a 	mov	r2,r4
  443728:	2900182e 	bgeu	r5,r4,44378c <udivmodsi4+0x68>
  44372c:	28001716 	blt	r5,zero,44378c <udivmodsi4+0x68>
  443730:	01000804 	movi	r4,32
  443734:	00c00044 	movi	r3,1
  443738:	00000206 	br	443744 <udivmodsi4+0x20>
  44373c:	20001126 	beq	r4,zero,443784 <udivmodsi4+0x60>
  443740:	28000516 	blt	r5,zero,443758 <udivmodsi4+0x34>
  443744:	294b883a 	add	r5,r5,r5
  443748:	213fffc4 	addi	r4,r4,-1
  44374c:	18c7883a 	add	r3,r3,r3
  443750:	28bffa36 	bltu	r5,r2,44373c <udivmodsi4+0x18>
  443754:	18000b26 	beq	r3,zero,443784 <udivmodsi4+0x60>
  443758:	0009883a 	mov	r4,zero
  44375c:	11400236 	bltu	r2,r5,443768 <udivmodsi4+0x44>
  443760:	1145c83a 	sub	r2,r2,r5
  443764:	20c8b03a 	or	r4,r4,r3
  443768:	1806d07a 	srli	r3,r3,1
  44376c:	280ad07a 	srli	r5,r5,1
  443770:	183ffa1e 	bne	r3,zero,44375c <udivmodsi4+0x38>
  443774:	3000021e 	bne	r6,zero,443780 <udivmodsi4+0x5c>
  443778:	2005883a 	mov	r2,r4
  44377c:	f800283a 	ret
  443780:	f800283a 	ret
  443784:	0009883a 	mov	r4,zero
  443788:	003ffa06 	br	443774 <udivmodsi4+0x50>
  44378c:	00c00044 	movi	r3,1
  443790:	0009883a 	mov	r4,zero
  443794:	003ff106 	br	44375c <udivmodsi4+0x38>

00443798 <__divsi3>:
  443798:	defffe04 	addi	sp,sp,-8
  44379c:	dfc00115 	stw	ra,4(sp)
  4437a0:	dc000015 	stw	r16,0(sp)
  4437a4:	20000a16 	blt	r4,zero,4437d0 <__divsi3+0x38>
  4437a8:	0021883a 	mov	r16,zero
  4437ac:	28000b16 	blt	r5,zero,4437dc <__divsi3+0x44>
  4437b0:	000d883a 	mov	r6,zero
  4437b4:	04437240 	call	443724 <udivmodsi4>
  4437b8:	80000126 	beq	r16,zero,4437c0 <__divsi3+0x28>
  4437bc:	0085c83a 	sub	r2,zero,r2
  4437c0:	dfc00117 	ldw	ra,4(sp)
  4437c4:	dc000017 	ldw	r16,0(sp)
  4437c8:	dec00204 	addi	sp,sp,8
  4437cc:	f800283a 	ret
  4437d0:	0109c83a 	sub	r4,zero,r4
  4437d4:	04000044 	movi	r16,1
  4437d8:	283ff50e 	bge	r5,zero,4437b0 <__divsi3+0x18>
  4437dc:	014bc83a 	sub	r5,zero,r5
  4437e0:	8400005c 	xori	r16,r16,1
  4437e4:	003ff206 	br	4437b0 <__divsi3+0x18>

004437e8 <__modsi3>:
  4437e8:	deffff04 	addi	sp,sp,-4
  4437ec:	dfc00015 	stw	ra,0(sp)
  4437f0:	20000516 	blt	r4,zero,443808 <__modsi3+0x20>
  4437f4:	28000c16 	blt	r5,zero,443828 <__modsi3+0x40>
  4437f8:	01800044 	movi	r6,1
  4437fc:	dfc00017 	ldw	ra,0(sp)
  443800:	dec00104 	addi	sp,sp,4
  443804:	04437241 	jmpi	443724 <udivmodsi4>
  443808:	0109c83a 	sub	r4,zero,r4
  44380c:	28000b16 	blt	r5,zero,44383c <__modsi3+0x54>
  443810:	01800044 	movi	r6,1
  443814:	04437240 	call	443724 <udivmodsi4>
  443818:	0085c83a 	sub	r2,zero,r2
  44381c:	dfc00017 	ldw	ra,0(sp)
  443820:	dec00104 	addi	sp,sp,4
  443824:	f800283a 	ret
  443828:	014bc83a 	sub	r5,zero,r5
  44382c:	01800044 	movi	r6,1
  443830:	dfc00017 	ldw	ra,0(sp)
  443834:	dec00104 	addi	sp,sp,4
  443838:	04437241 	jmpi	443724 <udivmodsi4>
  44383c:	014bc83a 	sub	r5,zero,r5
  443840:	003ff306 	br	443810 <__modsi3+0x28>

00443844 <__udivsi3>:
  443844:	000d883a 	mov	r6,zero
  443848:	04437241 	jmpi	443724 <udivmodsi4>

0044384c <__umodsi3>:
  44384c:	01800044 	movi	r6,1
  443850:	04437241 	jmpi	443724 <udivmodsi4>

00443854 <__muldi3>:
  443854:	defff604 	addi	sp,sp,-40
  443858:	dd400515 	stw	r21,20(sp)
  44385c:	dd000415 	stw	r20,16(sp)
  443860:	257fffcc 	andi	r21,r4,65535
  443864:	353fffcc 	andi	r20,r6,65535
  443868:	dcc00315 	stw	r19,12(sp)
  44386c:	3026d43a 	srli	r19,r6,16
  443870:	dd800615 	stw	r22,24(sp)
  443874:	dc800215 	stw	r18,8(sp)
  443878:	dc400115 	stw	r17,4(sp)
  44387c:	2024d43a 	srli	r18,r4,16
  443880:	2023883a 	mov	r17,r4
  443884:	282d883a 	mov	r22,r5
  443888:	a009883a 	mov	r4,r20
  44388c:	a80b883a 	mov	r5,r21
  443890:	dfc00915 	stw	ra,36(sp)
  443894:	df000815 	stw	fp,32(sp)
  443898:	ddc00715 	stw	r23,28(sp)
  44389c:	3839883a 	mov	fp,r7
  4438a0:	dc000015 	stw	r16,0(sp)
  4438a4:	3021883a 	mov	r16,r6
  4438a8:	04355000 	call	435500 <__mulsi3>
  4438ac:	a80b883a 	mov	r5,r21
  4438b0:	9809883a 	mov	r4,r19
  4438b4:	102f883a 	mov	r23,r2
  4438b8:	04355000 	call	435500 <__mulsi3>
  4438bc:	a009883a 	mov	r4,r20
  4438c0:	900b883a 	mov	r5,r18
  4438c4:	102b883a 	mov	r21,r2
  4438c8:	04355000 	call	435500 <__mulsi3>
  4438cc:	9809883a 	mov	r4,r19
  4438d0:	900b883a 	mov	r5,r18
  4438d4:	1029883a 	mov	r20,r2
  4438d8:	04355000 	call	435500 <__mulsi3>
  4438dc:	1007883a 	mov	r3,r2
  4438e0:	b804d43a 	srli	r2,r23,16
  4438e4:	a549883a 	add	r4,r20,r21
  4438e8:	2089883a 	add	r4,r4,r2
  4438ec:	2500022e 	bgeu	r4,r20,4438f8 <__muldi3+0xa4>
  4438f0:	00800074 	movhi	r2,1
  4438f4:	1887883a 	add	r3,r3,r2
  4438f8:	200cd43a 	srli	r6,r4,16
  4438fc:	2004943a 	slli	r2,r4,16
  443900:	e00b883a 	mov	r5,fp
  443904:	8809883a 	mov	r4,r17
  443908:	bdffffcc 	andi	r23,r23,65535
  44390c:	19a3883a 	add	r17,r3,r6
  443910:	15ef883a 	add	r23,r2,r23
  443914:	04355000 	call	435500 <__mulsi3>
  443918:	8009883a 	mov	r4,r16
  44391c:	b00b883a 	mov	r5,r22
  443920:	1025883a 	mov	r18,r2
  443924:	04355000 	call	435500 <__mulsi3>
  443928:	9085883a 	add	r2,r18,r2
  44392c:	1447883a 	add	r3,r2,r17
  443930:	b805883a 	mov	r2,r23
  443934:	dfc00917 	ldw	ra,36(sp)
  443938:	df000817 	ldw	fp,32(sp)
  44393c:	ddc00717 	ldw	r23,28(sp)
  443940:	dd800617 	ldw	r22,24(sp)
  443944:	dd400517 	ldw	r21,20(sp)
  443948:	dd000417 	ldw	r20,16(sp)
  44394c:	dcc00317 	ldw	r19,12(sp)
  443950:	dc800217 	ldw	r18,8(sp)
  443954:	dc400117 	ldw	r17,4(sp)
  443958:	dc000017 	ldw	r16,0(sp)
  44395c:	dec00a04 	addi	sp,sp,40
  443960:	f800283a 	ret

00443964 <__clzsi2>:
  443964:	00bfffd4 	movui	r2,65535
  443968:	11000b36 	bltu	r2,r4,443998 <__clzsi2+0x34>
  44396c:	00803fc4 	movi	r2,255
  443970:	11001e2e 	bgeu	r2,r4,4439ec <__clzsi2+0x88>
  443974:	00c00204 	movi	r3,8
  443978:	20c8d83a 	srl	r4,r4,r3
  44397c:	00c01134 	movhi	r3,68
  443980:	18d02b04 	addi	r3,r3,16556
  443984:	00800604 	movi	r2,24
  443988:	1909883a 	add	r4,r3,r4
  44398c:	20c00003 	ldbu	r3,0(r4)
  443990:	10c5c83a 	sub	r2,r2,r3
  443994:	f800283a 	ret
  443998:	00804034 	movhi	r2,256
  44399c:	10bfffc4 	addi	r2,r2,-1
  4439a0:	11000936 	bltu	r2,r4,4439c8 <__clzsi2+0x64>
  4439a4:	00800404 	movi	r2,16
  4439a8:	1007883a 	mov	r3,r2
  4439ac:	20c8d83a 	srl	r4,r4,r3
  4439b0:	00c01134 	movhi	r3,68
  4439b4:	18d02b04 	addi	r3,r3,16556
  4439b8:	1909883a 	add	r4,r3,r4
  4439bc:	20c00003 	ldbu	r3,0(r4)
  4439c0:	10c5c83a 	sub	r2,r2,r3
  4439c4:	f800283a 	ret
  4439c8:	00c00604 	movi	r3,24
  4439cc:	20c8d83a 	srl	r4,r4,r3
  4439d0:	00c01134 	movhi	r3,68
  4439d4:	18d02b04 	addi	r3,r3,16556
  4439d8:	00800204 	movi	r2,8
  4439dc:	1909883a 	add	r4,r3,r4
  4439e0:	20c00003 	ldbu	r3,0(r4)
  4439e4:	10c5c83a 	sub	r2,r2,r3
  4439e8:	f800283a 	ret
  4439ec:	0007883a 	mov	r3,zero
  4439f0:	20c8d83a 	srl	r4,r4,r3
  4439f4:	00c01134 	movhi	r3,68
  4439f8:	18d02b04 	addi	r3,r3,16556
  4439fc:	00800804 	movi	r2,32
  443a00:	1909883a 	add	r4,r3,r4
  443a04:	20c00003 	ldbu	r3,0(r4)
  443a08:	10c5c83a 	sub	r2,r2,r3
  443a0c:	f800283a 	ret

00443a10 <__pack_d>:
  443a10:	20800017 	ldw	r2,0(r4)
  443a14:	defff804 	addi	sp,sp,-32
  443a18:	dcc00315 	stw	r19,12(sp)
  443a1c:	dc800215 	stw	r18,8(sp)
  443a20:	dfc00715 	stw	ra,28(sp)
  443a24:	dd800615 	stw	r22,24(sp)
  443a28:	dd400515 	stw	r21,20(sp)
  443a2c:	dd000415 	stw	r20,16(sp)
  443a30:	dc400115 	stw	r17,4(sp)
  443a34:	dc000015 	stw	r16,0(sp)
  443a38:	04800044 	movi	r18,1
  443a3c:	24400317 	ldw	r17,12(r4)
  443a40:	24000417 	ldw	r16,16(r4)
  443a44:	24c00117 	ldw	r19,4(r4)
  443a48:	9080422e 	bgeu	r18,r2,443b54 <__pack_d+0x144>
  443a4c:	00c00104 	movi	r3,4
  443a50:	10c03c26 	beq	r2,r3,443b44 <__pack_d+0x134>
  443a54:	00c00084 	movi	r3,2
  443a58:	10c01926 	beq	r2,r3,443ac0 <__pack_d+0xb0>
  443a5c:	8c04b03a 	or	r2,r17,r16
  443a60:	10001726 	beq	r2,zero,443ac0 <__pack_d+0xb0>
  443a64:	21000217 	ldw	r4,8(r4)
  443a68:	00bf0084 	movi	r2,-1022
  443a6c:	20804016 	blt	r4,r2,443b70 <__pack_d+0x160>
  443a70:	0080ffc4 	movi	r2,1023
  443a74:	11003316 	blt	r2,r4,443b44 <__pack_d+0x134>
  443a78:	88803fcc 	andi	r2,r17,255
  443a7c:	00c02004 	movi	r3,128
  443a80:	10c02926 	beq	r2,r3,443b28 <__pack_d+0x118>
  443a84:	88801fc4 	addi	r2,r17,127
  443a88:	1463803a 	cmpltu	r17,r2,r17
  443a8c:	8c21883a 	add	r16,r17,r16
  443a90:	1023883a 	mov	r17,r2
  443a94:	00880034 	movhi	r2,8192
  443a98:	10bfffc4 	addi	r2,r2,-1
  443a9c:	14001c36 	bltu	r2,r16,443b10 <__pack_d+0x100>
  443aa0:	2100ffc4 	addi	r4,r4,1023
  443aa4:	8006963a 	slli	r3,r16,24
  443aa8:	8804d23a 	srli	r2,r17,8
  443aac:	8020913a 	slli	r16,r16,4
  443ab0:	2101ffcc 	andi	r4,r4,2047
  443ab4:	1884b03a 	or	r2,r3,r2
  443ab8:	8020d33a 	srli	r16,r16,12
  443abc:	00000306 	br	443acc <__pack_d+0xbc>
  443ac0:	0009883a 	mov	r4,zero
  443ac4:	0005883a 	mov	r2,zero
  443ac8:	0021883a 	mov	r16,zero
  443acc:	2008953a 	slli	r4,r4,20
  443ad0:	982697fa 	slli	r19,r19,31
  443ad4:	00c00434 	movhi	r3,16
  443ad8:	18ffffc4 	addi	r3,r3,-1
  443adc:	80e0703a 	and	r16,r16,r3
  443ae0:	8106b03a 	or	r3,r16,r4
  443ae4:	1cc6b03a 	or	r3,r3,r19
  443ae8:	dfc00717 	ldw	ra,28(sp)
  443aec:	dd800617 	ldw	r22,24(sp)
  443af0:	dd400517 	ldw	r21,20(sp)
  443af4:	dd000417 	ldw	r20,16(sp)
  443af8:	dcc00317 	ldw	r19,12(sp)
  443afc:	dc800217 	ldw	r18,8(sp)
  443b00:	dc400117 	ldw	r17,4(sp)
  443b04:	dc000017 	ldw	r16,0(sp)
  443b08:	dec00804 	addi	sp,sp,32
  443b0c:	f800283a 	ret
  443b10:	800697fa 	slli	r3,r16,31
  443b14:	8804d07a 	srli	r2,r17,1
  443b18:	21010004 	addi	r4,r4,1024
  443b1c:	8020d07a 	srli	r16,r16,1
  443b20:	18a2b03a 	or	r17,r3,r2
  443b24:	003fdf06 	br	443aa4 <__pack_d+0x94>
  443b28:	88c0400c 	andi	r3,r17,256
  443b2c:	183fd926 	beq	r3,zero,443a94 <__pack_d+0x84>
  443b30:	8885883a 	add	r2,r17,r2
  443b34:	1463803a 	cmpltu	r17,r2,r17
  443b38:	8c21883a 	add	r16,r17,r16
  443b3c:	1023883a 	mov	r17,r2
  443b40:	003fd406 	br	443a94 <__pack_d+0x84>
  443b44:	0101ffc4 	movi	r4,2047
  443b48:	0005883a 	mov	r2,zero
  443b4c:	0021883a 	mov	r16,zero
  443b50:	003fde06 	br	443acc <__pack_d+0xbc>
  443b54:	84000234 	orhi	r16,r16,8
  443b58:	00c00434 	movhi	r3,16
  443b5c:	18ffffc4 	addi	r3,r3,-1
  443b60:	8805883a 	mov	r2,r17
  443b64:	80e0703a 	and	r16,r16,r3
  443b68:	0101ffc4 	movi	r4,2047
  443b6c:	003fd706 	br	443acc <__pack_d+0xbc>
  443b70:	1129c83a 	sub	r20,r2,r4
  443b74:	00800e04 	movi	r2,56
  443b78:	15002716 	blt	r2,r20,443c18 <__pack_d+0x208>
  443b7c:	800b883a 	mov	r5,r16
  443b80:	a00d883a 	mov	r6,r20
  443b84:	8809883a 	mov	r4,r17
  443b88:	0443e080 	call	443e08 <__lshrdi3>
  443b8c:	9009883a 	mov	r4,r18
  443b90:	000b883a 	mov	r5,zero
  443b94:	a00d883a 	mov	r6,r20
  443b98:	102d883a 	mov	r22,r2
  443b9c:	182b883a 	mov	r21,r3
  443ba0:	0443e4c0 	call	443e4c <__ashldi3>
  443ba4:	1009003a 	cmpeq	r4,r2,zero
  443ba8:	1907c83a 	sub	r3,r3,r4
  443bac:	10bfffc4 	addi	r2,r2,-1
  443bb0:	1c20703a 	and	r16,r3,r16
  443bb4:	1444703a 	and	r2,r2,r17
  443bb8:	1404b03a 	or	r2,r2,r16
  443bbc:	1004c03a 	cmpne	r2,r2,zero
  443bc0:	1584b03a 	or	r2,r2,r22
  443bc4:	11003fcc 	andi	r4,r2,255
  443bc8:	01402004 	movi	r5,128
  443bcc:	a807883a 	mov	r3,r21
  443bd0:	2140131e 	bne	r4,r5,443c20 <__pack_d+0x210>
  443bd4:	1140400c 	andi	r5,r2,256
  443bd8:	28000426 	beq	r5,zero,443bec <__pack_d+0x1dc>
  443bdc:	1109883a 	add	r4,r2,r4
  443be0:	2085803a 	cmpltu	r2,r4,r2
  443be4:	1547883a 	add	r3,r2,r21
  443be8:	2005883a 	mov	r2,r4
  443bec:	1808963a 	slli	r4,r3,24
  443bf0:	1004d23a 	srli	r2,r2,8
  443bf4:	1820913a 	slli	r16,r3,4
  443bf8:	01440034 	movhi	r5,4096
  443bfc:	297fffc4 	addi	r5,r5,-1
  443c00:	2084b03a 	or	r2,r4,r2
  443c04:	8020d33a 	srli	r16,r16,12
  443c08:	01000044 	movi	r4,1
  443c0c:	28ffaf36 	bltu	r5,r3,443acc <__pack_d+0xbc>
  443c10:	0009883a 	mov	r4,zero
  443c14:	003fad06 	br	443acc <__pack_d+0xbc>
  443c18:	0005883a 	mov	r2,zero
  443c1c:	0007883a 	mov	r3,zero
  443c20:	11001fc4 	addi	r4,r2,127
  443c24:	2085803a 	cmpltu	r2,r4,r2
  443c28:	10c7883a 	add	r3,r2,r3
  443c2c:	2005883a 	mov	r2,r4
  443c30:	003fee06 	br	443bec <__pack_d+0x1dc>

00443c34 <__unpack_d>:
  443c34:	21800117 	ldw	r6,4(r4)
  443c38:	20c00017 	ldw	r3,0(r4)
  443c3c:	3004d7fa 	srli	r2,r6,31
  443c40:	3008d53a 	srli	r4,r6,20
  443c44:	28800115 	stw	r2,4(r5)
  443c48:	2101ffcc 	andi	r4,r4,2047
  443c4c:	00800434 	movhi	r2,16
  443c50:	10bfffc4 	addi	r2,r2,-1
  443c54:	3084703a 	and	r2,r6,r2
  443c58:	20001a1e 	bne	r4,zero,443cc4 <__unpack_d+0x90>
  443c5c:	1888b03a 	or	r4,r3,r2
  443c60:	20002626 	beq	r4,zero,443cfc <__unpack_d+0xc8>
  443c64:	1808d63a 	srli	r4,r3,24
  443c68:	1004923a 	slli	r2,r2,8
  443c6c:	01bf0084 	movi	r6,-1022
  443c70:	29800215 	stw	r6,8(r5)
  443c74:	2084b03a 	or	r2,r4,r2
  443c78:	010000c4 	movi	r4,3
  443c7c:	29000015 	stw	r4,0(r5)
  443c80:	02040034 	movhi	r8,4096
  443c84:	423fffc4 	addi	r8,r8,-1
  443c88:	1806923a 	slli	r3,r3,8
  443c8c:	40801836 	bltu	r8,r2,443cf0 <__unpack_d+0xbc>
  443c90:	013f0044 	movi	r4,-1023
  443c94:	18cd883a 	add	r6,r3,r3
  443c98:	30c7803a 	cmpltu	r3,r6,r3
  443c9c:	1085883a 	add	r2,r2,r2
  443ca0:	1885883a 	add	r2,r3,r2
  443ca4:	200f883a 	mov	r7,r4
  443ca8:	3007883a 	mov	r3,r6
  443cac:	213fffc4 	addi	r4,r4,-1
  443cb0:	40bff82e 	bgeu	r8,r2,443c94 <__unpack_d+0x60>
  443cb4:	29c00215 	stw	r7,8(r5)
  443cb8:	28c00315 	stw	r3,12(r5)
  443cbc:	28800415 	stw	r2,16(r5)
  443cc0:	f800283a 	ret
  443cc4:	01c1ffc4 	movi	r7,2047
  443cc8:	21c00f26 	beq	r4,r7,443d08 <__unpack_d+0xd4>
  443ccc:	180cd63a 	srli	r6,r3,24
  443cd0:	1004923a 	slli	r2,r2,8
  443cd4:	213f0044 	addi	r4,r4,-1023
  443cd8:	1806923a 	slli	r3,r3,8
  443cdc:	3084b03a 	or	r2,r6,r2
  443ce0:	29000215 	stw	r4,8(r5)
  443ce4:	010000c4 	movi	r4,3
  443ce8:	10840034 	orhi	r2,r2,4096
  443cec:	29000015 	stw	r4,0(r5)
  443cf0:	28c00315 	stw	r3,12(r5)
  443cf4:	28800415 	stw	r2,16(r5)
  443cf8:	f800283a 	ret
  443cfc:	00800084 	movi	r2,2
  443d00:	28800015 	stw	r2,0(r5)
  443d04:	f800283a 	ret
  443d08:	1888b03a 	or	r4,r3,r2
  443d0c:	20000526 	beq	r4,zero,443d24 <__unpack_d+0xf0>
  443d10:	3180022c 	andhi	r6,r6,8
  443d14:	30000626 	beq	r6,zero,443d30 <__unpack_d+0xfc>
  443d18:	01000044 	movi	r4,1
  443d1c:	29000015 	stw	r4,0(r5)
  443d20:	003ff306 	br	443cf0 <__unpack_d+0xbc>
  443d24:	00800104 	movi	r2,4
  443d28:	28800015 	stw	r2,0(r5)
  443d2c:	f800283a 	ret
  443d30:	28000015 	stw	zero,0(r5)
  443d34:	003fee06 	br	443cf0 <__unpack_d+0xbc>

00443d38 <__fpcmp_parts_d>:
  443d38:	20c00017 	ldw	r3,0(r4)
  443d3c:	00800044 	movi	r2,1
  443d40:	10c0142e 	bgeu	r2,r3,443d94 <__fpcmp_parts_d+0x5c>
  443d44:	29800017 	ldw	r6,0(r5)
  443d48:	1180122e 	bgeu	r2,r6,443d94 <__fpcmp_parts_d+0x5c>
  443d4c:	01c00104 	movi	r7,4
  443d50:	19c02826 	beq	r3,r7,443df4 <__fpcmp_parts_d+0xbc>
  443d54:	31c00926 	beq	r6,r7,443d7c <__fpcmp_parts_d+0x44>
  443d58:	01c00084 	movi	r7,2
  443d5c:	19c00626 	beq	r3,r7,443d78 <__fpcmp_parts_d+0x40>
  443d60:	31c00a26 	beq	r6,r7,443d8c <__fpcmp_parts_d+0x54>
  443d64:	20c00117 	ldw	r3,4(r4)
  443d68:	29800117 	ldw	r6,4(r5)
  443d6c:	19800b26 	beq	r3,r6,443d9c <__fpcmp_parts_d+0x64>
  443d70:	1800041e 	bne	r3,zero,443d84 <__fpcmp_parts_d+0x4c>
  443d74:	f800283a 	ret
  443d78:	30c01a26 	beq	r6,r3,443de4 <__fpcmp_parts_d+0xac>
  443d7c:	28800117 	ldw	r2,4(r5)
  443d80:	1000041e 	bne	r2,zero,443d94 <__fpcmp_parts_d+0x5c>
  443d84:	00bfffc4 	movi	r2,-1
  443d88:	f800283a 	ret
  443d8c:	20800117 	ldw	r2,4(r4)
  443d90:	103ffc1e 	bne	r2,zero,443d84 <__fpcmp_parts_d+0x4c>
  443d94:	00800044 	movi	r2,1
  443d98:	f800283a 	ret
  443d9c:	21c00217 	ldw	r7,8(r4)
  443da0:	29800217 	ldw	r6,8(r5)
  443da4:	31c0020e 	bge	r6,r7,443db0 <__fpcmp_parts_d+0x78>
  443da8:	183ff61e 	bne	r3,zero,443d84 <__fpcmp_parts_d+0x4c>
  443dac:	f800283a 	ret
  443db0:	39800a16 	blt	r7,r6,443ddc <__fpcmp_parts_d+0xa4>
  443db4:	20800417 	ldw	r2,16(r4)
  443db8:	29800417 	ldw	r6,16(r5)
  443dbc:	21c00317 	ldw	r7,12(r4)
  443dc0:	29000317 	ldw	r4,12(r5)
  443dc4:	30800936 	bltu	r6,r2,443dec <__fpcmp_parts_d+0xb4>
  443dc8:	1180011e 	bne	r2,r6,443dd0 <__fpcmp_parts_d+0x98>
  443dcc:	21c00736 	bltu	r4,r7,443dec <__fpcmp_parts_d+0xb4>
  443dd0:	11800236 	bltu	r2,r6,443ddc <__fpcmp_parts_d+0xa4>
  443dd4:	3080031e 	bne	r6,r2,443de4 <__fpcmp_parts_d+0xac>
  443dd8:	3900022e 	bgeu	r7,r4,443de4 <__fpcmp_parts_d+0xac>
  443ddc:	183fe926 	beq	r3,zero,443d84 <__fpcmp_parts_d+0x4c>
  443de0:	003fec06 	br	443d94 <__fpcmp_parts_d+0x5c>
  443de4:	0005883a 	mov	r2,zero
  443de8:	f800283a 	ret
  443dec:	183fe926 	beq	r3,zero,443d94 <__fpcmp_parts_d+0x5c>
  443df0:	003fe406 	br	443d84 <__fpcmp_parts_d+0x4c>
  443df4:	30ffe51e 	bne	r6,r3,443d8c <__fpcmp_parts_d+0x54>
  443df8:	28c00117 	ldw	r3,4(r5)
  443dfc:	20800117 	ldw	r2,4(r4)
  443e00:	1885c83a 	sub	r2,r3,r2
  443e04:	f800283a 	ret

00443e08 <__lshrdi3>:
  443e08:	2005883a 	mov	r2,r4
  443e0c:	2807883a 	mov	r3,r5
  443e10:	30000826 	beq	r6,zero,443e34 <__lshrdi3+0x2c>
  443e14:	01000804 	movi	r4,32
  443e18:	2189c83a 	sub	r4,r4,r6
  443e1c:	0100060e 	bge	zero,r4,443e38 <__lshrdi3+0x30>
  443e20:	1184d83a 	srl	r2,r2,r6
  443e24:	2908983a 	sll	r4,r5,r4
  443e28:	298cd83a 	srl	r6,r5,r6
  443e2c:	2084b03a 	or	r2,r4,r2
  443e30:	3007883a 	mov	r3,r6
  443e34:	f800283a 	ret
  443e38:	0105c83a 	sub	r2,zero,r4
  443e3c:	000d883a 	mov	r6,zero
  443e40:	2884d83a 	srl	r2,r5,r2
  443e44:	3007883a 	mov	r3,r6
  443e48:	003ffa06 	br	443e34 <__lshrdi3+0x2c>

00443e4c <__ashldi3>:
  443e4c:	2005883a 	mov	r2,r4
  443e50:	2807883a 	mov	r3,r5
  443e54:	30000826 	beq	r6,zero,443e78 <__ashldi3+0x2c>
  443e58:	01000804 	movi	r4,32
  443e5c:	2189c83a 	sub	r4,r4,r6
  443e60:	0100060e 	bge	zero,r4,443e7c <__ashldi3+0x30>
  443e64:	1108d83a 	srl	r4,r2,r4
  443e68:	2986983a 	sll	r3,r5,r6
  443e6c:	118c983a 	sll	r6,r2,r6
  443e70:	20c6b03a 	or	r3,r4,r3
  443e74:	3005883a 	mov	r2,r6
  443e78:	f800283a 	ret
  443e7c:	0107c83a 	sub	r3,zero,r4
  443e80:	000d883a 	mov	r6,zero
  443e84:	10c6983a 	sll	r3,r2,r3
  443e88:	3005883a 	mov	r2,r6
  443e8c:	003ffa06 	br	443e78 <__ashldi3+0x2c>

00443e90 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  443e90:	defffc04 	addi	sp,sp,-16
  443e94:	df000315 	stw	fp,12(sp)
  443e98:	df000304 	addi	fp,sp,12
  443e9c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  443ea0:	00801134 	movhi	r2,68
  443ea4:	109dff44 	addi	r2,r2,30717
  443ea8:	10000005 	stb	zero,0(r2)
  443eac:	e0bfff17 	ldw	r2,-4(fp)
  443eb0:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
  443eb4:	e0bffd17 	ldw	r2,-12(fp)
  443eb8:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  443ebc:	e0bffe17 	ldw	r2,-8(fp)
  443ec0:	10000226 	beq	r2,zero,443ecc <_exit+0x3c>
    ALT_SIM_FAIL();
  443ec4:	002af070 	cmpltui	zero,zero,43969
  443ec8:	00000106 	br	443ed0 <_exit+0x40>
  } else {
    ALT_SIM_PASS();
  443ecc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  443ed0:	003fff06 	br	443ed0 <_exit+0x40>

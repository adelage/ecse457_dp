
ucosMon.elf:     file format elf32-littlenios2
ucosMon.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x004001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x00400000 paddr 0x00400000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00400020 paddr 0x00400020 align 2**12
         filesz 0x00019bc8 memsz 0x00019bc8 flags r-x
    LOAD off    0x0001abe8 vaddr 0x00419be8 paddr 0x0041b8e4 align 2**12
         filesz 0x00001cfc memsz 0x00001cfc flags rw-
    LOAD off    0x0001d5e0 vaddr 0x0041d5e0 paddr 0x0041d5e0 align 2**12
         filesz 0x00000000 memsz 0x000035c0 flags rw-
    LOAD off    0x0001d000 vaddr 0x08200000 paddr 0x08200000 align 2**12
         filesz 0x00002400 memsz 0x00002400 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00400000  00400000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  00400020  00400020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .critical     00002400  08200000  08200000  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .text         00019418  004001bc  004001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000614  004195d4  004195d4  0001a5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rwdata       00001cfc  00419be8  0041b8e4  0001abe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  6 .bss          000035c0  0041d5e0  0041d5e0  0001d5e0  2**2
                  ALLOC, SMALL_DATA
  7 .comment      00000023  00000000  00000000  0001f400  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001098  00000000  00000000  0001f428  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00032785  00000000  00000000  000204c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000bc86  00000000  00000000  00052c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000e292  00000000  00000000  0005e8cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002c2c  00000000  00000000  0006cb60  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004bf4  00000000  00000000  0006f78c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00012b1b  00000000  00000000  00074380  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00086e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a98  00000000  00000000  00086ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  0008cfa1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000011  00000000  00000000  0008cfa7  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0008cfb8  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0008cfb9  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008cfba  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008cfbe  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0008cfc2  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000016  00000000  00000000  0008cfc6  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000016  00000000  00000000  0008cfdc  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000016  00000000  00000000  0008cff2  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  0008d008  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000003a  00000000  00000000  0008d013  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     00179073  00000000  00000000  0008d04d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00400000 l    d  .entry	00000000 .entry
00400020 l    d  .exceptions	00000000 .exceptions
08200000 l    d  .critical	00000000 .critical
004001bc l    d  .text	00000000 .text
004195d4 l    d  .rodata	00000000 .rodata
00419be8 l    d  .rwdata	00000000 .rwdata
0041d5e0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ucosMon_bsp//obj/HAL/src/crt0.o
004001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00400094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 Monitor.c
004001f8 l     F .text	00000068 alt_dma_txchan_send
00400260 l     F .text	00000068 alt_dma_rxchan_prepare
00400518 l     F .text	0000010c handle_collision_interrupt
00400624 l     F .text	00000040 init_collision_isr
0041d5e4 l     O .bss	00000004 rx_done
00400664 l     F .text	00000030 done_dma
00000000 l    df *ABS*	00000000 critical.c
00000000 l    df *ABS*	00000000 fingerprint.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00419be8 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
004011f0 l     F .text	00000034 __sprint_r
00419786 l     O .rodata	00000010 blanks.3515
00419796 l     O .rodata	00000010 zeroes.3516
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
004033d8 l     F .text	0000023c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00404e48 l     F .text	00000008 __fp_lock
00404e50 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
004197c8 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00419910 l     O .rodata	0000000c p05.2435
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
004092ec l     F .text	00000354 _fpadd_parts
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0040a02c l     F .text	00000074 udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 fp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0040a798 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0040a8b4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dma_rxchan_open.c
0040a8e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dma_txchan_open.c
0040a980 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0040aaf4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0040af40 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0040b034 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0040b120 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0040b310 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0041b854 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_times.c
0040b5dc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0040b6b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0041b858 l     O .rwdata	00000004 lockid
0041d62c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0041b85c l     O .rwdata	00000004 lockid
0041d634 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0040d51c l     F .text	00000044 OS_InitMisc
0040d560 l     F .text	0000006c OS_InitRdyList
0040d6c4 l     F .text	000000e0 OS_InitTCBList
0040d440 l     F .text	000000dc OS_InitEventList
0040d5cc l     F .text	0000007c OS_InitTaskIdle
0040d648 l     F .text	0000007c OS_InitTaskStat
0040d95c l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0040fe28 l     F .text	0000010c OS_FlagTaskRdy
0040fb84 l     F .text	000001c0 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0041550c l     F .text	00000038 alt_dev_reg
00415544 l     F .text	00000050 alt_get_errno
00415594 l     F .text	000000a4 alt_avalon_mutex_reg
0041a5a4 l     O .rwdata	000000a4 processor0_0_dma_0_priv
0041a648 l     O .rwdata	0000001c processor0_0_dma_0_tx
0041a664 l     O .rwdata	0000001c processor0_0_dma_0_rx
0041a680 l     O .rwdata	000000a4 processor1_0_dma_0_priv
0041a724 l     O .rwdata	0000001c processor1_0_dma_0_tx
0041a740 l     O .rwdata	0000001c processor1_0_dma_0_rx
0041a75c l     O .rwdata	0000106c processorM_0_jtag_uart
0041b7c8 l     O .rwdata	00000014 mutex_0
0041b7dc l     O .rwdata	00000030 altera_ro_zipfs
00000000 l    df *ABS*	00000000 altera_avalon_dma.c
00415760 l     F .text	00000038 alt_dma_txchan_reg
00415798 l     F .text	00000038 alt_dma_rxchan_reg
004158c0 l     F .text	00000098 alt_avalon_dma_launch_txonly
00415958 l     F .text	00000098 alt_avalon_dma_launch_rxonly
004159f0 l     F .text	00000348 alt_avalon_dma_ioctl
004160ac l     F .text	00000218 alt_avalon_dma_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00416614 l     F .text	000002ac altera_avalon_jtag_uart_irq
004168c0 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
00417114 l     F .text	00000050 alt_get_errno
00417164 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00417468 l     F .text	000000a0 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_ro_zipfs.c
00417590 l     F .text	00000074 read_word
00417604 l     F .text	00000054 read_word_inc
00417658 l     F .text	00000044 read_half_word
0041769c l     F .text	00000054 read_half_word_inc
004176f0 l     F .text	00000120 check_file_header
00417944 l     F .text	000000a4 check_directory_table
004179e8 l     F .text	000000ac find_directory_entry
00417a94 l     F .text	00000170 find_file_entry_by_name
00417c04 l     F .text	0000019c find_file_entry
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
004182e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0041853c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00418694 l     F .text	00000050 alt_get_errno
004186e4 l     F .text	000000f0 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 
004077c8 g     F .text	00000074 _mprec_log10
0041b8aa g     O .rwdata	00000002 OSTaskNameSize
004078b8 g     F .text	00000084 __any_on
00408538 g     F .text	00000064 _isatty_r
004197f8 g     O .rodata	00000028 __mprec_tinytens
0040b244 g     F .text	000000cc alt_main
00400b80 g       .text	00000000 get_gp
0040a754 g     F .text	00000044 __ashldi3
004010c4 g     F .text	00000084 _puts_r
02500000 g       *ABS*	00000000 __alt_mem_shared_memory
0041d6ec g     O .bss	00000100 alt_irq
0040859c g     F .text	0000006c _lseek_r
00410818 g     F .text	000000d8 OS_MemInit
0041b8e4 g       *ABS*	00000000 __flash_rwdata_start
0041547c g     F .text	00000090 OSTimeSet
00409b8c g     F .text	0000005c __eqdf2
0040beb4 g     F .text	00000718 OSEventPendMulti
00420ba0 g       *ABS*	00000000 __alt_heap_start
00418ed8 g     F .text	00000020 OSTaskCreateHook
00400694 g     F .text	00000204 dma
00401088 g     F .text	0000003c printf
0041b882 g     O .rwdata	00000002 OSMboxEn
0040c620 g     F .text	000000a8 OSIntEnter
004080dc g     F .text	0000005c __sseek
00404eec g     F .text	0000010c __sinit
004162c4 g     F .text	000000b0 alt_avalon_dma_init
0041b892 g     O .rwdata	00000002 OSQEn
08200000 g     O .critical	00000c00 schedule_task_stk
00405b84 g     F .text	0000009c _setlocale_r
00404e64 g     F .text	00000078 __sfmoreglue
0040ba74 g     F .text	00000158 __malloc_unlock
00418f34 g     F .text	0000001c OSTaskStatHook
0041d63c g     O .bss	00000001 OSLockNesting
004002c8 g     F .text	000000b0 schedule_task
0041b8d0 g     O .rwdata	00000002 OSDataSize
0041d63d g     O .bss	00000001 OSRunning
0041d690 g     O .bss	00000004 altera_avalon_timer_ts_freq
00406684 g     F .text	0000018c memmove
00418f6c g     F .text	0000001c OSInitHookBegin
0041b8c8 g     O .rwdata	00000002 OSTmrSize
00404edc g     F .text	00000010 _cleanup
004172bc g     F .text	00000080 altera_avalon_mutex_trylock
004068ec g     F .text	000000a8 _Balloc
0041d640 g     O .bss	00000004 OSIdleCtr
00409c44 g     F .text	00000064 __gtdf2
00418bc0 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0040dce0 g     F .text	0000035c OS_TCBInit
00400000 g     F .entry	0000001c __reset
0040b62c g     F .text	00000084 times
0041d5e8 g     O .bss	00000004 start_schedule
08200000 g       *ABS*	00000000 __alt_mem_processorM_0_scratchpad
0041b8ce g     O .rwdata	00000002 OSTmrWheelTblSize
004173a4 g     F .text	00000074 altera_avalon_mutex_is_mine
00400020 g       *ABS*	00000000 __flash_exceptions_start
0041b86e g     O .rwdata	00000002 OSEventSize
0041d644 g     O .bss	00000001 OSPrioHighRdy
004084d0 g     F .text	00000068 _fstat_r
00418ef8 g     F .text	00000020 OSTaskDelHook
0041d614 g     O .bss	00000004 errno
00418ba0 g       .text	00000000 OSStartHighRdy
00413560 g     F .text	000002a4 OSTaskCreateExt
0040f5bc g     F .text	00000094 OSFlagPendGetFlagsRdy
0041b8ae g     O .rwdata	00000002 OSTaskStatStkSize
0040e1c8 g     F .text	000003e4 OSFlagAccept
00411058 g     F .text	000000e4 OSQFlush
004108f0 g     F .text	0000016c OSQAccept
0041d624 g     O .bss	00000004 alt_argv
0042380c g       *ABS*	00000000 _gp
004132f4 g     F .text	0000026c OSTaskCreate
00412d1c g     F .text	000005d8 OSTaskChangePrio
0041d638 g     O .bss	00000004 alt_heapsem
0040e03c g     F .text	0000018c OSDebugInit
00413804 g     F .text	0000048c OSTaskDel
0040a9d0 g     F .text	00000050 alt_dma_txchan_open
0041a424 g     O .rwdata	00000180 alt_fd_list
0041d7ec g     O .bss	00000370 OSFlagTbl
0040d230 g     F .text	000000b0 OS_EventTaskRemove
0040aa64 g     F .text	00000090 alt_find_dev
004011e8 g     F .text	00000008 _times_r
00400f1c g     F .text	00000140 memcpy
00400ba4 g     F .text	0000001c write_led
0041b898 g     O .rwdata	00000002 OSRdyTblSize
00404e58 g     F .text	0000000c _cleanup_r
00409d68 g     F .text	000000d4 __floatsidf
00418488 g     F .text	00000084 alt_fs_reg
0041861c g     F .text	00000078 alt_io_redirect
00409d0c g     F .text	0000005c __ltdf2
004195d4 g       *ABS*	00000000 __DTOR_END__
00401148 g     F .text	00000014 puts
00417da0 g     F .text	00000090 alt_ro_zipfs_open
0040bbcc g     F .text	0000014c OSEventNameGet
0041b87c g     O .rwdata	00000002 OSFlagMax
00407724 g     F .text	000000a4 __ratio
0040c6c8 g     F .text	00000120 OSIntExit
0041b8b6 g     O .rwdata	00000002 OSTCBSize
0041d645 g     O .bss	00000001 OSPrioCur
00416b28 g     F .text	000002f0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
0040105c g     F .text	0000002c _printf_r
0040a14c g     F .text	00000008 __udivsi3
0040af90 g     F .text	000000a4 isatty
0041b89c g     O .rwdata	00000002 OSStkWidth
00419848 g     O .rodata	000000c8 __mprec_tens
0041b890 g     O .rwdata	00000002 OSPtrSize
00405c20 g     F .text	0000000c __locale_charset
0041b870 g     O .rwdata	00000002 OSEventTblSize
00419550 g     F .text	00000084 __fixunsdfsi
00418b14 g       .text	00000000 OSCtxSw
00419208 g     F .text	0000008c alt_icache_flush
0041d610 g     O .bss	00000004 __malloc_top_pad
0041d648 g     O .bss	00000004 OSTCBList
0041d618 g     O .bss	00000004 alt_fd_list_lock
0041b81c g     O .rwdata	00000004 __mb_cur_max
00405c2c g     F .text	0000000c _localeconv_r
00406d1c g     F .text	0000003c __i2b
00405540 g     F .text	000004e4 __sfvwrite_r
0041db5c g     O .bss	00000c30 OSMemTbl
0041d64c g     O .bss	00000001 OSTickStepState
00407f9c g     F .text	00000064 _sbrk_r
00400490 g     F .text	00000088 print_execution_times
0041b894 g     O .rwdata	00000002 OSQMax
0041e78c g     O .bss	00000800 OSTaskStatStk
0041033c g     F .text	00000124 OSMemNameGet
0041b874 g     O .rwdata	00000002 OSFlagEn
00408608 g     F .text	0000006c _read_r
0041b8ba g     O .rwdata	00000002 OSTimeTickHookEn
00411688 g     F .text	000001ec OSQPost
0040ff34 g     F .text	000000a0 OS_FlagUnlink
00419fe8 g     O .rwdata	0000000c __lc_ctype
0041b838 g     O .rwdata	00000004 alt_max_fd
0040d7f8 g     F .text	0000006c OS_MemCopy
0040d864 g     F .text	000000f8 OS_Sched
0040a53c g     F .text	00000104 __unpack_d
00408380 g     F .text	0000013c _fclose_r
004101f4 g     F .text	00000148 OSMemGet
004140c4 g     F .text	00000274 OSTaskNameSet
00404e18 g     F .text	00000030 fflush
0041d60c g     O .bss	00000004 __malloc_max_sbrked_mem
0041d650 g     O .bss	00000004 OSCtxSwCtr
00418f50 g     F .text	0000001c OSTimeTickHook
0041b87e g     O .rwdata	00000002 OSFlagNameSize
0040d2e0 g     F .text	000000f8 OS_EventTaskRemoveMulti
00409640 g     F .text	00000054 __adddf3
004157d0 g     F .text	000000f0 alt_avalon_dma_launch_bidir
0040d0e8 g     F .text	00000148 OS_EventTaskWaitMulti
00407498 g     F .text	00000148 __b2d
0041b896 g     O .rwdata	00000002 OSQSize
00408cc4 g     F .text	00000628 __umoddi3
0040a930 g     F .text	00000050 alt_dma_rxchan_open
0040b170 g     F .text	000000d4 lseek
00417418 g     F .text	00000050 altera_avalon_mutex_first_lock
0041245c g     F .text	000002f0 OSSemPend
0041b814 g     O .rwdata	00000004 _global_impure_ptr
0040793c g     F .text	000005fc _realloc_r
0041b880 g     O .rwdata	00000002 OSLowestPrio
00420ba0 g       *ABS*	00000000 __bss_end
0040ae24 g     F .text	0000011c alt_iic_isr_register
00418fc0 g     F .text	00000020 OSTCBInitHook
0041b8c6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
004189f0 g     F .text	00000104 alt_tick
00408674 g     F .text	00000650 __udivdi3
0041b868 g     O .rwdata	00000002 OSEventEn
00419820 g     O .rodata	00000028 __mprec_bigtens
00406b00 g     F .text	00000104 __s2b
0041b8c2 g     O .rwdata	00000002 OSTmrCfgNameSize
00409f10 g     F .text	0000011c __floatunsidf
00407238 g     F .text	00000058 __mcmp
00400000 g       *ABS*	00000000 __alt_mem_memory_0_onchip_memoryMain
00405104 g     F .text	00000018 __fp_lock_all
0040add8 g     F .text	0000004c alt_ic_irq_enabled
00400d68 g     F .text	00000028 fprint_set_block_size
0040fd44 g     F .text	000000e4 OS_FlagInit
0041892c g     F .text	000000c4 alt_alarm_stop
0041b8a4 g     O .rwdata	00000002 OSTaskIdleStkSize
00400bc0 g     F .text	00000028 critical_task
0041d61c g     O .bss	00000004 alt_irq_active
00411f34 g     F .text	000000dc OSSemAccept
0041d5ec g     O .bss	00000004 done
004105d4 g     F .text	00000130 OSMemPut
00417f4c g     F .text	0000013c alt_ro_zipfs_seek
0040ffd4 g     F .text	00000220 OSMemCreate
0041d654 g     O .bss	00000004 OSIdleCtrMax
004000ec g     F .exceptions	000000d0 alt_irq_handler
0041a3fc g     O .rwdata	00000028 alt_dev_null
0041b8b8 g     O .rwdata	00000002 OSTicksPerSec
004171e0 g     F .text	00000050 altera_avalon_mutex_open
00418b14 g       .text	00000000 OSIntCtxSw
004182c4 g     F .text	0000001c alt_dcache_flush_all
00406c04 g     F .text	00000068 __hi0bits
00409e3c g     F .text	000000d4 __fixdfsi
0041d658 g     O .bss	00000004 OSTCBFreeList
0041b8e4 g       *ABS*	00000000 __ram_rwdata_end
0041274c g     F .text	000001cc OSSemPendAbort
0041b830 g     O .rwdata	00000008 alt_dev_list
00415f00 g     F .text	00000074 alt_avalon_dma_space
0040b700 g     F .text	000000f0 write
0041b8bc g     O .rwdata	00000002 OSVersionNbr
0041b8d4 g     O .rwdata	00000008 alt_mutex_list
00419be8 g       *ABS*	00000000 __ram_rodata_end
0040ab44 g     F .text	000000b0 fstat
0040a710 g     F .text	00000044 __lshrdi3
00400c10 g     F .text	00000098 set_task_directory
0041b810 g     O .rwdata	00000004 isr_1_ptr
0041b864 g     O .rwdata	00000004 OSEndiannessTest
00406fb0 g     F .text	0000012c __pow5mult
0041d604 g     O .bss	00000004 __nlocale_changed
0040a154 g     F .text	00000008 __umodsi3
00400378 g     F .text	00000118 print_status_task
0041b876 g     O .rwdata	00000002 OSFlagGrpSize
0041d5f0 g     O .bss	00000004 mutex
00420ba0 g       *ABS*	00000000 end
004164d8 g     F .text	0000013c altera_avalon_jtag_uart_init
0040db24 g     F .text	000000f4 OS_TaskStat
00400ca8 g     F .text	0000002c enable_fprint_task
004195d4 g       *ABS*	00000000 __CTOR_LIST__
00431000 g       *ABS*	00000000 __alt_stack_pointer
00417508 g     F .text	00000088 alt_avalon_timer_sc_init
0040a26c g     F .text	000000ac __clzsi2
00416e18 g     F .text	000002fc altera_avalon_jtag_uart_write
00400b98 g       .text	00000000 restore_gp
004050f4 g     F .text	00000004 __sfp_lock_acquire
0040658c g     F .text	000000f8 memchr
0040d7a4 g     F .text	00000054 OS_MemClr
00401224 g     F .text	00001e7c ___vfprintf_internal_r
00418be4 g     F .text	000002f4 OSTaskStkInit
00405270 g     F .text	000002d0 _free_r
00415f74 g     F .text	00000138 alt_avalon_dma_send
0040ce48 g     F .text	00000198 OS_EventTaskRdy
00403238 g     F .text	000001a0 __call_exitprocs
0041d65c g     O .bss	00000001 OSCPUUsage
0041b844 g     O .rwdata	00000008 alt_dma_txchan_list
0041d600 g     O .bss	00000004 __mlocale_changed
0041b820 g     O .rwdata	00000004 __malloc_sbrk_base
004001bc g     F .text	0000003c _start
0041d694 g     O .bss	00000004 _alt_tick_rate
0041113c g     F .text	00000380 OSQPend
00414d6c g     F .text	00000174 OSTimeDly
004070dc g     F .text	0000015c __lshift
0041d698 g     O .bss	00000004 _alt_nticks
0040b360 g     F .text	000000f4 read
0041566c g     F .text	000000f4 alt_sys_init
00400b8c g       .text	00000000 set_gp
00419420 g     F .text	00000130 __register_exitproc
0041d65d g     O .bss	00000001 OSTaskCtr
00419324 g     F .text	000000fc strncmp
0041733c g     F .text	00000068 altera_avalon_mutex_unlock
00400d90 g     F .text	0000004c set_core_assignment
00414ee0 g     F .text	00000244 OSTimeDlyHMSM
00406d58 g     F .text	00000258 __multiply
00400ddc g     F .text	00000094 set_core_assignment_table
004169cc g     F .text	00000068 altera_avalon_jtag_uart_close
00400e70 g     F .text	00000028 __mulsi3
00419be8 g       *ABS*	00000000 __ram_rwdata_start
004195d4 g       *ABS*	00000000 __ram_rodata_start
0041d69c g     O .bss	00000028 __malloc_current_mallinfo
0041b86a g     O .rwdata	00000002 OSEventMax
004075e0 g     F .text	00000144 __d2b
00412918 g     F .text	00000194 OSSemPost
0040c89c g     F .text	00000188 OSSchedUnlock
0041b80c g     O .rwdata	00000004 isr_0_ptr
00416374 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
004190f4 g     F .text	00000114 alt_get_fd
0041d660 g     O .bss	00000004 OSMemFreeList
0040ca90 g     F .text	00000104 OSStatInit
0040fa94 g     F .text	000000f0 OSFlagQuery
0040a640 g     F .text	000000d0 __fpcmp_parts_d
0041b8a0 g     O .rwdata	00000002 OSTaskCreateExtEn
08200c00 g     O .critical	00000c00 print_status_stk
0040831c g     F .text	00000064 _close_r
00400cd4 g     F .text	00000024 disable_fprint_task
004192a8 g     F .text	0000007c memcmp
0041d6c4 g     O .bss	00000028 endstate
0040ce2c g     F .text	0000001c OS_Dummy
00416434 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00420ba0 g       *ABS*	00000000 __alt_stack_base
00416484 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
004030c4 g     F .text	00000174 __swsetup_r
0041ef8c g     O .bss	000001e0 OSQTbl
004099d8 g     F .text	000001b4 __divdf3
00404ff8 g     F .text	000000fc __sfp
0040783c g     F .text	0000007c __copybits
00419ff4 g     O .rwdata	00000408 __malloc_av_
00405100 g     F .text	00000004 __sinit_lock_release
0041d664 g     O .bss	00000004 OSTCBHighRdy
004096f4 g     F .text	000002e4 __muldf3
00408000 g     F .text	00000054 __sread
0041d668 g     O .bss	00000004 OSQFreeList
00418fe0 g     F .text	00000114 alt_find_file
00418330 g     F .text	000000a0 alt_dev_llist_insert
0040b908 g     F .text	0000016c __malloc_lock
0040b4d4 g     F .text	00000108 sbrk
0040bd18 g     F .text	0000019c OSEventNameSet
00404c30 g     F .text	000001e8 _fflush_r
00408250 g     F .text	000000cc _calloc_r
0041d66c g     O .bss	00000001 OSRdyGrp
0041d5e0 g       *ABS*	00000000 __bss_start
00406810 g     F .text	000000dc memset
0041d5f4 g     O .bss	00000001 err
00400898 g     F .text	000002e8 main
00415d80 g     F .text	00000048 alt_avalon_dma_rx_ioctl
0041d628 g     O .bss	00000004 alt_envp
0041d608 g     O .bss	00000004 __malloc_max_total_mem
004163d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00419a58 g     O .rodata	00000100 OSUnMapTbl
00400cf8 g     F .text	00000020 fprint_reset_irq
0041b89a g     O .rwdata	00000002 OSSemEn
0040f650 g     F .text	00000444 OSFlagPost
00408138 g     F .text	00000008 __sclose
00431000 g       *ABS*	00000000 __alt_heap_limit
004084bc g     F .text	00000014 fclose
0040cfe0 g     F .text	00000108 OS_EventTaskWait
0040dc18 g     F .text	000000c8 OS_TaskStatStkChk
00420a10 g     O .bss	00000190 _atexit0
00417254 g     F .text	00000068 altera_avalon_mutex_lock
00413c90 g     F .text	00000208 OSTaskDelReq
00403614 g     F .text	0000161c _dtoa_r
00405e08 g     F .text	00000784 _malloc_r
0041b84c g     O .rwdata	00000004 alt_errno
0040ca24 g     F .text	0000006c OSStart
0040b8a8 g     F .text	00000060 __env_unlock
08201800 g     O .critical	00000c00 print_execution_times_stk
00405a24 g     F .text	000000a8 _fwalk
00414338 g     F .text	000002fc OSTaskResume
00410704 g     F .text	00000114 OSMemQuery
0041b8ac g     O .rwdata	00000002 OSTaskStatEn
0041b886 g     O .rwdata	00000002 OSMemMax
00411874 g     F .text	000001f4 OSQPostFront
0040a0a0 g     F .text	00000050 __divsi3
00400be8 g     F .text	00000028 preempt_task
0041d66d g     O .bss	00000003 OSRdyTbl
0041b860 g     O .rwdata	00000002 OSDebugEn
00417e30 g     F .text	0000011c alt_ro_zipfs_read
0041991c g     O .rodata	00000014 __thenan_df
00405134 g     F .text	0000013c _malloc_trim_r
004195d4 g       *ABS*	00000000 __CTOR_END__
00418100 g     F .text	00000058 alt_ro_zipfs_check_valid
0041b878 g     O .rwdata	00000002 OSFlagNodeSize
0041b8c0 g     O .rwdata	00000002 OSTmrCfgMax
00408140 g     F .text	000000a4 strcmp
00410a5c g     F .text	0000027c OSQCreate
00413e98 g     F .text	0000022c OSTaskNameGet
004195d4 g       *ABS*	00000000 __flash_rodata_start
00411a68 g     F .text	00000290 OSQPostOpt
0040cb94 g     F .text	00000278 OSTimeTick
0041b8a8 g     O .rwdata	00000002 OSTaskMax
004195d4 g       *ABS*	00000000 __DTOR_LIST__
00412010 g     F .text	0000012c OSSemCreate
0041b8cc g     O .rwdata	00000002 OSTmrWheelSize
0041d5e0 g     O .bss	00000004 count
00409be8 g     F .text	0000005c __nedf2
00418088 g     F .text	00000078 alt_ro_zipfs_fstat
0041b8a2 g     O .rwdata	00000002 OSTaskDelEn
00412aac g     F .text	00000144 OSSemQuery
00410cd8 g     F .text	00000380 OSQDel
004114bc g     F .text	000001cc OSQPendAbort
00415638 g     F .text	00000034 alt_irq_init
0040b454 g     F .text	00000080 alt_release_fd
00400d18 g     F .text	00000050 fprint_status
00419930 g     O .rodata	00000100 __clz_tab
0041d5fc g     O .bss	00000004 _PathLocale
00419294 g     F .text	00000014 atexit
004081e4 g     F .text	0000006c _write_r
0040c7e8 g     F .text	000000b4 OSSchedLock
00405c38 g     F .text	0000001c setlocale
0040e5ac g     F .text	00000180 OSFlagCreate
0041b818 g     O .rwdata	00000004 _impure_ptr
0041d620 g     O .bss	00000004 alt_argc
0041d68c g     O .bss	00000004 altera_avalon_timer_ts_base
0041842c g     F .text	0000005c _do_dtors
0041b872 g     O .rwdata	00000002 OSEventMultiEn
0040e72c g     F .text	00000320 OSFlagDel
0041d670 g     O .bss	00000004 OSEventFreeList
00400020 g       .exceptions	00000000 alt_irq_entry
00407438 g     F .text	00000060 __ulp
00407f38 g     F .text	00000038 __isinfd
0040edac g     F .text	00000810 OSFlagPend
0041b8be g     O .rwdata	00000002 OSTmrEn
0040511c g     F .text	00000018 __fp_unlock_all
0041b828 g     O .rwdata	00000008 alt_fs_list
0040d9cc g     F .text	0000007c OS_StrCopy
0041b888 g     O .rwdata	00000002 OSMemNameSize
00418f88 g     F .text	0000001c OSInitHookEnd
00400020 g       *ABS*	00000000 __ram_exceptions_start
0041b8b4 g     O .rwdata	00000002 OSTCBPrioTblMax
00405c54 g     F .text	0000000c localeconv
0041b8b0 g     O .rwdata	00000002 OSTaskStatStkChkEn
0040abf4 g     F .text	00000050 alt_ic_isr_register
0041b884 g     O .rwdata	00000002 OSMemEn
0041b88e g     O .rwdata	00000002 OSMutexEn
0041b8e4 g       *ABS*	00000000 _edata
00420ba0 g       *ABS*	00000000 _end
0041d674 g     O .bss	00000001 OSIntNesting
004001bc g       *ABS*	00000000 __ram_exceptions_end
00416a34 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
00415124 g     F .text	000002c8 OSTimeDlyResume
0040ebd4 g     F .text	000001d8 OSFlagNameSet
00414634 g     F .text	00000284 OSTaskStkChk
0040ad0c g     F .text	000000cc alt_ic_irq_disable
0041b88a g     O .rwdata	00000002 OSMemSize
00408054 g     F .text	00000088 __swrite
0041b824 g     O .rwdata	00000004 __malloc_trim_threshold
00418af4 g     F .text	00000020 altera_nios2_qsys_irq_init
0041d678 g     O .bss	00000004 OSTCBCur
00400ee4 g     F .text	00000038 exit
0041b88c g     O .rwdata	00000002 OSMemTblSize
00405acc g     F .text	000000b8 _fwalk_reent
00407290 g     F .text	000001a8 __mdiff
0040a0f0 g     F .text	0000005c __modsi3
00431000 g       *ABS*	00000000 __alt_data_end
00400020 g     F .exceptions	00000000 alt_exception
004050f8 g     F .text	00000004 __sfp_lock_release
0040c5cc g     F .text	00000054 OSInit
00414b4c g     F .text	000001b0 OSTaskQuery
00411e88 g     F .text	000000ac OS_QInit
0040da48 g     F .text	00000054 OS_StrLen
00410460 g     F .text	00000174 OSMemNameSet
0041b8a6 g     O .rwdata	00000002 OSTaskProfileEn
0041d67c g     O .bss	00000004 OSTime
0041f16c g     O .bss	00000800 OSTaskIdleStk
00407f70 g     F .text	0000002c __isnand
0040aa20 g     F .text	00000044 _exit
00418158 g     F .text	0000016c alt_alarm_start
0040ea4c g     F .text	00000188 OSFlagNameGet
004153ec g     F .text	00000090 OSTimeGet
0040a15c g     F .text	00000110 __muldi3
00405c60 g     F .text	000001a8 __smakebuf_r
0040115c g     F .text	0000008c strlen
00418f18 g     F .text	0000001c OSTaskSwHook
004187d4 g     F .text	00000158 open
0041f96c g     O .bss	00000b40 OSEventTbl
00409ca8 g     F .text	00000064 __gedf2
004204ac g     O .bss	00000510 OSTCBTbl
00412bf0 g     F .text	0000012c OSSemSet
00400e98 g     F .text	0000004c clock
0041850c g     F .text	00000030 alt_icache_flush_all
0041b850 g     O .rwdata	00000004 alt_priority_mask
0041213c g     F .text	00000320 OSSemDel
0041d680 g     O .bss	00000004 OSFlagFreeList
0040ac44 g     F .text	000000c8 alt_ic_irq_enable
0041b86c g     O .rwdata	00000002 OSEventNameSize
004030a0 g     F .text	00000024 __vfprintf_internal
0041d684 g     O .bss	00000001 OSStatRdy
00417230 g     F .text	00000024 altera_avalon_mutex_close
004209bc g     O .bss	00000054 OSTCBPrioTbl
0040b7f0 g     F .text	000000b8 __env_lock
0041b8b2 g     O .rwdata	00000002 OSTaskSwHookEn
00415dc8 g     F .text	00000138 alt_avalon_dma_prepare
00409694 g     F .text	00000060 __subdf3
0041b83c g     O .rwdata	00000008 alt_dma_rxchan_list
00406c6c g     F .text	000000b0 __lo0bits
0041b8dc g     O .rwdata	00000008 alt_alarm_list
0041b87a g     O .rwdata	00000002 OSFlagWidth
004183d0 g     F .text	0000005c _do_ctors
0041d5f8 g     O .bss	00000004 status
0040a7e8 g     F .text	000000cc close
0041d630 g     O .bss	00000004 alt_envsem
0041d688 g     O .bss	00000004 OSIdleCtrRun
0040ce0c g     F .text	00000020 OSVersion
0041b8c4 g     O .rwdata	00000002 OSTmrCfgWheelSize
0040b0a0 g     F .text	00000080 alt_load
00414cfc g     F .text	00000070 OS_TaskStkClr
0040a318 g     F .text	00000224 __pack_d
0041b89e g     O .rwdata	00000002 OSTaskCreateEn
00415d38 g     F .text	00000048 alt_avalon_dma_tx_ioctl
0040d3d8 g     F .text	00000068 OS_EventWaitListInit
00418fa4 g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
004050fc g     F .text	00000004 __sinit_lock_acquire
004069bc g     F .text	00000144 __multadd
004148b8 g     F .text	00000294 OSTaskSuspend
00406994 g     F .text	00000028 _Bfree
00417810 g     F .text	00000134 check_directory_header
0040da9c g     F .text	00000088 OS_TaskIdle
0041b8ca g     O .rwdata	00000002 OSTmrTblSize
00411cf8 g     F .text	00000190 OSQQuery



Disassembly of section .entry:

00400000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  400000:	00810014 	movui	r2,1024
#endif

0:
    initi r2
  400004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  400008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  40000c:	00bffd16 	blt	zero,r2,400004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  400010:	00401034 	movhi	at,64
    ori r1, r1, %lo(_start)
  400014:	08406f14 	ori	at,at,444
    jmp r1
  400018:	0800683a 	jmp	at
  40001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

00400020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  400020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  400024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  400028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  40002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  400030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  400034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  400038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  40003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  400040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  400044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  400048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  40004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  400050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  400054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  400058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  40005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  400060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  400064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  400068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  40006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  400070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  400074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  400078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  40007c:	10000326 	beq	r2,zero,40008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  400080:	20000226 	beq	r4,zero,40008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  400084:	04000ec0 	call	4000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  400088:	00000306 	br	400098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  40008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  400090:	e8bfff17 	ldw	r2,-4(ea)

00400094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  400094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  400098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  40009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  4000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  4000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  4000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  4000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  4000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  4000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  4000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  4000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  4000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  4000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  4000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  4000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  4000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  4000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  4000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  4000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  4000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  4000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  4000e8:	ef80083a 	eret

004000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  4000ec:	defff904 	addi	sp,sp,-28
  4000f0:	dfc00615 	stw	ra,24(sp)
  4000f4:	df000515 	stw	fp,20(sp)
  4000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  4000fc:	040c6200 	call	40c620 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  400100:	0005313a 	rdctl	r2,ipending
  400104:	e0bffe15 	stw	r2,-8(fp)

  return active;
  400108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  40010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  400110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  400114:	00800044 	movi	r2,1
  400118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  40011c:	e0fffb17 	ldw	r3,-20(fp)
  400120:	e0bffc17 	ldw	r2,-16(fp)
  400124:	1884703a 	and	r2,r3,r2
  400128:	10001726 	beq	r2,zero,400188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  40012c:	00c010b4 	movhi	r3,66
  400130:	18f5bb04 	addi	r3,r3,-10516
  400134:	e0bffd17 	ldw	r2,-12(fp)
  400138:	100490fa 	slli	r2,r2,3
  40013c:	1885883a 	add	r2,r3,r2
  400140:	10c00017 	ldw	r3,0(r2)
  400144:	010010b4 	movhi	r4,66
  400148:	2135bb04 	addi	r4,r4,-10516
  40014c:	e0bffd17 	ldw	r2,-12(fp)
  400150:	100490fa 	slli	r2,r2,3
  400154:	2085883a 	add	r2,r4,r2
  400158:	10800104 	addi	r2,r2,4
  40015c:	10800017 	ldw	r2,0(r2)
  400160:	1009883a 	mov	r4,r2
  400164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  400168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  40016c:	0005313a 	rdctl	r2,ipending
  400170:	e0bfff15 	stw	r2,-4(fp)

  return active;
  400174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
  400178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  40017c:	e0bffb17 	ldw	r2,-20(fp)
  400180:	103fe31e 	bne	r2,zero,400110 <alt_irq_handler+0x24>
  400184:	00000706 	br	4001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  400188:	e0bffc17 	ldw	r2,-16(fp)
  40018c:	1085883a 	add	r2,r2,r2
  400190:	e0bffc15 	stw	r2,-16(fp)
      i++;
  400194:	e0bffd17 	ldw	r2,-12(fp)
  400198:	10800044 	addi	r2,r2,1
  40019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  4001a0:	003fde06 	br	40011c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  4001a4:	040c6c80 	call	40c6c8 <OSIntExit>
}
  4001a8:	e037883a 	mov	sp,fp
  4001ac:	dfc00117 	ldw	ra,4(sp)
  4001b0:	df000017 	ldw	fp,0(sp)
  4001b4:	dec00204 	addi	sp,sp,8
  4001b8:	f800283a 	ret

Disassembly of section .text:

004001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  4001bc:	06c010f4 	movhi	sp,67
    ori sp, sp, %lo(__alt_stack_pointer)
  4001c0:	dec40014 	ori	sp,sp,4096
    movhi gp, %hi(_gp)
  4001c4:	068010b4 	movhi	gp,66
    ori gp, gp, %lo(_gp)
  4001c8:	d68e0314 	ori	gp,gp,14348
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  4001cc:	00801074 	movhi	r2,65
    ori r2, r2, %lo(__bss_start)
  4001d0:	10b57814 	ori	r2,r2,54752

    movhi r3, %hi(__bss_end)
  4001d4:	00c010b4 	movhi	r3,66
    ori r3, r3, %lo(__bss_end)
  4001d8:	18c2e814 	ori	r3,r3,2976

    beq r2, r3, 1f
  4001dc:	10c00326 	beq	r2,r3,4001ec <_start+0x30>

0:
    stw zero, (r2)
  4001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  4001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4001e8:	10fffd36 	bltu	r2,r3,4001e0 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  4001ec:	040b0a00 	call	40b0a0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  4001f0:	040b2440 	call	40b244 <alt_main>

004001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  4001f4:	003fff06 	br	4001f4 <alt_after_alt_main>

004001f8 <alt_dma_txchan_send>:
static ALT_INLINE int alt_dma_txchan_send (alt_dma_txchan dma, 
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  4001f8:	defff904 	addi	sp,sp,-28
  4001fc:	dfc00615 	stw	ra,24(sp)
  400200:	df000515 	stw	fp,20(sp)
  400204:	df000504 	addi	fp,sp,20
  400208:	e13ffc15 	stw	r4,-16(fp)
  40020c:	e17ffd15 	stw	r5,-12(fp)
  400210:	e1bffe15 	stw	r6,-8(fp)
  400214:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->dma_send (dma, 
        from, 
        length,
        done, 
        handle) : -ENODEV;
  400218:	e0bffc17 	ldw	r2,-16(fp)
  40021c:	10000a26 	beq	r2,zero,400248 <alt_dma_txchan_send+0x50>
             const void* from, 
             alt_u32 length,
             alt_txchan_done* done, 
             void* handle)
{
  return dma ? dma->dma_send (dma, 
  400220:	e0bffc17 	ldw	r2,-16(fp)
  400224:	10800417 	ldw	r2,16(r2)
        from, 
        length,
        done, 
        handle) : -ENODEV;
  400228:	e0c00217 	ldw	r3,8(fp)
  40022c:	d8c00015 	stw	r3,0(sp)
  400230:	e13ffc17 	ldw	r4,-16(fp)
  400234:	e17ffd17 	ldw	r5,-12(fp)
  400238:	e1bffe17 	ldw	r6,-8(fp)
  40023c:	e1ffff17 	ldw	r7,-4(fp)
  400240:	103ee83a 	callr	r2
  400244:	00000106 	br	40024c <alt_dma_txchan_send+0x54>
  400248:	00bffb44 	movi	r2,-19
}
  40024c:	e037883a 	mov	sp,fp
  400250:	dfc00117 	ldw	ra,4(sp)
  400254:	df000017 	ldw	fp,0(sp)
  400258:	dec00204 	addi	sp,sp,8
  40025c:	f800283a 	ret

00400260 <alt_dma_rxchan_prepare>:
static ALT_INLINE int alt_dma_rxchan_prepare (alt_dma_rxchan   dma, 
                                              void*            data,
                                              alt_u32          len,
                                              alt_rxchan_done* done,  
                                              void*            handle)
{
  400260:	defff904 	addi	sp,sp,-28
  400264:	dfc00615 	stw	ra,24(sp)
  400268:	df000515 	stw	fp,20(sp)
  40026c:	df000504 	addi	fp,sp,20
  400270:	e13ffc15 	stw	r4,-16(fp)
  400274:	e17ffd15 	stw	r5,-12(fp)
  400278:	e1bffe15 	stw	r6,-8(fp)
  40027c:	e1ffff15 	stw	r7,-4(fp)
  return dma ? dma->prepare (dma, data, len, done, handle) : -ENODEV;
  400280:	e0bffc17 	ldw	r2,-16(fp)
  400284:	10000a26 	beq	r2,zero,4002b0 <alt_dma_rxchan_prepare+0x50>
  400288:	e0bffc17 	ldw	r2,-16(fp)
  40028c:	10800417 	ldw	r2,16(r2)
  400290:	e0c00217 	ldw	r3,8(fp)
  400294:	d8c00015 	stw	r3,0(sp)
  400298:	e13ffc17 	ldw	r4,-16(fp)
  40029c:	e17ffd17 	ldw	r5,-12(fp)
  4002a0:	e1bffe17 	ldw	r6,-8(fp)
  4002a4:	e1ffff17 	ldw	r7,-4(fp)
  4002a8:	103ee83a 	callr	r2
  4002ac:	00000106 	br	4002b4 <alt_dma_rxchan_prepare+0x54>
  4002b0:	00bffb44 	movi	r2,-19
}
  4002b4:	e037883a 	mov	sp,fp
  4002b8:	dfc00117 	ldw	ra,4(sp)
  4002bc:	df000017 	ldw	fp,0(sp)
  4002c0:	dec00204 	addi	sp,sp,8
  4002c4:	f800283a 	ret

004002c8 <schedule_task>:
 * shared_mem.h is a data structure which could be extended
 * into a collection of data structures with a header/identifier
 * integer. cpu0 and cpu1 look for the address of the function
 * to fingerprint using the CriticalFunctionPointers data structure
 */
void schedule_task(void* pdata){
  4002c8:	defffc04 	addi	sp,sp,-16
  4002cc:	dfc00315 	stw	ra,12(sp)
  4002d0:	df000215 	stw	fp,8(sp)
  4002d4:	df000204 	addi	fp,sp,8
  4002d8:	e13fff15 	stw	r4,-4(fp)
	//int i;

	printf("Monitor!\n");
  4002dc:	010010b4 	movhi	r4,66
  4002e0:	21257504 	addi	r4,r4,-27180
  4002e4:	04011480 	call	401148 <puts>
	CriticalFunctionPointers* cp =
  4002e8:	00809434 	movhi	r2,592
  4002ec:	e0bffe15 	stw	r2,-8(fp)
						(CriticalFunctionPointers*) SHARED_MEMORY_BASE;
	while(1){
		OSSemPend(start_schedule, 0, &err);
  4002f0:	d0a77717 	ldw	r2,-25124(gp)
  4002f4:	1009883a 	mov	r4,r2
  4002f8:	000b883a 	mov	r5,zero
  4002fc:	d1a77a04 	addi	r6,gp,-25112
  400300:	041245c0 	call	41245c <OSSemPend>
		int i;

		//Acquire the mutex
			altera_avalon_mutex_lock(mutex, 1);
  400304:	d0a77917 	ldw	r2,-25116(gp)
  400308:	1009883a 	mov	r4,r2
  40030c:	01400044 	movi	r5,1
  400310:	04172540 	call	417254 <altera_avalon_mutex_lock>
			{
				//set the function address
				cp->preempt = preempt_task;
  400314:	e0bffe17 	ldw	r2,-8(fp)
  400318:	00c01034 	movhi	r3,64
  40031c:	18c2fa04 	addi	r3,r3,3048
  400320:	10c00215 	stw	r3,8(r2)
				//set the fprint id
				cp->task_id0 = (5);
  400324:	e0bffe17 	ldw	r2,-8(fp)
  400328:	00c00144 	movi	r3,5
  40032c:	10c0030d 	sth	r3,12(r2)
				cp->task_id1 = (5);
  400330:	e0bffe17 	ldw	r2,-8(fp)
  400334:	00c00144 	movi	r3,5
  400338:	10c0038d 	sth	r3,14(r2)
				//Set interrupt signals for the 2 cores
				*isr_1_ptr = 1;
  40033c:	d0a00117 	ldw	r2,-32764(gp)
  400340:	00c00044 	movi	r3,1
  400344:	10c00015 	stw	r3,0(r2)
				*isr_0_ptr = 1;
  400348:	d0a00017 	ldw	r2,-32768(gp)
  40034c:	00c00044 	movi	r3,1
  400350:	10c00015 	stw	r3,0(r2)

			}
			altera_avalon_mutex_unlock(mutex);
  400354:	d0a77917 	ldw	r2,-25116(gp)
  400358:	1009883a 	mov	r4,r2
  40035c:	041733c0 	call	41733c <altera_avalon_mutex_unlock>
			//Wait a minute before trying again
			OSTimeDlyHMSM(0, 1, 0, 0);
  400360:	0009883a 	mov	r4,zero
  400364:	01400044 	movi	r5,1
  400368:	000d883a 	mov	r6,zero
  40036c:	000f883a 	mov	r7,zero
  400370:	0414ee00 	call	414ee0 <OSTimeDlyHMSM>



	}
  400374:	003fde06 	br	4002f0 <schedule_task+0x28>

00400378 <print_status_task>:
 * of the success or failure of each task
 * since they may not arrive with a single
 * interrupt
 */
int endstate[10];
void print_status_task(void* pdata){
  400378:	defffa04 	addi	sp,sp,-24
  40037c:	dfc00515 	stw	ra,20(sp)
  400380:	df000415 	stw	fp,16(sp)
  400384:	df000404 	addi	fp,sp,16
  400388:	e13fff15 	stw	r4,-4(fp)
	while(1){
		OSSemPend(done, 0, &err);
  40038c:	d0a77817 	ldw	r2,-25120(gp)
  400390:	1009883a 	mov	r4,r2
  400394:	000b883a 	mov	r5,zero
  400398:	d1a77a04 	addi	r6,gp,-25112
  40039c:	041245c0 	call	41245c <OSSemPend>
		int i;
		for(i = 2; i < 10; i++){
  4003a0:	00800084 	movi	r2,2
  4003a4:	e0bffc15 	stw	r2,-16(fp)
  4003a8:	00002606 	br	400444 <print_status_task+0xcc>

			int success = endstate[i];
  4003ac:	00c010b4 	movhi	r3,66
  4003b0:	18f5b104 	addi	r3,r3,-10556
  4003b4:	e0bffc17 	ldw	r2,-16(fp)
  4003b8:	1085883a 	add	r2,r2,r2
  4003bc:	1085883a 	add	r2,r2,r2
  4003c0:	1885883a 	add	r2,r3,r2
  4003c4:	10800017 	ldw	r2,0(r2)
  4003c8:	e0bffd15 	stw	r2,-12(fp)

			printf("task %d was ",i);
  4003cc:	010010b4 	movhi	r4,66
  4003d0:	21257804 	addi	r4,r4,-27168
  4003d4:	e17ffc17 	ldw	r5,-16(fp)
  4003d8:	04010880 	call	401088 <printf>
			if(success == 1){
  4003dc:	e0bffd17 	ldw	r2,-12(fp)
  4003e0:	10800058 	cmpnei	r2,r2,1
  4003e4:	1000041e 	bne	r2,zero,4003f8 <print_status_task+0x80>
				printf("successful ");
  4003e8:	010010b4 	movhi	r4,66
  4003ec:	21257c04 	addi	r4,r4,-27152
  4003f0:	04010880 	call	401088 <printf>
  4003f4:	00000a06 	br	400420 <print_status_task+0xa8>
			}
			else if(success == -1){
  4003f8:	e0bffd17 	ldw	r2,-12(fp)
  4003fc:	10bfffd8 	cmpnei	r2,r2,-1
  400400:	1000041e 	bne	r2,zero,400414 <print_status_task+0x9c>
				printf("unsuccessful ");
  400404:	010010b4 	movhi	r4,66
  400408:	21257f04 	addi	r4,r4,-27140
  40040c:	04010880 	call	401088 <printf>
  400410:	00000306 	br	400420 <print_status_task+0xa8>
			}
			else{
				printf("not executed ");
  400414:	010010b4 	movhi	r4,66
  400418:	21258304 	addi	r4,r4,-27124
  40041c:	04010880 	call	401088 <printf>
			}
			unsigned long t = clock();
  400420:	0400e980 	call	400e98 <clock>
  400424:	e0bffe15 	stw	r2,-8(fp)
			printf("at time %lu.\n",t);
  400428:	010010b4 	movhi	r4,66
  40042c:	21258704 	addi	r4,r4,-27108
  400430:	e17ffe17 	ldw	r5,-8(fp)
  400434:	04010880 	call	401088 <printf>
int endstate[10];
void print_status_task(void* pdata){
	while(1){
		OSSemPend(done, 0, &err);
		int i;
		for(i = 2; i < 10; i++){
  400438:	e0bffc17 	ldw	r2,-16(fp)
  40043c:	10800044 	addi	r2,r2,1
  400440:	e0bffc15 	stw	r2,-16(fp)
  400444:	e0bffc17 	ldw	r2,-16(fp)
  400448:	10800290 	cmplti	r2,r2,10
  40044c:	103fd71e 	bne	r2,zero,4003ac <print_status_task+0x34>
			}
			unsigned long t = clock();
			printf("at time %lu.\n",t);
		}

		for(i = 0; i < 10; i++){
  400450:	e03ffc15 	stw	zero,-16(fp)
  400454:	00000a06 	br	400480 <print_status_task+0x108>
			endstate[i] = 0;
  400458:	00c010b4 	movhi	r3,66
  40045c:	18f5b104 	addi	r3,r3,-10556
  400460:	e0bffc17 	ldw	r2,-16(fp)
  400464:	1085883a 	add	r2,r2,r2
  400468:	1085883a 	add	r2,r2,r2
  40046c:	1885883a 	add	r2,r3,r2
  400470:	10000015 	stw	zero,0(r2)
			}
			unsigned long t = clock();
			printf("at time %lu.\n",t);
		}

		for(i = 0; i < 10; i++){
  400474:	e0bffc17 	ldw	r2,-16(fp)
  400478:	10800044 	addi	r2,r2,1
  40047c:	e0bffc15 	stw	r2,-16(fp)
  400480:	e0bffc17 	ldw	r2,-16(fp)
  400484:	10800290 	cmplti	r2,r2,10
  400488:	103ff31e 	bne	r2,zero,400458 <print_status_task+0xe0>
			endstate[i] = 0;
		}

	}
  40048c:	003fbf06 	br	40038c <print_status_task+0x14>

00400490 <print_execution_times>:
/*
 * This prints the execution times for each task as
 * measured by the more precise performance counters
 * local to each core
 */
void print_execution_times(void* pdata){
  400490:	defffb04 	addi	sp,sp,-20
  400494:	dfc00415 	stw	ra,16(sp)
  400498:	df000315 	stw	fp,12(sp)
  40049c:	df000304 	addi	fp,sp,12
  4004a0:	e13fff15 	stw	r4,-4(fp)
	CriticalFunctionPointers* cp =
  4004a4:	00809434 	movhi	r2,592
  4004a8:	e0bffe15 	stw	r2,-8(fp)
							(CriticalFunctionPointers*) SHARED_MEMORY_BASE;
	while(1){
		OSTimeDlyHMSM(0,0,10,0);
  4004ac:	0009883a 	mov	r4,zero
  4004b0:	000b883a 	mov	r5,zero
  4004b4:	01800284 	movi	r6,10
  4004b8:	000f883a 	mov	r7,zero
  4004bc:	0414ee00 	call	414ee0 <OSTimeDlyHMSM>
		int i;
		for(i = 0; i < 8; i++){
  4004c0:	e03ffd15 	stw	zero,-12(fp)
  4004c4:	00001006 	br	400508 <print_execution_times+0x78>

			printf("core %d finished at time %llu\n",i,cp->core_time[i]);
  4004c8:	e0fffe17 	ldw	r3,-8(fp)
  4004cc:	e0bffd17 	ldw	r2,-12(fp)
  4004d0:	10800344 	addi	r2,r2,13
  4004d4:	100490fa 	slli	r2,r2,3
  4004d8:	1889883a 	add	r4,r3,r2
  4004dc:	20800017 	ldw	r2,0(r4)
  4004e0:	20c00117 	ldw	r3,4(r4)
  4004e4:	010010b4 	movhi	r4,66
  4004e8:	21258b04 	addi	r4,r4,-27092
  4004ec:	e17ffd17 	ldw	r5,-12(fp)
  4004f0:	100d883a 	mov	r6,r2
  4004f4:	180f883a 	mov	r7,r3
  4004f8:	04010880 	call	401088 <printf>
	CriticalFunctionPointers* cp =
							(CriticalFunctionPointers*) SHARED_MEMORY_BASE;
	while(1){
		OSTimeDlyHMSM(0,0,10,0);
		int i;
		for(i = 0; i < 8; i++){
  4004fc:	e0bffd17 	ldw	r2,-12(fp)
  400500:	10800044 	addi	r2,r2,1
  400504:	e0bffd15 	stw	r2,-12(fp)
  400508:	e0bffd17 	ldw	r2,-12(fp)
  40050c:	10800210 	cmplti	r2,r2,8
  400510:	103fed1e 	bne	r2,zero,4004c8 <print_execution_times+0x38>

			printf("core %d finished at time %llu\n",i,cp->core_time[i]);
		}
	}
  400514:	003fe506 	br	4004ac <print_execution_times+0x1c>

00400518 <handle_collision_interrupt>:
 * to see which task caused the interrupt.
 * Update the endstate data structure that maintains
 * the history. Then reset the IRQ register
 */
int count = 0;
static void handle_collision_interrupt(void* context) {
  400518:	defff904 	addi	sp,sp,-28
  40051c:	dfc00615 	stw	ra,24(sp)
  400520:	df000515 	stw	fp,20(sp)
  400524:	df000504 	addi	fp,sp,20
  400528:	e13fff15 	stw	r4,-4(fp)
	Fprint_Status status;
	fprint_status(&status);
  40052c:	e0bffc04 	addi	r2,fp,-16
  400530:	1009883a 	mov	r4,r2
  400534:	0400d180 	call	400d18 <fprint_status>

	int i;
	for(i = 0; i < 16; i++){
  400538:	e03ffb15 	stw	zero,-20(fp)
  40053c:	00002506 	br	4005d4 <handle_collision_interrupt+0xbc>
		if((status.successful_reg & (1 << i)) == (1 << i)){
  400540:	e0fffd17 	ldw	r3,-12(fp)
  400544:	01000044 	movi	r4,1
  400548:	e0bffb17 	ldw	r2,-20(fp)
  40054c:	2084983a 	sll	r2,r4,r2
  400550:	1886703a 	and	r3,r3,r2
  400554:	01000044 	movi	r4,1
  400558:	e0bffb17 	ldw	r2,-20(fp)
  40055c:	2084983a 	sll	r2,r4,r2
  400560:	1880081e 	bne	r3,r2,400584 <handle_collision_interrupt+0x6c>
			endstate[i] = 1;
  400564:	00c010b4 	movhi	r3,66
  400568:	18f5b104 	addi	r3,r3,-10556
  40056c:	e0bffb17 	ldw	r2,-20(fp)
  400570:	1085883a 	add	r2,r2,r2
  400574:	1085883a 	add	r2,r2,r2
  400578:	1885883a 	add	r2,r3,r2
  40057c:	00c00044 	movi	r3,1
  400580:	10c00015 	stw	r3,0(r2)
		}
		if((status.failed_reg & (1 << i)) == (1 << i)){
  400584:	e0fffe17 	ldw	r3,-8(fp)
  400588:	01000044 	movi	r4,1
  40058c:	e0bffb17 	ldw	r2,-20(fp)
  400590:	2084983a 	sll	r2,r4,r2
  400594:	1886703a 	and	r3,r3,r2
  400598:	01000044 	movi	r4,1
  40059c:	e0bffb17 	ldw	r2,-20(fp)
  4005a0:	2084983a 	sll	r2,r4,r2
  4005a4:	1880081e 	bne	r3,r2,4005c8 <handle_collision_interrupt+0xb0>
			endstate[i] = -1;
  4005a8:	00c010b4 	movhi	r3,66
  4005ac:	18f5b104 	addi	r3,r3,-10556
  4005b0:	e0bffb17 	ldw	r2,-20(fp)
  4005b4:	1085883a 	add	r2,r2,r2
  4005b8:	1085883a 	add	r2,r2,r2
  4005bc:	1885883a 	add	r2,r3,r2
  4005c0:	00ffffc4 	movi	r3,-1
  4005c4:	10c00015 	stw	r3,0(r2)
static void handle_collision_interrupt(void* context) {
	Fprint_Status status;
	fprint_status(&status);

	int i;
	for(i = 0; i < 16; i++){
  4005c8:	e0bffb17 	ldw	r2,-20(fp)
  4005cc:	10800044 	addi	r2,r2,1
  4005d0:	e0bffb15 	stw	r2,-20(fp)
  4005d4:	e0bffb17 	ldw	r2,-20(fp)
  4005d8:	10800410 	cmplti	r2,r2,16
  4005dc:	103fd81e 	bne	r2,zero,400540 <handle_collision_interrupt+0x28>
		}
		if((status.failed_reg & (1 << i)) == (1 << i)){
			endstate[i] = -1;
		}
	}
	fprint_reset_irq();
  4005e0:	0400cf80 	call	400cf8 <fprint_reset_irq>

	//If the last task is finished (there's only one in this example)
	//start_schedule prevents the schedule from reexecuting before the task
	//is complete. done triggers print_status_task
	if(endstate[5] != 0){
  4005e4:	008010b4 	movhi	r2,66
  4005e8:	10b5b104 	addi	r2,r2,-10556
  4005ec:	10800517 	ldw	r2,20(r2)
  4005f0:	10000726 	beq	r2,zero,400610 <handle_collision_interrupt+0xf8>
		OSSemPost(start_schedule);
  4005f4:	d0a77717 	ldw	r2,-25124(gp)
  4005f8:	1009883a 	mov	r4,r2
  4005fc:	04129180 	call	412918 <OSSemPost>
		OSSemPost(done);
  400600:	d0a77817 	ldw	r2,-25120(gp)
  400604:	1009883a 	mov	r4,r2
  400608:	04129180 	call	412918 <OSSemPost>
		count = 0;
  40060c:	d0277515 	stw	zero,-25132(gp)
	}
}
  400610:	e037883a 	mov	sp,fp
  400614:	dfc00117 	ldw	ra,4(sp)
  400618:	df000017 	ldw	fp,0(sp)
  40061c:	dec00204 	addi	sp,sp,8
  400620:	f800283a 	ret

00400624 <init_collision_isr>:

/*
 * Initialize the comparator interrupt
 */
static void init_collision_isr(void) {
  400624:	defffd04 	addi	sp,sp,-12
  400628:	dfc00215 	stw	ra,8(sp)
  40062c:	df000115 	stw	fp,4(sp)
  400630:	df000104 	addi	fp,sp,4
	alt_ic_isr_register(CFPU_0_CSR_IRQ_INTERRUPT_CONTROLLER_ID,
  400634:	d8000015 	stw	zero,0(sp)
  400638:	0009883a 	mov	r4,zero
  40063c:	014000c4 	movi	r5,3
  400640:	01801034 	movhi	r6,64
  400644:	31814604 	addi	r6,r6,1304
  400648:	000f883a 	mov	r7,zero
  40064c:	040abf40 	call	40abf4 <alt_ic_isr_register>
			CFPU_0_CSR_IRQ, handle_collision_interrupt, (void*) NULL,
			(void*) NULL);
}
  400650:	e037883a 	mov	sp,fp
  400654:	dfc00117 	ldw	ra,4(sp)
  400658:	df000017 	ldw	fp,0(sp)
  40065c:	dec00204 	addi	sp,sp,8
  400660:	f800283a 	ret

00400664 <done_dma>:
 * 	the local copies of this data will be stored
 */
static volatile int rx_done = 0;

static void done_dma (void* handle, void* data)
{
  400664:	defffd04 	addi	sp,sp,-12
  400668:	df000215 	stw	fp,8(sp)
  40066c:	df000204 	addi	fp,sp,8
  400670:	e13ffe15 	stw	r4,-8(fp)
  400674:	e17fff15 	stw	r5,-4(fp)
rx_done++;
  400678:	d0a77617 	ldw	r2,-25128(gp)
  40067c:	10800044 	addi	r2,r2,1
  400680:	d0a77615 	stw	r2,-25128(gp)
}
  400684:	e037883a 	mov	sp,fp
  400688:	df000017 	ldw	fp,0(sp)
  40068c:	dec00104 	addi	sp,sp,4
  400690:	f800283a 	ret

00400694 <dma>:

void dma(void){
  400694:	defff604 	addi	sp,sp,-40
  400698:	dfc00915 	stw	ra,36(sp)
  40069c:	df000815 	stw	fp,32(sp)
  4006a0:	df000804 	addi	fp,sp,32
	int rc;
	alt_dma_txchan txchan[2];
	alt_dma_rxchan rxchan[2];


	void* tx_data = (void*) 0x431000; /* pointer to data to send */
  4006a4:	008010f4 	movhi	r2,67
  4006a8:	10840004 	addi	r2,r2,4096
  4006ac:	e0bff915 	stw	r2,-28(fp)
	void* rx_buffer = (void*) 0x4203000; /* pointer to rx buffer */
  4006b0:	00810834 	movhi	r2,1056
  4006b4:	108c0004 	addi	r2,r2,12288
  4006b8:	e0bffa15 	stw	r2,-24(fp)
	/* Create the transmit channel */

		if ((txchan[0] = alt_dma_txchan_open("/dev/processor0_0_dma_0")) == NULL){
  4006bc:	010010b4 	movhi	r4,66
  4006c0:	21259304 	addi	r4,r4,-27060
  4006c4:	040a9d00 	call	40a9d0 <alt_dma_txchan_open>
  4006c8:	e0bffc15 	stw	r2,-16(fp)
  4006cc:	e0bffc17 	ldw	r2,-16(fp)
  4006d0:	1000051e 	bne	r2,zero,4006e8 <dma+0x54>
			printf ("Failed to open transmit channel\n");
  4006d4:	010010b4 	movhi	r4,66
  4006d8:	21259904 	addi	r4,r4,-27036
  4006dc:	04011480 	call	401148 <puts>
			exit (1);
  4006e0:	01000044 	movi	r4,1
  4006e4:	0400ee40 	call	400ee4 <exit>
		}
		/* Create the receive channel */
		if ((rxchan[0] = alt_dma_rxchan_open("/dev/processor0_0_dma_0")) == NULL){
  4006e8:	010010b4 	movhi	r4,66
  4006ec:	21259304 	addi	r4,r4,-27060
  4006f0:	040a9300 	call	40a930 <alt_dma_rxchan_open>
  4006f4:	e0bffe15 	stw	r2,-8(fp)
  4006f8:	e0bffe17 	ldw	r2,-8(fp)
  4006fc:	1000051e 	bne	r2,zero,400714 <dma+0x80>
			printf ("Failed to open receive channel\n");
  400700:	010010b4 	movhi	r4,66
  400704:	2125a104 	addi	r4,r4,-27004
  400708:	04011480 	call	401148 <puts>
			exit (1);
  40070c:	01000044 	movi	r4,1
  400710:	0400ee40 	call	400ee4 <exit>
		}
		if ((rc = alt_dma_txchan_send (txchan[0],
  400714:	e0bffc17 	ldw	r2,-16(fp)
  400718:	d8000015 	stw	zero,0(sp)
  40071c:	1009883a 	mov	r4,r2
  400720:	e17ff917 	ldw	r5,-28(fp)
  400724:	01840004 	movi	r6,4096
  400728:	000f883a 	mov	r7,zero
  40072c:	04001f80 	call	4001f8 <alt_dma_txchan_send>
  400730:	e0bffb15 	stw	r2,-20(fp)
  400734:	e0bffb17 	ldw	r2,-20(fp)
  400738:	1000060e 	bge	r2,zero,400754 <dma+0xc0>
		tx_data,
		0x1000,
		NULL,
		NULL)) < 0){
			printf ("Failed to post transmit request, reason = %i\n", rc);
  40073c:	010010b4 	movhi	r4,66
  400740:	2125a904 	addi	r4,r4,-26972
  400744:	e17ffb17 	ldw	r5,-20(fp)
  400748:	04010880 	call	401088 <printf>
			exit (1);
  40074c:	01000044 	movi	r4,1
  400750:	0400ee40 	call	400ee4 <exit>
		}
		/* Post the receive request */
		if ((rc = alt_dma_rxchan_prepare (rxchan[0],
  400754:	e0bffe17 	ldw	r2,-8(fp)
  400758:	d8000015 	stw	zero,0(sp)
  40075c:	1009883a 	mov	r4,r2
  400760:	e17ffa17 	ldw	r5,-24(fp)
  400764:	01840004 	movi	r6,4096
  400768:	01c01034 	movhi	r7,64
  40076c:	39c19904 	addi	r7,r7,1636
  400770:	04002600 	call	400260 <alt_dma_rxchan_prepare>
  400774:	e0bffb15 	stw	r2,-20(fp)
  400778:	e0bffb17 	ldw	r2,-20(fp)
  40077c:	1000060e 	bge	r2,zero,400798 <dma+0x104>
		rx_buffer,
		0x1000,
		done_dma,
		NULL)) < 0){
			printf ("Failed to post read request, reason = %i\n", rc);
  400780:	010010b4 	movhi	r4,66
  400784:	2125b504 	addi	r4,r4,-26924
  400788:	e17ffb17 	ldw	r5,-20(fp)
  40078c:	04010880 	call	401088 <printf>
			exit (1);
  400790:	01000044 	movi	r4,1
  400794:	0400ee40 	call	400ee4 <exit>
		}
		/* wait for transfer to complete */

		//printf ("Transfer successful!\n");

		if ((txchan[1] = alt_dma_txchan_open("/dev/processor1_0_dma_0")) == NULL){
  400798:	010010b4 	movhi	r4,66
  40079c:	2125c004 	addi	r4,r4,-26880
  4007a0:	040a9d00 	call	40a9d0 <alt_dma_txchan_open>
  4007a4:	e0bffd15 	stw	r2,-12(fp)
  4007a8:	e0bffd17 	ldw	r2,-12(fp)
  4007ac:	1000051e 	bne	r2,zero,4007c4 <dma+0x130>
			printf ("Failed to open transmit channel\n");
  4007b0:	010010b4 	movhi	r4,66
  4007b4:	21259904 	addi	r4,r4,-27036
  4007b8:	04011480 	call	401148 <puts>
			exit (1);
  4007bc:	01000044 	movi	r4,1
  4007c0:	0400ee40 	call	400ee4 <exit>
		}
		/* Create the receive channel */
		if ((rxchan[1] = alt_dma_rxchan_open("/dev/processor1_0_dma_0")) == NULL){
  4007c4:	010010b4 	movhi	r4,66
  4007c8:	2125c004 	addi	r4,r4,-26880
  4007cc:	040a9300 	call	40a930 <alt_dma_rxchan_open>
  4007d0:	e0bfff15 	stw	r2,-4(fp)
  4007d4:	e0bfff17 	ldw	r2,-4(fp)
  4007d8:	1000051e 	bne	r2,zero,4007f0 <dma+0x15c>
			printf ("Failed to open receive channel\n");
  4007dc:	010010b4 	movhi	r4,66
  4007e0:	2125a104 	addi	r4,r4,-27004
  4007e4:	04011480 	call	401148 <puts>
			exit (1);
  4007e8:	01000044 	movi	r4,1
  4007ec:	0400ee40 	call	400ee4 <exit>
		}
		if ((rc = alt_dma_txchan_send (txchan[1],
  4007f0:	e0bffd17 	ldw	r2,-12(fp)
  4007f4:	d8000015 	stw	zero,0(sp)
  4007f8:	1009883a 	mov	r4,r2
  4007fc:	e17ff917 	ldw	r5,-28(fp)
  400800:	01840004 	movi	r6,4096
  400804:	000f883a 	mov	r7,zero
  400808:	04001f80 	call	4001f8 <alt_dma_txchan_send>
  40080c:	e0bffb15 	stw	r2,-20(fp)
  400810:	e0bffb17 	ldw	r2,-20(fp)
  400814:	1000060e 	bge	r2,zero,400830 <dma+0x19c>
		tx_data,
		0x1000,
		NULL,
		NULL)) < 0){
			printf ("Failed to post transmit request, reason = %i\n", rc);
  400818:	010010b4 	movhi	r4,66
  40081c:	2125a904 	addi	r4,r4,-26972
  400820:	e17ffb17 	ldw	r5,-20(fp)
  400824:	04010880 	call	401088 <printf>
			exit (1);
  400828:	01000044 	movi	r4,1
  40082c:	0400ee40 	call	400ee4 <exit>
		}
		/* Post the receive request */
		if ((rc = alt_dma_rxchan_prepare (rxchan[1],
  400830:	e0bfff17 	ldw	r2,-4(fp)
  400834:	d8000015 	stw	zero,0(sp)
  400838:	1009883a 	mov	r4,r2
  40083c:	e17ffa17 	ldw	r5,-24(fp)
  400840:	01840004 	movi	r6,4096
  400844:	01c01034 	movhi	r7,64
  400848:	39c19904 	addi	r7,r7,1636
  40084c:	04002600 	call	400260 <alt_dma_rxchan_prepare>
  400850:	e0bffb15 	stw	r2,-20(fp)
  400854:	e0bffb17 	ldw	r2,-20(fp)
  400858:	1000060e 	bge	r2,zero,400874 <dma+0x1e0>
		rx_buffer,
		0x1000,
		done_dma,
		NULL)) < 0){
			printf ("Failed to post read request, reason = %i\n", rc);
  40085c:	010010b4 	movhi	r4,66
  400860:	2125b504 	addi	r4,r4,-26924
  400864:	e17ffb17 	ldw	r5,-20(fp)
  400868:	04010880 	call	401088 <printf>
			exit (1);
  40086c:	01000044 	movi	r4,1
  400870:	0400ee40 	call	400ee4 <exit>
		}
		while (rx_done<2);
  400874:	0001883a 	nop
  400878:	d0a77617 	ldw	r2,-25128(gp)
  40087c:	10800090 	cmplti	r2,r2,2
  400880:	103ffd1e 	bne	r2,zero,400878 <dma+0x1e4>
}
  400884:	e037883a 	mov	sp,fp
  400888:	dfc00117 	ldw	ra,4(sp)
  40088c:	df000017 	ldw	fp,0(sp)
  400890:	dec00204 	addi	sp,sp,8
  400894:	f800283a 	ret

00400898 <main>:
int main(void) {
  400898:	deffa504 	addi	sp,sp,-364
  40089c:	dfc05a15 	stw	ra,360(sp)
  4008a0:	df005915 	stw	fp,356(sp)
  4008a4:	df005904 	addi	fp,sp,356

	printf("Hello from Nios II!\n");
  4008a8:	010010b4 	movhi	r4,66
  4008ac:	2125c604 	addi	r4,r4,-26856
  4008b0:	04011480 	call	401148 <puts>
	CriticalFunctionPointers cpg;
	int i,j;
	init_collision_isr();
  4008b4:	04006240 	call	400624 <init_collision_isr>
	CriticalFunctionPointers* cp =
  4008b8:	00809434 	movhi	r2,592
  4008bc:	e0bfb015 	stw	r2,-320(fp)
					(CriticalFunctionPointers*) SHARED_MEMORY_BASE;


	//Get the global data into the scratchpads
	 dma();
  4008c0:	04006940 	call	400694 <dma>

	mutex = altera_avalon_mutex_open(MUTEX_0_NAME);	//Initialize the hardware mutex
  4008c4:	010010b4 	movhi	r4,66
  4008c8:	2125cb04 	addi	r4,r4,-26836
  4008cc:	04171e00 	call	4171e0 <altera_avalon_mutex_open>
  4008d0:	d0a77915 	stw	r2,-25116(gp)
	altera_avalon_mutex_lock(mutex, 1);
  4008d4:	d0a77917 	ldw	r2,-25116(gp)
  4008d8:	1009883a 	mov	r4,r2
  4008dc:	01400044 	movi	r5,1
  4008e0:	04172540 	call	417254 <altera_avalon_mutex_lock>
		{
			//set the initial values for key variables
			cp->critical = critical_task;
  4008e4:	e0bfb017 	ldw	r2,-320(fp)
  4008e8:	00c01034 	movhi	r3,64
  4008ec:	18c2f004 	addi	r3,r3,3008
  4008f0:	10c00115 	stw	r3,4(r2)
			cp->preempt = preempt_task;
  4008f4:	e0bfb017 	ldw	r2,-320(fp)
  4008f8:	00c01034 	movhi	r3,64
  4008fc:	18c2fa04 	addi	r3,r3,3048
  400900:	10c00215 	stw	r3,8(r2)
			//Set the global pointer
			cp->gpm = get_gp();
  400904:	0400b800 	call	400b80 <get_gp>
  400908:	e0ffb017 	ldw	r3,-320(fp)
  40090c:	18800015 	stw	r2,0(r3)
			//Set init complete.
			//This make sure that none of the other cores proceed
			//before this is asserted.
			//All code that must execute or variables that must be set
			//before other cores start up should be done before this point
			cp->init_complete = 1;
  400910:	e0bfb017 	ldw	r2,-320(fp)
  400914:	00c00044 	movi	r3,1
  400918:	10c00715 	stw	r3,28(r2)
		}
	altera_avalon_mutex_unlock(mutex);
  40091c:	d0a77917 	ldw	r2,-25116(gp)
  400920:	1009883a 	mov	r4,r2
  400924:	041733c0 	call	41733c <altera_avalon_mutex_unlock>


	done = OSSemCreate(0);
  400928:	0009883a 	mov	r4,zero
  40092c:	04120100 	call	412010 <OSSemCreate>
  400930:	d0a77815 	stw	r2,-25120(gp)
	start_schedule = OSSemCreate(1);
  400934:	01000044 	movi	r4,1
  400938:	04120100 	call	412010 <OSSemCreate>
  40093c:	d0a77715 	stw	r2,-25124(gp)

	//This is how you can set the start and end pointers
	Directory_Init_Struct d;
	for(i = 0; i < 2; i++){
  400940:	e03fac15 	stw	zero,-336(fp)
  400944:	00002706 	br	4009e4 <main+0x14c>
		d.core_id = i;
  400948:	e0bfac17 	ldw	r2,-336(fp)
  40094c:	e0bfde15 	stw	r2,-136(fp)
		d.key = 0;
  400950:	e03fdd15 	stw	zero,-140(fp)
		d.start_ptr = 5;
  400954:	00800144 	movi	r2,5
  400958:	e0bfdb15 	stw	r2,-148(fp)
		d.end_ptr = 0xff;
  40095c:	00803fc4 	movi	r2,255
  400960:	e0bfdc15 	stw	r2,-144(fp)
		set_task_directory(&d);
  400964:	e0bfdb04 	addi	r2,fp,-148
  400968:	1009883a 	mov	r4,r2
  40096c:	0400c100 	call	400c10 <set_task_directory>

		for(j = 2; j < 10; j++){
  400970:	00800084 	movi	r2,2
  400974:	e0bfad15 	stw	r2,-332(fp)
  400978:	00001406 	br	4009cc <main+0x134>
			d.key = j;
  40097c:	e0bfad17 	ldw	r2,-332(fp)
  400980:	e0bfdd15 	stw	r2,-140(fp)
			d.start_ptr = 50*(j-2);
  400984:	e13fad17 	ldw	r4,-332(fp)
  400988:	01400c84 	movi	r5,50
  40098c:	0400e700 	call	400e70 <__mulsi3>
  400990:	10bfe704 	addi	r2,r2,-100
  400994:	e0bfdb15 	stw	r2,-148(fp)
			d.end_ptr = 50*(j-1)-1;
  400998:	e0bfad17 	ldw	r2,-332(fp)
  40099c:	10bfffc4 	addi	r2,r2,-1
  4009a0:	1009883a 	mov	r4,r2
  4009a4:	01400c84 	movi	r5,50
  4009a8:	0400e700 	call	400e70 <__mulsi3>
  4009ac:	10bfffc4 	addi	r2,r2,-1
  4009b0:	e0bfdc15 	stw	r2,-144(fp)
			set_task_directory(&d);
  4009b4:	e0bfdb04 	addi	r2,fp,-148
  4009b8:	1009883a 	mov	r4,r2
  4009bc:	0400c100 	call	400c10 <set_task_directory>
		d.key = 0;
		d.start_ptr = 5;
		d.end_ptr = 0xff;
		set_task_directory(&d);

		for(j = 2; j < 10; j++){
  4009c0:	e0bfad17 	ldw	r2,-332(fp)
  4009c4:	10800044 	addi	r2,r2,1
  4009c8:	e0bfad15 	stw	r2,-332(fp)
  4009cc:	e0bfad17 	ldw	r2,-332(fp)
  4009d0:	10800290 	cmplti	r2,r2,10
  4009d4:	103fe91e 	bne	r2,zero,40097c <main+0xe4>
	done = OSSemCreate(0);
	start_schedule = OSSemCreate(1);

	//This is how you can set the start and end pointers
	Directory_Init_Struct d;
	for(i = 0; i < 2; i++){
  4009d8:	e0bfac17 	ldw	r2,-336(fp)
  4009dc:	10800044 	addi	r2,r2,1
  4009e0:	e0bfac15 	stw	r2,-336(fp)
  4009e4:	e0bfac17 	ldw	r2,-336(fp)
  4009e8:	10800090 	cmplti	r2,r2,2
  4009ec:	103fd61e 	bne	r2,zero,400948 <main+0xb0>
	 * 4 5
	 * 6 7
	 * ...
	 */
	//Default table
	for(i = 0; i < CA_TABLE_MAX_REDUNDANCY; i++){
  4009f0:	e03fac15 	stw	zero,-336(fp)
  4009f4:	00001606 	br	400a50 <main+0x1b8>
		for(j = 0; j < CA_TABLE_NUM_TASKS; j++){
  4009f8:	e03fad15 	stw	zero,-332(fp)
  4009fc:	00000e06 	br	400a38 <main+0x1a0>
			ca.table[i][j] = i;
  400a00:	e0ffac17 	ldw	r3,-336(fp)
  400a04:	e0bfac17 	ldw	r2,-336(fp)
  400a08:	1008913a 	slli	r4,r2,4
  400a0c:	e0bfad17 	ldw	r2,-332(fp)
  400a10:	2085883a 	add	r2,r4,r2
  400a14:	1085883a 	add	r2,r2,r2
  400a18:	1085883a 	add	r2,r2,r2
  400a1c:	e13fac04 	addi	r4,fp,-336
  400a20:	2085883a 	add	r2,r4,r2
  400a24:	10803304 	addi	r2,r2,204
  400a28:	10c00015 	stw	r3,0(r2)
	 * 6 7
	 * ...
	 */
	//Default table
	for(i = 0; i < CA_TABLE_MAX_REDUNDANCY; i++){
		for(j = 0; j < CA_TABLE_NUM_TASKS; j++){
  400a2c:	e0bfad17 	ldw	r2,-332(fp)
  400a30:	10800044 	addi	r2,r2,1
  400a34:	e0bfad15 	stw	r2,-332(fp)
  400a38:	e0bfad17 	ldw	r2,-332(fp)
  400a3c:	10800410 	cmplti	r2,r2,16
  400a40:	103fef1e 	bne	r2,zero,400a00 <main+0x168>
	 * 4 5
	 * 6 7
	 * ...
	 */
	//Default table
	for(i = 0; i < CA_TABLE_MAX_REDUNDANCY; i++){
  400a44:	e0bfac17 	ldw	r2,-336(fp)
  400a48:	10800044 	addi	r2,r2,1
  400a4c:	e0bfac15 	stw	r2,-336(fp)
  400a50:	e0bfac17 	ldw	r2,-336(fp)
  400a54:	10800090 	cmplti	r2,r2,2
  400a58:	103fe71e 	bne	r2,zero,4009f8 <main+0x160>
		for(j = 0; j < CA_TABLE_NUM_TASKS; j++){
			ca.table[i][j] = i;
		}
	}
	set_core_assignment_table(&ca);
  400a5c:	e0bfdf04 	addi	r2,fp,-132
  400a60:	1009883a 	mov	r4,r2
  400a64:	0400ddc0 	call	400ddc <set_core_assignment_table>


	//Now we make sure both have finished their initialization procedures before
	//moving forward
	//Wait for both cores to be ready
	int p0 = 0, p1 = 0;
  400a68:	e03fae15 	stw	zero,-328(fp)
  400a6c:	e03faf15 	stw	zero,-324(fp)
	while((p0 != 1) || (p1 != 1)){
  400a70:	00001006 	br	400ab4 <main+0x21c>
		altera_avalon_mutex_lock(mutex, 1);
  400a74:	d0a77917 	ldw	r2,-25116(gp)
  400a78:	1009883a 	mov	r4,r2
  400a7c:	01400044 	movi	r5,1
  400a80:	04172540 	call	417254 <altera_avalon_mutex_lock>
		{
			memcpy(&cpg,(void*)SHARED_MEMORY_BASE,sizeof(CriticalFunctionPointers));
  400a84:	e0bfb104 	addi	r2,fp,-316
  400a88:	1009883a 	mov	r4,r2
  400a8c:	01409434 	movhi	r5,592
  400a90:	01802a04 	movi	r6,168
  400a94:	0400f1c0 	call	400f1c <memcpy>
			p0 = cpg.core0_ready;
  400a98:	e0bfc317 	ldw	r2,-244(fp)
  400a9c:	e0bfae15 	stw	r2,-328(fp)
			p1 = cpg.core1_ready;
  400aa0:	e0bfc417 	ldw	r2,-240(fp)
  400aa4:	e0bfaf15 	stw	r2,-324(fp)
		}
		altera_avalon_mutex_unlock(mutex);
  400aa8:	d0a77917 	ldw	r2,-25116(gp)
  400aac:	1009883a 	mov	r4,r2
  400ab0:	041733c0 	call	41733c <altera_avalon_mutex_unlock>

	//Now we make sure both have finished their initialization procedures before
	//moving forward
	//Wait for both cores to be ready
	int p0 = 0, p1 = 0;
	while((p0 != 1) || (p1 != 1)){
  400ab4:	e0bfae17 	ldw	r2,-328(fp)
  400ab8:	10800058 	cmpnei	r2,r2,1
  400abc:	103fed1e 	bne	r2,zero,400a74 <main+0x1dc>
  400ac0:	e0bfaf17 	ldw	r2,-324(fp)
  400ac4:	10800058 	cmpnei	r2,r2,1
  400ac8:	103fea1e 	bne	r2,zero,400a74 <main+0x1dc>
		}
		altera_avalon_mutex_unlock(mutex);
	}

	//Start up the tasks and OS
	int arg_5 = CRITICAL_TASK_PRIORITY;
  400acc:	00800144 	movi	r2,5
  400ad0:	e0bfff15 	stw	r2,-4(fp)
	OSTaskCreateExt(schedule_task, &arg_5, &schedule_task_stk[TASK_STACKSIZE - 1],
  400ad4:	e0bfff04 	addi	r2,fp,-4
  400ad8:	00c00144 	movi	r3,5
  400adc:	d8c00015 	stw	r3,0(sp)
  400ae0:	00c20834 	movhi	r3,2080
  400ae4:	18c00004 	addi	r3,r3,0
  400ae8:	d8c00115 	stw	r3,4(sp)
  400aec:	00c0c004 	movi	r3,768
  400af0:	d8c00215 	stw	r3,8(sp)
  400af4:	d8000315 	stw	zero,12(sp)
  400af8:	00c000c4 	movi	r3,3
  400afc:	d8c00415 	stw	r3,16(sp)
  400b00:	01001034 	movhi	r4,64
  400b04:	2100b204 	addi	r4,r4,712
  400b08:	100b883a 	mov	r5,r2
  400b0c:	01820834 	movhi	r6,2080
  400b10:	3182ff04 	addi	r6,r6,3068
  400b14:	01c00144 	movi	r7,5
  400b18:	04135600 	call	413560 <OSTaskCreateExt>
			SCHEDULE_TASK_PRIORITY, SCHEDULE_TASK_PRIORITY,
			schedule_task_stk, TASK_STACKSIZE, NULL,OS_TASK_OPT_STK_CHK + OS_TASK_OPT_STK_CLR);
	OSTaskCreateExt(print_status_task, &arg_5, &print_status_stk[TASK_STACKSIZE - 1],
  400b1c:	e0bfff04 	addi	r2,fp,-4
  400b20:	00c00104 	movi	r3,4
  400b24:	d8c00015 	stw	r3,0(sp)
  400b28:	00c20834 	movhi	r3,2080
  400b2c:	18c30004 	addi	r3,r3,3072
  400b30:	d8c00115 	stw	r3,4(sp)
  400b34:	00c0c004 	movi	r3,768
  400b38:	d8c00215 	stw	r3,8(sp)
  400b3c:	d8000315 	stw	zero,12(sp)
  400b40:	00c000c4 	movi	r3,3
  400b44:	d8c00415 	stw	r3,16(sp)
  400b48:	01001034 	movhi	r4,64
  400b4c:	2100de04 	addi	r4,r4,888
  400b50:	100b883a 	mov	r5,r2
  400b54:	01820834 	movhi	r6,2080
  400b58:	3185ff04 	addi	r6,r6,6140
  400b5c:	01c00104 	movi	r7,4
  400b60:	04135600 	call	413560 <OSTaskCreateExt>
//				PRINT_EXECUTION_TIMES_PRIORITY, PRINT_EXECUTION_TIMES_PRIORITY,
//				print_execution_times_stk, TASK_STACKSIZE, NULL,OS_TASK_OPT_STK_CHK + OS_TASK_OPT_STK_CLR);


	//Start operating system
	OSStart();
  400b64:	040ca240 	call	40ca24 <OSStart>

	return 0;
  400b68:	0005883a 	mov	r2,zero
}
  400b6c:	e037883a 	mov	sp,fp
  400b70:	dfc00117 	ldw	ra,4(sp)
  400b74:	df000017 	ldw	fp,0(sp)
  400b78:	dec00204 	addi	sp,sp,8
  400b7c:	f800283a 	ret

00400b80 <get_gp>:
	.text
	.globl get_gp

get_gp:
    	movhi r2, %hi(_gp)
  400b80:	008010b4 	movhi	r2,66
    	ori r2, r2, %lo(_gp)
  400b84:	108e0314 	ori	r2,r2,14348
		ret
  400b88:	f800283a 	ret

00400b8c <set_gp>:
	.globl set_gp
set_gp:
	   	movhi r2,  0x0300
  400b8c:	0080c034 	movhi	r2,768
	   	ldw gp, 0(r2)
  400b90:	16800017 	ldw	gp,0(r2)
		ret
  400b94:	f800283a 	ret

00400b98 <restore_gp>:
	.globl restore_gp
restore_gp:
		movhi gp, %hi(_gp)
  400b98:	068010b4 	movhi	gp,66
		ori gp, gp, %lo(_gp)
  400b9c:	d68e0314 	ori	gp,gp,14348
		ret
  400ba0:	f800283a 	ret

00400ba4 <write_led>:
#include "FuelSensor.h"
#include "TractionControl.h"
#include "TransmissionControl.h"
#include "rtwtypes.h"                  /* MathWorks ty*/

void write_led(int count) {
  400ba4:	deffff04 	addi	sp,sp,-4
  400ba8:	d9000015 	stw	r4,0(sp)

	IOWR_ALTERA_AVALON_PIO_DATA(0x10, count);
  400bac:	00800404 	movi	r2,16
  400bb0:	d8c00017 	ldw	r3,0(sp)
  400bb4:	10c00035 	stwio	r3,0(r2)
}
  400bb8:	dec00104 	addi	sp,sp,4
  400bbc:	f800283a 	ret

00400bc0 <critical_task>:

struct myStringStruct {
  char qstring[15];
};

void critical_task(int priority) {
  400bc0:	defffe04 	addi	sp,sp,-8
  400bc4:	dfc00115 	stw	ra,4(sp)
  400bc8:	d9000015 	stw	r4,0(sp)

	  //
	  /* should get 3 solutions: 2, 6 & 2.5   */

		enable_fprint_task(priority);
  400bcc:	d9000017 	ldw	r4,0(sp)
  400bd0:	0400ca80 	call	400ca8 <enable_fprint_task>

		disable_fprint_task(priority);
  400bd4:	d9000017 	ldw	r4,0(sp)
  400bd8:	0400cd40 	call	400cd4 <disable_fprint_task>

}
  400bdc:	dfc00117 	ldw	ra,4(sp)
  400be0:	dec00204 	addi	sp,sp,8
  400be4:	f800283a 	ret

00400be8 <preempt_task>:

//int i __attribute__ ((section (".global_data")));
void preempt_task(int priority){
  400be8:	defffe04 	addi	sp,sp,-8
  400bec:	dfc00115 	stw	ra,4(sp)
  400bf0:	d9000015 	stw	r4,0(sp)

	enable_fprint_task(priority);
  400bf4:	d9000017 	ldw	r4,0(sp)
  400bf8:	0400ca80 	call	400ca8 <enable_fprint_task>


	disable_fprint_task(priority);
  400bfc:	d9000017 	ldw	r4,0(sp)
  400c00:	0400cd40 	call	400cd4 <disable_fprint_task>
}
  400c04:	dfc00117 	ldw	ra,4(sp)
  400c08:	dec00204 	addi	sp,sp,8
  400c0c:	f800283a 	ret

00400c10 <set_task_directory>:
//*********************************

#define COMPARATOR_BASE_ADDRESS CFPU_0_CSR_BASE
#define FPRINT_BASE_ADDRESS		0x8100000

void set_task_directory(Directory_Init_Struct* d){
  400c10:	defffd04 	addi	sp,sp,-12
  400c14:	d9000215 	stw	r4,8(sp)

	//Place the start pointer for the given task
	uint32_t* start = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
			+ CRC_DIRECTORY_START_BASE) + d->key + (d->core_id << 6);
  400c18:	d8800217 	ldw	r2,8(sp)
  400c1c:	10c00217 	ldw	r3,8(r2)
  400c20:	d8800217 	ldw	r2,8(sp)
  400c24:	10800317 	ldw	r2,12(r2)
  400c28:	100491ba 	slli	r2,r2,6
  400c2c:	1885883a 	add	r2,r3,r2
  400c30:	1085883a 	add	r2,r2,r2
  400c34:	1085883a 	add	r2,r2,r2
  400c38:	1007883a 	mov	r3,r2
#define FPRINT_BASE_ADDRESS		0x8100000

void set_task_directory(Directory_Init_Struct* d){

	//Place the start pointer for the given task
	uint32_t* start = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
  400c3c:	00809034 	movhi	r2,576
  400c40:	10801004 	addi	r2,r2,64
  400c44:	1885883a 	add	r2,r3,r2
  400c48:	d8800015 	stw	r2,0(sp)
			+ CRC_DIRECTORY_START_BASE) + d->key + (d->core_id << 6);
	*start = d->start_ptr;
  400c4c:	d8800217 	ldw	r2,8(sp)
  400c50:	10c00017 	ldw	r3,0(r2)
  400c54:	d8800017 	ldw	r2,0(sp)
  400c58:	10c00015 	stw	r3,0(r2)
	//Place the end pointer for the given task
	uint32_t* end   = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
			+ CRC_DIRECTORY_END_BASE) + d->key + (d->core_id << 6);
  400c5c:	d8800217 	ldw	r2,8(sp)
  400c60:	10c00217 	ldw	r3,8(r2)
  400c64:	d8800217 	ldw	r2,8(sp)
  400c68:	10800317 	ldw	r2,12(r2)
  400c6c:	100491ba 	slli	r2,r2,6
  400c70:	1885883a 	add	r2,r3,r2
  400c74:	1085883a 	add	r2,r2,r2
  400c78:	1085883a 	add	r2,r2,r2
  400c7c:	1007883a 	mov	r3,r2
	//Place the start pointer for the given task
	uint32_t* start = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
			+ CRC_DIRECTORY_START_BASE) + d->key + (d->core_id << 6);
	*start = d->start_ptr;
	//Place the end pointer for the given task
	uint32_t* end   = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
  400c80:	00809034 	movhi	r2,576
  400c84:	10802004 	addi	r2,r2,128
  400c88:	1885883a 	add	r2,r3,r2
  400c8c:	d8800115 	stw	r2,4(sp)
			+ CRC_DIRECTORY_END_BASE) + d->key + (d->core_id << 6);
	*end = d->end_ptr;
  400c90:	d8800217 	ldw	r2,8(sp)
  400c94:	10c00117 	ldw	r3,4(r2)
  400c98:	d8800117 	ldw	r2,4(sp)
  400c9c:	10c00015 	stw	r3,0(r2)

}
  400ca0:	dec00304 	addi	sp,sp,12
  400ca4:	f800283a 	ret

00400ca8 <enable_fprint_task>:


void enable_fprint_task(int task){
  400ca8:	defffe04 	addi	sp,sp,-8
  400cac:	d9000115 	stw	r4,4(sp)
	//When enabling, the current state register
	//takes the key with a 1 in the MSB.
	uint32_t* fprint_currentstate = (uint32_t*)(FPRINT_BASE_ADDRESS \
  400cb0:	00820434 	movhi	r2,2064
  400cb4:	d8800015 	stw	r2,0(sp)
											+ FPRINT_SPR_CURRENTSTATE);
	*fprint_currentstate = 0x10 | task;
  400cb8:	d8800117 	ldw	r2,4(sp)
  400cbc:	10800414 	ori	r2,r2,16
  400cc0:	1007883a 	mov	r3,r2
  400cc4:	d8800017 	ldw	r2,0(sp)
  400cc8:	10c00015 	stw	r3,0(r2)

}
  400ccc:	dec00204 	addi	sp,sp,8
  400cd0:	f800283a 	ret

00400cd4 <disable_fprint_task>:
void disable_fprint_task(int task){
  400cd4:	defffe04 	addi	sp,sp,-8
  400cd8:	d9000115 	stw	r4,4(sp)

	//When a task is checked in, the task number
	//must be rewritten to the current state register
	//with the MSB set to 0.
	uint32_t* fprint_currentstate = (uint32_t*)(FPRINT_BASE_ADDRESS \
  400cdc:	00820434 	movhi	r2,2064
  400ce0:	d8800015 	stw	r2,0(sp)
											+ FPRINT_SPR_CURRENTSTATE);
	*fprint_currentstate = task;
  400ce4:	d8c00117 	ldw	r3,4(sp)
  400ce8:	d8800017 	ldw	r2,0(sp)
  400cec:	10c00015 	stw	r3,0(r2)

}
  400cf0:	dec00204 	addi	sp,sp,8
  400cf4:	f800283a 	ret

00400cf8 <fprint_reset_irq>:
void fprint_reset_irq(void){
  400cf8:	deffff04 	addi	sp,sp,-4
	//In the case of a collision
	//Reset the exception register in the fingerprint unit.
	uint32_t* fprint_collision = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
  400cfc:	00809034 	movhi	r2,576
  400d00:	10803004 	addi	r2,r2,192
  400d04:	d8800015 	stw	r2,0(sp)
											+ COMPARATOR_EXCEPTION_OFFSET);
	*fprint_collision = 0;
  400d08:	d8800017 	ldw	r2,0(sp)
  400d0c:	10000015 	stw	zero,0(r2)
}
  400d10:	dec00104 	addi	sp,sp,4
  400d14:	f800283a 	ret

00400d18 <fprint_status>:

int fprint_status(Fprint_Status* fps){
  400d18:	defffe04 	addi	sp,sp,-8
  400d1c:	d9000115 	stw	r4,4(sp)
		Fprint_Status* f = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
  400d20:	00809034 	movhi	r2,576
  400d24:	10803004 	addi	r2,r2,192
  400d28:	d8800015 	stw	r2,0(sp)
												+ COMPARATOR_EXCEPTION_OFFSET);
		fps->status_reg = f->status_reg;
  400d2c:	d8800017 	ldw	r2,0(sp)
  400d30:	10c00017 	ldw	r3,0(r2)
  400d34:	d8800117 	ldw	r2,4(sp)
  400d38:	10c00015 	stw	r3,0(r2)
		fps->successful_reg = f->successful_reg;
  400d3c:	d8800017 	ldw	r2,0(sp)
  400d40:	10c00117 	ldw	r3,4(r2)
  400d44:	d8800117 	ldw	r2,4(sp)
  400d48:	10c00115 	stw	r3,4(r2)
		fps->failed_reg = f->failed_reg;
  400d4c:	d8800017 	ldw	r2,0(sp)
  400d50:	10c00217 	ldw	r3,8(r2)
  400d54:	d8800117 	ldw	r2,4(sp)
  400d58:	10c00215 	stw	r3,8(r2)
		return 0;
  400d5c:	0005883a 	mov	r2,zero

}
  400d60:	dec00204 	addi	sp,sp,8
  400d64:	f800283a 	ret

00400d68 <fprint_set_block_size>:
//	int x = *fprint_collision;
//	return x;
//
//}

void fprint_set_block_size(int size){
  400d68:	defffe04 	addi	sp,sp,-8
  400d6c:	d9000115 	stw	r4,4(sp)
	uint32_t* fprint_blocksize_reg = (uint32_t*)(FPRINT_BASE_ADDRESS \
  400d70:	00820434 	movhi	r2,2064
  400d74:	10800404 	addi	r2,r2,16
  400d78:	d8800015 	stw	r2,0(sp)
												+ 0x10);

	*fprint_blocksize_reg = size;
  400d7c:	d8c00117 	ldw	r3,4(sp)
  400d80:	d8800017 	ldw	r2,0(sp)
  400d84:	10c00015 	stw	r3,0(r2)

}
  400d88:	dec00204 	addi	sp,sp,8
  400d8c:	f800283a 	ret

00400d90 <set_core_assignment>:

void set_core_assignment(int table_column, int core_id, int task_id){
  400d90:	defffc04 	addi	sp,sp,-16
  400d94:	d9000115 	stw	r4,4(sp)
  400d98:	d9400215 	stw	r5,8(sp)
  400d9c:	d9800315 	stw	r6,12(sp)
	uint32_t* fprint_core_entry = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
													+ (table_column << 8) + COMPARATOR_CORE_ASSIGNMENT_OFFSET);
  400da0:	d8800117 	ldw	r2,4(sp)
  400da4:	1006923a 	slli	r3,r2,8
  400da8:	00809034 	movhi	r2,576
  400dac:	10803404 	addi	r2,r2,208
  400db0:	1885883a 	add	r2,r3,r2
	*fprint_blocksize_reg = size;

}

void set_core_assignment(int table_column, int core_id, int task_id){
	uint32_t* fprint_core_entry = (uint32_t*)(COMPARATOR_BASE_ADDRESS \
  400db4:	d8800015 	stw	r2,0(sp)
													+ (table_column << 8) + COMPARATOR_CORE_ASSIGNMENT_OFFSET);

    *fprint_core_entry = (task_id << 4) + core_id;
  400db8:	d8800317 	ldw	r2,12(sp)
  400dbc:	1006913a 	slli	r3,r2,4
  400dc0:	d8800217 	ldw	r2,8(sp)
  400dc4:	1885883a 	add	r2,r3,r2
  400dc8:	1007883a 	mov	r3,r2
  400dcc:	d8800017 	ldw	r2,0(sp)
  400dd0:	10c00015 	stw	r3,0(r2)
}
  400dd4:	dec00404 	addi	sp,sp,16
  400dd8:	f800283a 	ret

00400ddc <set_core_assignment_table>:

void set_core_assignment_table(Core_Assignment_Table* ca){
  400ddc:	defffb04 	addi	sp,sp,-20
  400de0:	dfc00415 	stw	ra,16(sp)
  400de4:	d9000315 	stw	r4,12(sp)

	int i,j;
	for(i = 0; i < CA_TABLE_MAX_REDUNDANCY; i++){
  400de8:	d8000015 	stw	zero,0(sp)
  400dec:	00001a06 	br	400e58 <set_core_assignment_table+0x7c>
		for(j = 0; j < CA_TABLE_NUM_TASKS; j++){
  400df0:	d8000115 	stw	zero,4(sp)
  400df4:	00001206 	br	400e40 <set_core_assignment_table+0x64>
			uint32_t a = ca->table[i][j];
  400df8:	d8c00317 	ldw	r3,12(sp)
  400dfc:	d8800017 	ldw	r2,0(sp)
  400e00:	1008913a 	slli	r4,r2,4
  400e04:	d8800117 	ldw	r2,4(sp)
  400e08:	2085883a 	add	r2,r4,r2
  400e0c:	1085883a 	add	r2,r2,r2
  400e10:	1085883a 	add	r2,r2,r2
  400e14:	1885883a 	add	r2,r3,r2
  400e18:	10800017 	ldw	r2,0(r2)
  400e1c:	d8800215 	stw	r2,8(sp)
			set_core_assignment(i,a,j);
  400e20:	d8800217 	ldw	r2,8(sp)
  400e24:	d9000017 	ldw	r4,0(sp)
  400e28:	100b883a 	mov	r5,r2
  400e2c:	d9800117 	ldw	r6,4(sp)
  400e30:	0400d900 	call	400d90 <set_core_assignment>

void set_core_assignment_table(Core_Assignment_Table* ca){

	int i,j;
	for(i = 0; i < CA_TABLE_MAX_REDUNDANCY; i++){
		for(j = 0; j < CA_TABLE_NUM_TASKS; j++){
  400e34:	d8800117 	ldw	r2,4(sp)
  400e38:	10800044 	addi	r2,r2,1
  400e3c:	d8800115 	stw	r2,4(sp)
  400e40:	d8800117 	ldw	r2,4(sp)
  400e44:	10800410 	cmplti	r2,r2,16
  400e48:	103feb1e 	bne	r2,zero,400df8 <set_core_assignment_table+0x1c>
}

void set_core_assignment_table(Core_Assignment_Table* ca){

	int i,j;
	for(i = 0; i < CA_TABLE_MAX_REDUNDANCY; i++){
  400e4c:	d8800017 	ldw	r2,0(sp)
  400e50:	10800044 	addi	r2,r2,1
  400e54:	d8800015 	stw	r2,0(sp)
  400e58:	d8800017 	ldw	r2,0(sp)
  400e5c:	10800090 	cmplti	r2,r2,2
  400e60:	103fe31e 	bne	r2,zero,400df0 <set_core_assignment_table+0x14>
		for(j = 0; j < CA_TABLE_NUM_TASKS; j++){
			uint32_t a = ca->table[i][j];
			set_core_assignment(i,a,j);
		}
	}
}
  400e64:	dfc00417 	ldw	ra,16(sp)
  400e68:	dec00504 	addi	sp,sp,20
  400e6c:	f800283a 	ret

00400e70 <__mulsi3>:
  400e70:	0005883a 	mov	r2,zero
  400e74:	20000726 	beq	r4,zero,400e94 <__mulsi3+0x24>
  400e78:	20c0004c 	andi	r3,r4,1
  400e7c:	2008d07a 	srli	r4,r4,1
  400e80:	18000126 	beq	r3,zero,400e88 <__mulsi3+0x18>
  400e84:	1145883a 	add	r2,r2,r5
  400e88:	294b883a 	add	r5,r5,r5
  400e8c:	203ffa1e 	bne	r4,zero,400e78 <__mulsi3+0x8>
  400e90:	f800283a 	ret
  400e94:	f800283a 	ret

00400e98 <clock>:
  400e98:	008010b4 	movhi	r2,66
  400e9c:	10ae0604 	addi	r2,r2,-18408
  400ea0:	11000017 	ldw	r4,0(r2)
  400ea4:	defffb04 	addi	sp,sp,-20
  400ea8:	d80b883a 	mov	r5,sp
  400eac:	dfc00415 	stw	ra,16(sp)
  400eb0:	04011e80 	call	4011e8 <_times_r>
  400eb4:	00ffffc4 	movi	r3,-1
  400eb8:	10c00726 	beq	r2,r3,400ed8 <clock+0x40>
  400ebc:	d8c00117 	ldw	r3,4(sp)
  400ec0:	d8800017 	ldw	r2,0(sp)
  400ec4:	1885883a 	add	r2,r3,r2
  400ec8:	d8c00217 	ldw	r3,8(sp)
  400ecc:	10c5883a 	add	r2,r2,r3
  400ed0:	d8c00317 	ldw	r3,12(sp)
  400ed4:	10c5883a 	add	r2,r2,r3
  400ed8:	dfc00417 	ldw	ra,16(sp)
  400edc:	dec00504 	addi	sp,sp,20
  400ee0:	f800283a 	ret

00400ee4 <exit>:
  400ee4:	defffe04 	addi	sp,sp,-8
  400ee8:	000b883a 	mov	r5,zero
  400eec:	dc000015 	stw	r16,0(sp)
  400ef0:	dfc00115 	stw	ra,4(sp)
  400ef4:	2021883a 	mov	r16,r4
  400ef8:	04032380 	call	403238 <__call_exitprocs>
  400efc:	008010b4 	movhi	r2,66
  400f00:	10ae0504 	addi	r2,r2,-18412
  400f04:	11000017 	ldw	r4,0(r2)
  400f08:	20800f17 	ldw	r2,60(r4)
  400f0c:	10000126 	beq	r2,zero,400f14 <exit+0x30>
  400f10:	103ee83a 	callr	r2
  400f14:	8009883a 	mov	r4,r16
  400f18:	040aa200 	call	40aa20 <_exit>

00400f1c <memcpy>:
  400f1c:	defffb04 	addi	sp,sp,-20
  400f20:	dc000015 	stw	r16,0(sp)
  400f24:	dfc00415 	stw	ra,16(sp)
  400f28:	dcc00315 	stw	r19,12(sp)
  400f2c:	dc800215 	stw	r18,8(sp)
  400f30:	dc400115 	stw	r17,4(sp)
  400f34:	00c003c4 	movi	r3,15
  400f38:	2021883a 	mov	r16,r4
  400f3c:	3005883a 	mov	r2,r6
  400f40:	1980032e 	bgeu	r3,r6,400f50 <memcpy+0x34>
  400f44:	2906b03a 	or	r3,r5,r4
  400f48:	18c000cc 	andi	r3,r3,3
  400f4c:	18001026 	beq	r3,zero,400f90 <memcpy+0x74>
  400f50:	8007883a 	mov	r3,r16
  400f54:	288f883a 	add	r7,r5,r2
  400f58:	10000526 	beq	r2,zero,400f70 <memcpy+0x54>
  400f5c:	29800003 	ldbu	r6,0(r5)
  400f60:	18c00044 	addi	r3,r3,1
  400f64:	29400044 	addi	r5,r5,1
  400f68:	19bfffc5 	stb	r6,-1(r3)
  400f6c:	29fffb1e 	bne	r5,r7,400f5c <memcpy+0x40>
  400f70:	8005883a 	mov	r2,r16
  400f74:	dfc00417 	ldw	ra,16(sp)
  400f78:	dcc00317 	ldw	r19,12(sp)
  400f7c:	dc800217 	ldw	r18,8(sp)
  400f80:	dc400117 	ldw	r17,4(sp)
  400f84:	dc000017 	ldw	r16,0(sp)
  400f88:	dec00504 	addi	sp,sp,20
  400f8c:	f800283a 	ret
  400f90:	32bffc04 	addi	r10,r6,-16
  400f94:	5014d13a 	srli	r10,r10,4
  400f98:	20800404 	addi	r2,r4,16
  400f9c:	2007883a 	mov	r3,r4
  400fa0:	5008913a 	slli	r4,r10,4
  400fa4:	280f883a 	mov	r7,r5
  400fa8:	1105883a 	add	r2,r2,r4
  400fac:	3a000017 	ldw	r8,0(r7)
  400fb0:	18c00404 	addi	r3,r3,16
  400fb4:	39c00404 	addi	r7,r7,16
  400fb8:	1a3ffc15 	stw	r8,-16(r3)
  400fbc:	3a3ffd17 	ldw	r8,-12(r7)
  400fc0:	1a3ffd15 	stw	r8,-12(r3)
  400fc4:	3a3ffe17 	ldw	r8,-8(r7)
  400fc8:	1a3ffe15 	stw	r8,-8(r3)
  400fcc:	3a3fff17 	ldw	r8,-4(r7)
  400fd0:	1a3fff15 	stw	r8,-4(r3)
  400fd4:	18bff51e 	bne	r3,r2,400fac <memcpy+0x90>
  400fd8:	52800044 	addi	r10,r10,1
  400fdc:	5014913a 	slli	r10,r10,4
  400fe0:	308003cc 	andi	r2,r6,15
  400fe4:	010000c4 	movi	r4,3
  400fe8:	8287883a 	add	r3,r16,r10
  400fec:	2a95883a 	add	r10,r5,r10
  400ff0:	2080182e 	bgeu	r4,r2,401054 <memcpy+0x138>
  400ff4:	147fff04 	addi	r17,r2,-4
  400ff8:	8808d0ba 	srli	r4,r17,2
  400ffc:	1a400104 	addi	r9,r3,4
  401000:	180d883a 	mov	r6,r3
  401004:	2105883a 	add	r2,r4,r4
  401008:	1085883a 	add	r2,r2,r2
  40100c:	4893883a 	add	r9,r9,r2
  401010:	500f883a 	mov	r7,r10
  401014:	3a000017 	ldw	r8,0(r7)
  401018:	31800104 	addi	r6,r6,4
  40101c:	39c00104 	addi	r7,r7,4
  401020:	323fff15 	stw	r8,-4(r6)
  401024:	327ffb1e 	bne	r6,r9,401014 <memcpy+0xf8>
  401028:	20800044 	addi	r2,r4,1
  40102c:	1085883a 	add	r2,r2,r2
  401030:	1085883a 	add	r2,r2,r2
  401034:	017fff04 	movi	r5,-4
  401038:	18a5883a 	add	r18,r3,r2
  40103c:	50a7883a 	add	r19,r10,r2
  401040:	0400e700 	call	400e70 <__mulsi3>
  401044:	1445883a 	add	r2,r2,r17
  401048:	980b883a 	mov	r5,r19
  40104c:	9007883a 	mov	r3,r18
  401050:	003fc006 	br	400f54 <memcpy+0x38>
  401054:	500b883a 	mov	r5,r10
  401058:	003fbe06 	br	400f54 <memcpy+0x38>

0040105c <_printf_r>:
  40105c:	defffd04 	addi	sp,sp,-12
  401060:	dfc00015 	stw	ra,0(sp)
  401064:	d9800115 	stw	r6,4(sp)
  401068:	d9c00215 	stw	r7,8(sp)
  40106c:	280d883a 	mov	r6,r5
  401070:	21400217 	ldw	r5,8(r4)
  401074:	d9c00104 	addi	r7,sp,4
  401078:	04012240 	call	401224 <___vfprintf_internal_r>
  40107c:	dfc00017 	ldw	ra,0(sp)
  401080:	dec00304 	addi	sp,sp,12
  401084:	f800283a 	ret

00401088 <printf>:
  401088:	defffc04 	addi	sp,sp,-16
  40108c:	dfc00015 	stw	ra,0(sp)
  401090:	d9400115 	stw	r5,4(sp)
  401094:	d9800215 	stw	r6,8(sp)
  401098:	d9c00315 	stw	r7,12(sp)
  40109c:	008010b4 	movhi	r2,66
  4010a0:	10ae0604 	addi	r2,r2,-18408
  4010a4:	10800017 	ldw	r2,0(r2)
  4010a8:	200b883a 	mov	r5,r4
  4010ac:	d9800104 	addi	r6,sp,4
  4010b0:	11000217 	ldw	r4,8(r2)
  4010b4:	04030a00 	call	4030a0 <__vfprintf_internal>
  4010b8:	dfc00017 	ldw	ra,0(sp)
  4010bc:	dec00404 	addi	sp,sp,16
  4010c0:	f800283a 	ret

004010c4 <_puts_r>:
  4010c4:	defff604 	addi	sp,sp,-40
  4010c8:	dc400815 	stw	r17,32(sp)
  4010cc:	2023883a 	mov	r17,r4
  4010d0:	2809883a 	mov	r4,r5
  4010d4:	dc000715 	stw	r16,28(sp)
  4010d8:	dfc00915 	stw	ra,36(sp)
  4010dc:	2821883a 	mov	r16,r5
  4010e0:	040115c0 	call	40115c <strlen>
  4010e4:	10c00044 	addi	r3,r2,1
  4010e8:	d8800115 	stw	r2,4(sp)
  4010ec:	89400217 	ldw	r5,8(r17)
  4010f0:	008010b4 	movhi	r2,66
  4010f4:	10a5d004 	addi	r2,r2,-26816
  4010f8:	d8800215 	stw	r2,8(sp)
  4010fc:	00800044 	movi	r2,1
  401100:	d8800315 	stw	r2,12(sp)
  401104:	8809883a 	mov	r4,r17
  401108:	00800084 	movi	r2,2
  40110c:	d9800404 	addi	r6,sp,16
  401110:	dc000015 	stw	r16,0(sp)
  401114:	d8c00615 	stw	r3,24(sp)
  401118:	dec00415 	stw	sp,16(sp)
  40111c:	d8800515 	stw	r2,20(sp)
  401120:	04055400 	call	405540 <__sfvwrite_r>
  401124:	1000061e 	bne	r2,zero,401140 <_puts_r+0x7c>
  401128:	00800284 	movi	r2,10
  40112c:	dfc00917 	ldw	ra,36(sp)
  401130:	dc400817 	ldw	r17,32(sp)
  401134:	dc000717 	ldw	r16,28(sp)
  401138:	dec00a04 	addi	sp,sp,40
  40113c:	f800283a 	ret
  401140:	00bfffc4 	movi	r2,-1
  401144:	003ff906 	br	40112c <_puts_r+0x68>

00401148 <puts>:
  401148:	008010b4 	movhi	r2,66
  40114c:	10ae0604 	addi	r2,r2,-18408
  401150:	200b883a 	mov	r5,r4
  401154:	11000017 	ldw	r4,0(r2)
  401158:	04010c41 	jmpi	4010c4 <_puts_r>

0040115c <strlen>:
  40115c:	208000cc 	andi	r2,r4,3
  401160:	10001f1e 	bne	r2,zero,4011e0 <strlen+0x84>
  401164:	20800017 	ldw	r2,0(r4)
  401168:	01ffbff4 	movhi	r7,65279
  40116c:	39ffbfc4 	addi	r7,r7,-257
  401170:	01a02074 	movhi	r6,32897
  401174:	31a02004 	addi	r6,r6,-32640
  401178:	11c7883a 	add	r3,r2,r7
  40117c:	0084303a 	nor	r2,zero,r2
  401180:	1886703a 	and	r3,r3,r2
  401184:	1986703a 	and	r3,r3,r6
  401188:	2005883a 	mov	r2,r4
  40118c:	1800101e 	bne	r3,zero,4011d0 <strlen+0x74>
  401190:	10800104 	addi	r2,r2,4
  401194:	10c00017 	ldw	r3,0(r2)
  401198:	19cb883a 	add	r5,r3,r7
  40119c:	00c6303a 	nor	r3,zero,r3
  4011a0:	28c6703a 	and	r3,r5,r3
  4011a4:	1986703a 	and	r3,r3,r6
  4011a8:	1800091e 	bne	r3,zero,4011d0 <strlen+0x74>
  4011ac:	10800104 	addi	r2,r2,4
  4011b0:	10c00017 	ldw	r3,0(r2)
  4011b4:	19cb883a 	add	r5,r3,r7
  4011b8:	00c6303a 	nor	r3,zero,r3
  4011bc:	28c6703a 	and	r3,r5,r3
  4011c0:	1986703a 	and	r3,r3,r6
  4011c4:	183ff226 	beq	r3,zero,401190 <strlen+0x34>
  4011c8:	00000106 	br	4011d0 <strlen+0x74>
  4011cc:	10800044 	addi	r2,r2,1
  4011d0:	10c00007 	ldb	r3,0(r2)
  4011d4:	183ffd1e 	bne	r3,zero,4011cc <strlen+0x70>
  4011d8:	1105c83a 	sub	r2,r2,r4
  4011dc:	f800283a 	ret
  4011e0:	2005883a 	mov	r2,r4
  4011e4:	003ffa06 	br	4011d0 <strlen+0x74>

004011e8 <_times_r>:
  4011e8:	2809883a 	mov	r4,r5
  4011ec:	040b62c1 	jmpi	40b62c <times>

004011f0 <__sprint_r>:
  4011f0:	30800217 	ldw	r2,8(r6)
  4011f4:	defffe04 	addi	sp,sp,-8
  4011f8:	dc000015 	stw	r16,0(sp)
  4011fc:	dfc00115 	stw	ra,4(sp)
  401200:	3021883a 	mov	r16,r6
  401204:	10000226 	beq	r2,zero,401210 <__sprint_r+0x20>
  401208:	04055400 	call	405540 <__sfvwrite_r>
  40120c:	80000215 	stw	zero,8(r16)
  401210:	80000115 	stw	zero,4(r16)
  401214:	dfc00117 	ldw	ra,4(sp)
  401218:	dc000017 	ldw	r16,0(sp)
  40121c:	dec00204 	addi	sp,sp,8
  401220:	f800283a 	ret

00401224 <___vfprintf_internal_r>:
  401224:	defeb904 	addi	sp,sp,-1308
  401228:	dc013d15 	stw	r16,1268(sp)
  40122c:	d9013015 	stw	r4,1216(sp)
  401230:	dfc14615 	stw	ra,1304(sp)
  401234:	df014515 	stw	fp,1300(sp)
  401238:	ddc14415 	stw	r23,1296(sp)
  40123c:	dd814315 	stw	r22,1292(sp)
  401240:	dd414215 	stw	r21,1288(sp)
  401244:	dd014115 	stw	r20,1284(sp)
  401248:	dcc14015 	stw	r19,1280(sp)
  40124c:	dc813f15 	stw	r18,1276(sp)
  401250:	dc413e15 	stw	r17,1272(sp)
  401254:	d9412915 	stw	r5,1188(sp)
  401258:	3021883a 	mov	r16,r6
  40125c:	d9c12d15 	stw	r7,1204(sp)
  401260:	0405c2c0 	call	405c2c <_localeconv_r>
  401264:	10800017 	ldw	r2,0(r2)
  401268:	d9013017 	ldw	r4,1216(sp)
  40126c:	d8013315 	stw	zero,1228(sp)
  401270:	d8813715 	stw	r2,1244(sp)
  401274:	d8013415 	stw	zero,1232(sp)
  401278:	20000226 	beq	r4,zero,401284 <___vfprintf_internal_r+0x60>
  40127c:	20800e17 	ldw	r2,56(r4)
  401280:	10014b26 	beq	r2,zero,4017b0 <___vfprintf_internal_r+0x58c>
  401284:	d8c12917 	ldw	r3,1188(sp)
  401288:	1880030b 	ldhu	r2,12(r3)
  40128c:	10c0020c 	andi	r3,r2,8
  401290:	18ffffcc 	andi	r3,r3,65535
  401294:	18e0001c 	xori	r3,r3,32768
  401298:	18e00004 	addi	r3,r3,-32768
  40129c:	1800ed26 	beq	r3,zero,401654 <___vfprintf_internal_r+0x430>
  4012a0:	d9012917 	ldw	r4,1188(sp)
  4012a4:	20c00417 	ldw	r3,16(r4)
  4012a8:	1800ea26 	beq	r3,zero,401654 <___vfprintf_internal_r+0x430>
  4012ac:	1100068c 	andi	r4,r2,26
  4012b0:	00c00284 	movi	r3,10
  4012b4:	20c0f026 	beq	r4,r3,401678 <___vfprintf_internal_r+0x454>
  4012b8:	d9010dc4 	addi	r4,sp,1079
  4012bc:	d8810e04 	addi	r2,sp,1080
  4012c0:	dc413017 	ldw	r17,1216(sp)
  4012c4:	d8c00404 	addi	r3,sp,16
  4012c8:	d9012615 	stw	r4,1176(sp)
  4012cc:	1109c83a 	sub	r4,r2,r4
  4012d0:	d8812715 	stw	r2,1180(sp)
  4012d4:	d8c11b15 	stw	r3,1132(sp)
  4012d8:	d8011d15 	stw	zero,1140(sp)
  4012dc:	d8011c15 	stw	zero,1136(sp)
  4012e0:	802b883a 	mov	r21,r16
  4012e4:	d8013215 	stw	zero,1224(sp)
  4012e8:	d8013615 	stw	zero,1240(sp)
  4012ec:	d8013515 	stw	zero,1236(sp)
  4012f0:	d8012c15 	stw	zero,1200(sp)
  4012f4:	1813883a 	mov	r9,r3
  4012f8:	d9013915 	stw	r4,1252(sp)
  4012fc:	a8800007 	ldb	r2,0(r21)
  401300:	1002f326 	beq	r2,zero,401ed0 <___vfprintf_internal_r+0xcac>
  401304:	00c00944 	movi	r3,37
  401308:	a825883a 	mov	r18,r21
  40130c:	10c0021e 	bne	r2,r3,401318 <___vfprintf_internal_r+0xf4>
  401310:	00001406 	br	401364 <___vfprintf_internal_r+0x140>
  401314:	10c00326 	beq	r2,r3,401324 <___vfprintf_internal_r+0x100>
  401318:	94800044 	addi	r18,r18,1
  40131c:	90800007 	ldb	r2,0(r18)
  401320:	103ffc1e 	bne	r2,zero,401314 <___vfprintf_internal_r+0xf0>
  401324:	9561c83a 	sub	r16,r18,r21
  401328:	80000e26 	beq	r16,zero,401364 <___vfprintf_internal_r+0x140>
  40132c:	da011d17 	ldw	r8,1140(sp)
  401330:	d8c11c17 	ldw	r3,1136(sp)
  401334:	4d400015 	stw	r21,0(r9)
  401338:	4c000115 	stw	r16,4(r9)
  40133c:	4411883a 	add	r8,r8,r16
  401340:	18c00044 	addi	r3,r3,1
  401344:	da011d15 	stw	r8,1140(sp)
  401348:	d8c11c15 	stw	r3,1136(sp)
  40134c:	008001c4 	movi	r2,7
  401350:	10c11016 	blt	r2,r3,401794 <___vfprintf_internal_r+0x570>
  401354:	4a400204 	addi	r9,r9,8
  401358:	d8812c17 	ldw	r2,1200(sp)
  40135c:	1405883a 	add	r2,r2,r16
  401360:	d8812c15 	stw	r2,1200(sp)
  401364:	90800007 	ldb	r2,0(r18)
  401368:	1000ee26 	beq	r2,zero,401724 <___vfprintf_internal_r+0x500>
  40136c:	95400044 	addi	r21,r18,1
  401370:	94800047 	ldb	r18,1(r18)
  401374:	073fffc4 	movi	fp,-1
  401378:	e007883a 	mov	r3,fp
  40137c:	d8012585 	stb	zero,1174(sp)
  401380:	d8012e15 	stw	zero,1208(sp)
  401384:	0021883a 	mov	r16,zero
  401388:	05001604 	movi	r20,88
  40138c:	04c00244 	movi	r19,9
  401390:	4839883a 	mov	fp,r9
  401394:	ad400044 	addi	r21,r21,1
  401398:	90bff804 	addi	r2,r18,-32
  40139c:	a080462e 	bgeu	r20,r2,4014b8 <___vfprintf_internal_r+0x294>
  4013a0:	e013883a 	mov	r9,fp
  4013a4:	9000df26 	beq	r18,zero,401724 <___vfprintf_internal_r+0x500>
  4013a8:	00c00044 	movi	r3,1
  4013ac:	d8c12815 	stw	r3,1184(sp)
  4013b0:	dc810405 	stb	r18,1040(sp)
  4013b4:	d8012585 	stb	zero,1174(sp)
  4013b8:	d8c12b15 	stw	r3,1196(sp)
  4013bc:	dcc10404 	addi	r19,sp,1040
  4013c0:	d8013115 	stw	zero,1220(sp)
  4013c4:	80c0008c 	andi	r3,r16,2
  4013c8:	d8c12a15 	stw	r3,1192(sp)
  4013cc:	18000326 	beq	r3,zero,4013dc <___vfprintf_internal_r+0x1b8>
  4013d0:	d8c12817 	ldw	r3,1184(sp)
  4013d4:	18c00084 	addi	r3,r3,2
  4013d8:	d8c12815 	stw	r3,1184(sp)
  4013dc:	80c0210c 	andi	r3,r16,132
  4013e0:	d8c12f15 	stw	r3,1212(sp)
  4013e4:	1802251e 	bne	r3,zero,401c7c <___vfprintf_internal_r+0xa58>
  4013e8:	d9012e17 	ldw	r4,1208(sp)
  4013ec:	d8c12817 	ldw	r3,1184(sp)
  4013f0:	20edc83a 	sub	r22,r4,r3
  4013f4:	0582210e 	bge	zero,r22,401c7c <___vfprintf_internal_r+0xa58>
  4013f8:	02800404 	movi	r10,16
  4013fc:	da011d17 	ldw	r8,1140(sp)
  401400:	d8c11c17 	ldw	r3,1136(sp)
  401404:	05c010b4 	movhi	r23,66
  401408:	bde5e184 	addi	r23,r23,-26746
  40140c:	5580200e 	bge	r10,r22,401490 <___vfprintf_internal_r+0x26c>
  401410:	dc813815 	stw	r18,1248(sp)
  401414:	5039883a 	mov	fp,r10
  401418:	b825883a 	mov	r18,r23
  40141c:	050001c4 	movi	r20,7
  401420:	b02f883a 	mov	r23,r22
  401424:	802d883a 	mov	r22,r16
  401428:	dc012917 	ldw	r16,1188(sp)
  40142c:	00000306 	br	40143c <___vfprintf_internal_r+0x218>
  401430:	bdfffc04 	addi	r23,r23,-16
  401434:	4a400204 	addi	r9,r9,8
  401438:	e5c0110e 	bge	fp,r23,401480 <___vfprintf_internal_r+0x25c>
  40143c:	4c800015 	stw	r18,0(r9)
  401440:	4f000115 	stw	fp,4(r9)
  401444:	42000404 	addi	r8,r8,16
  401448:	18c00044 	addi	r3,r3,1
  40144c:	da011d15 	stw	r8,1140(sp)
  401450:	d8c11c15 	stw	r3,1136(sp)
  401454:	a0fff60e 	bge	r20,r3,401430 <___vfprintf_internal_r+0x20c>
  401458:	8809883a 	mov	r4,r17
  40145c:	800b883a 	mov	r5,r16
  401460:	d9811b04 	addi	r6,sp,1132
  401464:	04011f00 	call	4011f0 <__sprint_r>
  401468:	1000b41e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  40146c:	bdfffc04 	addi	r23,r23,-16
  401470:	da011d17 	ldw	r8,1140(sp)
  401474:	d8c11c17 	ldw	r3,1136(sp)
  401478:	da400404 	addi	r9,sp,16
  40147c:	e5ffef16 	blt	fp,r23,40143c <___vfprintf_internal_r+0x218>
  401480:	b021883a 	mov	r16,r22
  401484:	b82d883a 	mov	r22,r23
  401488:	902f883a 	mov	r23,r18
  40148c:	dc813817 	ldw	r18,1248(sp)
  401490:	4dc00015 	stw	r23,0(r9)
  401494:	4d800115 	stw	r22,4(r9)
  401498:	4591883a 	add	r8,r8,r22
  40149c:	18c00044 	addi	r3,r3,1
  4014a0:	da011d15 	stw	r8,1140(sp)
  4014a4:	d8c11c15 	stw	r3,1136(sp)
  4014a8:	008001c4 	movi	r2,7
  4014ac:	10c3fe16 	blt	r2,r3,4024a8 <___vfprintf_internal_r+0x1284>
  4014b0:	4a400204 	addi	r9,r9,8
  4014b4:	0001f306 	br	401c84 <___vfprintf_internal_r+0xa60>
  4014b8:	1085883a 	add	r2,r2,r2
  4014bc:	1085883a 	add	r2,r2,r2
  4014c0:	01001034 	movhi	r4,64
  4014c4:	21053504 	addi	r4,r4,5332
  4014c8:	1105883a 	add	r2,r2,r4
  4014cc:	10800017 	ldw	r2,0(r2)
  4014d0:	1000683a 	jmp	r2
  4014d4:	00401bb0 	cmpltui	at,zero,110
  4014d8:	004013a0 	cmpeqi	at,zero,78
  4014dc:	004013a0 	cmpeqi	at,zero,78
  4014e0:	00401bc8 	cmpgei	at,zero,111
  4014e4:	004013a0 	cmpeqi	at,zero,78
  4014e8:	004013a0 	cmpeqi	at,zero,78
  4014ec:	004013a0 	cmpeqi	at,zero,78
  4014f0:	004013a0 	cmpeqi	at,zero,78
  4014f4:	004013a0 	cmpeqi	at,zero,78
  4014f8:	004013a0 	cmpeqi	at,zero,78
  4014fc:	00401a80 	call	401a8 <OSCtxSw_SWITCH_PC+0x40168>
  401500:	00401c14 	movui	at,112
  401504:	004013a0 	cmpeqi	at,zero,78
  401508:	00401648 	cmpgei	at,zero,89
  40150c:	004019e8 	cmpgeui	at,zero,103
  401510:	004013a0 	cmpeqi	at,zero,78
  401514:	00401bd4 	movui	at,111
  401518:	00401be0 	cmpeqi	at,zero,111
  40151c:	00401be0 	cmpeqi	at,zero,111
  401520:	00401be0 	cmpeqi	at,zero,111
  401524:	00401be0 	cmpeqi	at,zero,111
  401528:	00401be0 	cmpeqi	at,zero,111
  40152c:	00401be0 	cmpeqi	at,zero,111
  401530:	00401be0 	cmpeqi	at,zero,111
  401534:	00401be0 	cmpeqi	at,zero,111
  401538:	00401be0 	cmpeqi	at,zero,111
  40153c:	004013a0 	cmpeqi	at,zero,78
  401540:	004013a0 	cmpeqi	at,zero,78
  401544:	004013a0 	cmpeqi	at,zero,78
  401548:	004013a0 	cmpeqi	at,zero,78
  40154c:	004013a0 	cmpeqi	at,zero,78
  401550:	004013a0 	cmpeqi	at,zero,78
  401554:	004013a0 	cmpeqi	at,zero,78
  401558:	004013a0 	cmpeqi	at,zero,78
  40155c:	004013a0 	cmpeqi	at,zero,78
  401560:	004013a0 	cmpeqi	at,zero,78
  401564:	004017b8 	rdprs	at,zero,94
  401568:	00401878 	rdprs	at,zero,97
  40156c:	004013a0 	cmpeqi	at,zero,78
  401570:	00401878 	rdprs	at,zero,97
  401574:	004013a0 	cmpeqi	at,zero,78
  401578:	004013a0 	cmpeqi	at,zero,78
  40157c:	004013a0 	cmpeqi	at,zero,78
  401580:	004013a0 	cmpeqi	at,zero,78
  401584:	0040190c 	andi	at,zero,100
  401588:	004013a0 	cmpeqi	at,zero,78
  40158c:	004013a0 	cmpeqi	at,zero,78
  401590:	00401918 	cmpnei	at,zero,100
  401594:	004013a0 	cmpeqi	at,zero,78
  401598:	004013a0 	cmpeqi	at,zero,78
  40159c:	004013a0 	cmpeqi	at,zero,78
  4015a0:	004013a0 	cmpeqi	at,zero,78
  4015a4:	004013a0 	cmpeqi	at,zero,78
  4015a8:	00401950 	cmplti	at,zero,101
  4015ac:	004013a0 	cmpeqi	at,zero,78
  4015b0:	004013a0 	cmpeqi	at,zero,78
  4015b4:	0040198c 	andi	at,zero,102
  4015b8:	004013a0 	cmpeqi	at,zero,78
  4015bc:	004013a0 	cmpeqi	at,zero,78
  4015c0:	004013a0 	cmpeqi	at,zero,78
  4015c4:	004013a0 	cmpeqi	at,zero,78
  4015c8:	004013a0 	cmpeqi	at,zero,78
  4015cc:	004013a0 	cmpeqi	at,zero,78
  4015d0:	004013a0 	cmpeqi	at,zero,78
  4015d4:	004013a0 	cmpeqi	at,zero,78
  4015d8:	004013a0 	cmpeqi	at,zero,78
  4015dc:	004013a0 	cmpeqi	at,zero,78
  4015e0:	00401c24 	muli	at,zero,112
  4015e4:	00401c58 	cmpnei	at,zero,113
  4015e8:	00401878 	rdprs	at,zero,97
  4015ec:	00401878 	rdprs	at,zero,97
  4015f0:	00401878 	rdprs	at,zero,97
  4015f4:	00401ba4 	muli	at,zero,110
  4015f8:	00401c58 	cmpnei	at,zero,113
  4015fc:	004013a0 	cmpeqi	at,zero,78
  401600:	004013a0 	cmpeqi	at,zero,78
  401604:	00401a30 	cmpltui	at,zero,104
  401608:	004013a0 	cmpeqi	at,zero,78
  40160c:	00401a48 	cmpgei	at,zero,105
  401610:	00401c64 	muli	at,zero,113
  401614:	00401aa8 	cmpgeui	at,zero,106
  401618:	00401af8 	rdprs	at,zero,107
  40161c:	004013a0 	cmpeqi	at,zero,78
  401620:	00401b04 	movi	at,108
  401624:	004013a0 	cmpeqi	at,zero,78
  401628:	00401c70 	cmpltui	at,zero,113
  40162c:	004013a0 	cmpeqi	at,zero,78
  401630:	004013a0 	cmpeqi	at,zero,78
  401634:	00401b68 	cmpgeui	at,zero,109
  401638:	d9012e17 	ldw	r4,1208(sp)
  40163c:	d8812d15 	stw	r2,1204(sp)
  401640:	0109c83a 	sub	r4,zero,r4
  401644:	d9012e15 	stw	r4,1208(sp)
  401648:	84000114 	ori	r16,r16,4
  40164c:	ac800007 	ldb	r18,0(r21)
  401650:	003f5006 	br	401394 <___vfprintf_internal_r+0x170>
  401654:	d9013017 	ldw	r4,1216(sp)
  401658:	d9412917 	ldw	r5,1188(sp)
  40165c:	04030c40 	call	4030c4 <__swsetup_r>
  401660:	10003d1e 	bne	r2,zero,401758 <___vfprintf_internal_r+0x534>
  401664:	d8c12917 	ldw	r3,1188(sp)
  401668:	1880030b 	ldhu	r2,12(r3)
  40166c:	00c00284 	movi	r3,10
  401670:	1100068c 	andi	r4,r2,26
  401674:	20ff101e 	bne	r4,r3,4012b8 <___vfprintf_internal_r+0x94>
  401678:	d9012917 	ldw	r4,1188(sp)
  40167c:	20c0038b 	ldhu	r3,14(r4)
  401680:	193fffcc 	andi	r4,r3,65535
  401684:	2120001c 	xori	r4,r4,32768
  401688:	21200004 	addi	r4,r4,-32768
  40168c:	203f0a16 	blt	r4,zero,4012b8 <___vfprintf_internal_r+0x94>
  401690:	d9012917 	ldw	r4,1188(sp)
  401694:	d9c12d17 	ldw	r7,1204(sp)
  401698:	10bfff4c 	andi	r2,r2,65533
  40169c:	22800717 	ldw	r10,28(r4)
  4016a0:	22400917 	ldw	r9,36(r4)
  4016a4:	d9013017 	ldw	r4,1216(sp)
  4016a8:	02010004 	movi	r8,1024
  4016ac:	d881070d 	sth	r2,1052(sp)
  4016b0:	d9410404 	addi	r5,sp,1040
  4016b4:	d8800404 	addi	r2,sp,16
  4016b8:	800d883a 	mov	r6,r16
  4016bc:	d8c1078d 	sth	r3,1054(sp)
  4016c0:	da810b15 	stw	r10,1068(sp)
  4016c4:	da410d15 	stw	r9,1076(sp)
  4016c8:	d8810415 	stw	r2,1040(sp)
  4016cc:	d8810815 	stw	r2,1056(sp)
  4016d0:	da010615 	stw	r8,1048(sp)
  4016d4:	da010915 	stw	r8,1060(sp)
  4016d8:	d8010a15 	stw	zero,1064(sp)
  4016dc:	04012240 	call	401224 <___vfprintf_internal_r>
  4016e0:	d8812c15 	stw	r2,1200(sp)
  4016e4:	10000416 	blt	r2,zero,4016f8 <___vfprintf_internal_r+0x4d4>
  4016e8:	d9013017 	ldw	r4,1216(sp)
  4016ec:	d9410404 	addi	r5,sp,1040
  4016f0:	0404c300 	call	404c30 <_fflush_r>
  4016f4:	1006501e 	bne	r2,zero,403038 <___vfprintf_internal_r+0x1e14>
  4016f8:	d881070b 	ldhu	r2,1052(sp)
  4016fc:	1080100c 	andi	r2,r2,64
  401700:	10bfffcc 	andi	r2,r2,65535
  401704:	10a0001c 	xori	r2,r2,32768
  401708:	10a00004 	addi	r2,r2,-32768
  40170c:	10001426 	beq	r2,zero,401760 <___vfprintf_internal_r+0x53c>
  401710:	d8c12917 	ldw	r3,1188(sp)
  401714:	1880030b 	ldhu	r2,12(r3)
  401718:	10801014 	ori	r2,r2,64
  40171c:	1880030d 	sth	r2,12(r3)
  401720:	00000f06 	br	401760 <___vfprintf_internal_r+0x53c>
  401724:	d8811d17 	ldw	r2,1140(sp)
  401728:	10000426 	beq	r2,zero,40173c <___vfprintf_internal_r+0x518>
  40172c:	d9013017 	ldw	r4,1216(sp)
  401730:	d9412917 	ldw	r5,1188(sp)
  401734:	d9811b04 	addi	r6,sp,1132
  401738:	04011f00 	call	4011f0 <__sprint_r>
  40173c:	d8c12917 	ldw	r3,1188(sp)
  401740:	1880030b 	ldhu	r2,12(r3)
  401744:	1080100c 	andi	r2,r2,64
  401748:	10bfffcc 	andi	r2,r2,65535
  40174c:	10a0001c 	xori	r2,r2,32768
  401750:	10a00004 	addi	r2,r2,-32768
  401754:	10000226 	beq	r2,zero,401760 <___vfprintf_internal_r+0x53c>
  401758:	00bfffc4 	movi	r2,-1
  40175c:	d8812c15 	stw	r2,1200(sp)
  401760:	d8812c17 	ldw	r2,1200(sp)
  401764:	dfc14617 	ldw	ra,1304(sp)
  401768:	df014517 	ldw	fp,1300(sp)
  40176c:	ddc14417 	ldw	r23,1296(sp)
  401770:	dd814317 	ldw	r22,1292(sp)
  401774:	dd414217 	ldw	r21,1288(sp)
  401778:	dd014117 	ldw	r20,1284(sp)
  40177c:	dcc14017 	ldw	r19,1280(sp)
  401780:	dc813f17 	ldw	r18,1276(sp)
  401784:	dc413e17 	ldw	r17,1272(sp)
  401788:	dc013d17 	ldw	r16,1268(sp)
  40178c:	dec14704 	addi	sp,sp,1308
  401790:	f800283a 	ret
  401794:	d9412917 	ldw	r5,1188(sp)
  401798:	8809883a 	mov	r4,r17
  40179c:	d9811b04 	addi	r6,sp,1132
  4017a0:	04011f00 	call	4011f0 <__sprint_r>
  4017a4:	103fe51e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  4017a8:	da400404 	addi	r9,sp,16
  4017ac:	003eea06 	br	401358 <___vfprintf_internal_r+0x134>
  4017b0:	0404eec0 	call	404eec <__sinit>
  4017b4:	003eb306 	br	401284 <___vfprintf_internal_r+0x60>
  4017b8:	e013883a 	mov	r9,fp
  4017bc:	84000414 	ori	r16,r16,16
  4017c0:	1839883a 	mov	fp,r3
  4017c4:	8080080c 	andi	r2,r16,32
  4017c8:	10034426 	beq	r2,zero,4024dc <___vfprintf_internal_r+0x12b8>
  4017cc:	d8c12d17 	ldw	r3,1204(sp)
  4017d0:	18800117 	ldw	r2,4(r3)
  4017d4:	1dc00017 	ldw	r23,0(r3)
  4017d8:	18c00204 	addi	r3,r3,8
  4017dc:	d8c12d15 	stw	r3,1204(sp)
  4017e0:	102d883a 	mov	r22,r2
  4017e4:	1003020e 	bge	r2,zero,4023f0 <___vfprintf_internal_r+0x11cc>
  4017e8:	05efc83a 	sub	r23,zero,r23
  4017ec:	b804c03a 	cmpne	r2,r23,zero
  4017f0:	05adc83a 	sub	r22,zero,r22
  4017f4:	b0adc83a 	sub	r22,r22,r2
  4017f8:	00800b44 	movi	r2,45
  4017fc:	d8812585 	stb	r2,1174(sp)
  401800:	00c00044 	movi	r3,1
  401804:	bd84b03a 	or	r2,r23,r22
  401808:	e0000216 	blt	fp,zero,401814 <___vfprintf_internal_r+0x5f0>
  40180c:	013fdfc4 	movi	r4,-129
  401810:	8120703a 	and	r16,r16,r4
  401814:	1001cc1e 	bne	r2,zero,401f48 <___vfprintf_internal_r+0xd24>
  401818:	e001cb1e 	bne	fp,zero,401f48 <___vfprintf_internal_r+0xd24>
  40181c:	18c03fcc 	andi	r3,r3,255
  401820:	1802ca1e 	bne	r3,zero,40234c <___vfprintf_internal_r+0x1128>
  401824:	8080004c 	andi	r2,r16,1
  401828:	1002c826 	beq	r2,zero,40234c <___vfprintf_internal_r+0x1128>
  40182c:	d8c13917 	ldw	r3,1252(sp)
  401830:	00800c04 	movi	r2,48
  401834:	d8810dc5 	stb	r2,1079(sp)
  401838:	d8c12b15 	stw	r3,1196(sp)
  40183c:	dcc10dc4 	addi	r19,sp,1079
  401840:	d8812b17 	ldw	r2,1196(sp)
  401844:	d8812815 	stw	r2,1184(sp)
  401848:	1700010e 	bge	r2,fp,401850 <___vfprintf_internal_r+0x62c>
  40184c:	df012815 	stw	fp,1184(sp)
  401850:	d8812583 	ldbu	r2,1174(sp)
  401854:	df013115 	stw	fp,1220(sp)
  401858:	10803fcc 	andi	r2,r2,255
  40185c:	1080201c 	xori	r2,r2,128
  401860:	10bfe004 	addi	r2,r2,-128
  401864:	103ed726 	beq	r2,zero,4013c4 <___vfprintf_internal_r+0x1a0>
  401868:	d8c12817 	ldw	r3,1184(sp)
  40186c:	18c00044 	addi	r3,r3,1
  401870:	d8c12815 	stw	r3,1184(sp)
  401874:	003ed306 	br	4013c4 <___vfprintf_internal_r+0x1a0>
  401878:	8080020c 	andi	r2,r16,8
  40187c:	e013883a 	mov	r9,fp
  401880:	1839883a 	mov	fp,r3
  401884:	1003a626 	beq	r2,zero,402720 <___vfprintf_internal_r+0x14fc>
  401888:	d9012d17 	ldw	r4,1204(sp)
  40188c:	25800017 	ldw	r22,0(r4)
  401890:	25000117 	ldw	r20,4(r4)
  401894:	21000204 	addi	r4,r4,8
  401898:	d9012d15 	stw	r4,1204(sp)
  40189c:	dd813315 	stw	r22,1228(sp)
  4018a0:	dd013415 	stw	r20,1232(sp)
  4018a4:	b009883a 	mov	r4,r22
  4018a8:	a00b883a 	mov	r5,r20
  4018ac:	da413c15 	stw	r9,1264(sp)
  4018b0:	0407f380 	call	407f38 <__isinfd>
  4018b4:	da413c17 	ldw	r9,1264(sp)
  4018b8:	b009883a 	mov	r4,r22
  4018bc:	a00b883a 	mov	r5,r20
  4018c0:	10041d26 	beq	r2,zero,402938 <___vfprintf_internal_r+0x1714>
  4018c4:	000d883a 	mov	r6,zero
  4018c8:	000f883a 	mov	r7,zero
  4018cc:	0409d0c0 	call	409d0c <__ltdf2>
  4018d0:	da413c17 	ldw	r9,1264(sp)
  4018d4:	1004da16 	blt	r2,zero,402c40 <___vfprintf_internal_r+0x1a1c>
  4018d8:	d8812583 	ldbu	r2,1174(sp)
  4018dc:	00c011c4 	movi	r3,71
  4018e0:	1c83d116 	blt	r3,r18,402828 <___vfprintf_internal_r+0x1604>
  4018e4:	04c010b4 	movhi	r19,66
  4018e8:	9ce5d104 	addi	r19,r19,-26812
  4018ec:	00c000c4 	movi	r3,3
  4018f0:	d8c12815 	stw	r3,1184(sp)
  4018f4:	00ffdfc4 	movi	r3,-129
  4018f8:	80e0703a 	and	r16,r16,r3
  4018fc:	d8c12817 	ldw	r3,1184(sp)
  401900:	d8013115 	stw	zero,1220(sp)
  401904:	d8c12b15 	stw	r3,1196(sp)
  401908:	003fd306 	br	401858 <___vfprintf_internal_r+0x634>
  40190c:	84000214 	ori	r16,r16,8
  401910:	ac800007 	ldb	r18,0(r21)
  401914:	003e9f06 	br	401394 <___vfprintf_internal_r+0x170>
  401918:	e013883a 	mov	r9,fp
  40191c:	84000414 	ori	r16,r16,16
  401920:	1839883a 	mov	fp,r3
  401924:	8080080c 	andi	r2,r16,32
  401928:	10031d26 	beq	r2,zero,4025a0 <___vfprintf_internal_r+0x137c>
  40192c:	d8812d17 	ldw	r2,1204(sp)
  401930:	0007883a 	mov	r3,zero
  401934:	15c00017 	ldw	r23,0(r2)
  401938:	15800117 	ldw	r22,4(r2)
  40193c:	10800204 	addi	r2,r2,8
  401940:	d8812d15 	stw	r2,1204(sp)
  401944:	d8012585 	stb	zero,1174(sp)
  401948:	bd84b03a 	or	r2,r23,r22
  40194c:	003fae06 	br	401808 <___vfprintf_internal_r+0x5e4>
  401950:	e013883a 	mov	r9,fp
  401954:	84000414 	ori	r16,r16,16
  401958:	1839883a 	mov	fp,r3
  40195c:	8080080c 	andi	r2,r16,32
  401960:	1002e726 	beq	r2,zero,402500 <___vfprintf_internal_r+0x12dc>
  401964:	d8c12d17 	ldw	r3,1204(sp)
  401968:	d9012d17 	ldw	r4,1204(sp)
  40196c:	1dc00017 	ldw	r23,0(r3)
  401970:	1d800117 	ldw	r22,4(r3)
  401974:	21000204 	addi	r4,r4,8
  401978:	00c00044 	movi	r3,1
  40197c:	d9012d15 	stw	r4,1204(sp)
  401980:	bd84b03a 	or	r2,r23,r22
  401984:	d8012585 	stb	zero,1174(sp)
  401988:	003f9f06 	br	401808 <___vfprintf_internal_r+0x5e4>
  40198c:	e013883a 	mov	r9,fp
  401990:	1839883a 	mov	fp,r3
  401994:	00c010b4 	movhi	r3,66
  401998:	18e5d504 	addi	r3,r3,-26796
  40199c:	d8c13615 	stw	r3,1240(sp)
  4019a0:	8080080c 	andi	r2,r16,32
  4019a4:	10007726 	beq	r2,zero,401b84 <___vfprintf_internal_r+0x960>
  4019a8:	d9012d17 	ldw	r4,1204(sp)
  4019ac:	25c00017 	ldw	r23,0(r4)
  4019b0:	25800117 	ldw	r22,4(r4)
  4019b4:	21000204 	addi	r4,r4,8
  4019b8:	d9012d15 	stw	r4,1204(sp)
  4019bc:	8080004c 	andi	r2,r16,1
  4019c0:	1002c226 	beq	r2,zero,4024cc <___vfprintf_internal_r+0x12a8>
  4019c4:	bd84b03a 	or	r2,r23,r22
  4019c8:	10035d26 	beq	r2,zero,402740 <___vfprintf_internal_r+0x151c>
  4019cc:	00c00c04 	movi	r3,48
  4019d0:	d8c12505 	stb	r3,1172(sp)
  4019d4:	dc812545 	stb	r18,1173(sp)
  4019d8:	84000094 	ori	r16,r16,2
  4019dc:	00c00084 	movi	r3,2
  4019e0:	d8012585 	stb	zero,1174(sp)
  4019e4:	003f8806 	br	401808 <___vfprintf_internal_r+0x5e4>
  4019e8:	ac800007 	ldb	r18,0(r21)
  4019ec:	00c00a84 	movi	r3,42
  4019f0:	adc00044 	addi	r23,r21,1
  4019f4:	90c57526 	beq	r18,r3,402fcc <___vfprintf_internal_r+0x1da8>
  4019f8:	95bff404 	addi	r22,r18,-48
  4019fc:	0009883a 	mov	r4,zero
  401a00:	9d84ff36 	bltu	r19,r22,402e00 <___vfprintf_internal_r+0x1bdc>
  401a04:	01400284 	movi	r5,10
  401a08:	0400e700 	call	400e70 <__mulsi3>
  401a0c:	bc800007 	ldb	r18,0(r23)
  401a10:	b089883a 	add	r4,r22,r2
  401a14:	bdc00044 	addi	r23,r23,1
  401a18:	95bff404 	addi	r22,r18,-48
  401a1c:	9dbff92e 	bgeu	r19,r22,401a04 <___vfprintf_internal_r+0x7e0>
  401a20:	2007883a 	mov	r3,r4
  401a24:	20044316 	blt	r4,zero,402b34 <___vfprintf_internal_r+0x1910>
  401a28:	b82b883a 	mov	r21,r23
  401a2c:	003e5a06 	br	401398 <___vfprintf_internal_r+0x174>
  401a30:	ac800007 	ldb	r18,0(r21)
  401a34:	01001b04 	movi	r4,108
  401a38:	a805883a 	mov	r2,r21
  401a3c:	91045526 	beq	r18,r4,402b94 <___vfprintf_internal_r+0x1970>
  401a40:	84000414 	ori	r16,r16,16
  401a44:	003e5306 	br	401394 <___vfprintf_internal_r+0x170>
  401a48:	8080080c 	andi	r2,r16,32
  401a4c:	e013883a 	mov	r9,fp
  401a50:	10034026 	beq	r2,zero,402754 <___vfprintf_internal_r+0x1530>
  401a54:	d9012d17 	ldw	r4,1204(sp)
  401a58:	20800017 	ldw	r2,0(r4)
  401a5c:	d9012c17 	ldw	r4,1200(sp)
  401a60:	2007d7fa 	srai	r3,r4,31
  401a64:	d9012d17 	ldw	r4,1204(sp)
  401a68:	10c00115 	stw	r3,4(r2)
  401a6c:	21000104 	addi	r4,r4,4
  401a70:	d9012d15 	stw	r4,1204(sp)
  401a74:	d9012c17 	ldw	r4,1200(sp)
  401a78:	11000015 	stw	r4,0(r2)
  401a7c:	003e1f06 	br	4012fc <___vfprintf_internal_r+0xd8>
  401a80:	d9012d17 	ldw	r4,1204(sp)
  401a84:	21000017 	ldw	r4,0(r4)
  401a88:	d9012e15 	stw	r4,1208(sp)
  401a8c:	d9012d17 	ldw	r4,1204(sp)
  401a90:	20800104 	addi	r2,r4,4
  401a94:	d9012e17 	ldw	r4,1208(sp)
  401a98:	203ee716 	blt	r4,zero,401638 <___vfprintf_internal_r+0x414>
  401a9c:	d8812d15 	stw	r2,1204(sp)
  401aa0:	ac800007 	ldb	r18,0(r21)
  401aa4:	003e3b06 	br	401394 <___vfprintf_internal_r+0x170>
  401aa8:	e013883a 	mov	r9,fp
  401aac:	1839883a 	mov	fp,r3
  401ab0:	d8c12d17 	ldw	r3,1204(sp)
  401ab4:	00800c04 	movi	r2,48
  401ab8:	010010b4 	movhi	r4,66
  401abc:	2125da04 	addi	r4,r4,-26776
  401ac0:	1dc00017 	ldw	r23,0(r3)
  401ac4:	18c00104 	addi	r3,r3,4
  401ac8:	d8812505 	stb	r2,1172(sp)
  401acc:	00801e04 	movi	r2,120
  401ad0:	d8812545 	stb	r2,1173(sp)
  401ad4:	d8c12d15 	stw	r3,1204(sp)
  401ad8:	002d883a 	mov	r22,zero
  401adc:	84000094 	ori	r16,r16,2
  401ae0:	d9013615 	stw	r4,1240(sp)
  401ae4:	00c00084 	movi	r3,2
  401ae8:	04801e04 	movi	r18,120
  401aec:	b805883a 	mov	r2,r23
  401af0:	d8012585 	stb	zero,1174(sp)
  401af4:	003f4406 	br	401808 <___vfprintf_internal_r+0x5e4>
  401af8:	84000814 	ori	r16,r16,32
  401afc:	ac800007 	ldb	r18,0(r21)
  401b00:	003e2406 	br	401394 <___vfprintf_internal_r+0x170>
  401b04:	d8812d17 	ldw	r2,1204(sp)
  401b08:	d8012585 	stb	zero,1174(sp)
  401b0c:	e013883a 	mov	r9,fp
  401b10:	14c00017 	ldw	r19,0(r2)
  401b14:	1839883a 	mov	fp,r3
  401b18:	15c00104 	addi	r23,r2,4
  401b1c:	98045526 	beq	r19,zero,402c74 <___vfprintf_internal_r+0x1a50>
  401b20:	9809883a 	mov	r4,r19
  401b24:	18043116 	blt	r3,zero,402bec <___vfprintf_internal_r+0x19c8>
  401b28:	000b883a 	mov	r5,zero
  401b2c:	180d883a 	mov	r6,r3
  401b30:	da413c15 	stw	r9,1264(sp)
  401b34:	040658c0 	call	40658c <memchr>
  401b38:	da413c17 	ldw	r9,1264(sp)
  401b3c:	10047a26 	beq	r2,zero,402d28 <___vfprintf_internal_r+0x1b04>
  401b40:	14c5c83a 	sub	r2,r2,r19
  401b44:	d8812b15 	stw	r2,1196(sp)
  401b48:	e083d40e 	bge	fp,r2,402a9c <___vfprintf_internal_r+0x1878>
  401b4c:	df012815 	stw	fp,1184(sp)
  401b50:	e004e416 	blt	fp,zero,402ee4 <___vfprintf_internal_r+0x1cc0>
  401b54:	d8812583 	ldbu	r2,1174(sp)
  401b58:	df012b15 	stw	fp,1196(sp)
  401b5c:	ddc12d15 	stw	r23,1204(sp)
  401b60:	d8013115 	stw	zero,1220(sp)
  401b64:	003f3c06 	br	401858 <___vfprintf_internal_r+0x634>
  401b68:	008010b4 	movhi	r2,66
  401b6c:	10a5da04 	addi	r2,r2,-26776
  401b70:	d8813615 	stw	r2,1240(sp)
  401b74:	8080080c 	andi	r2,r16,32
  401b78:	e013883a 	mov	r9,fp
  401b7c:	1839883a 	mov	fp,r3
  401b80:	103f891e 	bne	r2,zero,4019a8 <___vfprintf_internal_r+0x784>
  401b84:	8080040c 	andi	r2,r16,16
  401b88:	1002c326 	beq	r2,zero,402698 <___vfprintf_internal_r+0x1474>
  401b8c:	d8812d17 	ldw	r2,1204(sp)
  401b90:	002d883a 	mov	r22,zero
  401b94:	15c00017 	ldw	r23,0(r2)
  401b98:	10800104 	addi	r2,r2,4
  401b9c:	d8812d15 	stw	r2,1204(sp)
  401ba0:	003f8606 	br	4019bc <___vfprintf_internal_r+0x798>
  401ba4:	84001014 	ori	r16,r16,64
  401ba8:	ac800007 	ldb	r18,0(r21)
  401bac:	003df906 	br	401394 <___vfprintf_internal_r+0x170>
  401bb0:	d8812587 	ldb	r2,1174(sp)
  401bb4:	1002e51e 	bne	r2,zero,40274c <___vfprintf_internal_r+0x1528>
  401bb8:	00800804 	movi	r2,32
  401bbc:	d8812585 	stb	r2,1174(sp)
  401bc0:	ac800007 	ldb	r18,0(r21)
  401bc4:	003df306 	br	401394 <___vfprintf_internal_r+0x170>
  401bc8:	84000054 	ori	r16,r16,1
  401bcc:	ac800007 	ldb	r18,0(r21)
  401bd0:	003df006 	br	401394 <___vfprintf_internal_r+0x170>
  401bd4:	84002014 	ori	r16,r16,128
  401bd8:	ac800007 	ldb	r18,0(r21)
  401bdc:	003ded06 	br	401394 <___vfprintf_internal_r+0x170>
  401be0:	0009883a 	mov	r4,zero
  401be4:	95bff404 	addi	r22,r18,-48
  401be8:	182f883a 	mov	r23,r3
  401bec:	01400284 	movi	r5,10
  401bf0:	0400e700 	call	400e70 <__mulsi3>
  401bf4:	ac800007 	ldb	r18,0(r21)
  401bf8:	1589883a 	add	r4,r2,r22
  401bfc:	ad400044 	addi	r21,r21,1
  401c00:	95bff404 	addi	r22,r18,-48
  401c04:	9dbff92e 	bgeu	r19,r22,401bec <___vfprintf_internal_r+0x9c8>
  401c08:	b807883a 	mov	r3,r23
  401c0c:	d9012e15 	stw	r4,1208(sp)
  401c10:	003de106 	br	401398 <___vfprintf_internal_r+0x174>
  401c14:	00800ac4 	movi	r2,43
  401c18:	d8812585 	stb	r2,1174(sp)
  401c1c:	ac800007 	ldb	r18,0(r21)
  401c20:	003ddc06 	br	401394 <___vfprintf_internal_r+0x170>
  401c24:	d8c12d17 	ldw	r3,1204(sp)
  401c28:	d9012d17 	ldw	r4,1204(sp)
  401c2c:	e013883a 	mov	r9,fp
  401c30:	18800017 	ldw	r2,0(r3)
  401c34:	21000104 	addi	r4,r4,4
  401c38:	00c00044 	movi	r3,1
  401c3c:	d8c12815 	stw	r3,1184(sp)
  401c40:	d8012585 	stb	zero,1174(sp)
  401c44:	d8810405 	stb	r2,1040(sp)
  401c48:	d9012d15 	stw	r4,1204(sp)
  401c4c:	d8c12b15 	stw	r3,1196(sp)
  401c50:	dcc10404 	addi	r19,sp,1040
  401c54:	003dda06 	br	4013c0 <___vfprintf_internal_r+0x19c>
  401c58:	e013883a 	mov	r9,fp
  401c5c:	1839883a 	mov	fp,r3
  401c60:	003ed806 	br	4017c4 <___vfprintf_internal_r+0x5a0>
  401c64:	e013883a 	mov	r9,fp
  401c68:	1839883a 	mov	fp,r3
  401c6c:	003f2d06 	br	401924 <___vfprintf_internal_r+0x700>
  401c70:	e013883a 	mov	r9,fp
  401c74:	1839883a 	mov	fp,r3
  401c78:	003f3806 	br	40195c <___vfprintf_internal_r+0x738>
  401c7c:	da011d17 	ldw	r8,1140(sp)
  401c80:	d8c11c17 	ldw	r3,1136(sp)
  401c84:	d8812587 	ldb	r2,1174(sp)
  401c88:	10000b26 	beq	r2,zero,401cb8 <___vfprintf_internal_r+0xa94>
  401c8c:	d8812584 	addi	r2,sp,1174
  401c90:	48800015 	stw	r2,0(r9)
  401c94:	00800044 	movi	r2,1
  401c98:	48800115 	stw	r2,4(r9)
  401c9c:	4091883a 	add	r8,r8,r2
  401ca0:	1887883a 	add	r3,r3,r2
  401ca4:	da011d15 	stw	r8,1140(sp)
  401ca8:	d8c11c15 	stw	r3,1136(sp)
  401cac:	008001c4 	movi	r2,7
  401cb0:	10c18e16 	blt	r2,r3,4022ec <___vfprintf_internal_r+0x10c8>
  401cb4:	4a400204 	addi	r9,r9,8
  401cb8:	d9012a17 	ldw	r4,1192(sp)
  401cbc:	20000b26 	beq	r4,zero,401cec <___vfprintf_internal_r+0xac8>
  401cc0:	d8812504 	addi	r2,sp,1172
  401cc4:	48800015 	stw	r2,0(r9)
  401cc8:	00800084 	movi	r2,2
  401ccc:	48800115 	stw	r2,4(r9)
  401cd0:	4091883a 	add	r8,r8,r2
  401cd4:	18c00044 	addi	r3,r3,1
  401cd8:	da011d15 	stw	r8,1140(sp)
  401cdc:	d8c11c15 	stw	r3,1136(sp)
  401ce0:	008001c4 	movi	r2,7
  401ce4:	10c17816 	blt	r2,r3,4022c8 <___vfprintf_internal_r+0x10a4>
  401ce8:	4a400204 	addi	r9,r9,8
  401cec:	d9012f17 	ldw	r4,1212(sp)
  401cf0:	00802004 	movi	r2,128
  401cf4:	2080fc26 	beq	r4,r2,4020e8 <___vfprintf_internal_r+0xec4>
  401cf8:	d8813117 	ldw	r2,1220(sp)
  401cfc:	d9012b17 	ldw	r4,1196(sp)
  401d00:	112fc83a 	sub	r23,r2,r4
  401d04:	05c02a0e 	bge	zero,r23,401db0 <___vfprintf_internal_r+0xb8c>
  401d08:	07000404 	movi	fp,16
  401d0c:	050010b4 	movhi	r20,66
  401d10:	a525e584 	addi	r20,r20,-26730
  401d14:	e5c01d0e 	bge	fp,r23,401d8c <___vfprintf_internal_r+0xb68>
  401d18:	dc812a15 	stw	r18,1192(sp)
  401d1c:	058001c4 	movi	r22,7
  401d20:	a025883a 	mov	r18,r20
  401d24:	8029883a 	mov	r20,r16
  401d28:	dc012917 	ldw	r16,1188(sp)
  401d2c:	00000306 	br	401d3c <___vfprintf_internal_r+0xb18>
  401d30:	bdfffc04 	addi	r23,r23,-16
  401d34:	4a400204 	addi	r9,r9,8
  401d38:	e5c0110e 	bge	fp,r23,401d80 <___vfprintf_internal_r+0xb5c>
  401d3c:	4c800015 	stw	r18,0(r9)
  401d40:	4f000115 	stw	fp,4(r9)
  401d44:	42000404 	addi	r8,r8,16
  401d48:	18c00044 	addi	r3,r3,1
  401d4c:	da011d15 	stw	r8,1140(sp)
  401d50:	d8c11c15 	stw	r3,1136(sp)
  401d54:	b0fff60e 	bge	r22,r3,401d30 <___vfprintf_internal_r+0xb0c>
  401d58:	8809883a 	mov	r4,r17
  401d5c:	800b883a 	mov	r5,r16
  401d60:	d9811b04 	addi	r6,sp,1132
  401d64:	04011f00 	call	4011f0 <__sprint_r>
  401d68:	103e741e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  401d6c:	bdfffc04 	addi	r23,r23,-16
  401d70:	da011d17 	ldw	r8,1140(sp)
  401d74:	d8c11c17 	ldw	r3,1136(sp)
  401d78:	da400404 	addi	r9,sp,16
  401d7c:	e5ffef16 	blt	fp,r23,401d3c <___vfprintf_internal_r+0xb18>
  401d80:	a021883a 	mov	r16,r20
  401d84:	9029883a 	mov	r20,r18
  401d88:	dc812a17 	ldw	r18,1192(sp)
  401d8c:	4d000015 	stw	r20,0(r9)
  401d90:	4dc00115 	stw	r23,4(r9)
  401d94:	45d1883a 	add	r8,r8,r23
  401d98:	18c00044 	addi	r3,r3,1
  401d9c:	da011d15 	stw	r8,1140(sp)
  401da0:	d8c11c15 	stw	r3,1136(sp)
  401da4:	008001c4 	movi	r2,7
  401da8:	10c13e16 	blt	r2,r3,4022a4 <___vfprintf_internal_r+0x1080>
  401dac:	4a400204 	addi	r9,r9,8
  401db0:	8080400c 	andi	r2,r16,256
  401db4:	1000831e 	bne	r2,zero,401fc4 <___vfprintf_internal_r+0xda0>
  401db8:	d8812b17 	ldw	r2,1196(sp)
  401dbc:	4cc00015 	stw	r19,0(r9)
  401dc0:	48800115 	stw	r2,4(r9)
  401dc4:	4091883a 	add	r8,r8,r2
  401dc8:	18c00044 	addi	r3,r3,1
  401dcc:	da011d15 	stw	r8,1140(sp)
  401dd0:	d8c11c15 	stw	r3,1136(sp)
  401dd4:	008001c4 	movi	r2,7
  401dd8:	10c05316 	blt	r2,r3,401f28 <___vfprintf_internal_r+0xd04>
  401ddc:	4a400204 	addi	r9,r9,8
  401de0:	8400010c 	andi	r16,r16,4
  401de4:	80002e26 	beq	r16,zero,401ea0 <___vfprintf_internal_r+0xc7c>
  401de8:	d8812e17 	ldw	r2,1208(sp)
  401dec:	d8c12817 	ldw	r3,1184(sp)
  401df0:	10e1c83a 	sub	r16,r2,r3
  401df4:	04002a0e 	bge	zero,r16,401ea0 <___vfprintf_internal_r+0xc7c>
  401df8:	04800404 	movi	r18,16
  401dfc:	d8c11c17 	ldw	r3,1136(sp)
  401e00:	05c010b4 	movhi	r23,66
  401e04:	bde5e184 	addi	r23,r23,-26746
  401e08:	9400170e 	bge	r18,r16,401e68 <___vfprintf_internal_r+0xc44>
  401e0c:	04c001c4 	movi	r19,7
  401e10:	dd012917 	ldw	r20,1188(sp)
  401e14:	00000306 	br	401e24 <___vfprintf_internal_r+0xc00>
  401e18:	843ffc04 	addi	r16,r16,-16
  401e1c:	4a400204 	addi	r9,r9,8
  401e20:	9400110e 	bge	r18,r16,401e68 <___vfprintf_internal_r+0xc44>
  401e24:	4dc00015 	stw	r23,0(r9)
  401e28:	4c800115 	stw	r18,4(r9)
  401e2c:	42000404 	addi	r8,r8,16
  401e30:	18c00044 	addi	r3,r3,1
  401e34:	da011d15 	stw	r8,1140(sp)
  401e38:	d8c11c15 	stw	r3,1136(sp)
  401e3c:	98fff60e 	bge	r19,r3,401e18 <___vfprintf_internal_r+0xbf4>
  401e40:	8809883a 	mov	r4,r17
  401e44:	a00b883a 	mov	r5,r20
  401e48:	d9811b04 	addi	r6,sp,1132
  401e4c:	04011f00 	call	4011f0 <__sprint_r>
  401e50:	103e3a1e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  401e54:	843ffc04 	addi	r16,r16,-16
  401e58:	da011d17 	ldw	r8,1140(sp)
  401e5c:	d8c11c17 	ldw	r3,1136(sp)
  401e60:	da400404 	addi	r9,sp,16
  401e64:	943fef16 	blt	r18,r16,401e24 <___vfprintf_internal_r+0xc00>
  401e68:	4dc00015 	stw	r23,0(r9)
  401e6c:	4c000115 	stw	r16,4(r9)
  401e70:	8211883a 	add	r8,r16,r8
  401e74:	18c00044 	addi	r3,r3,1
  401e78:	da011d15 	stw	r8,1140(sp)
  401e7c:	d8c11c15 	stw	r3,1136(sp)
  401e80:	008001c4 	movi	r2,7
  401e84:	10c0060e 	bge	r2,r3,401ea0 <___vfprintf_internal_r+0xc7c>
  401e88:	d9412917 	ldw	r5,1188(sp)
  401e8c:	8809883a 	mov	r4,r17
  401e90:	d9811b04 	addi	r6,sp,1132
  401e94:	04011f00 	call	4011f0 <__sprint_r>
  401e98:	103e281e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  401e9c:	da011d17 	ldw	r8,1140(sp)
  401ea0:	dd012817 	ldw	r20,1184(sp)
  401ea4:	d9012e17 	ldw	r4,1208(sp)
  401ea8:	a100010e 	bge	r20,r4,401eb0 <___vfprintf_internal_r+0xc8c>
  401eac:	2029883a 	mov	r20,r4
  401eb0:	d8812c17 	ldw	r2,1200(sp)
  401eb4:	1505883a 	add	r2,r2,r20
  401eb8:	d8812c15 	stw	r2,1200(sp)
  401ebc:	4000b91e 	bne	r8,zero,4021a4 <___vfprintf_internal_r+0xf80>
  401ec0:	d8011c15 	stw	zero,1136(sp)
  401ec4:	a8800007 	ldb	r2,0(r21)
  401ec8:	da400404 	addi	r9,sp,16
  401ecc:	103d0d1e 	bne	r2,zero,401304 <___vfprintf_internal_r+0xe0>
  401ed0:	a825883a 	mov	r18,r21
  401ed4:	003d2306 	br	401364 <___vfprintf_internal_r+0x140>
  401ed8:	d9412917 	ldw	r5,1188(sp)
  401edc:	8809883a 	mov	r4,r17
  401ee0:	d9811b04 	addi	r6,sp,1132
  401ee4:	04011f00 	call	4011f0 <__sprint_r>
  401ee8:	103e141e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  401eec:	da011d17 	ldw	r8,1140(sp)
  401ef0:	da400404 	addi	r9,sp,16
  401ef4:	8080004c 	andi	r2,r16,1
  401ef8:	103fb926 	beq	r2,zero,401de0 <___vfprintf_internal_r+0xbbc>
  401efc:	d8c11c17 	ldw	r3,1136(sp)
  401f00:	d9013717 	ldw	r4,1244(sp)
  401f04:	00800044 	movi	r2,1
  401f08:	48800115 	stw	r2,4(r9)
  401f0c:	49000015 	stw	r4,0(r9)
  401f10:	4091883a 	add	r8,r8,r2
  401f14:	1887883a 	add	r3,r3,r2
  401f18:	da011d15 	stw	r8,1140(sp)
  401f1c:	d8c11c15 	stw	r3,1136(sp)
  401f20:	008001c4 	movi	r2,7
  401f24:	10ffad0e 	bge	r2,r3,401ddc <___vfprintf_internal_r+0xbb8>
  401f28:	d9412917 	ldw	r5,1188(sp)
  401f2c:	8809883a 	mov	r4,r17
  401f30:	d9811b04 	addi	r6,sp,1132
  401f34:	04011f00 	call	4011f0 <__sprint_r>
  401f38:	103e001e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  401f3c:	da400404 	addi	r9,sp,16
  401f40:	da011d17 	ldw	r8,1140(sp)
  401f44:	003fa606 	br	401de0 <___vfprintf_internal_r+0xbbc>
  401f48:	18803fcc 	andi	r2,r3,255
  401f4c:	00c00044 	movi	r3,1
  401f50:	10c10126 	beq	r2,r3,402358 <___vfprintf_internal_r+0x1134>
  401f54:	00c00084 	movi	r3,2
  401f58:	10c0ed26 	beq	r2,r3,402310 <___vfprintf_internal_r+0x10ec>
  401f5c:	d8c10dc4 	addi	r3,sp,1079
  401f60:	b808d0fa 	srli	r4,r23,3
  401f64:	b00a977a 	slli	r5,r22,29
  401f68:	b02cd0fa 	srli	r22,r22,3
  401f6c:	bdc001cc 	andi	r23,r23,7
  401f70:	b8800c04 	addi	r2,r23,48
  401f74:	292eb03a 	or	r23,r5,r4
  401f78:	18800005 	stb	r2,0(r3)
  401f7c:	bd88b03a 	or	r4,r23,r22
  401f80:	1827883a 	mov	r19,r3
  401f84:	18ffffc4 	addi	r3,r3,-1
  401f88:	203ff51e 	bne	r4,zero,401f60 <___vfprintf_internal_r+0xd3c>
  401f8c:	8100004c 	andi	r4,r16,1
  401f90:	980b883a 	mov	r5,r19
  401f94:	20000726 	beq	r4,zero,401fb4 <___vfprintf_internal_r+0xd90>
  401f98:	10803fcc 	andi	r2,r2,255
  401f9c:	1080201c 	xori	r2,r2,128
  401fa0:	10bfe004 	addi	r2,r2,-128
  401fa4:	01000c04 	movi	r4,48
  401fa8:	11000226 	beq	r2,r4,401fb4 <___vfprintf_internal_r+0xd90>
  401fac:	1827883a 	mov	r19,r3
  401fb0:	293fffc5 	stb	r4,-1(r5)
  401fb4:	d8812717 	ldw	r2,1180(sp)
  401fb8:	14c5c83a 	sub	r2,r2,r19
  401fbc:	d8812b15 	stw	r2,1196(sp)
  401fc0:	003e1f06 	br	401840 <___vfprintf_internal_r+0x61c>
  401fc4:	00801944 	movi	r2,101
  401fc8:	14807c0e 	bge	r2,r18,4021bc <___vfprintf_internal_r+0xf98>
  401fcc:	d9013317 	ldw	r4,1228(sp)
  401fd0:	d9413417 	ldw	r5,1232(sp)
  401fd4:	000d883a 	mov	r6,zero
  401fd8:	000f883a 	mov	r7,zero
  401fdc:	d8c13b15 	stw	r3,1260(sp)
  401fe0:	da013a15 	stw	r8,1256(sp)
  401fe4:	da413c15 	stw	r9,1264(sp)
  401fe8:	0409b8c0 	call	409b8c <__eqdf2>
  401fec:	d8c13b17 	ldw	r3,1260(sp)
  401ff0:	da013a17 	ldw	r8,1256(sp)
  401ff4:	da413c17 	ldw	r9,1264(sp)
  401ff8:	1001001e 	bne	r2,zero,4023fc <___vfprintf_internal_r+0x11d8>
  401ffc:	008010b4 	movhi	r2,66
  402000:	10a5e104 	addi	r2,r2,-26748
  402004:	48800015 	stw	r2,0(r9)
  402008:	00800044 	movi	r2,1
  40200c:	48800115 	stw	r2,4(r9)
  402010:	4091883a 	add	r8,r8,r2
  402014:	1887883a 	add	r3,r3,r2
  402018:	da011d15 	stw	r8,1140(sp)
  40201c:	d8c11c15 	stw	r3,1136(sp)
  402020:	008001c4 	movi	r2,7
  402024:	10c20316 	blt	r2,r3,402834 <___vfprintf_internal_r+0x1610>
  402028:	4a400204 	addi	r9,r9,8
  40202c:	d8812417 	ldw	r2,1168(sp)
  402030:	d8c13217 	ldw	r3,1224(sp)
  402034:	10c00216 	blt	r2,r3,402040 <___vfprintf_internal_r+0xe1c>
  402038:	8080004c 	andi	r2,r16,1
  40203c:	103f6826 	beq	r2,zero,401de0 <___vfprintf_internal_r+0xbbc>
  402040:	d8c11c17 	ldw	r3,1136(sp)
  402044:	d9013717 	ldw	r4,1244(sp)
  402048:	00800044 	movi	r2,1
  40204c:	48800115 	stw	r2,4(r9)
  402050:	49000015 	stw	r4,0(r9)
  402054:	4091883a 	add	r8,r8,r2
  402058:	1887883a 	add	r3,r3,r2
  40205c:	da011d15 	stw	r8,1140(sp)
  402060:	d8c11c15 	stw	r3,1136(sp)
  402064:	008001c4 	movi	r2,7
  402068:	10c2ce16 	blt	r2,r3,402ba4 <___vfprintf_internal_r+0x1980>
  40206c:	4a400204 	addi	r9,r9,8
  402070:	d8813217 	ldw	r2,1224(sp)
  402074:	14bfffc4 	addi	r18,r2,-1
  402078:	04bf590e 	bge	zero,r18,401de0 <___vfprintf_internal_r+0xbbc>
  40207c:	04c00404 	movi	r19,16
  402080:	d8c11c17 	ldw	r3,1136(sp)
  402084:	050010b4 	movhi	r20,66
  402088:	a525e584 	addi	r20,r20,-26730
  40208c:	9c818a0e 	bge	r19,r18,4026b8 <___vfprintf_internal_r+0x1494>
  402090:	058001c4 	movi	r22,7
  402094:	ddc12917 	ldw	r23,1188(sp)
  402098:	00000306 	br	4020a8 <___vfprintf_internal_r+0xe84>
  40209c:	4a400204 	addi	r9,r9,8
  4020a0:	94bffc04 	addi	r18,r18,-16
  4020a4:	9c81840e 	bge	r19,r18,4026b8 <___vfprintf_internal_r+0x1494>
  4020a8:	4d000015 	stw	r20,0(r9)
  4020ac:	4cc00115 	stw	r19,4(r9)
  4020b0:	42000404 	addi	r8,r8,16
  4020b4:	18c00044 	addi	r3,r3,1
  4020b8:	da011d15 	stw	r8,1140(sp)
  4020bc:	d8c11c15 	stw	r3,1136(sp)
  4020c0:	b0fff60e 	bge	r22,r3,40209c <___vfprintf_internal_r+0xe78>
  4020c4:	8809883a 	mov	r4,r17
  4020c8:	b80b883a 	mov	r5,r23
  4020cc:	d9811b04 	addi	r6,sp,1132
  4020d0:	04011f00 	call	4011f0 <__sprint_r>
  4020d4:	103d991e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  4020d8:	da011d17 	ldw	r8,1140(sp)
  4020dc:	d8c11c17 	ldw	r3,1136(sp)
  4020e0:	da400404 	addi	r9,sp,16
  4020e4:	003fee06 	br	4020a0 <___vfprintf_internal_r+0xe7c>
  4020e8:	d8812e17 	ldw	r2,1208(sp)
  4020ec:	d9012817 	ldw	r4,1184(sp)
  4020f0:	112fc83a 	sub	r23,r2,r4
  4020f4:	05ff000e 	bge	zero,r23,401cf8 <___vfprintf_internal_r+0xad4>
  4020f8:	07000404 	movi	fp,16
  4020fc:	050010b4 	movhi	r20,66
  402100:	a525e584 	addi	r20,r20,-26730
  402104:	e5c01d0e 	bge	fp,r23,40217c <___vfprintf_internal_r+0xf58>
  402108:	dc812a15 	stw	r18,1192(sp)
  40210c:	058001c4 	movi	r22,7
  402110:	a025883a 	mov	r18,r20
  402114:	8029883a 	mov	r20,r16
  402118:	dc012917 	ldw	r16,1188(sp)
  40211c:	00000306 	br	40212c <___vfprintf_internal_r+0xf08>
  402120:	bdfffc04 	addi	r23,r23,-16
  402124:	4a400204 	addi	r9,r9,8
  402128:	e5c0110e 	bge	fp,r23,402170 <___vfprintf_internal_r+0xf4c>
  40212c:	4c800015 	stw	r18,0(r9)
  402130:	4f000115 	stw	fp,4(r9)
  402134:	42000404 	addi	r8,r8,16
  402138:	18c00044 	addi	r3,r3,1
  40213c:	da011d15 	stw	r8,1140(sp)
  402140:	d8c11c15 	stw	r3,1136(sp)
  402144:	b0fff60e 	bge	r22,r3,402120 <___vfprintf_internal_r+0xefc>
  402148:	8809883a 	mov	r4,r17
  40214c:	800b883a 	mov	r5,r16
  402150:	d9811b04 	addi	r6,sp,1132
  402154:	04011f00 	call	4011f0 <__sprint_r>
  402158:	103d781e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  40215c:	bdfffc04 	addi	r23,r23,-16
  402160:	da011d17 	ldw	r8,1140(sp)
  402164:	d8c11c17 	ldw	r3,1136(sp)
  402168:	da400404 	addi	r9,sp,16
  40216c:	e5ffef16 	blt	fp,r23,40212c <___vfprintf_internal_r+0xf08>
  402170:	a021883a 	mov	r16,r20
  402174:	9029883a 	mov	r20,r18
  402178:	dc812a17 	ldw	r18,1192(sp)
  40217c:	4d000015 	stw	r20,0(r9)
  402180:	4dc00115 	stw	r23,4(r9)
  402184:	45d1883a 	add	r8,r8,r23
  402188:	18c00044 	addi	r3,r3,1
  40218c:	da011d15 	stw	r8,1140(sp)
  402190:	d8c11c15 	stw	r3,1136(sp)
  402194:	008001c4 	movi	r2,7
  402198:	10c13616 	blt	r2,r3,402674 <___vfprintf_internal_r+0x1450>
  40219c:	4a400204 	addi	r9,r9,8
  4021a0:	003ed506 	br	401cf8 <___vfprintf_internal_r+0xad4>
  4021a4:	d9412917 	ldw	r5,1188(sp)
  4021a8:	8809883a 	mov	r4,r17
  4021ac:	d9811b04 	addi	r6,sp,1132
  4021b0:	04011f00 	call	4011f0 <__sprint_r>
  4021b4:	103f4226 	beq	r2,zero,401ec0 <___vfprintf_internal_r+0xc9c>
  4021b8:	003d6006 	br	40173c <___vfprintf_internal_r+0x518>
  4021bc:	d9013217 	ldw	r4,1224(sp)
  4021c0:	00800044 	movi	r2,1
  4021c4:	4cc00015 	stw	r19,0(r9)
  4021c8:	1101000e 	bge	r2,r4,4025cc <___vfprintf_internal_r+0x13a8>
  4021cc:	00800044 	movi	r2,1
  4021d0:	48800115 	stw	r2,4(r9)
  4021d4:	4091883a 	add	r8,r8,r2
  4021d8:	1887883a 	add	r3,r3,r2
  4021dc:	da011d15 	stw	r8,1140(sp)
  4021e0:	d8c11c15 	stw	r3,1136(sp)
  4021e4:	008001c4 	movi	r2,7
  4021e8:	10c10c16 	blt	r2,r3,40261c <___vfprintf_internal_r+0x13f8>
  4021ec:	4a400204 	addi	r9,r9,8
  4021f0:	d8813717 	ldw	r2,1244(sp)
  4021f4:	48800015 	stw	r2,0(r9)
  4021f8:	00800044 	movi	r2,1
  4021fc:	48800115 	stw	r2,4(r9)
  402200:	4091883a 	add	r8,r8,r2
  402204:	1887883a 	add	r3,r3,r2
  402208:	da011d15 	stw	r8,1140(sp)
  40220c:	d8c11c15 	stw	r3,1136(sp)
  402210:	008001c4 	movi	r2,7
  402214:	10c10a16 	blt	r2,r3,402640 <___vfprintf_internal_r+0x141c>
  402218:	4c800204 	addi	r18,r9,8
  40221c:	d9013317 	ldw	r4,1228(sp)
  402220:	d9413417 	ldw	r5,1232(sp)
  402224:	000d883a 	mov	r6,zero
  402228:	000f883a 	mov	r7,zero
  40222c:	d8c13b15 	stw	r3,1260(sp)
  402230:	da013a15 	stw	r8,1256(sp)
  402234:	0409be80 	call	409be8 <__nedf2>
  402238:	d8c13b17 	ldw	r3,1260(sp)
  40223c:	da013a17 	ldw	r8,1256(sp)
  402240:	1000ba26 	beq	r2,zero,40252c <___vfprintf_internal_r+0x1308>
  402244:	d9013217 	ldw	r4,1224(sp)
  402248:	9cc00044 	addi	r19,r19,1
  40224c:	94c00015 	stw	r19,0(r18)
  402250:	20bfffc4 	addi	r2,r4,-1
  402254:	90800115 	stw	r2,4(r18)
  402258:	4091883a 	add	r8,r8,r2
  40225c:	18c00044 	addi	r3,r3,1
  402260:	da011d15 	stw	r8,1140(sp)
  402264:	d8c11c15 	stw	r3,1136(sp)
  402268:	008001c4 	movi	r2,7
  40226c:	10c0e216 	blt	r2,r3,4025f8 <___vfprintf_internal_r+0x13d4>
  402270:	94800204 	addi	r18,r18,8
  402274:	d9013517 	ldw	r4,1236(sp)
  402278:	d8811fc4 	addi	r2,sp,1151
  40227c:	90800015 	stw	r2,0(r18)
  402280:	91000115 	stw	r4,4(r18)
  402284:	4111883a 	add	r8,r8,r4
  402288:	18c00044 	addi	r3,r3,1
  40228c:	da011d15 	stw	r8,1140(sp)
  402290:	d8c11c15 	stw	r3,1136(sp)
  402294:	008001c4 	movi	r2,7
  402298:	10ff2316 	blt	r2,r3,401f28 <___vfprintf_internal_r+0xd04>
  40229c:	92400204 	addi	r9,r18,8
  4022a0:	003ecf06 	br	401de0 <___vfprintf_internal_r+0xbbc>
  4022a4:	d9412917 	ldw	r5,1188(sp)
  4022a8:	8809883a 	mov	r4,r17
  4022ac:	d9811b04 	addi	r6,sp,1132
  4022b0:	04011f00 	call	4011f0 <__sprint_r>
  4022b4:	103d211e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  4022b8:	da011d17 	ldw	r8,1140(sp)
  4022bc:	d8c11c17 	ldw	r3,1136(sp)
  4022c0:	da400404 	addi	r9,sp,16
  4022c4:	003eba06 	br	401db0 <___vfprintf_internal_r+0xb8c>
  4022c8:	d9412917 	ldw	r5,1188(sp)
  4022cc:	8809883a 	mov	r4,r17
  4022d0:	d9811b04 	addi	r6,sp,1132
  4022d4:	04011f00 	call	4011f0 <__sprint_r>
  4022d8:	103d181e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  4022dc:	da011d17 	ldw	r8,1140(sp)
  4022e0:	d8c11c17 	ldw	r3,1136(sp)
  4022e4:	da400404 	addi	r9,sp,16
  4022e8:	003e8006 	br	401cec <___vfprintf_internal_r+0xac8>
  4022ec:	d9412917 	ldw	r5,1188(sp)
  4022f0:	8809883a 	mov	r4,r17
  4022f4:	d9811b04 	addi	r6,sp,1132
  4022f8:	04011f00 	call	4011f0 <__sprint_r>
  4022fc:	103d0f1e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402300:	da011d17 	ldw	r8,1140(sp)
  402304:	d8c11c17 	ldw	r3,1136(sp)
  402308:	da400404 	addi	r9,sp,16
  40230c:	003e6a06 	br	401cb8 <___vfprintf_internal_r+0xa94>
  402310:	d9413617 	ldw	r5,1240(sp)
  402314:	d8810dc4 	addi	r2,sp,1079
  402318:	b8c003cc 	andi	r3,r23,15
  40231c:	b008973a 	slli	r4,r22,28
  402320:	28c7883a 	add	r3,r5,r3
  402324:	b82ed13a 	srli	r23,r23,4
  402328:	18c00003 	ldbu	r3,0(r3)
  40232c:	b02cd13a 	srli	r22,r22,4
  402330:	25eeb03a 	or	r23,r4,r23
  402334:	10c00005 	stb	r3,0(r2)
  402338:	bd86b03a 	or	r3,r23,r22
  40233c:	1027883a 	mov	r19,r2
  402340:	10bfffc4 	addi	r2,r2,-1
  402344:	183ff41e 	bne	r3,zero,402318 <___vfprintf_internal_r+0x10f4>
  402348:	003f1a06 	br	401fb4 <___vfprintf_internal_r+0xd90>
  40234c:	d8012b15 	stw	zero,1196(sp)
  402350:	dcc10e04 	addi	r19,sp,1080
  402354:	003d3a06 	br	401840 <___vfprintf_internal_r+0x61c>
  402358:	b0025426 	beq	r22,zero,402cac <___vfprintf_internal_r+0x1a88>
  40235c:	b807883a 	mov	r3,r23
  402360:	d8810dc4 	addi	r2,sp,1079
  402364:	882f883a 	mov	r23,r17
  402368:	04c00244 	movi	r19,9
  40236c:	8023883a 	mov	r17,r16
  402370:	da412815 	stw	r9,1184(sp)
  402374:	1821883a 	mov	r16,r3
  402378:	8009883a 	mov	r4,r16
  40237c:	b00b883a 	mov	r5,r22
  402380:	01800284 	movi	r6,10
  402384:	000f883a 	mov	r7,zero
  402388:	1029883a 	mov	r20,r2
  40238c:	0408cc40 	call	408cc4 <__umoddi3>
  402390:	10800c04 	addi	r2,r2,48
  402394:	8009883a 	mov	r4,r16
  402398:	b00b883a 	mov	r5,r22
  40239c:	a0800005 	stb	r2,0(r20)
  4023a0:	01800284 	movi	r6,10
  4023a4:	000f883a 	mov	r7,zero
  4023a8:	04086740 	call	408674 <__udivdi3>
  4023ac:	1021883a 	mov	r16,r2
  4023b0:	182d883a 	mov	r22,r3
  4023b4:	a0bfffc4 	addi	r2,r20,-1
  4023b8:	183fef1e 	bne	r3,zero,402378 <___vfprintf_internal_r+0x1154>
  4023bc:	9c3fee36 	bltu	r19,r16,402378 <___vfprintf_internal_r+0x1154>
  4023c0:	da412817 	ldw	r9,1184(sp)
  4023c4:	8005883a 	mov	r2,r16
  4023c8:	8821883a 	mov	r16,r17
  4023cc:	b823883a 	mov	r17,r23
  4023d0:	102f883a 	mov	r23,r2
  4023d4:	d8812717 	ldw	r2,1180(sp)
  4023d8:	a4ffffc4 	addi	r19,r20,-1
  4023dc:	bdc00c04 	addi	r23,r23,48
  4023e0:	14c5c83a 	sub	r2,r2,r19
  4023e4:	a5ffffc5 	stb	r23,-1(r20)
  4023e8:	d8812b15 	stw	r2,1196(sp)
  4023ec:	003d1406 	br	401840 <___vfprintf_internal_r+0x61c>
  4023f0:	00c00044 	movi	r3,1
  4023f4:	bd84b03a 	or	r2,r23,r22
  4023f8:	003d0306 	br	401808 <___vfprintf_internal_r+0x5e4>
  4023fc:	dc812417 	ldw	r18,1168(sp)
  402400:	0481140e 	bge	zero,r18,402854 <___vfprintf_internal_r+0x1630>
  402404:	d9013217 	ldw	r4,1224(sp)
  402408:	4cc00015 	stw	r19,0(r9)
  40240c:	9100ec16 	blt	r18,r4,4027c0 <___vfprintf_internal_r+0x159c>
  402410:	49000115 	stw	r4,4(r9)
  402414:	4111883a 	add	r8,r8,r4
  402418:	18c00044 	addi	r3,r3,1
  40241c:	da011d15 	stw	r8,1140(sp)
  402420:	d8c11c15 	stw	r3,1136(sp)
  402424:	008001c4 	movi	r2,7
  402428:	10c23616 	blt	r2,r3,402d04 <___vfprintf_internal_r+0x1ae0>
  40242c:	4a400204 	addi	r9,r9,8
  402430:	d8813217 	ldw	r2,1224(sp)
  402434:	90a5c83a 	sub	r18,r18,r2
  402438:	04beae0e 	bge	zero,r18,401ef4 <___vfprintf_internal_r+0xcd0>
  40243c:	04c00404 	movi	r19,16
  402440:	d8c11c17 	ldw	r3,1136(sp)
  402444:	050010b4 	movhi	r20,66
  402448:	a525e584 	addi	r20,r20,-26730
  40244c:	9c81dd0e 	bge	r19,r18,402bc4 <___vfprintf_internal_r+0x19a0>
  402450:	058001c4 	movi	r22,7
  402454:	ddc12917 	ldw	r23,1188(sp)
  402458:	00000306 	br	402468 <___vfprintf_internal_r+0x1244>
  40245c:	4a400204 	addi	r9,r9,8
  402460:	94bffc04 	addi	r18,r18,-16
  402464:	9c81d70e 	bge	r19,r18,402bc4 <___vfprintf_internal_r+0x19a0>
  402468:	4d000015 	stw	r20,0(r9)
  40246c:	4cc00115 	stw	r19,4(r9)
  402470:	42000404 	addi	r8,r8,16
  402474:	18c00044 	addi	r3,r3,1
  402478:	da011d15 	stw	r8,1140(sp)
  40247c:	d8c11c15 	stw	r3,1136(sp)
  402480:	b0fff60e 	bge	r22,r3,40245c <___vfprintf_internal_r+0x1238>
  402484:	8809883a 	mov	r4,r17
  402488:	b80b883a 	mov	r5,r23
  40248c:	d9811b04 	addi	r6,sp,1132
  402490:	04011f00 	call	4011f0 <__sprint_r>
  402494:	103ca91e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402498:	da011d17 	ldw	r8,1140(sp)
  40249c:	d8c11c17 	ldw	r3,1136(sp)
  4024a0:	da400404 	addi	r9,sp,16
  4024a4:	003fee06 	br	402460 <___vfprintf_internal_r+0x123c>
  4024a8:	d9412917 	ldw	r5,1188(sp)
  4024ac:	8809883a 	mov	r4,r17
  4024b0:	d9811b04 	addi	r6,sp,1132
  4024b4:	04011f00 	call	4011f0 <__sprint_r>
  4024b8:	103ca01e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  4024bc:	da011d17 	ldw	r8,1140(sp)
  4024c0:	d8c11c17 	ldw	r3,1136(sp)
  4024c4:	da400404 	addi	r9,sp,16
  4024c8:	003dee06 	br	401c84 <___vfprintf_internal_r+0xa60>
  4024cc:	00c00084 	movi	r3,2
  4024d0:	bd84b03a 	or	r2,r23,r22
  4024d4:	d8012585 	stb	zero,1174(sp)
  4024d8:	003ccb06 	br	401808 <___vfprintf_internal_r+0x5e4>
  4024dc:	8080040c 	andi	r2,r16,16
  4024e0:	1000ae26 	beq	r2,zero,40279c <___vfprintf_internal_r+0x1578>
  4024e4:	d9012d17 	ldw	r4,1204(sp)
  4024e8:	25c00017 	ldw	r23,0(r4)
  4024ec:	21000104 	addi	r4,r4,4
  4024f0:	d9012d15 	stw	r4,1204(sp)
  4024f4:	b82dd7fa 	srai	r22,r23,31
  4024f8:	b005883a 	mov	r2,r22
  4024fc:	003cb906 	br	4017e4 <___vfprintf_internal_r+0x5c0>
  402500:	8080040c 	andi	r2,r16,16
  402504:	10007026 	beq	r2,zero,4026c8 <___vfprintf_internal_r+0x14a4>
  402508:	d8812d17 	ldw	r2,1204(sp)
  40250c:	002d883a 	mov	r22,zero
  402510:	00c00044 	movi	r3,1
  402514:	15c00017 	ldw	r23,0(r2)
  402518:	10800104 	addi	r2,r2,4
  40251c:	d8812d15 	stw	r2,1204(sp)
  402520:	d8012585 	stb	zero,1174(sp)
  402524:	b805883a 	mov	r2,r23
  402528:	003cb706 	br	401808 <___vfprintf_internal_r+0x5e4>
  40252c:	d8813217 	ldw	r2,1224(sp)
  402530:	14ffffc4 	addi	r19,r2,-1
  402534:	04ff4f0e 	bge	zero,r19,402274 <___vfprintf_internal_r+0x1050>
  402538:	05800404 	movi	r22,16
  40253c:	050010b4 	movhi	r20,66
  402540:	a525e584 	addi	r20,r20,-26730
  402544:	b4c0470e 	bge	r22,r19,402664 <___vfprintf_internal_r+0x1440>
  402548:	05c001c4 	movi	r23,7
  40254c:	df012917 	ldw	fp,1188(sp)
  402550:	00000306 	br	402560 <___vfprintf_internal_r+0x133c>
  402554:	94800204 	addi	r18,r18,8
  402558:	9cfffc04 	addi	r19,r19,-16
  40255c:	b4c0410e 	bge	r22,r19,402664 <___vfprintf_internal_r+0x1440>
  402560:	95000015 	stw	r20,0(r18)
  402564:	95800115 	stw	r22,4(r18)
  402568:	42000404 	addi	r8,r8,16
  40256c:	18c00044 	addi	r3,r3,1
  402570:	da011d15 	stw	r8,1140(sp)
  402574:	d8c11c15 	stw	r3,1136(sp)
  402578:	b8fff60e 	bge	r23,r3,402554 <___vfprintf_internal_r+0x1330>
  40257c:	8809883a 	mov	r4,r17
  402580:	e00b883a 	mov	r5,fp
  402584:	d9811b04 	addi	r6,sp,1132
  402588:	04011f00 	call	4011f0 <__sprint_r>
  40258c:	103c6b1e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402590:	da011d17 	ldw	r8,1140(sp)
  402594:	d8c11c17 	ldw	r3,1136(sp)
  402598:	dc800404 	addi	r18,sp,16
  40259c:	003fee06 	br	402558 <___vfprintf_internal_r+0x1334>
  4025a0:	8080040c 	andi	r2,r16,16
  4025a4:	10005326 	beq	r2,zero,4026f4 <___vfprintf_internal_r+0x14d0>
  4025a8:	d8c12d17 	ldw	r3,1204(sp)
  4025ac:	002d883a 	mov	r22,zero
  4025b0:	1dc00017 	ldw	r23,0(r3)
  4025b4:	18c00104 	addi	r3,r3,4
  4025b8:	d8c12d15 	stw	r3,1204(sp)
  4025bc:	b805883a 	mov	r2,r23
  4025c0:	0007883a 	mov	r3,zero
  4025c4:	d8012585 	stb	zero,1174(sp)
  4025c8:	003c8f06 	br	401808 <___vfprintf_internal_r+0x5e4>
  4025cc:	8088703a 	and	r4,r16,r2
  4025d0:	203efe1e 	bne	r4,zero,4021cc <___vfprintf_internal_r+0xfa8>
  4025d4:	48800115 	stw	r2,4(r9)
  4025d8:	42000044 	addi	r8,r8,1
  4025dc:	18c00044 	addi	r3,r3,1
  4025e0:	da011d15 	stw	r8,1140(sp)
  4025e4:	d8c11c15 	stw	r3,1136(sp)
  4025e8:	008001c4 	movi	r2,7
  4025ec:	10c00216 	blt	r2,r3,4025f8 <___vfprintf_internal_r+0x13d4>
  4025f0:	4c800204 	addi	r18,r9,8
  4025f4:	003f1f06 	br	402274 <___vfprintf_internal_r+0x1050>
  4025f8:	d9412917 	ldw	r5,1188(sp)
  4025fc:	8809883a 	mov	r4,r17
  402600:	d9811b04 	addi	r6,sp,1132
  402604:	04011f00 	call	4011f0 <__sprint_r>
  402608:	103c4c1e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  40260c:	dc800404 	addi	r18,sp,16
  402610:	da011d17 	ldw	r8,1140(sp)
  402614:	d8c11c17 	ldw	r3,1136(sp)
  402618:	003f1606 	br	402274 <___vfprintf_internal_r+0x1050>
  40261c:	d9412917 	ldw	r5,1188(sp)
  402620:	8809883a 	mov	r4,r17
  402624:	d9811b04 	addi	r6,sp,1132
  402628:	04011f00 	call	4011f0 <__sprint_r>
  40262c:	103c431e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402630:	da011d17 	ldw	r8,1140(sp)
  402634:	d8c11c17 	ldw	r3,1136(sp)
  402638:	da400404 	addi	r9,sp,16
  40263c:	003eec06 	br	4021f0 <___vfprintf_internal_r+0xfcc>
  402640:	d9412917 	ldw	r5,1188(sp)
  402644:	8809883a 	mov	r4,r17
  402648:	d9811b04 	addi	r6,sp,1132
  40264c:	04011f00 	call	4011f0 <__sprint_r>
  402650:	103c3a1e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402654:	da011d17 	ldw	r8,1140(sp)
  402658:	d8c11c17 	ldw	r3,1136(sp)
  40265c:	dc800404 	addi	r18,sp,16
  402660:	003eee06 	br	40221c <___vfprintf_internal_r+0xff8>
  402664:	95000015 	stw	r20,0(r18)
  402668:	94c00115 	stw	r19,4(r18)
  40266c:	44d1883a 	add	r8,r8,r19
  402670:	003efa06 	br	40225c <___vfprintf_internal_r+0x1038>
  402674:	d9412917 	ldw	r5,1188(sp)
  402678:	8809883a 	mov	r4,r17
  40267c:	d9811b04 	addi	r6,sp,1132
  402680:	04011f00 	call	4011f0 <__sprint_r>
  402684:	103c2d1e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402688:	da011d17 	ldw	r8,1140(sp)
  40268c:	d8c11c17 	ldw	r3,1136(sp)
  402690:	da400404 	addi	r9,sp,16
  402694:	003d9806 	br	401cf8 <___vfprintf_internal_r+0xad4>
  402698:	8080100c 	andi	r2,r16,64
  40269c:	10011626 	beq	r2,zero,402af8 <___vfprintf_internal_r+0x18d4>
  4026a0:	d8c12d17 	ldw	r3,1204(sp)
  4026a4:	002d883a 	mov	r22,zero
  4026a8:	1dc0000b 	ldhu	r23,0(r3)
  4026ac:	18c00104 	addi	r3,r3,4
  4026b0:	d8c12d15 	stw	r3,1204(sp)
  4026b4:	003cc106 	br	4019bc <___vfprintf_internal_r+0x798>
  4026b8:	4d000015 	stw	r20,0(r9)
  4026bc:	4c800115 	stw	r18,4(r9)
  4026c0:	4491883a 	add	r8,r8,r18
  4026c4:	003dc006 	br	401dc8 <___vfprintf_internal_r+0xba4>
  4026c8:	8080100c 	andi	r2,r16,64
  4026cc:	10010126 	beq	r2,zero,402ad4 <___vfprintf_internal_r+0x18b0>
  4026d0:	d8c12d17 	ldw	r3,1204(sp)
  4026d4:	002d883a 	mov	r22,zero
  4026d8:	1dc0000b 	ldhu	r23,0(r3)
  4026dc:	18c00104 	addi	r3,r3,4
  4026e0:	d8c12d15 	stw	r3,1204(sp)
  4026e4:	b805883a 	mov	r2,r23
  4026e8:	00c00044 	movi	r3,1
  4026ec:	d8012585 	stb	zero,1174(sp)
  4026f0:	003c4506 	br	401808 <___vfprintf_internal_r+0x5e4>
  4026f4:	8080100c 	andi	r2,r16,64
  4026f8:	10010526 	beq	r2,zero,402b10 <___vfprintf_internal_r+0x18ec>
  4026fc:	d9012d17 	ldw	r4,1204(sp)
  402700:	002d883a 	mov	r22,zero
  402704:	0007883a 	mov	r3,zero
  402708:	25c0000b 	ldhu	r23,0(r4)
  40270c:	21000104 	addi	r4,r4,4
  402710:	d9012d15 	stw	r4,1204(sp)
  402714:	b805883a 	mov	r2,r23
  402718:	d8012585 	stb	zero,1174(sp)
  40271c:	003c3a06 	br	401808 <___vfprintf_internal_r+0x5e4>
  402720:	d8812d17 	ldw	r2,1204(sp)
  402724:	15800017 	ldw	r22,0(r2)
  402728:	15000117 	ldw	r20,4(r2)
  40272c:	10800204 	addi	r2,r2,8
  402730:	d8812d15 	stw	r2,1204(sp)
  402734:	dd813315 	stw	r22,1228(sp)
  402738:	dd013415 	stw	r20,1232(sp)
  40273c:	003c5906 	br	4018a4 <___vfprintf_internal_r+0x680>
  402740:	00c00084 	movi	r3,2
  402744:	d8012585 	stb	zero,1174(sp)
  402748:	003c2f06 	br	401808 <___vfprintf_internal_r+0x5e4>
  40274c:	ac800007 	ldb	r18,0(r21)
  402750:	003b1006 	br	401394 <___vfprintf_internal_r+0x170>
  402754:	8080040c 	andi	r2,r16,16
  402758:	1000091e 	bne	r2,zero,402780 <___vfprintf_internal_r+0x155c>
  40275c:	8400100c 	andi	r16,r16,64
  402760:	80000726 	beq	r16,zero,402780 <___vfprintf_internal_r+0x155c>
  402764:	d8c12d17 	ldw	r3,1204(sp)
  402768:	d9012c17 	ldw	r4,1200(sp)
  40276c:	18800017 	ldw	r2,0(r3)
  402770:	18c00104 	addi	r3,r3,4
  402774:	d8c12d15 	stw	r3,1204(sp)
  402778:	1100000d 	sth	r4,0(r2)
  40277c:	003adf06 	br	4012fc <___vfprintf_internal_r+0xd8>
  402780:	d8c12d17 	ldw	r3,1204(sp)
  402784:	d9012c17 	ldw	r4,1200(sp)
  402788:	18800017 	ldw	r2,0(r3)
  40278c:	18c00104 	addi	r3,r3,4
  402790:	d8c12d15 	stw	r3,1204(sp)
  402794:	11000015 	stw	r4,0(r2)
  402798:	003ad806 	br	4012fc <___vfprintf_internal_r+0xd8>
  40279c:	8080100c 	andi	r2,r16,64
  4027a0:	1000c526 	beq	r2,zero,402ab8 <___vfprintf_internal_r+0x1894>
  4027a4:	d8812d17 	ldw	r2,1204(sp)
  4027a8:	15c0000f 	ldh	r23,0(r2)
  4027ac:	10800104 	addi	r2,r2,4
  4027b0:	d8812d15 	stw	r2,1204(sp)
  4027b4:	b82dd7fa 	srai	r22,r23,31
  4027b8:	b005883a 	mov	r2,r22
  4027bc:	003c0906 	br	4017e4 <___vfprintf_internal_r+0x5c0>
  4027c0:	4c800115 	stw	r18,4(r9)
  4027c4:	9211883a 	add	r8,r18,r8
  4027c8:	18c00044 	addi	r3,r3,1
  4027cc:	da011d15 	stw	r8,1140(sp)
  4027d0:	d8c11c15 	stw	r3,1136(sp)
  4027d4:	008001c4 	movi	r2,7
  4027d8:	10c14016 	blt	r2,r3,402cdc <___vfprintf_internal_r+0x1ab8>
  4027dc:	4a400204 	addi	r9,r9,8
  4027e0:	d8813717 	ldw	r2,1244(sp)
  4027e4:	9ca7883a 	add	r19,r19,r18
  4027e8:	48800015 	stw	r2,0(r9)
  4027ec:	00800044 	movi	r2,1
  4027f0:	48800115 	stw	r2,4(r9)
  4027f4:	4091883a 	add	r8,r8,r2
  4027f8:	1887883a 	add	r3,r3,r2
  4027fc:	da011d15 	stw	r8,1140(sp)
  402800:	d8c11c15 	stw	r3,1136(sp)
  402804:	008001c4 	movi	r2,7
  402808:	10c12c16 	blt	r2,r3,402cbc <___vfprintf_internal_r+0x1a98>
  40280c:	4a400204 	addi	r9,r9,8
  402810:	d9013217 	ldw	r4,1224(sp)
  402814:	da011d17 	ldw	r8,1140(sp)
  402818:	d8c11c17 	ldw	r3,1136(sp)
  40281c:	24a5c83a 	sub	r18,r4,r18
  402820:	4cc00015 	stw	r19,0(r9)
  402824:	003fa506 	br	4026bc <___vfprintf_internal_r+0x1498>
  402828:	04c010b4 	movhi	r19,66
  40282c:	9ce5d204 	addi	r19,r19,-26808
  402830:	003c2e06 	br	4018ec <___vfprintf_internal_r+0x6c8>
  402834:	d9412917 	ldw	r5,1188(sp)
  402838:	8809883a 	mov	r4,r17
  40283c:	d9811b04 	addi	r6,sp,1132
  402840:	04011f00 	call	4011f0 <__sprint_r>
  402844:	103bbd1e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402848:	da011d17 	ldw	r8,1140(sp)
  40284c:	da400404 	addi	r9,sp,16
  402850:	003df606 	br	40202c <___vfprintf_internal_r+0xe08>
  402854:	008010b4 	movhi	r2,66
  402858:	10a5e104 	addi	r2,r2,-26748
  40285c:	48800015 	stw	r2,0(r9)
  402860:	00800044 	movi	r2,1
  402864:	48800115 	stw	r2,4(r9)
  402868:	4091883a 	add	r8,r8,r2
  40286c:	1887883a 	add	r3,r3,r2
  402870:	da011d15 	stw	r8,1140(sp)
  402874:	d8c11c15 	stw	r3,1136(sp)
  402878:	008001c4 	movi	r2,7
  40287c:	10c0bc16 	blt	r2,r3,402b70 <___vfprintf_internal_r+0x194c>
  402880:	4a400204 	addi	r9,r9,8
  402884:	9000041e 	bne	r18,zero,402898 <___vfprintf_internal_r+0x1674>
  402888:	d8c13217 	ldw	r3,1224(sp)
  40288c:	1800021e 	bne	r3,zero,402898 <___vfprintf_internal_r+0x1674>
  402890:	8080004c 	andi	r2,r16,1
  402894:	103d5226 	beq	r2,zero,401de0 <___vfprintf_internal_r+0xbbc>
  402898:	d8c11c17 	ldw	r3,1136(sp)
  40289c:	d9013717 	ldw	r4,1244(sp)
  4028a0:	00800044 	movi	r2,1
  4028a4:	48800115 	stw	r2,4(r9)
  4028a8:	49000015 	stw	r4,0(r9)
  4028ac:	4091883a 	add	r8,r8,r2
  4028b0:	1887883a 	add	r3,r3,r2
  4028b4:	da011d15 	stw	r8,1140(sp)
  4028b8:	d8c11c15 	stw	r3,1136(sp)
  4028bc:	008001c4 	movi	r2,7
  4028c0:	10c14516 	blt	r2,r3,402dd8 <___vfprintf_internal_r+0x1bb4>
  4028c4:	4a400204 	addi	r9,r9,8
  4028c8:	04a5c83a 	sub	r18,zero,r18
  4028cc:	0480d70e 	bge	zero,r18,402c2c <___vfprintf_internal_r+0x1a08>
  4028d0:	05800404 	movi	r22,16
  4028d4:	050010b4 	movhi	r20,66
  4028d8:	a525e584 	addi	r20,r20,-26730
  4028dc:	b480db0e 	bge	r22,r18,402c4c <___vfprintf_internal_r+0x1a28>
  4028e0:	05c001c4 	movi	r23,7
  4028e4:	df012917 	ldw	fp,1188(sp)
  4028e8:	00000306 	br	4028f8 <___vfprintf_internal_r+0x16d4>
  4028ec:	4a400204 	addi	r9,r9,8
  4028f0:	94bffc04 	addi	r18,r18,-16
  4028f4:	b480d50e 	bge	r22,r18,402c4c <___vfprintf_internal_r+0x1a28>
  4028f8:	4d000015 	stw	r20,0(r9)
  4028fc:	4d800115 	stw	r22,4(r9)
  402900:	42000404 	addi	r8,r8,16
  402904:	18c00044 	addi	r3,r3,1
  402908:	da011d15 	stw	r8,1140(sp)
  40290c:	d8c11c15 	stw	r3,1136(sp)
  402910:	b8fff60e 	bge	r23,r3,4028ec <___vfprintf_internal_r+0x16c8>
  402914:	8809883a 	mov	r4,r17
  402918:	e00b883a 	mov	r5,fp
  40291c:	d9811b04 	addi	r6,sp,1132
  402920:	04011f00 	call	4011f0 <__sprint_r>
  402924:	103b851e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402928:	da011d17 	ldw	r8,1140(sp)
  40292c:	d8c11c17 	ldw	r3,1136(sp)
  402930:	da400404 	addi	r9,sp,16
  402934:	003fee06 	br	4028f0 <___vfprintf_internal_r+0x16cc>
  402938:	da413c15 	stw	r9,1264(sp)
  40293c:	0407f700 	call	407f70 <__isnand>
  402940:	da413c17 	ldw	r9,1264(sp)
  402944:	10007e1e 	bne	r2,zero,402b40 <___vfprintf_internal_r+0x191c>
  402948:	00bfffc4 	movi	r2,-1
  40294c:	e0816a26 	beq	fp,r2,402ef8 <___vfprintf_internal_r+0x1cd4>
  402950:	008019c4 	movi	r2,103
  402954:	90816526 	beq	r18,r2,402eec <___vfprintf_internal_r+0x1cc8>
  402958:	008011c4 	movi	r2,71
  40295c:	90816326 	beq	r18,r2,402eec <___vfprintf_internal_r+0x1cc8>
  402960:	80c04014 	ori	r3,r16,256
  402964:	d8c12a15 	stw	r3,1192(sp)
  402968:	a0016516 	blt	r20,zero,402f00 <___vfprintf_internal_r+0x1cdc>
  40296c:	d8012f05 	stb	zero,1212(sp)
  402970:	00801984 	movi	r2,102
  402974:	9080f226 	beq	r18,r2,402d40 <___vfprintf_internal_r+0x1b1c>
  402978:	00801184 	movi	r2,70
  40297c:	9080f026 	beq	r18,r2,402d40 <___vfprintf_internal_r+0x1b1c>
  402980:	00801944 	movi	r2,101
  402984:	90818d26 	beq	r18,r2,402fbc <___vfprintf_internal_r+0x1d98>
  402988:	00801144 	movi	r2,69
  40298c:	90818b26 	beq	r18,r2,402fbc <___vfprintf_internal_r+0x1d98>
  402990:	e02f883a 	mov	r23,fp
  402994:	d8812404 	addi	r2,sp,1168
  402998:	d8800115 	stw	r2,4(sp)
  40299c:	d8812304 	addi	r2,sp,1164
  4029a0:	d8800215 	stw	r2,8(sp)
  4029a4:	d8812204 	addi	r2,sp,1160
  4029a8:	ddc00015 	stw	r23,0(sp)
  4029ac:	d8800315 	stw	r2,12(sp)
  4029b0:	8809883a 	mov	r4,r17
  4029b4:	b00b883a 	mov	r5,r22
  4029b8:	a00d883a 	mov	r6,r20
  4029bc:	01c00084 	movi	r7,2
  4029c0:	da413c15 	stw	r9,1264(sp)
  4029c4:	04036140 	call	403614 <_dtoa_r>
  4029c8:	1027883a 	mov	r19,r2
  4029cc:	008019c4 	movi	r2,103
  4029d0:	da413c17 	ldw	r9,1264(sp)
  4029d4:	9081951e 	bne	r18,r2,40302c <___vfprintf_internal_r+0x1e08>
  4029d8:	8080004c 	andi	r2,r16,1
  4029dc:	10017926 	beq	r2,zero,402fc4 <___vfprintf_internal_r+0x1da0>
  4029e0:	00801184 	movi	r2,70
  4029e4:	9dc7883a 	add	r3,r19,r23
  4029e8:	9080e626 	beq	r18,r2,402d84 <___vfprintf_internal_r+0x1b60>
  4029ec:	b009883a 	mov	r4,r22
  4029f0:	a00b883a 	mov	r5,r20
  4029f4:	000d883a 	mov	r6,zero
  4029f8:	000f883a 	mov	r7,zero
  4029fc:	d8c13b15 	stw	r3,1260(sp)
  402a00:	da413c15 	stw	r9,1264(sp)
  402a04:	0409b8c0 	call	409b8c <__eqdf2>
  402a08:	d8c13b17 	ldw	r3,1260(sp)
  402a0c:	da413c17 	ldw	r9,1264(sp)
  402a10:	10000726 	beq	r2,zero,402a30 <___vfprintf_internal_r+0x180c>
  402a14:	d8812217 	ldw	r2,1160(sp)
  402a18:	10c18a2e 	bgeu	r2,r3,403044 <___vfprintf_internal_r+0x1e20>
  402a1c:	01000c04 	movi	r4,48
  402a20:	11000005 	stb	r4,0(r2)
  402a24:	10800044 	addi	r2,r2,1
  402a28:	d8812215 	stw	r2,1160(sp)
  402a2c:	10fffc1e 	bne	r2,r3,402a20 <___vfprintf_internal_r+0x17fc>
  402a30:	1cc7c83a 	sub	r3,r3,r19
  402a34:	d8c13215 	stw	r3,1224(sp)
  402a38:	008019c4 	movi	r2,103
  402a3c:	9080fa26 	beq	r18,r2,402e28 <___vfprintf_internal_r+0x1c04>
  402a40:	008011c4 	movi	r2,71
  402a44:	9080f826 	beq	r18,r2,402e28 <___vfprintf_internal_r+0x1c04>
  402a48:	00801984 	movi	r2,102
  402a4c:	90818e1e 	bne	r18,r2,403088 <___vfprintf_internal_r+0x1e64>
  402a50:	d8812417 	ldw	r2,1168(sp)
  402a54:	d8812b15 	stw	r2,1196(sp)
  402a58:	00817c0e 	bge	zero,r2,40304c <___vfprintf_internal_r+0x1e28>
  402a5c:	e000021e 	bne	fp,zero,402a68 <___vfprintf_internal_r+0x1844>
  402a60:	8400004c 	andi	r16,r16,1
  402a64:	80000426 	beq	r16,zero,402a78 <___vfprintf_internal_r+0x1854>
  402a68:	d8812b17 	ldw	r2,1196(sp)
  402a6c:	e2000044 	addi	r8,fp,1
  402a70:	1205883a 	add	r2,r2,r8
  402a74:	d8812b15 	stw	r2,1196(sp)
  402a78:	d8812815 	stw	r2,1184(sp)
  402a7c:	10010b16 	blt	r2,zero,402eac <___vfprintf_internal_r+0x1c88>
  402a80:	ddc12f07 	ldb	r23,1212(sp)
  402a84:	b800e426 	beq	r23,zero,402e18 <___vfprintf_internal_r+0x1bf4>
  402a88:	00800b44 	movi	r2,45
  402a8c:	d8812585 	stb	r2,1174(sp)
  402a90:	dc012a17 	ldw	r16,1192(sp)
  402a94:	d8013115 	stw	zero,1220(sp)
  402a98:	003b7306 	br	401868 <___vfprintf_internal_r+0x644>
  402a9c:	d8812b17 	ldw	r2,1196(sp)
  402aa0:	d8812815 	stw	r2,1184(sp)
  402aa4:	10005716 	blt	r2,zero,402c04 <___vfprintf_internal_r+0x19e0>
  402aa8:	d8812583 	ldbu	r2,1174(sp)
  402aac:	ddc12d15 	stw	r23,1204(sp)
  402ab0:	d8013115 	stw	zero,1220(sp)
  402ab4:	003b6806 	br	401858 <___vfprintf_internal_r+0x634>
  402ab8:	d8c12d17 	ldw	r3,1204(sp)
  402abc:	1dc00017 	ldw	r23,0(r3)
  402ac0:	18c00104 	addi	r3,r3,4
  402ac4:	d8c12d15 	stw	r3,1204(sp)
  402ac8:	b82dd7fa 	srai	r22,r23,31
  402acc:	b005883a 	mov	r2,r22
  402ad0:	003b4406 	br	4017e4 <___vfprintf_internal_r+0x5c0>
  402ad4:	d9012d17 	ldw	r4,1204(sp)
  402ad8:	002d883a 	mov	r22,zero
  402adc:	00c00044 	movi	r3,1
  402ae0:	25c00017 	ldw	r23,0(r4)
  402ae4:	21000104 	addi	r4,r4,4
  402ae8:	d9012d15 	stw	r4,1204(sp)
  402aec:	b805883a 	mov	r2,r23
  402af0:	d8012585 	stb	zero,1174(sp)
  402af4:	003b4406 	br	401808 <___vfprintf_internal_r+0x5e4>
  402af8:	d9012d17 	ldw	r4,1204(sp)
  402afc:	002d883a 	mov	r22,zero
  402b00:	25c00017 	ldw	r23,0(r4)
  402b04:	21000104 	addi	r4,r4,4
  402b08:	d9012d15 	stw	r4,1204(sp)
  402b0c:	003bab06 	br	4019bc <___vfprintf_internal_r+0x798>
  402b10:	d8812d17 	ldw	r2,1204(sp)
  402b14:	002d883a 	mov	r22,zero
  402b18:	0007883a 	mov	r3,zero
  402b1c:	15c00017 	ldw	r23,0(r2)
  402b20:	10800104 	addi	r2,r2,4
  402b24:	d8812d15 	stw	r2,1204(sp)
  402b28:	d8012585 	stb	zero,1174(sp)
  402b2c:	b805883a 	mov	r2,r23
  402b30:	003b3506 	br	401808 <___vfprintf_internal_r+0x5e4>
  402b34:	00ffffc4 	movi	r3,-1
  402b38:	b82b883a 	mov	r21,r23
  402b3c:	003a1606 	br	401398 <___vfprintf_internal_r+0x174>
  402b40:	008011c4 	movi	r2,71
  402b44:	1480b116 	blt	r2,r18,402e0c <___vfprintf_internal_r+0x1be8>
  402b48:	04c010b4 	movhi	r19,66
  402b4c:	9ce5d304 	addi	r19,r19,-26804
  402b50:	00c000c4 	movi	r3,3
  402b54:	00bfdfc4 	movi	r2,-129
  402b58:	80a0703a 	and	r16,r16,r2
  402b5c:	d8c12815 	stw	r3,1184(sp)
  402b60:	d8812583 	ldbu	r2,1174(sp)
  402b64:	d8c12b15 	stw	r3,1196(sp)
  402b68:	d8013115 	stw	zero,1220(sp)
  402b6c:	003b3a06 	br	401858 <___vfprintf_internal_r+0x634>
  402b70:	d9412917 	ldw	r5,1188(sp)
  402b74:	8809883a 	mov	r4,r17
  402b78:	d9811b04 	addi	r6,sp,1132
  402b7c:	04011f00 	call	4011f0 <__sprint_r>
  402b80:	103aee1e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402b84:	dc812417 	ldw	r18,1168(sp)
  402b88:	da011d17 	ldw	r8,1140(sp)
  402b8c:	da400404 	addi	r9,sp,16
  402b90:	003f3c06 	br	402884 <___vfprintf_internal_r+0x1660>
  402b94:	ad400044 	addi	r21,r21,1
  402b98:	84000814 	ori	r16,r16,32
  402b9c:	14800047 	ldb	r18,1(r2)
  402ba0:	0039fc06 	br	401394 <___vfprintf_internal_r+0x170>
  402ba4:	d9412917 	ldw	r5,1188(sp)
  402ba8:	8809883a 	mov	r4,r17
  402bac:	d9811b04 	addi	r6,sp,1132
  402bb0:	04011f00 	call	4011f0 <__sprint_r>
  402bb4:	103ae11e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402bb8:	da011d17 	ldw	r8,1140(sp)
  402bbc:	da400404 	addi	r9,sp,16
  402bc0:	003d2b06 	br	402070 <___vfprintf_internal_r+0xe4c>
  402bc4:	4d000015 	stw	r20,0(r9)
  402bc8:	4c800115 	stw	r18,4(r9)
  402bcc:	4491883a 	add	r8,r8,r18
  402bd0:	18c00044 	addi	r3,r3,1
  402bd4:	da011d15 	stw	r8,1140(sp)
  402bd8:	d8c11c15 	stw	r3,1136(sp)
  402bdc:	008001c4 	movi	r2,7
  402be0:	10fcbd16 	blt	r2,r3,401ed8 <___vfprintf_internal_r+0xcb4>
  402be4:	4a400204 	addi	r9,r9,8
  402be8:	003cc206 	br	401ef4 <___vfprintf_internal_r+0xcd0>
  402bec:	da413c15 	stw	r9,1264(sp)
  402bf0:	040115c0 	call	40115c <strlen>
  402bf4:	d8812b15 	stw	r2,1196(sp)
  402bf8:	d8812815 	stw	r2,1184(sp)
  402bfc:	da413c17 	ldw	r9,1264(sp)
  402c00:	103fa90e 	bge	r2,zero,402aa8 <___vfprintf_internal_r+0x1884>
  402c04:	d8012815 	stw	zero,1184(sp)
  402c08:	003fa706 	br	402aa8 <___vfprintf_internal_r+0x1884>
  402c0c:	d9412917 	ldw	r5,1188(sp)
  402c10:	8809883a 	mov	r4,r17
  402c14:	d9811b04 	addi	r6,sp,1132
  402c18:	04011f00 	call	4011f0 <__sprint_r>
  402c1c:	103ac71e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402c20:	da011d17 	ldw	r8,1140(sp)
  402c24:	d8c11c17 	ldw	r3,1136(sp)
  402c28:	da400404 	addi	r9,sp,16
  402c2c:	d8813217 	ldw	r2,1224(sp)
  402c30:	4cc00015 	stw	r19,0(r9)
  402c34:	48800115 	stw	r2,4(r9)
  402c38:	4091883a 	add	r8,r8,r2
  402c3c:	003c6206 	br	401dc8 <___vfprintf_internal_r+0xba4>
  402c40:	00800b44 	movi	r2,45
  402c44:	d8812585 	stb	r2,1174(sp)
  402c48:	003b2406 	br	4018dc <___vfprintf_internal_r+0x6b8>
  402c4c:	4d000015 	stw	r20,0(r9)
  402c50:	4c800115 	stw	r18,4(r9)
  402c54:	4491883a 	add	r8,r8,r18
  402c58:	18c00044 	addi	r3,r3,1
  402c5c:	da011d15 	stw	r8,1140(sp)
  402c60:	d8c11c15 	stw	r3,1136(sp)
  402c64:	008001c4 	movi	r2,7
  402c68:	10ffe816 	blt	r2,r3,402c0c <___vfprintf_internal_r+0x19e8>
  402c6c:	4a400204 	addi	r9,r9,8
  402c70:	003fee06 	br	402c2c <___vfprintf_internal_r+0x1a08>
  402c74:	d8c12b15 	stw	r3,1196(sp)
  402c78:	00800184 	movi	r2,6
  402c7c:	10c0062e 	bgeu	r2,r3,402c98 <___vfprintf_internal_r+0x1a74>
  402c80:	d8812b15 	stw	r2,1196(sp)
  402c84:	d8812815 	stw	r2,1184(sp)
  402c88:	ddc12d15 	stw	r23,1204(sp)
  402c8c:	04c010b4 	movhi	r19,66
  402c90:	9ce5df04 	addi	r19,r19,-26756
  402c94:	0039ca06 	br	4013c0 <___vfprintf_internal_r+0x19c>
  402c98:	d8812b17 	ldw	r2,1196(sp)
  402c9c:	d8812815 	stw	r2,1184(sp)
  402ca0:	103ff90e 	bge	r2,zero,402c88 <___vfprintf_internal_r+0x1a64>
  402ca4:	d8012815 	stw	zero,1184(sp)
  402ca8:	003ff706 	br	402c88 <___vfprintf_internal_r+0x1a64>
  402cac:	00800244 	movi	r2,9
  402cb0:	15fdaa36 	bltu	r2,r23,40235c <___vfprintf_internal_r+0x1138>
  402cb4:	dd010e04 	addi	r20,sp,1080
  402cb8:	003dc606 	br	4023d4 <___vfprintf_internal_r+0x11b0>
  402cbc:	d9412917 	ldw	r5,1188(sp)
  402cc0:	8809883a 	mov	r4,r17
  402cc4:	d9811b04 	addi	r6,sp,1132
  402cc8:	04011f00 	call	4011f0 <__sprint_r>
  402ccc:	103a9b1e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402cd0:	dc812417 	ldw	r18,1168(sp)
  402cd4:	da400404 	addi	r9,sp,16
  402cd8:	003ecd06 	br	402810 <___vfprintf_internal_r+0x15ec>
  402cdc:	d9412917 	ldw	r5,1188(sp)
  402ce0:	8809883a 	mov	r4,r17
  402ce4:	d9811b04 	addi	r6,sp,1132
  402ce8:	04011f00 	call	4011f0 <__sprint_r>
  402cec:	103a931e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402cf0:	dc812417 	ldw	r18,1168(sp)
  402cf4:	da011d17 	ldw	r8,1140(sp)
  402cf8:	d8c11c17 	ldw	r3,1136(sp)
  402cfc:	da400404 	addi	r9,sp,16
  402d00:	003eb706 	br	4027e0 <___vfprintf_internal_r+0x15bc>
  402d04:	d9412917 	ldw	r5,1188(sp)
  402d08:	8809883a 	mov	r4,r17
  402d0c:	d9811b04 	addi	r6,sp,1132
  402d10:	04011f00 	call	4011f0 <__sprint_r>
  402d14:	103a891e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402d18:	dc812417 	ldw	r18,1168(sp)
  402d1c:	da011d17 	ldw	r8,1140(sp)
  402d20:	da400404 	addi	r9,sp,16
  402d24:	003dc206 	br	402430 <___vfprintf_internal_r+0x120c>
  402d28:	df012815 	stw	fp,1184(sp)
  402d2c:	d8812583 	ldbu	r2,1174(sp)
  402d30:	df012b15 	stw	fp,1196(sp)
  402d34:	ddc12d15 	stw	r23,1204(sp)
  402d38:	d8013115 	stw	zero,1220(sp)
  402d3c:	003ac606 	br	401858 <___vfprintf_internal_r+0x634>
  402d40:	d8812404 	addi	r2,sp,1168
  402d44:	d8800115 	stw	r2,4(sp)
  402d48:	d8812304 	addi	r2,sp,1164
  402d4c:	d8800215 	stw	r2,8(sp)
  402d50:	d8812204 	addi	r2,sp,1160
  402d54:	df000015 	stw	fp,0(sp)
  402d58:	d8800315 	stw	r2,12(sp)
  402d5c:	8809883a 	mov	r4,r17
  402d60:	b00b883a 	mov	r5,r22
  402d64:	a00d883a 	mov	r6,r20
  402d68:	01c000c4 	movi	r7,3
  402d6c:	da413c15 	stw	r9,1264(sp)
  402d70:	04036140 	call	403614 <_dtoa_r>
  402d74:	da413c17 	ldw	r9,1264(sp)
  402d78:	1027883a 	mov	r19,r2
  402d7c:	1707883a 	add	r3,r2,fp
  402d80:	e02f883a 	mov	r23,fp
  402d84:	99000007 	ldb	r4,0(r19)
  402d88:	00800c04 	movi	r2,48
  402d8c:	20800326 	beq	r4,r2,402d9c <___vfprintf_internal_r+0x1b78>
  402d90:	da812417 	ldw	r10,1168(sp)
  402d94:	1a87883a 	add	r3,r3,r10
  402d98:	003f1406 	br	4029ec <___vfprintf_internal_r+0x17c8>
  402d9c:	b009883a 	mov	r4,r22
  402da0:	a00b883a 	mov	r5,r20
  402da4:	000d883a 	mov	r6,zero
  402da8:	000f883a 	mov	r7,zero
  402dac:	d8c13b15 	stw	r3,1260(sp)
  402db0:	da413c15 	stw	r9,1264(sp)
  402db4:	0409be80 	call	409be8 <__nedf2>
  402db8:	d8c13b17 	ldw	r3,1260(sp)
  402dbc:	da413c17 	ldw	r9,1264(sp)
  402dc0:	103ff326 	beq	r2,zero,402d90 <___vfprintf_internal_r+0x1b6c>
  402dc4:	00800044 	movi	r2,1
  402dc8:	15d5c83a 	sub	r10,r2,r23
  402dcc:	da812415 	stw	r10,1168(sp)
  402dd0:	1a87883a 	add	r3,r3,r10
  402dd4:	003f0506 	br	4029ec <___vfprintf_internal_r+0x17c8>
  402dd8:	d9412917 	ldw	r5,1188(sp)
  402ddc:	8809883a 	mov	r4,r17
  402de0:	d9811b04 	addi	r6,sp,1132
  402de4:	04011f00 	call	4011f0 <__sprint_r>
  402de8:	103a541e 	bne	r2,zero,40173c <___vfprintf_internal_r+0x518>
  402dec:	dc812417 	ldw	r18,1168(sp)
  402df0:	da011d17 	ldw	r8,1140(sp)
  402df4:	d8c11c17 	ldw	r3,1136(sp)
  402df8:	da400404 	addi	r9,sp,16
  402dfc:	003eb206 	br	4028c8 <___vfprintf_internal_r+0x16a4>
  402e00:	b82b883a 	mov	r21,r23
  402e04:	0007883a 	mov	r3,zero
  402e08:	00396306 	br	401398 <___vfprintf_internal_r+0x174>
  402e0c:	04c010b4 	movhi	r19,66
  402e10:	9ce5d404 	addi	r19,r19,-26800
  402e14:	003f4e06 	br	402b50 <___vfprintf_internal_r+0x192c>
  402e18:	d8812583 	ldbu	r2,1174(sp)
  402e1c:	dc012a17 	ldw	r16,1192(sp)
  402e20:	d8013115 	stw	zero,1220(sp)
  402e24:	003a8c06 	br	401858 <___vfprintf_internal_r+0x634>
  402e28:	d8812417 	ldw	r2,1168(sp)
  402e2c:	d8812b15 	stw	r2,1196(sp)
  402e30:	1029883a 	mov	r20,r2
  402e34:	00bfff44 	movi	r2,-3
  402e38:	a0800116 	blt	r20,r2,402e40 <___vfprintf_internal_r+0x1c1c>
  402e3c:	e5001d0e 	bge	fp,r20,402eb4 <___vfprintf_internal_r+0x1c90>
  402e40:	94bfff84 	addi	r18,r18,-2
  402e44:	a53fffc4 	addi	r20,r20,-1
  402e48:	dd012415 	stw	r20,1168(sp)
  402e4c:	dc811fc5 	stb	r18,1151(sp)
  402e50:	a0007216 	blt	r20,zero,40301c <___vfprintf_internal_r+0x1df8>
  402e54:	00800ac4 	movi	r2,43
  402e58:	d8812005 	stb	r2,1152(sp)
  402e5c:	00800244 	movi	r2,9
  402e60:	15003516 	blt	r2,r20,402f38 <___vfprintf_internal_r+0x1d14>
  402e64:	00800c04 	movi	r2,48
  402e68:	a5000c04 	addi	r20,r20,48
  402e6c:	d8812045 	stb	r2,1153(sp)
  402e70:	dd012085 	stb	r20,1154(sp)
  402e74:	d8c120c4 	addi	r3,sp,1155
  402e78:	d8811fc4 	addi	r2,sp,1151
  402e7c:	1885c83a 	sub	r2,r3,r2
  402e80:	d8c13217 	ldw	r3,1224(sp)
  402e84:	d8813515 	stw	r2,1236(sp)
  402e88:	1885883a 	add	r2,r3,r2
  402e8c:	d8812b15 	stw	r2,1196(sp)
  402e90:	00800044 	movi	r2,1
  402e94:	10c0580e 	bge	r2,r3,402ff8 <___vfprintf_internal_r+0x1dd4>
  402e98:	d8812b17 	ldw	r2,1196(sp)
  402e9c:	10800044 	addi	r2,r2,1
  402ea0:	d8812b15 	stw	r2,1196(sp)
  402ea4:	d8812815 	stw	r2,1184(sp)
  402ea8:	103ef50e 	bge	r2,zero,402a80 <___vfprintf_internal_r+0x185c>
  402eac:	d8012815 	stw	zero,1184(sp)
  402eb0:	003ef306 	br	402a80 <___vfprintf_internal_r+0x185c>
  402eb4:	d8812b17 	ldw	r2,1196(sp)
  402eb8:	d8c13217 	ldw	r3,1224(sp)
  402ebc:	10c01416 	blt	r2,r3,402f10 <___vfprintf_internal_r+0x1cec>
  402ec0:	8400004c 	andi	r16,r16,1
  402ec4:	80000326 	beq	r16,zero,402ed4 <___vfprintf_internal_r+0x1cb0>
  402ec8:	d8812b17 	ldw	r2,1196(sp)
  402ecc:	10800044 	addi	r2,r2,1
  402ed0:	d8812b15 	stw	r2,1196(sp)
  402ed4:	d8812815 	stw	r2,1184(sp)
  402ed8:	10001416 	blt	r2,zero,402f2c <___vfprintf_internal_r+0x1d08>
  402edc:	048019c4 	movi	r18,103
  402ee0:	003ee706 	br	402a80 <___vfprintf_internal_r+0x185c>
  402ee4:	d8012815 	stw	zero,1184(sp)
  402ee8:	003b1a06 	br	401b54 <___vfprintf_internal_r+0x930>
  402eec:	e03e9c1e 	bne	fp,zero,402960 <___vfprintf_internal_r+0x173c>
  402ef0:	07000044 	movi	fp,1
  402ef4:	003e9a06 	br	402960 <___vfprintf_internal_r+0x173c>
  402ef8:	07000184 	movi	fp,6
  402efc:	003e9806 	br	402960 <___vfprintf_internal_r+0x173c>
  402f00:	00c00b44 	movi	r3,45
  402f04:	a520003c 	xorhi	r20,r20,32768
  402f08:	d8c12f05 	stb	r3,1212(sp)
  402f0c:	003e9806 	br	402970 <___vfprintf_internal_r+0x174c>
  402f10:	05003f0e 	bge	zero,r20,403010 <___vfprintf_internal_r+0x1dec>
  402f14:	05000044 	movi	r20,1
  402f18:	d8c13217 	ldw	r3,1224(sp)
  402f1c:	a0e9883a 	add	r20,r20,r3
  402f20:	dd012b15 	stw	r20,1196(sp)
  402f24:	dd012815 	stw	r20,1184(sp)
  402f28:	a03fec0e 	bge	r20,zero,402edc <___vfprintf_internal_r+0x1cb8>
  402f2c:	d8012815 	stw	zero,1184(sp)
  402f30:	048019c4 	movi	r18,103
  402f34:	003ed206 	br	402a80 <___vfprintf_internal_r+0x185c>
  402f38:	d8c11f84 	addi	r3,sp,1150
  402f3c:	102f883a 	mov	r23,r2
  402f40:	4839883a 	mov	fp,r9
  402f44:	a009883a 	mov	r4,r20
  402f48:	01400284 	movi	r5,10
  402f4c:	182d883a 	mov	r22,r3
  402f50:	040a0f00 	call	40a0f0 <__modsi3>
  402f54:	10800c04 	addi	r2,r2,48
  402f58:	a009883a 	mov	r4,r20
  402f5c:	b0800005 	stb	r2,0(r22)
  402f60:	01400284 	movi	r5,10
  402f64:	040a0a00 	call	40a0a0 <__divsi3>
  402f68:	1029883a 	mov	r20,r2
  402f6c:	b0ffffc4 	addi	r3,r22,-1
  402f70:	b8bff416 	blt	r23,r2,402f44 <___vfprintf_internal_r+0x1d20>
  402f74:	11400c04 	addi	r5,r2,48
  402f78:	b17fffc5 	stb	r5,-1(r22)
  402f7c:	d8811fc4 	addi	r2,sp,1151
  402f80:	e013883a 	mov	r9,fp
  402f84:	18803e2e 	bgeu	r3,r2,403080 <___vfprintf_internal_r+0x1e5c>
  402f88:	b007883a 	mov	r3,r22
  402f8c:	d9012044 	addi	r4,sp,1153
  402f90:	00000206 	br	402f9c <___vfprintf_internal_r+0x1d78>
  402f94:	19400003 	ldbu	r5,0(r3)
  402f98:	18c00044 	addi	r3,r3,1
  402f9c:	21400005 	stb	r5,0(r4)
  402fa0:	21000044 	addi	r4,r4,1
  402fa4:	10fffb1e 	bne	r2,r3,402f94 <___vfprintf_internal_r+0x1d70>
  402fa8:	d8c12004 	addi	r3,sp,1152
  402fac:	1d87c83a 	sub	r3,r3,r22
  402fb0:	d9012044 	addi	r4,sp,1153
  402fb4:	20c7883a 	add	r3,r4,r3
  402fb8:	003fb006 	br	402e7c <___vfprintf_internal_r+0x1c58>
  402fbc:	e5c00044 	addi	r23,fp,1
  402fc0:	003e7406 	br	402994 <___vfprintf_internal_r+0x1770>
  402fc4:	d8c12217 	ldw	r3,1160(sp)
  402fc8:	003e9906 	br	402a30 <___vfprintf_internal_r+0x180c>
  402fcc:	d9012d17 	ldw	r4,1204(sp)
  402fd0:	ac800043 	ldbu	r18,1(r21)
  402fd4:	b82b883a 	mov	r21,r23
  402fd8:	20c00017 	ldw	r3,0(r4)
  402fdc:	20800104 	addi	r2,r4,4
  402fe0:	d8812d15 	stw	r2,1204(sp)
  402fe4:	18002116 	blt	r3,zero,40306c <___vfprintf_internal_r+0x1e48>
  402fe8:	94803fcc 	andi	r18,r18,255
  402fec:	9480201c 	xori	r18,r18,128
  402ff0:	94bfe004 	addi	r18,r18,-128
  402ff4:	0038e706 	br	401394 <___vfprintf_internal_r+0x170>
  402ff8:	80a0703a 	and	r16,r16,r2
  402ffc:	803fa61e 	bne	r16,zero,402e98 <___vfprintf_internal_r+0x1c74>
  403000:	d8812b17 	ldw	r2,1196(sp)
  403004:	d8812815 	stw	r2,1184(sp)
  403008:	103e9d0e 	bge	r2,zero,402a80 <___vfprintf_internal_r+0x185c>
  40300c:	003fa706 	br	402eac <___vfprintf_internal_r+0x1c88>
  403010:	00800084 	movi	r2,2
  403014:	1529c83a 	sub	r20,r2,r20
  403018:	003fbf06 	br	402f18 <___vfprintf_internal_r+0x1cf4>
  40301c:	00800b44 	movi	r2,45
  403020:	0529c83a 	sub	r20,zero,r20
  403024:	d8812005 	stb	r2,1152(sp)
  403028:	003f8c06 	br	402e5c <___vfprintf_internal_r+0x1c38>
  40302c:	008011c4 	movi	r2,71
  403030:	90be6926 	beq	r18,r2,4029d8 <___vfprintf_internal_r+0x17b4>
  403034:	003e6a06 	br	4029e0 <___vfprintf_internal_r+0x17bc>
  403038:	00bfffc4 	movi	r2,-1
  40303c:	d8812c15 	stw	r2,1200(sp)
  403040:	0039ad06 	br	4016f8 <___vfprintf_internal_r+0x4d4>
  403044:	1007883a 	mov	r3,r2
  403048:	003e7906 	br	402a30 <___vfprintf_internal_r+0x180c>
  40304c:	e000021e 	bne	fp,zero,403058 <___vfprintf_internal_r+0x1e34>
  403050:	8400004c 	andi	r16,r16,1
  403054:	80000e26 	beq	r16,zero,403090 <___vfprintf_internal_r+0x1e6c>
  403058:	e7000084 	addi	fp,fp,2
  40305c:	df012b15 	stw	fp,1196(sp)
  403060:	df012815 	stw	fp,1184(sp)
  403064:	e03e860e 	bge	fp,zero,402a80 <___vfprintf_internal_r+0x185c>
  403068:	003f9006 	br	402eac <___vfprintf_internal_r+0x1c88>
  40306c:	94803fcc 	andi	r18,r18,255
  403070:	9480201c 	xori	r18,r18,128
  403074:	00ffffc4 	movi	r3,-1
  403078:	94bfe004 	addi	r18,r18,-128
  40307c:	0038c506 	br	401394 <___vfprintf_internal_r+0x170>
  403080:	d8c12044 	addi	r3,sp,1153
  403084:	003f7d06 	br	402e7c <___vfprintf_internal_r+0x1c58>
  403088:	dd012417 	ldw	r20,1168(sp)
  40308c:	003f6d06 	br	402e44 <___vfprintf_internal_r+0x1c20>
  403090:	00c00044 	movi	r3,1
  403094:	d8c12815 	stw	r3,1184(sp)
  403098:	d8c12b15 	stw	r3,1196(sp)
  40309c:	003e7806 	br	402a80 <___vfprintf_internal_r+0x185c>

004030a0 <__vfprintf_internal>:
  4030a0:	008010b4 	movhi	r2,66
  4030a4:	10ae0604 	addi	r2,r2,-18408
  4030a8:	2007883a 	mov	r3,r4
  4030ac:	11000017 	ldw	r4,0(r2)
  4030b0:	2805883a 	mov	r2,r5
  4030b4:	300f883a 	mov	r7,r6
  4030b8:	180b883a 	mov	r5,r3
  4030bc:	100d883a 	mov	r6,r2
  4030c0:	04012241 	jmpi	401224 <___vfprintf_internal_r>

004030c4 <__swsetup_r>:
  4030c4:	008010b4 	movhi	r2,66
  4030c8:	10ae0604 	addi	r2,r2,-18408
  4030cc:	10800017 	ldw	r2,0(r2)
  4030d0:	defffd04 	addi	sp,sp,-12
  4030d4:	dc400115 	stw	r17,4(sp)
  4030d8:	dc000015 	stw	r16,0(sp)
  4030dc:	dfc00215 	stw	ra,8(sp)
  4030e0:	2023883a 	mov	r17,r4
  4030e4:	2821883a 	mov	r16,r5
  4030e8:	10000226 	beq	r2,zero,4030f4 <__swsetup_r+0x30>
  4030ec:	10c00e17 	ldw	r3,56(r2)
  4030f0:	18003d26 	beq	r3,zero,4031e8 <__swsetup_r+0x124>
  4030f4:	8080030b 	ldhu	r2,12(r16)
  4030f8:	10c0020c 	andi	r3,r2,8
  4030fc:	18ffffcc 	andi	r3,r3,65535
  403100:	18e0001c 	xori	r3,r3,32768
  403104:	18e00004 	addi	r3,r3,-32768
  403108:	18001226 	beq	r3,zero,403154 <__swsetup_r+0x90>
  40310c:	80c00417 	ldw	r3,16(r16)
  403110:	18001f26 	beq	r3,zero,403190 <__swsetup_r+0xcc>
  403114:	1100004c 	andi	r4,r2,1
  403118:	2000261e 	bne	r4,zero,4031b4 <__swsetup_r+0xf0>
  40311c:	1080008c 	andi	r2,r2,2
  403120:	10bfffcc 	andi	r2,r2,65535
  403124:	10a0001c 	xori	r2,r2,32768
  403128:	10a00004 	addi	r2,r2,-32768
  40312c:	1000311e 	bne	r2,zero,4031f4 <__swsetup_r+0x130>
  403130:	80800517 	ldw	r2,20(r16)
  403134:	80800215 	stw	r2,8(r16)
  403138:	18002326 	beq	r3,zero,4031c8 <__swsetup_r+0x104>
  40313c:	0005883a 	mov	r2,zero
  403140:	dfc00217 	ldw	ra,8(sp)
  403144:	dc400117 	ldw	r17,4(sp)
  403148:	dc000017 	ldw	r16,0(sp)
  40314c:	dec00304 	addi	sp,sp,12
  403150:	f800283a 	ret
  403154:	10c0040c 	andi	r3,r2,16
  403158:	18ffffcc 	andi	r3,r3,65535
  40315c:	18e0001c 	xori	r3,r3,32768
  403160:	18e00004 	addi	r3,r3,-32768
  403164:	18001e26 	beq	r3,zero,4031e0 <__swsetup_r+0x11c>
  403168:	10c0010c 	andi	r3,r2,4
  40316c:	18ffffcc 	andi	r3,r3,65535
  403170:	18e0001c 	xori	r3,r3,32768
  403174:	18e00004 	addi	r3,r3,-32768
  403178:	1800211e 	bne	r3,zero,403200 <__swsetup_r+0x13c>
  40317c:	80c00417 	ldw	r3,16(r16)
  403180:	11400214 	ori	r5,r2,8
  403184:	8140030d 	sth	r5,12(r16)
  403188:	2805883a 	mov	r2,r5
  40318c:	183fe11e 	bne	r3,zero,403114 <__swsetup_r+0x50>
  403190:	1140a00c 	andi	r5,r2,640
  403194:	01008004 	movi	r4,512
  403198:	293fde26 	beq	r5,r4,403114 <__swsetup_r+0x50>
  40319c:	8809883a 	mov	r4,r17
  4031a0:	800b883a 	mov	r5,r16
  4031a4:	0405c600 	call	405c60 <__smakebuf_r>
  4031a8:	8080030b 	ldhu	r2,12(r16)
  4031ac:	80c00417 	ldw	r3,16(r16)
  4031b0:	003fd806 	br	403114 <__swsetup_r+0x50>
  4031b4:	80800517 	ldw	r2,20(r16)
  4031b8:	80000215 	stw	zero,8(r16)
  4031bc:	0085c83a 	sub	r2,zero,r2
  4031c0:	80800615 	stw	r2,24(r16)
  4031c4:	183fdd1e 	bne	r3,zero,40313c <__swsetup_r+0x78>
  4031c8:	8080030b 	ldhu	r2,12(r16)
  4031cc:	1080200c 	andi	r2,r2,128
  4031d0:	10bfffcc 	andi	r2,r2,65535
  4031d4:	10a0001c 	xori	r2,r2,32768
  4031d8:	10a00004 	addi	r2,r2,-32768
  4031dc:	103fd826 	beq	r2,zero,403140 <__swsetup_r+0x7c>
  4031e0:	00bfffc4 	movi	r2,-1
  4031e4:	003fd606 	br	403140 <__swsetup_r+0x7c>
  4031e8:	1009883a 	mov	r4,r2
  4031ec:	0404eec0 	call	404eec <__sinit>
  4031f0:	003fc006 	br	4030f4 <__swsetup_r+0x30>
  4031f4:	0005883a 	mov	r2,zero
  4031f8:	80800215 	stw	r2,8(r16)
  4031fc:	003fce06 	br	403138 <__swsetup_r+0x74>
  403200:	81400c17 	ldw	r5,48(r16)
  403204:	28000626 	beq	r5,zero,403220 <__swsetup_r+0x15c>
  403208:	80c01004 	addi	r3,r16,64
  40320c:	28c00326 	beq	r5,r3,40321c <__swsetup_r+0x158>
  403210:	8809883a 	mov	r4,r17
  403214:	04052700 	call	405270 <_free_r>
  403218:	8080030b 	ldhu	r2,12(r16)
  40321c:	80000c15 	stw	zero,48(r16)
  403220:	80c00417 	ldw	r3,16(r16)
  403224:	013ff6c4 	movi	r4,-37
  403228:	2084703a 	and	r2,r4,r2
  40322c:	80000115 	stw	zero,4(r16)
  403230:	80c00015 	stw	r3,0(r16)
  403234:	003fd206 	br	403180 <__swsetup_r+0xbc>

00403238 <__call_exitprocs>:
  403238:	008010b4 	movhi	r2,66
  40323c:	10ae0504 	addi	r2,r2,-18412
  403240:	10800017 	ldw	r2,0(r2)
  403244:	defff304 	addi	sp,sp,-52
  403248:	df000b15 	stw	fp,44(sp)
  40324c:	d8800015 	stw	r2,0(sp)
  403250:	10805204 	addi	r2,r2,328
  403254:	dd400815 	stw	r21,32(sp)
  403258:	dfc00c15 	stw	ra,48(sp)
  40325c:	ddc00a15 	stw	r23,40(sp)
  403260:	dd800915 	stw	r22,36(sp)
  403264:	dd000715 	stw	r20,28(sp)
  403268:	dcc00615 	stw	r19,24(sp)
  40326c:	dc800515 	stw	r18,20(sp)
  403270:	dc400415 	stw	r17,16(sp)
  403274:	dc000315 	stw	r16,12(sp)
  403278:	d9000115 	stw	r4,4(sp)
  40327c:	2839883a 	mov	fp,r5
  403280:	d8800215 	stw	r2,8(sp)
  403284:	057fffc4 	movi	r21,-1
  403288:	d8800017 	ldw	r2,0(sp)
  40328c:	ddc00217 	ldw	r23,8(sp)
  403290:	14805217 	ldw	r18,328(r2)
  403294:	90001726 	beq	r18,zero,4032f4 <__call_exitprocs+0xbc>
  403298:	94400117 	ldw	r17,4(r18)
  40329c:	8c3fffc4 	addi	r16,r17,-1
  4032a0:	80001116 	blt	r16,zero,4032e8 <__call_exitprocs+0xb0>
  4032a4:	8c400044 	addi	r17,r17,1
  4032a8:	8427883a 	add	r19,r16,r16
  4032ac:	8c63883a 	add	r17,r17,r17
  4032b0:	95802204 	addi	r22,r18,136
  4032b4:	9ce7883a 	add	r19,r19,r19
  4032b8:	8c63883a 	add	r17,r17,r17
  4032bc:	b4e7883a 	add	r19,r22,r19
  4032c0:	9463883a 	add	r17,r18,r17
  4032c4:	e0001726 	beq	fp,zero,403324 <__call_exitprocs+0xec>
  4032c8:	8c87c83a 	sub	r3,r17,r18
  4032cc:	b0c7883a 	add	r3,r22,r3
  4032d0:	18c01e17 	ldw	r3,120(r3)
  4032d4:	1f001326 	beq	r3,fp,403324 <__call_exitprocs+0xec>
  4032d8:	843fffc4 	addi	r16,r16,-1
  4032dc:	9cffff04 	addi	r19,r19,-4
  4032e0:	8c7fff04 	addi	r17,r17,-4
  4032e4:	857ff71e 	bne	r16,r21,4032c4 <__call_exitprocs+0x8c>
  4032e8:	00800034 	movhi	r2,0
  4032ec:	10800004 	addi	r2,r2,0
  4032f0:	10002a1e 	bne	r2,zero,40339c <__call_exitprocs+0x164>
  4032f4:	dfc00c17 	ldw	ra,48(sp)
  4032f8:	df000b17 	ldw	fp,44(sp)
  4032fc:	ddc00a17 	ldw	r23,40(sp)
  403300:	dd800917 	ldw	r22,36(sp)
  403304:	dd400817 	ldw	r21,32(sp)
  403308:	dd000717 	ldw	r20,28(sp)
  40330c:	dcc00617 	ldw	r19,24(sp)
  403310:	dc800517 	ldw	r18,20(sp)
  403314:	dc400417 	ldw	r17,16(sp)
  403318:	dc000317 	ldw	r16,12(sp)
  40331c:	dec00d04 	addi	sp,sp,52
  403320:	f800283a 	ret
  403324:	91000117 	ldw	r4,4(r18)
  403328:	88c00017 	ldw	r3,0(r17)
  40332c:	213fffc4 	addi	r4,r4,-1
  403330:	24001526 	beq	r4,r16,403388 <__call_exitprocs+0x150>
  403334:	88000015 	stw	zero,0(r17)
  403338:	183fe726 	beq	r3,zero,4032d8 <__call_exitprocs+0xa0>
  40333c:	00800044 	movi	r2,1
  403340:	1408983a 	sll	r4,r2,r16
  403344:	91406217 	ldw	r5,392(r18)
  403348:	95000117 	ldw	r20,4(r18)
  40334c:	214a703a 	and	r5,r4,r5
  403350:	28000b26 	beq	r5,zero,403380 <__call_exitprocs+0x148>
  403354:	91406317 	ldw	r5,396(r18)
  403358:	2148703a 	and	r4,r4,r5
  40335c:	20000c1e 	bne	r4,zero,403390 <__call_exitprocs+0x158>
  403360:	99400017 	ldw	r5,0(r19)
  403364:	d9000117 	ldw	r4,4(sp)
  403368:	183ee83a 	callr	r3
  40336c:	90c00117 	ldw	r3,4(r18)
  403370:	1d3fc51e 	bne	r3,r20,403288 <__call_exitprocs+0x50>
  403374:	b8c00017 	ldw	r3,0(r23)
  403378:	1cbfd726 	beq	r3,r18,4032d8 <__call_exitprocs+0xa0>
  40337c:	003fc206 	br	403288 <__call_exitprocs+0x50>
  403380:	183ee83a 	callr	r3
  403384:	003ff906 	br	40336c <__call_exitprocs+0x134>
  403388:	94000115 	stw	r16,4(r18)
  40338c:	003fea06 	br	403338 <__call_exitprocs+0x100>
  403390:	99000017 	ldw	r4,0(r19)
  403394:	183ee83a 	callr	r3
  403398:	003ff406 	br	40336c <__call_exitprocs+0x134>
  40339c:	90c00117 	ldw	r3,4(r18)
  4033a0:	1800071e 	bne	r3,zero,4033c0 <__call_exitprocs+0x188>
  4033a4:	90c00017 	ldw	r3,0(r18)
  4033a8:	18000926 	beq	r3,zero,4033d0 <__call_exitprocs+0x198>
  4033ac:	9009883a 	mov	r4,r18
  4033b0:	b8c00015 	stw	r3,0(r23)
  4033b4:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  4033b8:	bc800017 	ldw	r18,0(r23)
  4033bc:	003fb506 	br	403294 <__call_exitprocs+0x5c>
  4033c0:	90c00017 	ldw	r3,0(r18)
  4033c4:	902f883a 	mov	r23,r18
  4033c8:	1825883a 	mov	r18,r3
  4033cc:	003fb106 	br	403294 <__call_exitprocs+0x5c>
  4033d0:	0007883a 	mov	r3,zero
  4033d4:	003ffb06 	br	4033c4 <__call_exitprocs+0x18c>

004033d8 <quorem>:
  4033d8:	defff204 	addi	sp,sp,-56
  4033dc:	dd000815 	stw	r20,32(sp)
  4033e0:	20800417 	ldw	r2,16(r4)
  4033e4:	2d000417 	ldw	r20,16(r5)
  4033e8:	dcc00715 	stw	r19,28(sp)
  4033ec:	dfc00d15 	stw	ra,52(sp)
  4033f0:	df000c15 	stw	fp,48(sp)
  4033f4:	ddc00b15 	stw	r23,44(sp)
  4033f8:	dd800a15 	stw	r22,40(sp)
  4033fc:	dd400915 	stw	r21,36(sp)
  403400:	dc800615 	stw	r18,24(sp)
  403404:	dc400515 	stw	r17,20(sp)
  403408:	dc000415 	stw	r16,16(sp)
  40340c:	d9400015 	stw	r5,0(sp)
  403410:	2027883a 	mov	r19,r4
  403414:	15007d16 	blt	r2,r20,40360c <quorem+0x234>
  403418:	a0800104 	addi	r2,r20,4
  40341c:	1085883a 	add	r2,r2,r2
  403420:	1085883a 	add	r2,r2,r2
  403424:	28ad883a 	add	r22,r5,r2
  403428:	2085883a 	add	r2,r4,r2
  40342c:	10800017 	ldw	r2,0(r2)
  403430:	b1400017 	ldw	r5,0(r22)
  403434:	a53fffc4 	addi	r20,r20,-1
  403438:	1009883a 	mov	r4,r2
  40343c:	29400044 	addi	r5,r5,1
  403440:	d8800115 	stw	r2,4(sp)
  403444:	040a14c0 	call	40a14c <__udivsi3>
  403448:	1025883a 	mov	r18,r2
  40344c:	d8800017 	ldw	r2,0(sp)
  403450:	9f000504 	addi	fp,r19,20
  403454:	14000504 	addi	r16,r2,20
  403458:	90003626 	beq	r18,zero,403534 <quorem+0x15c>
  40345c:	802b883a 	mov	r21,r16
  403460:	e023883a 	mov	r17,fp
  403464:	0007883a 	mov	r3,zero
  403468:	002f883a 	mov	r23,zero
  40346c:	a9800017 	ldw	r6,0(r21)
  403470:	900b883a 	mov	r5,r18
  403474:	d8c00315 	stw	r3,12(sp)
  403478:	313fffcc 	andi	r4,r6,65535
  40347c:	d9800215 	stw	r6,8(sp)
  403480:	0400e700 	call	400e70 <__mulsi3>
  403484:	d9800217 	ldw	r6,8(sp)
  403488:	d8c00317 	ldw	r3,12(sp)
  40348c:	900b883a 	mov	r5,r18
  403490:	3008d43a 	srli	r4,r6,16
  403494:	1887883a 	add	r3,r3,r2
  403498:	d8c00315 	stw	r3,12(sp)
  40349c:	0400e700 	call	400e70 <__mulsi3>
  4034a0:	89400017 	ldw	r5,0(r17)
  4034a4:	d8c00317 	ldw	r3,12(sp)
  4034a8:	ad400104 	addi	r21,r21,4
  4034ac:	293fffcc 	andi	r4,r5,65535
  4034b0:	1810d43a 	srli	r8,r3,16
  4034b4:	25c9883a 	add	r4,r4,r23
  4034b8:	18ffffcc 	andi	r3,r3,65535
  4034bc:	20c9c83a 	sub	r4,r4,r3
  4034c0:	280cd43a 	srli	r6,r5,16
  4034c4:	4085883a 	add	r2,r8,r2
  4034c8:	2007d43a 	srai	r3,r4,16
  4034cc:	117fffcc 	andi	r5,r2,65535
  4034d0:	314bc83a 	sub	r5,r6,r5
  4034d4:	28cb883a 	add	r5,r5,r3
  4034d8:	8940008d 	sth	r5,2(r17)
  4034dc:	8900000d 	sth	r4,0(r17)
  4034e0:	1006d43a 	srli	r3,r2,16
  4034e4:	282fd43a 	srai	r23,r5,16
  4034e8:	8c400104 	addi	r17,r17,4
  4034ec:	b57fdf2e 	bgeu	r22,r21,40346c <quorem+0x94>
  4034f0:	d8c00117 	ldw	r3,4(sp)
  4034f4:	18000f1e 	bne	r3,zero,403534 <quorem+0x15c>
  4034f8:	a0800144 	addi	r2,r20,5
  4034fc:	1085883a 	add	r2,r2,r2
  403500:	1085883a 	add	r2,r2,r2
  403504:	9887883a 	add	r3,r19,r2
  403508:	18bfff04 	addi	r2,r3,-4
  40350c:	e080082e 	bgeu	fp,r2,403530 <quorem+0x158>
  403510:	18ffff17 	ldw	r3,-4(r3)
  403514:	18000326 	beq	r3,zero,403524 <quorem+0x14c>
  403518:	00000506 	br	403530 <quorem+0x158>
  40351c:	10c00017 	ldw	r3,0(r2)
  403520:	1800031e 	bne	r3,zero,403530 <quorem+0x158>
  403524:	10bfff04 	addi	r2,r2,-4
  403528:	a53fffc4 	addi	r20,r20,-1
  40352c:	e0bffb36 	bltu	fp,r2,40351c <quorem+0x144>
  403530:	9d000415 	stw	r20,16(r19)
  403534:	d9400017 	ldw	r5,0(sp)
  403538:	9809883a 	mov	r4,r19
  40353c:	04072380 	call	407238 <__mcmp>
  403540:	10002516 	blt	r2,zero,4035d8 <quorem+0x200>
  403544:	94800044 	addi	r18,r18,1
  403548:	e007883a 	mov	r3,fp
  40354c:	000d883a 	mov	r6,zero
  403550:	18800017 	ldw	r2,0(r3)
  403554:	82000017 	ldw	r8,0(r16)
  403558:	84000104 	addi	r16,r16,4
  40355c:	11ffffcc 	andi	r7,r2,65535
  403560:	413fffcc 	andi	r4,r8,65535
  403564:	398d883a 	add	r6,r7,r6
  403568:	310fc83a 	sub	r7,r6,r4
  40356c:	4010d43a 	srli	r8,r8,16
  403570:	100cd43a 	srli	r6,r2,16
  403574:	3809d43a 	srai	r4,r7,16
  403578:	19c0000d 	sth	r7,0(r3)
  40357c:	320dc83a 	sub	r6,r6,r8
  403580:	310d883a 	add	r6,r6,r4
  403584:	1980008d 	sth	r6,2(r3)
  403588:	300dd43a 	srai	r6,r6,16
  40358c:	18c00104 	addi	r3,r3,4
  403590:	b43fef2e 	bgeu	r22,r16,403550 <quorem+0x178>
  403594:	a0800144 	addi	r2,r20,5
  403598:	1085883a 	add	r2,r2,r2
  40359c:	1085883a 	add	r2,r2,r2
  4035a0:	9885883a 	add	r2,r19,r2
  4035a4:	10c00017 	ldw	r3,0(r2)
  4035a8:	18000b1e 	bne	r3,zero,4035d8 <quorem+0x200>
  4035ac:	10ffff04 	addi	r3,r2,-4
  4035b0:	e0c0082e 	bgeu	fp,r3,4035d4 <quorem+0x1fc>
  4035b4:	10bfff17 	ldw	r2,-4(r2)
  4035b8:	10000326 	beq	r2,zero,4035c8 <quorem+0x1f0>
  4035bc:	00000506 	br	4035d4 <quorem+0x1fc>
  4035c0:	18800017 	ldw	r2,0(r3)
  4035c4:	1000031e 	bne	r2,zero,4035d4 <quorem+0x1fc>
  4035c8:	18ffff04 	addi	r3,r3,-4
  4035cc:	a53fffc4 	addi	r20,r20,-1
  4035d0:	e0fffb36 	bltu	fp,r3,4035c0 <quorem+0x1e8>
  4035d4:	9d000415 	stw	r20,16(r19)
  4035d8:	9005883a 	mov	r2,r18
  4035dc:	dfc00d17 	ldw	ra,52(sp)
  4035e0:	df000c17 	ldw	fp,48(sp)
  4035e4:	ddc00b17 	ldw	r23,44(sp)
  4035e8:	dd800a17 	ldw	r22,40(sp)
  4035ec:	dd400917 	ldw	r21,36(sp)
  4035f0:	dd000817 	ldw	r20,32(sp)
  4035f4:	dcc00717 	ldw	r19,28(sp)
  4035f8:	dc800617 	ldw	r18,24(sp)
  4035fc:	dc400517 	ldw	r17,20(sp)
  403600:	dc000417 	ldw	r16,16(sp)
  403604:	dec00e04 	addi	sp,sp,56
  403608:	f800283a 	ret
  40360c:	0005883a 	mov	r2,zero
  403610:	003ff206 	br	4035dc <quorem+0x204>

00403614 <_dtoa_r>:
  403614:	20801017 	ldw	r2,64(r4)
  403618:	deffdf04 	addi	sp,sp,-132
  40361c:	dcc01a15 	stw	r19,104(sp)
  403620:	dc801915 	stw	r18,100(sp)
  403624:	dc401815 	stw	r17,96(sp)
  403628:	dc001715 	stw	r16,92(sp)
  40362c:	dfc02015 	stw	ra,128(sp)
  403630:	df001f15 	stw	fp,124(sp)
  403634:	ddc01e15 	stw	r23,120(sp)
  403638:	dd801d15 	stw	r22,116(sp)
  40363c:	dd401c15 	stw	r21,112(sp)
  403640:	dd001b15 	stw	r20,108(sp)
  403644:	d9400315 	stw	r5,12(sp)
  403648:	d9c00415 	stw	r7,16(sp)
  40364c:	2021883a 	mov	r16,r4
  403650:	3025883a 	mov	r18,r6
  403654:	dcc02317 	ldw	r19,140(sp)
  403658:	3023883a 	mov	r17,r6
  40365c:	10000826 	beq	r2,zero,403680 <_dtoa_r+0x6c>
  403660:	20c01117 	ldw	r3,68(r4)
  403664:	01800044 	movi	r6,1
  403668:	100b883a 	mov	r5,r2
  40366c:	30cc983a 	sll	r6,r6,r3
  403670:	10c00115 	stw	r3,4(r2)
  403674:	11800215 	stw	r6,8(r2)
  403678:	04069940 	call	406994 <_Bfree>
  40367c:	80001015 	stw	zero,64(r16)
  403680:	90002f16 	blt	r18,zero,403740 <_dtoa_r+0x12c>
  403684:	98000015 	stw	zero,0(r19)
  403688:	90dffc2c 	andhi	r3,r18,32752
  40368c:	009ffc34 	movhi	r2,32752
  403690:	18801c26 	beq	r3,r2,403704 <_dtoa_r+0xf0>
  403694:	d9000317 	ldw	r4,12(sp)
  403698:	880b883a 	mov	r5,r17
  40369c:	000d883a 	mov	r6,zero
  4036a0:	000f883a 	mov	r7,zero
  4036a4:	0409b8c0 	call	409b8c <__eqdf2>
  4036a8:	10002c1e 	bne	r2,zero,40375c <_dtoa_r+0x148>
  4036ac:	d9002217 	ldw	r4,136(sp)
  4036b0:	d9c02417 	ldw	r7,144(sp)
  4036b4:	00800044 	movi	r2,1
  4036b8:	20800015 	stw	r2,0(r4)
  4036bc:	38019426 	beq	r7,zero,403d10 <_dtoa_r+0x6fc>
  4036c0:	008010b4 	movhi	r2,66
  4036c4:	10a5e144 	addi	r2,r2,-26747
  4036c8:	38800015 	stw	r2,0(r7)
  4036cc:	15ffffc4 	addi	r23,r2,-1
  4036d0:	b805883a 	mov	r2,r23
  4036d4:	dfc02017 	ldw	ra,128(sp)
  4036d8:	df001f17 	ldw	fp,124(sp)
  4036dc:	ddc01e17 	ldw	r23,120(sp)
  4036e0:	dd801d17 	ldw	r22,116(sp)
  4036e4:	dd401c17 	ldw	r21,112(sp)
  4036e8:	dd001b17 	ldw	r20,108(sp)
  4036ec:	dcc01a17 	ldw	r19,104(sp)
  4036f0:	dc801917 	ldw	r18,100(sp)
  4036f4:	dc401817 	ldw	r17,96(sp)
  4036f8:	dc001717 	ldw	r16,92(sp)
  4036fc:	dec02104 	addi	sp,sp,132
  403700:	f800283a 	ret
  403704:	d8c02217 	ldw	r3,136(sp)
  403708:	d9000317 	ldw	r4,12(sp)
  40370c:	0089c3c4 	movi	r2,9999
  403710:	18800015 	stw	r2,0(r3)
  403714:	20016c26 	beq	r4,zero,403cc8 <_dtoa_r+0x6b4>
  403718:	05c010b4 	movhi	r23,66
  40371c:	bde5ed04 	addi	r23,r23,-26700
  403720:	d9c02417 	ldw	r7,144(sp)
  403724:	383fea26 	beq	r7,zero,4036d0 <_dtoa_r+0xbc>
  403728:	b88000c7 	ldb	r2,3(r23)
  40372c:	10016d1e 	bne	r2,zero,403ce4 <_dtoa_r+0x6d0>
  403730:	b88000c4 	addi	r2,r23,3
  403734:	d8c02417 	ldw	r3,144(sp)
  403738:	18800015 	stw	r2,0(r3)
  40373c:	003fe406 	br	4036d0 <_dtoa_r+0xbc>
  403740:	04600034 	movhi	r17,32768
  403744:	8c7fffc4 	addi	r17,r17,-1
  403748:	9462703a 	and	r17,r18,r17
  40374c:	00800044 	movi	r2,1
  403750:	98800015 	stw	r2,0(r19)
  403754:	8825883a 	mov	r18,r17
  403758:	003fcb06 	br	403688 <_dtoa_r+0x74>
  40375c:	d9400317 	ldw	r5,12(sp)
  403760:	9028d53a 	srli	r20,r18,20
  403764:	d8800204 	addi	r2,sp,8
  403768:	d8800015 	stw	r2,0(sp)
  40376c:	8009883a 	mov	r4,r16
  403770:	880d883a 	mov	r6,r17
  403774:	d9c00104 	addi	r7,sp,4
  403778:	04075e00 	call	4075e0 <__d2b>
  40377c:	a501ffcc 	andi	r20,r20,2047
  403780:	1039883a 	mov	fp,r2
  403784:	a001591e 	bne	r20,zero,403cec <_dtoa_r+0x6d8>
  403788:	dd400217 	ldw	r21,8(sp)
  40378c:	dd000117 	ldw	r20,4(sp)
  403790:	00befbc4 	movi	r2,-1041
  403794:	ad29883a 	add	r20,r21,r20
  403798:	a082d216 	blt	r20,r2,4042e4 <_dtoa_r+0xcd0>
  40379c:	d8c00317 	ldw	r3,12(sp)
  4037a0:	013f0384 	movi	r4,-1010
  4037a4:	2509c83a 	sub	r4,r4,r20
  4037a8:	a0810484 	addi	r2,r20,1042
  4037ac:	9124983a 	sll	r18,r18,r4
  4037b0:	1884d83a 	srl	r2,r3,r2
  4037b4:	9088b03a 	or	r4,r18,r2
  4037b8:	0409f100 	call	409f10 <__floatunsidf>
  4037bc:	1009883a 	mov	r4,r2
  4037c0:	017f8434 	movhi	r5,65040
  4037c4:	00800044 	movi	r2,1
  4037c8:	194b883a 	add	r5,r3,r5
  4037cc:	a53fffc4 	addi	r20,r20,-1
  4037d0:	d8800f15 	stw	r2,60(sp)
  4037d4:	000d883a 	mov	r6,zero
  4037d8:	01cffe34 	movhi	r7,16376
  4037dc:	04096940 	call	409694 <__subdf3>
  4037e0:	1009883a 	mov	r4,r2
  4037e4:	180b883a 	mov	r5,r3
  4037e8:	0198dbf4 	movhi	r6,25455
  4037ec:	3190d844 	addi	r6,r6,17249
  4037f0:	01cff4f4 	movhi	r7,16339
  4037f4:	39e1e9c4 	addi	r7,r7,-30809
  4037f8:	04096f40 	call	4096f4 <__muldf3>
  4037fc:	180b883a 	mov	r5,r3
  403800:	01a2d874 	movhi	r6,35681
  403804:	31b22cc4 	addi	r6,r6,-14157
  403808:	01cff1f4 	movhi	r7,16327
  40380c:	39e28a04 	addi	r7,r7,-30168
  403810:	1009883a 	mov	r4,r2
  403814:	04096400 	call	409640 <__adddf3>
  403818:	a009883a 	mov	r4,r20
  40381c:	1027883a 	mov	r19,r2
  403820:	1825883a 	mov	r18,r3
  403824:	0409d680 	call	409d68 <__floatsidf>
  403828:	1009883a 	mov	r4,r2
  40382c:	180b883a 	mov	r5,r3
  403830:	019427f4 	movhi	r6,20639
  403834:	319e7ec4 	addi	r6,r6,31227
  403838:	01cff4f4 	movhi	r7,16339
  40383c:	39d104c4 	addi	r7,r7,17427
  403840:	04096f40 	call	4096f4 <__muldf3>
  403844:	9809883a 	mov	r4,r19
  403848:	900b883a 	mov	r5,r18
  40384c:	100d883a 	mov	r6,r2
  403850:	180f883a 	mov	r7,r3
  403854:	04096400 	call	409640 <__adddf3>
  403858:	1009883a 	mov	r4,r2
  40385c:	180b883a 	mov	r5,r3
  403860:	1027883a 	mov	r19,r2
  403864:	1825883a 	mov	r18,r3
  403868:	0409e3c0 	call	409e3c <__fixdfsi>
  40386c:	9809883a 	mov	r4,r19
  403870:	900b883a 	mov	r5,r18
  403874:	000d883a 	mov	r6,zero
  403878:	000f883a 	mov	r7,zero
  40387c:	d8800615 	stw	r2,24(sp)
  403880:	0409d0c0 	call	409d0c <__ltdf2>
  403884:	10027e16 	blt	r2,zero,404280 <_dtoa_r+0xc6c>
  403888:	d8c00617 	ldw	r3,24(sp)
  40388c:	00800584 	movi	r2,22
  403890:	10c26c36 	bltu	r2,r3,404244 <_dtoa_r+0xc30>
  403894:	180490fa 	slli	r2,r3,3
  403898:	00c010b4 	movhi	r3,66
  40389c:	18e61204 	addi	r3,r3,-26552
  4038a0:	d9800317 	ldw	r6,12(sp)
  4038a4:	1885883a 	add	r2,r3,r2
  4038a8:	11000017 	ldw	r4,0(r2)
  4038ac:	11400117 	ldw	r5,4(r2)
  4038b0:	880f883a 	mov	r7,r17
  4038b4:	0409c440 	call	409c44 <__gtdf2>
  4038b8:	00828f0e 	bge	zero,r2,4042f8 <_dtoa_r+0xce4>
  4038bc:	d8800617 	ldw	r2,24(sp)
  4038c0:	d8000d15 	stw	zero,52(sp)
  4038c4:	10bfffc4 	addi	r2,r2,-1
  4038c8:	d8800615 	stw	r2,24(sp)
  4038cc:	ad29c83a 	sub	r20,r21,r20
  4038d0:	a53fffc4 	addi	r20,r20,-1
  4038d4:	a0026616 	blt	r20,zero,404270 <_dtoa_r+0xc5c>
  4038d8:	dd000715 	stw	r20,28(sp)
  4038dc:	d8000815 	stw	zero,32(sp)
  4038e0:	d8800617 	ldw	r2,24(sp)
  4038e4:	10025a16 	blt	r2,zero,404250 <_dtoa_r+0xc3c>
  4038e8:	d8c00717 	ldw	r3,28(sp)
  4038ec:	d8800b15 	stw	r2,44(sp)
  4038f0:	d8000a15 	stw	zero,40(sp)
  4038f4:	1887883a 	add	r3,r3,r2
  4038f8:	d8c00715 	stw	r3,28(sp)
  4038fc:	d9c00417 	ldw	r7,16(sp)
  403900:	00800244 	movi	r2,9
  403904:	11c10536 	bltu	r2,r7,403d1c <_dtoa_r+0x708>
  403908:	00800144 	movi	r2,5
  40390c:	11c4c60e 	bge	r2,r7,404c28 <_dtoa_r+0x1614>
  403910:	39ffff04 	addi	r7,r7,-4
  403914:	d9c00415 	stw	r7,16(sp)
  403918:	0027883a 	mov	r19,zero
  40391c:	d9c00417 	ldw	r7,16(sp)
  403920:	008000c4 	movi	r2,3
  403924:	3883a226 	beq	r7,r2,4047b0 <_dtoa_r+0x119c>
  403928:	11c2bc16 	blt	r2,r7,40441c <_dtoa_r+0xe08>
  40392c:	00800084 	movi	r2,2
  403930:	3880fb1e 	bne	r7,r2,403d20 <_dtoa_r+0x70c>
  403934:	d8000c15 	stw	zero,48(sp)
  403938:	d9002117 	ldw	r4,132(sp)
  40393c:	0103ae0e 	bge	zero,r4,4047f8 <_dtoa_r+0x11e4>
  403940:	2025883a 	mov	r18,r4
  403944:	d9000e15 	stw	r4,56(sp)
  403948:	d9000915 	stw	r4,36(sp)
  40394c:	80001115 	stw	zero,68(r16)
  403950:	008005c4 	movi	r2,23
  403954:	1484b22e 	bgeu	r2,r18,404c20 <_dtoa_r+0x160c>
  403958:	00c00044 	movi	r3,1
  40395c:	00800104 	movi	r2,4
  403960:	1085883a 	add	r2,r2,r2
  403964:	11000504 	addi	r4,r2,20
  403968:	180b883a 	mov	r5,r3
  40396c:	18c00044 	addi	r3,r3,1
  403970:	913ffb2e 	bgeu	r18,r4,403960 <_dtoa_r+0x34c>
  403974:	81401115 	stw	r5,68(r16)
  403978:	8009883a 	mov	r4,r16
  40397c:	04068ec0 	call	4068ec <_Balloc>
  403980:	102f883a 	mov	r23,r2
  403984:	80801015 	stw	r2,64(r16)
  403988:	00800384 	movi	r2,14
  40398c:	1480f036 	bltu	r2,r18,403d50 <_dtoa_r+0x73c>
  403990:	9800ef26 	beq	r19,zero,403d50 <_dtoa_r+0x73c>
  403994:	d8800617 	ldw	r2,24(sp)
  403998:	00839c0e 	bge	zero,r2,40480c <_dtoa_r+0x11f8>
  40399c:	d8c00617 	ldw	r3,24(sp)
  4039a0:	108003cc 	andi	r2,r2,15
  4039a4:	100490fa 	slli	r2,r2,3
  4039a8:	182bd13a 	srai	r21,r3,4
  4039ac:	00c010b4 	movhi	r3,66
  4039b0:	18e61204 	addi	r3,r3,-26552
  4039b4:	1885883a 	add	r2,r3,r2
  4039b8:	a8c0040c 	andi	r3,r21,16
  4039bc:	12800017 	ldw	r10,0(r2)
  4039c0:	15800117 	ldw	r22,4(r2)
  4039c4:	18038726 	beq	r3,zero,4047e4 <_dtoa_r+0x11d0>
  4039c8:	008010b4 	movhi	r2,66
  4039cc:	10a60804 	addi	r2,r2,-26592
  4039d0:	11800817 	ldw	r6,32(r2)
  4039d4:	11c00917 	ldw	r7,36(r2)
  4039d8:	d9000317 	ldw	r4,12(sp)
  4039dc:	880b883a 	mov	r5,r17
  4039e0:	da801515 	stw	r10,84(sp)
  4039e4:	04099d80 	call	4099d8 <__divdf3>
  4039e8:	da801517 	ldw	r10,84(sp)
  4039ec:	d8801015 	stw	r2,64(sp)
  4039f0:	1829883a 	mov	r20,r3
  4039f4:	ad4003cc 	andi	r21,r21,15
  4039f8:	048000c4 	movi	r18,3
  4039fc:	a8001126 	beq	r21,zero,403a44 <_dtoa_r+0x430>
  403a00:	04c010b4 	movhi	r19,66
  403a04:	9ce60804 	addi	r19,r19,-26592
  403a08:	5005883a 	mov	r2,r10
  403a0c:	b007883a 	mov	r3,r22
  403a10:	a980004c 	andi	r6,r21,1
  403a14:	1009883a 	mov	r4,r2
  403a18:	a82bd07a 	srai	r21,r21,1
  403a1c:	180b883a 	mov	r5,r3
  403a20:	30000426 	beq	r6,zero,403a34 <_dtoa_r+0x420>
  403a24:	99800017 	ldw	r6,0(r19)
  403a28:	99c00117 	ldw	r7,4(r19)
  403a2c:	94800044 	addi	r18,r18,1
  403a30:	04096f40 	call	4096f4 <__muldf3>
  403a34:	9cc00204 	addi	r19,r19,8
  403a38:	a83ff51e 	bne	r21,zero,403a10 <_dtoa_r+0x3fc>
  403a3c:	1015883a 	mov	r10,r2
  403a40:	182d883a 	mov	r22,r3
  403a44:	d9001017 	ldw	r4,64(sp)
  403a48:	a00b883a 	mov	r5,r20
  403a4c:	500d883a 	mov	r6,r10
  403a50:	b00f883a 	mov	r7,r22
  403a54:	04099d80 	call	4099d8 <__divdf3>
  403a58:	1027883a 	mov	r19,r2
  403a5c:	1829883a 	mov	r20,r3
  403a60:	d8c00d17 	ldw	r3,52(sp)
  403a64:	18000626 	beq	r3,zero,403a80 <_dtoa_r+0x46c>
  403a68:	9809883a 	mov	r4,r19
  403a6c:	a00b883a 	mov	r5,r20
  403a70:	000d883a 	mov	r6,zero
  403a74:	01cffc34 	movhi	r7,16368
  403a78:	0409d0c0 	call	409d0c <__ltdf2>
  403a7c:	10040e16 	blt	r2,zero,404ab8 <_dtoa_r+0x14a4>
  403a80:	9009883a 	mov	r4,r18
  403a84:	0409d680 	call	409d68 <__floatsidf>
  403a88:	1009883a 	mov	r4,r2
  403a8c:	180b883a 	mov	r5,r3
  403a90:	980d883a 	mov	r6,r19
  403a94:	a00f883a 	mov	r7,r20
  403a98:	04096f40 	call	4096f4 <__muldf3>
  403a9c:	1009883a 	mov	r4,r2
  403aa0:	180b883a 	mov	r5,r3
  403aa4:	000d883a 	mov	r6,zero
  403aa8:	01d00734 	movhi	r7,16412
  403aac:	04096400 	call	409640 <__adddf3>
  403ab0:	057f3034 	movhi	r21,64704
  403ab4:	1d6b883a 	add	r21,r3,r21
  403ab8:	d8c00917 	ldw	r3,36(sp)
  403abc:	1025883a 	mov	r18,r2
  403ac0:	18031f26 	beq	r3,zero,404740 <_dtoa_r+0x112c>
  403ac4:	d8800617 	ldw	r2,24(sp)
  403ac8:	dac00917 	ldw	r11,36(sp)
  403acc:	d8801315 	stw	r2,76(sp)
  403ad0:	d8c00c17 	ldw	r3,48(sp)
  403ad4:	18039026 	beq	r3,zero,404918 <_dtoa_r+0x1304>
  403ad8:	58bfffc4 	addi	r2,r11,-1
  403adc:	100490fa 	slli	r2,r2,3
  403ae0:	00c010b4 	movhi	r3,66
  403ae4:	18e61204 	addi	r3,r3,-26552
  403ae8:	0009883a 	mov	r4,zero
  403aec:	1885883a 	add	r2,r3,r2
  403af0:	11800017 	ldw	r6,0(r2)
  403af4:	11c00117 	ldw	r7,4(r2)
  403af8:	014ff834 	movhi	r5,16352
  403afc:	dac01615 	stw	r11,88(sp)
  403b00:	04099d80 	call	4099d8 <__divdf3>
  403b04:	900d883a 	mov	r6,r18
  403b08:	a80f883a 	mov	r7,r21
  403b0c:	1009883a 	mov	r4,r2
  403b10:	180b883a 	mov	r5,r3
  403b14:	04096940 	call	409694 <__subdf3>
  403b18:	a00b883a 	mov	r5,r20
  403b1c:	9809883a 	mov	r4,r19
  403b20:	182b883a 	mov	r21,r3
  403b24:	d8801015 	stw	r2,64(sp)
  403b28:	0409e3c0 	call	409e3c <__fixdfsi>
  403b2c:	1009883a 	mov	r4,r2
  403b30:	d8801515 	stw	r2,84(sp)
  403b34:	0409d680 	call	409d68 <__floatsidf>
  403b38:	9809883a 	mov	r4,r19
  403b3c:	a00b883a 	mov	r5,r20
  403b40:	100d883a 	mov	r6,r2
  403b44:	180f883a 	mov	r7,r3
  403b48:	04096940 	call	409694 <__subdf3>
  403b4c:	da401517 	ldw	r9,84(sp)
  403b50:	d9001017 	ldw	r4,64(sp)
  403b54:	a80b883a 	mov	r5,r21
  403b58:	4d000c04 	addi	r20,r9,48
  403b5c:	bd000005 	stb	r20,0(r23)
  403b60:	100d883a 	mov	r6,r2
  403b64:	180f883a 	mov	r7,r3
  403b68:	bd800044 	addi	r22,r23,1
  403b6c:	1025883a 	mov	r18,r2
  403b70:	1827883a 	mov	r19,r3
  403b74:	0409c440 	call	409c44 <__gtdf2>
  403b78:	00842216 	blt	zero,r2,404c04 <_dtoa_r+0x15f0>
  403b7c:	0009883a 	mov	r4,zero
  403b80:	014ffc34 	movhi	r5,16368
  403b84:	900d883a 	mov	r6,r18
  403b88:	980f883a 	mov	r7,r19
  403b8c:	04096940 	call	409694 <__subdf3>
  403b90:	d9001017 	ldw	r4,64(sp)
  403b94:	a80b883a 	mov	r5,r21
  403b98:	100d883a 	mov	r6,r2
  403b9c:	180f883a 	mov	r7,r3
  403ba0:	0409c440 	call	409c44 <__gtdf2>
  403ba4:	dac01617 	ldw	r11,88(sp)
  403ba8:	00841316 	blt	zero,r2,404bf8 <_dtoa_r+0x15e4>
  403bac:	00800044 	movi	r2,1
  403bb0:	12c0670e 	bge	r2,r11,403d50 <_dtoa_r+0x73c>
  403bb4:	bad7883a 	add	r11,r23,r11
  403bb8:	df001115 	stw	fp,68(sp)
  403bbc:	dc401215 	stw	r17,72(sp)
  403bc0:	5839883a 	mov	fp,r11
  403bc4:	dc401017 	ldw	r17,64(sp)
  403bc8:	00000806 	br	403bec <_dtoa_r+0x5d8>
  403bcc:	04096940 	call	409694 <__subdf3>
  403bd0:	1009883a 	mov	r4,r2
  403bd4:	180b883a 	mov	r5,r3
  403bd8:	880d883a 	mov	r6,r17
  403bdc:	a80f883a 	mov	r7,r21
  403be0:	0409d0c0 	call	409d0c <__ltdf2>
  403be4:	1003ee16 	blt	r2,zero,404ba0 <_dtoa_r+0x158c>
  403be8:	b703f126 	beq	r22,fp,404bb0 <_dtoa_r+0x159c>
  403bec:	8809883a 	mov	r4,r17
  403bf0:	a80b883a 	mov	r5,r21
  403bf4:	000d883a 	mov	r6,zero
  403bf8:	01d00934 	movhi	r7,16420
  403bfc:	04096f40 	call	4096f4 <__muldf3>
  403c00:	000d883a 	mov	r6,zero
  403c04:	01d00934 	movhi	r7,16420
  403c08:	9009883a 	mov	r4,r18
  403c0c:	980b883a 	mov	r5,r19
  403c10:	1023883a 	mov	r17,r2
  403c14:	182b883a 	mov	r21,r3
  403c18:	04096f40 	call	4096f4 <__muldf3>
  403c1c:	180b883a 	mov	r5,r3
  403c20:	1009883a 	mov	r4,r2
  403c24:	1825883a 	mov	r18,r3
  403c28:	1027883a 	mov	r19,r2
  403c2c:	0409e3c0 	call	409e3c <__fixdfsi>
  403c30:	1009883a 	mov	r4,r2
  403c34:	1029883a 	mov	r20,r2
  403c38:	0409d680 	call	409d68 <__floatsidf>
  403c3c:	9809883a 	mov	r4,r19
  403c40:	900b883a 	mov	r5,r18
  403c44:	100d883a 	mov	r6,r2
  403c48:	180f883a 	mov	r7,r3
  403c4c:	04096940 	call	409694 <__subdf3>
  403c50:	a5000c04 	addi	r20,r20,48
  403c54:	b5000005 	stb	r20,0(r22)
  403c58:	1009883a 	mov	r4,r2
  403c5c:	180b883a 	mov	r5,r3
  403c60:	880d883a 	mov	r6,r17
  403c64:	a80f883a 	mov	r7,r21
  403c68:	1025883a 	mov	r18,r2
  403c6c:	1827883a 	mov	r19,r3
  403c70:	0409d0c0 	call	409d0c <__ltdf2>
  403c74:	b5800044 	addi	r22,r22,1
  403c78:	0009883a 	mov	r4,zero
  403c7c:	014ffc34 	movhi	r5,16368
  403c80:	900d883a 	mov	r6,r18
  403c84:	980f883a 	mov	r7,r19
  403c88:	103fd00e 	bge	r2,zero,403bcc <_dtoa_r+0x5b8>
  403c8c:	d9001317 	ldw	r4,76(sp)
  403c90:	df001117 	ldw	fp,68(sp)
  403c94:	d9000615 	stw	r4,24(sp)
  403c98:	8009883a 	mov	r4,r16
  403c9c:	e00b883a 	mov	r5,fp
  403ca0:	04069940 	call	406994 <_Bfree>
  403ca4:	d9c00617 	ldw	r7,24(sp)
  403ca8:	d8c02217 	ldw	r3,136(sp)
  403cac:	d9002417 	ldw	r4,144(sp)
  403cb0:	b0000005 	stb	zero,0(r22)
  403cb4:	38800044 	addi	r2,r7,1
  403cb8:	18800015 	stw	r2,0(r3)
  403cbc:	203e8426 	beq	r4,zero,4036d0 <_dtoa_r+0xbc>
  403cc0:	25800015 	stw	r22,0(r4)
  403cc4:	003e8206 	br	4036d0 <_dtoa_r+0xbc>
  403cc8:	00800434 	movhi	r2,16
  403ccc:	10bfffc4 	addi	r2,r2,-1
  403cd0:	90a4703a 	and	r18,r18,r2
  403cd4:	903e901e 	bne	r18,zero,403718 <_dtoa_r+0x104>
  403cd8:	05c010b4 	movhi	r23,66
  403cdc:	bde5ea04 	addi	r23,r23,-26712
  403ce0:	003e8f06 	br	403720 <_dtoa_r+0x10c>
  403ce4:	b8800204 	addi	r2,r23,8
  403ce8:	003e9206 	br	403734 <_dtoa_r+0x120>
  403cec:	01400434 	movhi	r5,16
  403cf0:	297fffc4 	addi	r5,r5,-1
  403cf4:	894a703a 	and	r5,r17,r5
  403cf8:	d9000317 	ldw	r4,12(sp)
  403cfc:	294ffc34 	orhi	r5,r5,16368
  403d00:	a53f0044 	addi	r20,r20,-1023
  403d04:	dd400217 	ldw	r21,8(sp)
  403d08:	d8000f15 	stw	zero,60(sp)
  403d0c:	003eb106 	br	4037d4 <_dtoa_r+0x1c0>
  403d10:	05c010b4 	movhi	r23,66
  403d14:	bde5e104 	addi	r23,r23,-26748
  403d18:	003e6d06 	br	4036d0 <_dtoa_r+0xbc>
  403d1c:	d8000415 	stw	zero,16(sp)
  403d20:	80001115 	stw	zero,68(r16)
  403d24:	8009883a 	mov	r4,r16
  403d28:	000b883a 	mov	r5,zero
  403d2c:	04068ec0 	call	4068ec <_Balloc>
  403d30:	01ffffc4 	movi	r7,-1
  403d34:	102f883a 	mov	r23,r2
  403d38:	80801015 	stw	r2,64(r16)
  403d3c:	00800044 	movi	r2,1
  403d40:	d9c00915 	stw	r7,36(sp)
  403d44:	d8002115 	stw	zero,132(sp)
  403d48:	d9c00e15 	stw	r7,56(sp)
  403d4c:	d8800c15 	stw	r2,48(sp)
  403d50:	d8800117 	ldw	r2,4(sp)
  403d54:	10008b16 	blt	r2,zero,403f84 <_dtoa_r+0x970>
  403d58:	d9000617 	ldw	r4,24(sp)
  403d5c:	00c00384 	movi	r3,14
  403d60:	19008816 	blt	r3,r4,403f84 <_dtoa_r+0x970>
  403d64:	200490fa 	slli	r2,r4,3
  403d68:	d9c02117 	ldw	r7,132(sp)
  403d6c:	00c010b4 	movhi	r3,66
  403d70:	18e61204 	addi	r3,r3,-26552
  403d74:	1885883a 	add	r2,r3,r2
  403d78:	14800017 	ldw	r18,0(r2)
  403d7c:	14c00117 	ldw	r19,4(r2)
  403d80:	3801c916 	blt	r7,zero,4044a8 <_dtoa_r+0xe94>
  403d84:	d9000317 	ldw	r4,12(sp)
  403d88:	900d883a 	mov	r6,r18
  403d8c:	980f883a 	mov	r7,r19
  403d90:	880b883a 	mov	r5,r17
  403d94:	04099d80 	call	4099d8 <__divdf3>
  403d98:	180b883a 	mov	r5,r3
  403d9c:	1009883a 	mov	r4,r2
  403da0:	0409e3c0 	call	409e3c <__fixdfsi>
  403da4:	1009883a 	mov	r4,r2
  403da8:	102b883a 	mov	r21,r2
  403dac:	0409d680 	call	409d68 <__floatsidf>
  403db0:	1009883a 	mov	r4,r2
  403db4:	180b883a 	mov	r5,r3
  403db8:	900d883a 	mov	r6,r18
  403dbc:	980f883a 	mov	r7,r19
  403dc0:	04096f40 	call	4096f4 <__muldf3>
  403dc4:	d9000317 	ldw	r4,12(sp)
  403dc8:	880b883a 	mov	r5,r17
  403dcc:	100d883a 	mov	r6,r2
  403dd0:	180f883a 	mov	r7,r3
  403dd4:	04096940 	call	409694 <__subdf3>
  403dd8:	d9c00917 	ldw	r7,36(sp)
  403ddc:	1009883a 	mov	r4,r2
  403de0:	a8800c04 	addi	r2,r21,48
  403de4:	b8800005 	stb	r2,0(r23)
  403de8:	01800044 	movi	r6,1
  403dec:	180b883a 	mov	r5,r3
  403df0:	2005883a 	mov	r2,r4
  403df4:	bd800044 	addi	r22,r23,1
  403df8:	39803726 	beq	r7,r6,403ed8 <_dtoa_r+0x8c4>
  403dfc:	000d883a 	mov	r6,zero
  403e00:	01d00934 	movhi	r7,16420
  403e04:	04096f40 	call	4096f4 <__muldf3>
  403e08:	1009883a 	mov	r4,r2
  403e0c:	180b883a 	mov	r5,r3
  403e10:	000d883a 	mov	r6,zero
  403e14:	000f883a 	mov	r7,zero
  403e18:	1029883a 	mov	r20,r2
  403e1c:	1823883a 	mov	r17,r3
  403e20:	0409b8c0 	call	409b8c <__eqdf2>
  403e24:	103f9c26 	beq	r2,zero,403c98 <_dtoa_r+0x684>
  403e28:	dd400917 	ldw	r21,36(sp)
  403e2c:	dc000415 	stw	r16,16(sp)
  403e30:	00000906 	br	403e58 <_dtoa_r+0x844>
  403e34:	04096f40 	call	4096f4 <__muldf3>
  403e38:	1009883a 	mov	r4,r2
  403e3c:	180b883a 	mov	r5,r3
  403e40:	000d883a 	mov	r6,zero
  403e44:	000f883a 	mov	r7,zero
  403e48:	1029883a 	mov	r20,r2
  403e4c:	1823883a 	mov	r17,r3
  403e50:	0409b8c0 	call	409b8c <__eqdf2>
  403e54:	10022926 	beq	r2,zero,4046fc <_dtoa_r+0x10e8>
  403e58:	900d883a 	mov	r6,r18
  403e5c:	980f883a 	mov	r7,r19
  403e60:	a009883a 	mov	r4,r20
  403e64:	880b883a 	mov	r5,r17
  403e68:	04099d80 	call	4099d8 <__divdf3>
  403e6c:	180b883a 	mov	r5,r3
  403e70:	1009883a 	mov	r4,r2
  403e74:	0409e3c0 	call	409e3c <__fixdfsi>
  403e78:	1009883a 	mov	r4,r2
  403e7c:	1021883a 	mov	r16,r2
  403e80:	0409d680 	call	409d68 <__floatsidf>
  403e84:	1009883a 	mov	r4,r2
  403e88:	180b883a 	mov	r5,r3
  403e8c:	900d883a 	mov	r6,r18
  403e90:	980f883a 	mov	r7,r19
  403e94:	04096f40 	call	4096f4 <__muldf3>
  403e98:	a009883a 	mov	r4,r20
  403e9c:	880b883a 	mov	r5,r17
  403ea0:	100d883a 	mov	r6,r2
  403ea4:	180f883a 	mov	r7,r3
  403ea8:	04096940 	call	409694 <__subdf3>
  403eac:	82400c04 	addi	r9,r16,48
  403eb0:	b2400005 	stb	r9,0(r22)
  403eb4:	b5800044 	addi	r22,r22,1
  403eb8:	b5d3c83a 	sub	r9,r22,r23
  403ebc:	000d883a 	mov	r6,zero
  403ec0:	01d00934 	movhi	r7,16420
  403ec4:	1009883a 	mov	r4,r2
  403ec8:	180b883a 	mov	r5,r3
  403ecc:	aa7fd91e 	bne	r21,r9,403e34 <_dtoa_r+0x820>
  403ed0:	802b883a 	mov	r21,r16
  403ed4:	dc000417 	ldw	r16,16(sp)
  403ed8:	1009883a 	mov	r4,r2
  403edc:	180b883a 	mov	r5,r3
  403ee0:	100d883a 	mov	r6,r2
  403ee4:	180f883a 	mov	r7,r3
  403ee8:	04096400 	call	409640 <__adddf3>
  403eec:	9009883a 	mov	r4,r18
  403ef0:	980b883a 	mov	r5,r19
  403ef4:	100d883a 	mov	r6,r2
  403ef8:	180f883a 	mov	r7,r3
  403efc:	1023883a 	mov	r17,r2
  403f00:	1829883a 	mov	r20,r3
  403f04:	0409d0c0 	call	409d0c <__ltdf2>
  403f08:	10000816 	blt	r2,zero,403f2c <_dtoa_r+0x918>
  403f0c:	9009883a 	mov	r4,r18
  403f10:	980b883a 	mov	r5,r19
  403f14:	880d883a 	mov	r6,r17
  403f18:	a00f883a 	mov	r7,r20
  403f1c:	0409b8c0 	call	409b8c <__eqdf2>
  403f20:	103f5d1e 	bne	r2,zero,403c98 <_dtoa_r+0x684>
  403f24:	ad40004c 	andi	r21,r21,1
  403f28:	a83f5b26 	beq	r21,zero,403c98 <_dtoa_r+0x684>
  403f2c:	b53fffc3 	ldbu	r20,-1(r22)
  403f30:	b0ffff84 	addi	r3,r22,-2
  403f34:	01400e44 	movi	r5,57
  403f38:	00000306 	br	403f48 <_dtoa_r+0x934>
  403f3c:	1d000003 	ldbu	r20,0(r3)
  403f40:	102d883a 	mov	r22,r2
  403f44:	18ffffc4 	addi	r3,r3,-1
  403f48:	a1003fcc 	andi	r4,r20,255
  403f4c:	2100201c 	xori	r4,r4,128
  403f50:	213fe004 	addi	r4,r4,-128
  403f54:	b0bfffc4 	addi	r2,r22,-1
  403f58:	2142ca1e 	bne	r4,r5,404a84 <_dtoa_r+0x1470>
  403f5c:	b8bff71e 	bne	r23,r2,403f3c <_dtoa_r+0x928>
  403f60:	d8800617 	ldw	r2,24(sp)
  403f64:	05000c44 	movi	r20,49
  403f68:	10800044 	addi	r2,r2,1
  403f6c:	d8800615 	stw	r2,24(sp)
  403f70:	00800c04 	movi	r2,48
  403f74:	b8800005 	stb	r2,0(r23)
  403f78:	b805883a 	mov	r2,r23
  403f7c:	15000005 	stb	r20,0(r2)
  403f80:	003f4506 	br	403c98 <_dtoa_r+0x684>
  403f84:	d9c00c17 	ldw	r7,48(sp)
  403f88:	3800c926 	beq	r7,zero,4042b0 <_dtoa_r+0xc9c>
  403f8c:	d9c00417 	ldw	r7,16(sp)
  403f90:	00c00044 	movi	r3,1
  403f94:	19c16c0e 	bge	r3,r7,404548 <_dtoa_r+0xf34>
  403f98:	d9000917 	ldw	r4,36(sp)
  403f9c:	d9c00a17 	ldw	r7,40(sp)
  403fa0:	24ffffc4 	addi	r19,r4,-1
  403fa4:	3cc20716 	blt	r7,r19,4047c4 <_dtoa_r+0x11b0>
  403fa8:	3ce7c83a 	sub	r19,r7,r19
  403fac:	d9c00917 	ldw	r7,36(sp)
  403fb0:	3802ae16 	blt	r7,zero,404a6c <_dtoa_r+0x1458>
  403fb4:	dc800817 	ldw	r18,32(sp)
  403fb8:	d8800917 	ldw	r2,36(sp)
  403fbc:	d8c00817 	ldw	r3,32(sp)
  403fc0:	d9c00717 	ldw	r7,28(sp)
  403fc4:	8009883a 	mov	r4,r16
  403fc8:	1887883a 	add	r3,r3,r2
  403fcc:	388f883a 	add	r7,r7,r2
  403fd0:	01400044 	movi	r5,1
  403fd4:	d8c00815 	stw	r3,32(sp)
  403fd8:	d9c00715 	stw	r7,28(sp)
  403fdc:	0406d1c0 	call	406d1c <__i2b>
  403fe0:	102b883a 	mov	r21,r2
  403fe4:	90000a26 	beq	r18,zero,404010 <_dtoa_r+0x9fc>
  403fe8:	d8800717 	ldw	r2,28(sp)
  403fec:	0080080e 	bge	zero,r2,404010 <_dtoa_r+0x9fc>
  403ff0:	90812b16 	blt	r18,r2,4044a0 <_dtoa_r+0xe8c>
  403ff4:	d8c00817 	ldw	r3,32(sp)
  403ff8:	d9000717 	ldw	r4,28(sp)
  403ffc:	90a5c83a 	sub	r18,r18,r2
  404000:	1887c83a 	sub	r3,r3,r2
  404004:	2089c83a 	sub	r4,r4,r2
  404008:	d8c00815 	stw	r3,32(sp)
  40400c:	d9000715 	stw	r4,28(sp)
  404010:	d9c00a17 	ldw	r7,40(sp)
  404014:	01c0140e 	bge	zero,r7,404068 <_dtoa_r+0xa54>
  404018:	d8800c17 	ldw	r2,48(sp)
  40401c:	1001de26 	beq	r2,zero,404798 <_dtoa_r+0x1184>
  404020:	04c00e0e 	bge	zero,r19,40405c <_dtoa_r+0xa48>
  404024:	a80b883a 	mov	r5,r21
  404028:	8009883a 	mov	r4,r16
  40402c:	980d883a 	mov	r6,r19
  404030:	0406fb00 	call	406fb0 <__pow5mult>
  404034:	e00d883a 	mov	r6,fp
  404038:	8009883a 	mov	r4,r16
  40403c:	100b883a 	mov	r5,r2
  404040:	102b883a 	mov	r21,r2
  404044:	0406d580 	call	406d58 <__multiply>
  404048:	1029883a 	mov	r20,r2
  40404c:	e00b883a 	mov	r5,fp
  404050:	8009883a 	mov	r4,r16
  404054:	04069940 	call	406994 <_Bfree>
  404058:	a039883a 	mov	fp,r20
  40405c:	d8c00a17 	ldw	r3,40(sp)
  404060:	1ccdc83a 	sub	r6,r3,r19
  404064:	3001291e 	bne	r6,zero,40450c <_dtoa_r+0xef8>
  404068:	8009883a 	mov	r4,r16
  40406c:	01400044 	movi	r5,1
  404070:	0406d1c0 	call	406d1c <__i2b>
  404074:	d9000b17 	ldw	r4,44(sp)
  404078:	1029883a 	mov	r20,r2
  40407c:	0100050e 	bge	zero,r4,404094 <_dtoa_r+0xa80>
  404080:	d9800b17 	ldw	r6,44(sp)
  404084:	8009883a 	mov	r4,r16
  404088:	100b883a 	mov	r5,r2
  40408c:	0406fb00 	call	406fb0 <__pow5mult>
  404090:	1029883a 	mov	r20,r2
  404094:	d9c00417 	ldw	r7,16(sp)
  404098:	00800044 	movi	r2,1
  40409c:	11c0f00e 	bge	r2,r7,404460 <_dtoa_r+0xe4c>
  4040a0:	0023883a 	mov	r17,zero
  4040a4:	d8800b17 	ldw	r2,44(sp)
  4040a8:	1001741e 	bne	r2,zero,40467c <_dtoa_r+0x1068>
  4040ac:	00800044 	movi	r2,1
  4040b0:	d8c00717 	ldw	r3,28(sp)
  4040b4:	10c5883a 	add	r2,r2,r3
  4040b8:	108007cc 	andi	r2,r2,31
  4040bc:	10008026 	beq	r2,zero,4042c0 <_dtoa_r+0xcac>
  4040c0:	01000804 	movi	r4,32
  4040c4:	2089c83a 	sub	r4,r4,r2
  4040c8:	00c00104 	movi	r3,4
  4040cc:	1902d00e 	bge	r3,r4,404c10 <_dtoa_r+0x15fc>
  4040d0:	d9000817 	ldw	r4,32(sp)
  4040d4:	d9c00717 	ldw	r7,28(sp)
  4040d8:	00c00704 	movi	r3,28
  4040dc:	1885c83a 	sub	r2,r3,r2
  4040e0:	2089883a 	add	r4,r4,r2
  4040e4:	388f883a 	add	r7,r7,r2
  4040e8:	d9000815 	stw	r4,32(sp)
  4040ec:	90a5883a 	add	r18,r18,r2
  4040f0:	d9c00715 	stw	r7,28(sp)
  4040f4:	d9c00817 	ldw	r7,32(sp)
  4040f8:	01c0050e 	bge	zero,r7,404110 <_dtoa_r+0xafc>
  4040fc:	e00b883a 	mov	r5,fp
  404100:	8009883a 	mov	r4,r16
  404104:	380d883a 	mov	r6,r7
  404108:	04070dc0 	call	4070dc <__lshift>
  40410c:	1039883a 	mov	fp,r2
  404110:	d8800717 	ldw	r2,28(sp)
  404114:	0080050e 	bge	zero,r2,40412c <_dtoa_r+0xb18>
  404118:	a00b883a 	mov	r5,r20
  40411c:	8009883a 	mov	r4,r16
  404120:	100d883a 	mov	r6,r2
  404124:	04070dc0 	call	4070dc <__lshift>
  404128:	1029883a 	mov	r20,r2
  40412c:	d8c00d17 	ldw	r3,52(sp)
  404130:	1801401e 	bne	r3,zero,404634 <_dtoa_r+0x1020>
  404134:	d8800917 	ldw	r2,36(sp)
  404138:	00815a0e 	bge	zero,r2,4046a4 <_dtoa_r+0x1090>
  40413c:	d8c00c17 	ldw	r3,48(sp)
  404140:	18006f1e 	bne	r3,zero,404300 <_dtoa_r+0xcec>
  404144:	b823883a 	mov	r17,r23
  404148:	dc800917 	ldw	r18,36(sp)
  40414c:	00000206 	br	404158 <_dtoa_r+0xb44>
  404150:	04069bc0 	call	4069bc <__multadd>
  404154:	1039883a 	mov	fp,r2
  404158:	e009883a 	mov	r4,fp
  40415c:	a00b883a 	mov	r5,r20
  404160:	04033d80 	call	4033d8 <quorem>
  404164:	10800c04 	addi	r2,r2,48
  404168:	88800005 	stb	r2,0(r17)
  40416c:	8c400044 	addi	r17,r17,1
  404170:	8dc7c83a 	sub	r3,r17,r23
  404174:	8009883a 	mov	r4,r16
  404178:	e00b883a 	mov	r5,fp
  40417c:	01800284 	movi	r6,10
  404180:	000f883a 	mov	r7,zero
  404184:	1cbff216 	blt	r3,r18,404150 <_dtoa_r+0xb3c>
  404188:	dd800917 	ldw	r22,36(sp)
  40418c:	1007883a 	mov	r3,r2
  404190:	05823a0e 	bge	zero,r22,404a7c <_dtoa_r+0x1468>
  404194:	bdad883a 	add	r22,r23,r22
  404198:	0023883a 	mov	r17,zero
  40419c:	e00b883a 	mov	r5,fp
  4041a0:	01800044 	movi	r6,1
  4041a4:	8009883a 	mov	r4,r16
  4041a8:	d8c01515 	stw	r3,84(sp)
  4041ac:	04070dc0 	call	4070dc <__lshift>
  4041b0:	1009883a 	mov	r4,r2
  4041b4:	a00b883a 	mov	r5,r20
  4041b8:	1039883a 	mov	fp,r2
  4041bc:	04072380 	call	407238 <__mcmp>
  4041c0:	d8c01517 	ldw	r3,84(sp)
  4041c4:	0080d60e 	bge	zero,r2,404520 <_dtoa_r+0xf0c>
  4041c8:	b13fffc3 	ldbu	r4,-1(r22)
  4041cc:	b0ffff84 	addi	r3,r22,-2
  4041d0:	01800e44 	movi	r6,57
  4041d4:	00000306 	br	4041e4 <_dtoa_r+0xbd0>
  4041d8:	19000003 	ldbu	r4,0(r3)
  4041dc:	102d883a 	mov	r22,r2
  4041e0:	18ffffc4 	addi	r3,r3,-1
  4041e4:	21403fcc 	andi	r5,r4,255
  4041e8:	2940201c 	xori	r5,r5,128
  4041ec:	297fe004 	addi	r5,r5,-128
  4041f0:	b0bfffc4 	addi	r2,r22,-1
  4041f4:	2981a71e 	bne	r5,r6,404894 <_dtoa_r+0x1280>
  4041f8:	b8bff71e 	bne	r23,r2,4041d8 <_dtoa_r+0xbc4>
  4041fc:	d8800617 	ldw	r2,24(sp)
  404200:	10800044 	addi	r2,r2,1
  404204:	d8800615 	stw	r2,24(sp)
  404208:	00800c44 	movi	r2,49
  40420c:	b8800005 	stb	r2,0(r23)
  404210:	8009883a 	mov	r4,r16
  404214:	a00b883a 	mov	r5,r20
  404218:	04069940 	call	406994 <_Bfree>
  40421c:	a83e9e26 	beq	r21,zero,403c98 <_dtoa_r+0x684>
  404220:	88000426 	beq	r17,zero,404234 <_dtoa_r+0xc20>
  404224:	8d400326 	beq	r17,r21,404234 <_dtoa_r+0xc20>
  404228:	8009883a 	mov	r4,r16
  40422c:	880b883a 	mov	r5,r17
  404230:	04069940 	call	406994 <_Bfree>
  404234:	8009883a 	mov	r4,r16
  404238:	a80b883a 	mov	r5,r21
  40423c:	04069940 	call	406994 <_Bfree>
  404240:	003e9506 	br	403c98 <_dtoa_r+0x684>
  404244:	00c00044 	movi	r3,1
  404248:	d8c00d15 	stw	r3,52(sp)
  40424c:	003d9f06 	br	4038cc <_dtoa_r+0x2b8>
  404250:	d9000817 	ldw	r4,32(sp)
  404254:	d8800617 	ldw	r2,24(sp)
  404258:	d8000b15 	stw	zero,44(sp)
  40425c:	2089c83a 	sub	r4,r4,r2
  404260:	0087c83a 	sub	r3,zero,r2
  404264:	d9000815 	stw	r4,32(sp)
  404268:	d8c00a15 	stw	r3,40(sp)
  40426c:	003da306 	br	4038fc <_dtoa_r+0x2e8>
  404270:	0529c83a 	sub	r20,zero,r20
  404274:	dd000815 	stw	r20,32(sp)
  404278:	d8000715 	stw	zero,28(sp)
  40427c:	003d9806 	br	4038e0 <_dtoa_r+0x2cc>
  404280:	d9000617 	ldw	r4,24(sp)
  404284:	0409d680 	call	409d68 <__floatsidf>
  404288:	1009883a 	mov	r4,r2
  40428c:	180b883a 	mov	r5,r3
  404290:	980d883a 	mov	r6,r19
  404294:	900f883a 	mov	r7,r18
  404298:	0409be80 	call	409be8 <__nedf2>
  40429c:	103d7a26 	beq	r2,zero,403888 <_dtoa_r+0x274>
  4042a0:	d8800617 	ldw	r2,24(sp)
  4042a4:	10bfffc4 	addi	r2,r2,-1
  4042a8:	d8800615 	stw	r2,24(sp)
  4042ac:	003d7606 	br	403888 <_dtoa_r+0x274>
  4042b0:	dcc00a17 	ldw	r19,40(sp)
  4042b4:	dc800817 	ldw	r18,32(sp)
  4042b8:	002b883a 	mov	r21,zero
  4042bc:	003f4906 	br	403fe4 <_dtoa_r+0x9d0>
  4042c0:	00800704 	movi	r2,28
  4042c4:	d8c00817 	ldw	r3,32(sp)
  4042c8:	d9000717 	ldw	r4,28(sp)
  4042cc:	90a5883a 	add	r18,r18,r2
  4042d0:	1887883a 	add	r3,r3,r2
  4042d4:	2089883a 	add	r4,r4,r2
  4042d8:	d8c00815 	stw	r3,32(sp)
  4042dc:	d9000715 	stw	r4,28(sp)
  4042e0:	003f8406 	br	4040f4 <_dtoa_r+0xae0>
  4042e4:	d9c00317 	ldw	r7,12(sp)
  4042e8:	013efb84 	movi	r4,-1042
  4042ec:	2509c83a 	sub	r4,r4,r20
  4042f0:	3908983a 	sll	r4,r7,r4
  4042f4:	003d3006 	br	4037b8 <_dtoa_r+0x1a4>
  4042f8:	d8000d15 	stw	zero,52(sp)
  4042fc:	003d7306 	br	4038cc <_dtoa_r+0x2b8>
  404300:	0480050e 	bge	zero,r18,404318 <_dtoa_r+0xd04>
  404304:	a80b883a 	mov	r5,r21
  404308:	8009883a 	mov	r4,r16
  40430c:	900d883a 	mov	r6,r18
  404310:	04070dc0 	call	4070dc <__lshift>
  404314:	102b883a 	mov	r21,r2
  404318:	8801611e 	bne	r17,zero,4048a0 <_dtoa_r+0x128c>
  40431c:	a827883a 	mov	r19,r21
  404320:	d8c00317 	ldw	r3,12(sp)
  404324:	d9000917 	ldw	r4,36(sp)
  404328:	b8bfffc4 	addi	r2,r23,-1
  40432c:	18c0004c 	andi	r3,r3,1
  404330:	1105883a 	add	r2,r2,r4
  404334:	b825883a 	mov	r18,r23
  404338:	d8800515 	stw	r2,20(sp)
  40433c:	a823883a 	mov	r17,r21
  404340:	d8c00315 	stw	r3,12(sp)
  404344:	ddc00715 	stw	r23,28(sp)
  404348:	e009883a 	mov	r4,fp
  40434c:	a00b883a 	mov	r5,r20
  404350:	04033d80 	call	4033d8 <quorem>
  404354:	e009883a 	mov	r4,fp
  404358:	880b883a 	mov	r5,r17
  40435c:	102d883a 	mov	r22,r2
  404360:	04072380 	call	407238 <__mcmp>
  404364:	980d883a 	mov	r6,r19
  404368:	8009883a 	mov	r4,r16
  40436c:	a00b883a 	mov	r5,r20
  404370:	102b883a 	mov	r21,r2
  404374:	04072900 	call	407290 <__mdiff>
  404378:	100d883a 	mov	r6,r2
  40437c:	10800317 	ldw	r2,12(r2)
  404380:	b5c00c04 	addi	r23,r22,48
  404384:	10008c26 	beq	r2,zero,4045b8 <_dtoa_r+0xfa4>
  404388:	8009883a 	mov	r4,r16
  40438c:	300b883a 	mov	r5,r6
  404390:	04069940 	call	406994 <_Bfree>
  404394:	00800044 	movi	r2,1
  404398:	a8007116 	blt	r21,zero,404560 <_dtoa_r+0xf4c>
  40439c:	a800041e 	bne	r21,zero,4043b0 <_dtoa_r+0xd9c>
  4043a0:	d9c00417 	ldw	r7,16(sp)
  4043a4:	3800021e 	bne	r7,zero,4043b0 <_dtoa_r+0xd9c>
  4043a8:	d8c00317 	ldw	r3,12(sp)
  4043ac:	18006c26 	beq	r3,zero,404560 <_dtoa_r+0xf4c>
  4043b0:	00814c16 	blt	zero,r2,4048e4 <_dtoa_r+0x12d0>
  4043b4:	d8c00517 	ldw	r3,20(sp)
  4043b8:	95400044 	addi	r21,r18,1
  4043bc:	95c00005 	stb	r23,0(r18)
  4043c0:	a82d883a 	mov	r22,r21
  4043c4:	90c14d26 	beq	r18,r3,4048fc <_dtoa_r+0x12e8>
  4043c8:	e00b883a 	mov	r5,fp
  4043cc:	8009883a 	mov	r4,r16
  4043d0:	01800284 	movi	r6,10
  4043d4:	000f883a 	mov	r7,zero
  4043d8:	04069bc0 	call	4069bc <__multadd>
  4043dc:	1039883a 	mov	fp,r2
  4043e0:	8cc08b26 	beq	r17,r19,404610 <_dtoa_r+0xffc>
  4043e4:	880b883a 	mov	r5,r17
  4043e8:	01800284 	movi	r6,10
  4043ec:	000f883a 	mov	r7,zero
  4043f0:	8009883a 	mov	r4,r16
  4043f4:	04069bc0 	call	4069bc <__multadd>
  4043f8:	980b883a 	mov	r5,r19
  4043fc:	8009883a 	mov	r4,r16
  404400:	01800284 	movi	r6,10
  404404:	000f883a 	mov	r7,zero
  404408:	1023883a 	mov	r17,r2
  40440c:	04069bc0 	call	4069bc <__multadd>
  404410:	1027883a 	mov	r19,r2
  404414:	a825883a 	mov	r18,r21
  404418:	003fcb06 	br	404348 <_dtoa_r+0xd34>
  40441c:	d9c00417 	ldw	r7,16(sp)
  404420:	00800104 	movi	r2,4
  404424:	3880e426 	beq	r7,r2,4047b8 <_dtoa_r+0x11a4>
  404428:	00800144 	movi	r2,5
  40442c:	38be3c1e 	bne	r7,r2,403d20 <_dtoa_r+0x70c>
  404430:	00c00044 	movi	r3,1
  404434:	d8c00c15 	stw	r3,48(sp)
  404438:	d9c02117 	ldw	r7,132(sp)
  40443c:	d8800617 	ldw	r2,24(sp)
  404440:	388f883a 	add	r7,r7,r2
  404444:	3c800044 	addi	r18,r7,1
  404448:	d9c00e15 	stw	r7,56(sp)
  40444c:	dc800915 	stw	r18,36(sp)
  404450:	04bd3e16 	blt	zero,r18,40394c <_dtoa_r+0x338>
  404454:	80001115 	stw	zero,68(r16)
  404458:	000b883a 	mov	r5,zero
  40445c:	003d4606 	br	403978 <_dtoa_r+0x364>
  404460:	d8c00317 	ldw	r3,12(sp)
  404464:	183f0e1e 	bne	r3,zero,4040a0 <_dtoa_r+0xa8c>
  404468:	00c00434 	movhi	r3,16
  40446c:	18ffffc4 	addi	r3,r3,-1
  404470:	88c6703a 	and	r3,r17,r3
  404474:	183f0a1e 	bne	r3,zero,4040a0 <_dtoa_r+0xa8c>
  404478:	8c5ffc2c 	andhi	r17,r17,32752
  40447c:	883f0826 	beq	r17,zero,4040a0 <_dtoa_r+0xa8c>
  404480:	d9000817 	ldw	r4,32(sp)
  404484:	d9c00717 	ldw	r7,28(sp)
  404488:	1023883a 	mov	r17,r2
  40448c:	2089883a 	add	r4,r4,r2
  404490:	388f883a 	add	r7,r7,r2
  404494:	d9000815 	stw	r4,32(sp)
  404498:	d9c00715 	stw	r7,28(sp)
  40449c:	003f0106 	br	4040a4 <_dtoa_r+0xa90>
  4044a0:	9005883a 	mov	r2,r18
  4044a4:	003ed306 	br	403ff4 <_dtoa_r+0x9e0>
  4044a8:	d8800917 	ldw	r2,36(sp)
  4044ac:	00be3516 	blt	zero,r2,403d84 <_dtoa_r+0x770>
  4044b0:	1000b61e 	bne	r2,zero,40478c <_dtoa_r+0x1178>
  4044b4:	9009883a 	mov	r4,r18
  4044b8:	980b883a 	mov	r5,r19
  4044bc:	000d883a 	mov	r6,zero
  4044c0:	01d00534 	movhi	r7,16404
  4044c4:	04096f40 	call	4096f4 <__muldf3>
  4044c8:	d9800317 	ldw	r6,12(sp)
  4044cc:	1009883a 	mov	r4,r2
  4044d0:	180b883a 	mov	r5,r3
  4044d4:	880f883a 	mov	r7,r17
  4044d8:	0409ca80 	call	409ca8 <__gedf2>
  4044dc:	0029883a 	mov	r20,zero
  4044e0:	002b883a 	mov	r21,zero
  4044e4:	10007e16 	blt	r2,zero,4046e0 <_dtoa_r+0x10cc>
  4044e8:	d8802117 	ldw	r2,132(sp)
  4044ec:	b82d883a 	mov	r22,r23
  4044f0:	0084303a 	nor	r2,zero,r2
  4044f4:	d8800615 	stw	r2,24(sp)
  4044f8:	8009883a 	mov	r4,r16
  4044fc:	a00b883a 	mov	r5,r20
  404500:	04069940 	call	406994 <_Bfree>
  404504:	a83f4b1e 	bne	r21,zero,404234 <_dtoa_r+0xc20>
  404508:	003de306 	br	403c98 <_dtoa_r+0x684>
  40450c:	e00b883a 	mov	r5,fp
  404510:	8009883a 	mov	r4,r16
  404514:	0406fb00 	call	406fb0 <__pow5mult>
  404518:	1039883a 	mov	fp,r2
  40451c:	003ed206 	br	404068 <_dtoa_r+0xa54>
  404520:	1000021e 	bne	r2,zero,40452c <_dtoa_r+0xf18>
  404524:	18c0004c 	andi	r3,r3,1
  404528:	183f271e 	bne	r3,zero,4041c8 <_dtoa_r+0xbb4>
  40452c:	01000c04 	movi	r4,48
  404530:	00000106 	br	404538 <_dtoa_r+0xf24>
  404534:	102d883a 	mov	r22,r2
  404538:	b0bfffc4 	addi	r2,r22,-1
  40453c:	10c00007 	ldb	r3,0(r2)
  404540:	193ffc26 	beq	r3,r4,404534 <_dtoa_r+0xf20>
  404544:	003f3206 	br	404210 <_dtoa_r+0xbfc>
  404548:	d8c00f17 	ldw	r3,60(sp)
  40454c:	18015026 	beq	r3,zero,404a90 <_dtoa_r+0x147c>
  404550:	10810cc4 	addi	r2,r2,1075
  404554:	dcc00a17 	ldw	r19,40(sp)
  404558:	dc800817 	ldw	r18,32(sp)
  40455c:	003e9706 	br	403fbc <_dtoa_r+0x9a8>
  404560:	b807883a 	mov	r3,r23
  404564:	182b883a 	mov	r21,r3
  404568:	ddc00717 	ldw	r23,28(sp)
  40456c:	00800e0e 	bge	zero,r2,4045a8 <_dtoa_r+0xf94>
  404570:	e00b883a 	mov	r5,fp
  404574:	01800044 	movi	r6,1
  404578:	8009883a 	mov	r4,r16
  40457c:	d8c01515 	stw	r3,84(sp)
  404580:	04070dc0 	call	4070dc <__lshift>
  404584:	1009883a 	mov	r4,r2
  404588:	a00b883a 	mov	r5,r20
  40458c:	1039883a 	mov	fp,r2
  404590:	04072380 	call	407238 <__mcmp>
  404594:	d8c01517 	ldw	r3,84(sp)
  404598:	0081880e 	bge	zero,r2,404bbc <_dtoa_r+0x15a8>
  40459c:	00800e44 	movi	r2,57
  4045a0:	b0c00c44 	addi	r3,r22,49
  4045a4:	a8816326 	beq	r21,r2,404b34 <_dtoa_r+0x1520>
  4045a8:	90c00005 	stb	r3,0(r18)
  4045ac:	95800044 	addi	r22,r18,1
  4045b0:	982b883a 	mov	r21,r19
  4045b4:	003f1606 	br	404210 <_dtoa_r+0xbfc>
  4045b8:	300b883a 	mov	r5,r6
  4045bc:	e009883a 	mov	r4,fp
  4045c0:	d9801515 	stw	r6,84(sp)
  4045c4:	04072380 	call	407238 <__mcmp>
  4045c8:	d9801517 	ldw	r6,84(sp)
  4045cc:	8009883a 	mov	r4,r16
  4045d0:	d8801515 	stw	r2,84(sp)
  4045d4:	300b883a 	mov	r5,r6
  4045d8:	04069940 	call	406994 <_Bfree>
  4045dc:	d8801517 	ldw	r2,84(sp)
  4045e0:	103f6d1e 	bne	r2,zero,404398 <_dtoa_r+0xd84>
  4045e4:	d9c00417 	ldw	r7,16(sp)
  4045e8:	383f6b1e 	bne	r7,zero,404398 <_dtoa_r+0xd84>
  4045ec:	d8c00317 	ldw	r3,12(sp)
  4045f0:	183f691e 	bne	r3,zero,404398 <_dtoa_r+0xd84>
  4045f4:	b807883a 	mov	r3,r23
  4045f8:	00800e44 	movi	r2,57
  4045fc:	ddc00717 	ldw	r23,28(sp)
  404600:	18814c26 	beq	r3,r2,404b34 <_dtoa_r+0x1520>
  404604:	057fe80e 	bge	zero,r21,4045a8 <_dtoa_r+0xf94>
  404608:	b0c00c44 	addi	r3,r22,49
  40460c:	003fe606 	br	4045a8 <_dtoa_r+0xf94>
  404610:	880b883a 	mov	r5,r17
  404614:	8009883a 	mov	r4,r16
  404618:	01800284 	movi	r6,10
  40461c:	000f883a 	mov	r7,zero
  404620:	04069bc0 	call	4069bc <__multadd>
  404624:	1023883a 	mov	r17,r2
  404628:	1027883a 	mov	r19,r2
  40462c:	a825883a 	mov	r18,r21
  404630:	003f4506 	br	404348 <_dtoa_r+0xd34>
  404634:	e009883a 	mov	r4,fp
  404638:	a00b883a 	mov	r5,r20
  40463c:	04072380 	call	407238 <__mcmp>
  404640:	103ebc0e 	bge	r2,zero,404134 <_dtoa_r+0xb20>
  404644:	e00b883a 	mov	r5,fp
  404648:	8009883a 	mov	r4,r16
  40464c:	01800284 	movi	r6,10
  404650:	000f883a 	mov	r7,zero
  404654:	04069bc0 	call	4069bc <__multadd>
  404658:	1039883a 	mov	fp,r2
  40465c:	d8800617 	ldw	r2,24(sp)
  404660:	d8c00c17 	ldw	r3,48(sp)
  404664:	10bfffc4 	addi	r2,r2,-1
  404668:	d8800615 	stw	r2,24(sp)
  40466c:	1801571e 	bne	r3,zero,404bcc <_dtoa_r+0x15b8>
  404670:	d9c00e17 	ldw	r7,56(sp)
  404674:	d9c00915 	stw	r7,36(sp)
  404678:	003eae06 	br	404134 <_dtoa_r+0xb20>
  40467c:	a0800417 	ldw	r2,16(r20)
  404680:	10800104 	addi	r2,r2,4
  404684:	1085883a 	add	r2,r2,r2
  404688:	1085883a 	add	r2,r2,r2
  40468c:	a085883a 	add	r2,r20,r2
  404690:	11000017 	ldw	r4,0(r2)
  404694:	0406c040 	call	406c04 <__hi0bits>
  404698:	00c00804 	movi	r3,32
  40469c:	1885c83a 	sub	r2,r3,r2
  4046a0:	003e8306 	br	4040b0 <_dtoa_r+0xa9c>
  4046a4:	d9c00417 	ldw	r7,16(sp)
  4046a8:	00800084 	movi	r2,2
  4046ac:	11fea30e 	bge	r2,r7,40413c <_dtoa_r+0xb28>
  4046b0:	d8800917 	ldw	r2,36(sp)
  4046b4:	103f8c1e 	bne	r2,zero,4044e8 <_dtoa_r+0xed4>
  4046b8:	a00b883a 	mov	r5,r20
  4046bc:	8009883a 	mov	r4,r16
  4046c0:	01800144 	movi	r6,5
  4046c4:	000f883a 	mov	r7,zero
  4046c8:	04069bc0 	call	4069bc <__multadd>
  4046cc:	e009883a 	mov	r4,fp
  4046d0:	100b883a 	mov	r5,r2
  4046d4:	1029883a 	mov	r20,r2
  4046d8:	04072380 	call	407238 <__mcmp>
  4046dc:	00bf820e 	bge	zero,r2,4044e8 <_dtoa_r+0xed4>
  4046e0:	00800c44 	movi	r2,49
  4046e4:	b8800005 	stb	r2,0(r23)
  4046e8:	d8800617 	ldw	r2,24(sp)
  4046ec:	bd800044 	addi	r22,r23,1
  4046f0:	10800044 	addi	r2,r2,1
  4046f4:	d8800615 	stw	r2,24(sp)
  4046f8:	003f7f06 	br	4044f8 <_dtoa_r+0xee4>
  4046fc:	dc000417 	ldw	r16,16(sp)
  404700:	003d6506 	br	403c98 <_dtoa_r+0x684>
  404704:	9009883a 	mov	r4,r18
  404708:	0409d680 	call	409d68 <__floatsidf>
  40470c:	1009883a 	mov	r4,r2
  404710:	180b883a 	mov	r5,r3
  404714:	980d883a 	mov	r6,r19
  404718:	a00f883a 	mov	r7,r20
  40471c:	04096f40 	call	4096f4 <__muldf3>
  404720:	1009883a 	mov	r4,r2
  404724:	180b883a 	mov	r5,r3
  404728:	000d883a 	mov	r6,zero
  40472c:	01d00734 	movhi	r7,16412
  404730:	04096400 	call	409640 <__adddf3>
  404734:	057f3034 	movhi	r21,64704
  404738:	1025883a 	mov	r18,r2
  40473c:	1d6b883a 	add	r21,r3,r21
  404740:	9809883a 	mov	r4,r19
  404744:	a00b883a 	mov	r5,r20
  404748:	000d883a 	mov	r6,zero
  40474c:	01d00534 	movhi	r7,16404
  404750:	04096940 	call	409694 <__subdf3>
  404754:	1009883a 	mov	r4,r2
  404758:	180b883a 	mov	r5,r3
  40475c:	900d883a 	mov	r6,r18
  404760:	a80f883a 	mov	r7,r21
  404764:	1027883a 	mov	r19,r2
  404768:	1829883a 	mov	r20,r3
  40476c:	0409c440 	call	409c44 <__gtdf2>
  404770:	00806616 	blt	zero,r2,40490c <_dtoa_r+0x12f8>
  404774:	a9e0003c 	xorhi	r7,r21,32768
  404778:	9809883a 	mov	r4,r19
  40477c:	a00b883a 	mov	r5,r20
  404780:	900d883a 	mov	r6,r18
  404784:	0409d0c0 	call	409d0c <__ltdf2>
  404788:	103d710e 	bge	r2,zero,403d50 <_dtoa_r+0x73c>
  40478c:	0029883a 	mov	r20,zero
  404790:	002b883a 	mov	r21,zero
  404794:	003f5406 	br	4044e8 <_dtoa_r+0xed4>
  404798:	d9800a17 	ldw	r6,40(sp)
  40479c:	e00b883a 	mov	r5,fp
  4047a0:	8009883a 	mov	r4,r16
  4047a4:	0406fb00 	call	406fb0 <__pow5mult>
  4047a8:	1039883a 	mov	fp,r2
  4047ac:	003e2e06 	br	404068 <_dtoa_r+0xa54>
  4047b0:	d8000c15 	stw	zero,48(sp)
  4047b4:	003f2006 	br	404438 <_dtoa_r+0xe24>
  4047b8:	00800044 	movi	r2,1
  4047bc:	d8800c15 	stw	r2,48(sp)
  4047c0:	003c5d06 	br	403938 <_dtoa_r+0x324>
  4047c4:	d8c00a17 	ldw	r3,40(sp)
  4047c8:	d9000b17 	ldw	r4,44(sp)
  4047cc:	dcc00a15 	stw	r19,40(sp)
  4047d0:	98c5c83a 	sub	r2,r19,r3
  4047d4:	2089883a 	add	r4,r4,r2
  4047d8:	d9000b15 	stw	r4,44(sp)
  4047dc:	0027883a 	mov	r19,zero
  4047e0:	003df206 	br	403fac <_dtoa_r+0x998>
  4047e4:	d9000317 	ldw	r4,12(sp)
  4047e8:	8829883a 	mov	r20,r17
  4047ec:	04800084 	movi	r18,2
  4047f0:	d9001015 	stw	r4,64(sp)
  4047f4:	003c8106 	br	4039fc <_dtoa_r+0x3e8>
  4047f8:	04800044 	movi	r18,1
  4047fc:	dc800e15 	stw	r18,56(sp)
  404800:	dc800915 	stw	r18,36(sp)
  404804:	dc802115 	stw	r18,132(sp)
  404808:	003f1206 	br	404454 <_dtoa_r+0xe40>
  40480c:	d8800617 	ldw	r2,24(sp)
  404810:	00abc83a 	sub	r21,zero,r2
  404814:	a800a426 	beq	r21,zero,404aa8 <_dtoa_r+0x1494>
  404818:	a88003cc 	andi	r2,r21,15
  40481c:	100490fa 	slli	r2,r2,3
  404820:	00c010b4 	movhi	r3,66
  404824:	18e61204 	addi	r3,r3,-26552
  404828:	d9000317 	ldw	r4,12(sp)
  40482c:	1885883a 	add	r2,r3,r2
  404830:	11800017 	ldw	r6,0(r2)
  404834:	11c00117 	ldw	r7,4(r2)
  404838:	a82bd13a 	srai	r21,r21,4
  40483c:	880b883a 	mov	r5,r17
  404840:	04096f40 	call	4096f4 <__muldf3>
  404844:	1027883a 	mov	r19,r2
  404848:	1829883a 	mov	r20,r3
  40484c:	a800e826 	beq	r21,zero,404bf0 <_dtoa_r+0x15dc>
  404850:	058010b4 	movhi	r22,66
  404854:	b5a60804 	addi	r22,r22,-26592
  404858:	04800084 	movi	r18,2
  40485c:	a980004c 	andi	r6,r21,1
  404860:	1009883a 	mov	r4,r2
  404864:	a82bd07a 	srai	r21,r21,1
  404868:	180b883a 	mov	r5,r3
  40486c:	30000426 	beq	r6,zero,404880 <_dtoa_r+0x126c>
  404870:	b1800017 	ldw	r6,0(r22)
  404874:	b1c00117 	ldw	r7,4(r22)
  404878:	94800044 	addi	r18,r18,1
  40487c:	04096f40 	call	4096f4 <__muldf3>
  404880:	b5800204 	addi	r22,r22,8
  404884:	a83ff51e 	bne	r21,zero,40485c <_dtoa_r+0x1248>
  404888:	1027883a 	mov	r19,r2
  40488c:	1829883a 	mov	r20,r3
  404890:	003c7306 	br	403a60 <_dtoa_r+0x44c>
  404894:	21000044 	addi	r4,r4,1
  404898:	11000005 	stb	r4,0(r2)
  40489c:	003e5c06 	br	404210 <_dtoa_r+0xbfc>
  4048a0:	a9400117 	ldw	r5,4(r21)
  4048a4:	8009883a 	mov	r4,r16
  4048a8:	04068ec0 	call	4068ec <_Balloc>
  4048ac:	a9800417 	ldw	r6,16(r21)
  4048b0:	11000304 	addi	r4,r2,12
  4048b4:	a9400304 	addi	r5,r21,12
  4048b8:	31800084 	addi	r6,r6,2
  4048bc:	318d883a 	add	r6,r6,r6
  4048c0:	318d883a 	add	r6,r6,r6
  4048c4:	1023883a 	mov	r17,r2
  4048c8:	0400f1c0 	call	400f1c <memcpy>
  4048cc:	8009883a 	mov	r4,r16
  4048d0:	880b883a 	mov	r5,r17
  4048d4:	01800044 	movi	r6,1
  4048d8:	04070dc0 	call	4070dc <__lshift>
  4048dc:	1027883a 	mov	r19,r2
  4048e0:	003e8f06 	br	404320 <_dtoa_r+0xd0c>
  4048e4:	b807883a 	mov	r3,r23
  4048e8:	00800e44 	movi	r2,57
  4048ec:	ddc00717 	ldw	r23,28(sp)
  4048f0:	18809026 	beq	r3,r2,404b34 <_dtoa_r+0x1520>
  4048f4:	18c00044 	addi	r3,r3,1
  4048f8:	003f2b06 	br	4045a8 <_dtoa_r+0xf94>
  4048fc:	b807883a 	mov	r3,r23
  404900:	982b883a 	mov	r21,r19
  404904:	ddc00717 	ldw	r23,28(sp)
  404908:	003e2406 	br	40419c <_dtoa_r+0xb88>
  40490c:	0029883a 	mov	r20,zero
  404910:	002b883a 	mov	r21,zero
  404914:	003f7206 	br	4046e0 <_dtoa_r+0x10cc>
  404918:	593fffc4 	addi	r4,r11,-1
  40491c:	200490fa 	slli	r2,r4,3
  404920:	00c010b4 	movhi	r3,66
  404924:	18e61204 	addi	r3,r3,-26552
  404928:	d9001015 	stw	r4,64(sp)
  40492c:	1885883a 	add	r2,r3,r2
  404930:	11000017 	ldw	r4,0(r2)
  404934:	11400117 	ldw	r5,4(r2)
  404938:	900d883a 	mov	r6,r18
  40493c:	a80f883a 	mov	r7,r21
  404940:	dac01615 	stw	r11,88(sp)
  404944:	04096f40 	call	4096f4 <__muldf3>
  404948:	a00b883a 	mov	r5,r20
  40494c:	9809883a 	mov	r4,r19
  404950:	d8c01215 	stw	r3,72(sp)
  404954:	d8801115 	stw	r2,68(sp)
  404958:	0409e3c0 	call	409e3c <__fixdfsi>
  40495c:	1009883a 	mov	r4,r2
  404960:	1025883a 	mov	r18,r2
  404964:	0409d680 	call	409d68 <__floatsidf>
  404968:	9809883a 	mov	r4,r19
  40496c:	a00b883a 	mov	r5,r20
  404970:	100d883a 	mov	r6,r2
  404974:	180f883a 	mov	r7,r3
  404978:	94800c04 	addi	r18,r18,48
  40497c:	04096940 	call	409694 <__subdf3>
  404980:	bc800005 	stb	r18,0(r23)
  404984:	dac01617 	ldw	r11,88(sp)
  404988:	102b883a 	mov	r21,r2
  40498c:	00800044 	movi	r2,1
  404990:	bd800044 	addi	r22,r23,1
  404994:	1815883a 	mov	r10,r3
  404998:	58802226 	beq	r11,r2,404a24 <_dtoa_r+0x1410>
  40499c:	bad7883a 	add	r11,r23,r11
  4049a0:	dc001415 	stw	r16,80(sp)
  4049a4:	a805883a 	mov	r2,r21
  4049a8:	b027883a 	mov	r19,r22
  4049ac:	5821883a 	mov	r16,r11
  4049b0:	882b883a 	mov	r21,r17
  4049b4:	000d883a 	mov	r6,zero
  4049b8:	01d00934 	movhi	r7,16420
  4049bc:	1009883a 	mov	r4,r2
  4049c0:	180b883a 	mov	r5,r3
  4049c4:	04096f40 	call	4096f4 <__muldf3>
  4049c8:	180b883a 	mov	r5,r3
  4049cc:	1009883a 	mov	r4,r2
  4049d0:	1829883a 	mov	r20,r3
  4049d4:	1023883a 	mov	r17,r2
  4049d8:	0409e3c0 	call	409e3c <__fixdfsi>
  4049dc:	1009883a 	mov	r4,r2
  4049e0:	1025883a 	mov	r18,r2
  4049e4:	0409d680 	call	409d68 <__floatsidf>
  4049e8:	8809883a 	mov	r4,r17
  4049ec:	a00b883a 	mov	r5,r20
  4049f0:	100d883a 	mov	r6,r2
  4049f4:	180f883a 	mov	r7,r3
  4049f8:	94800c04 	addi	r18,r18,48
  4049fc:	04096940 	call	409694 <__subdf3>
  404a00:	9cc00044 	addi	r19,r19,1
  404a04:	9cbfffc5 	stb	r18,-1(r19)
  404a08:	9c3fea1e 	bne	r19,r16,4049b4 <_dtoa_r+0x13a0>
  404a0c:	1815883a 	mov	r10,r3
  404a10:	d8c01017 	ldw	r3,64(sp)
  404a14:	dc001417 	ldw	r16,80(sp)
  404a18:	a823883a 	mov	r17,r21
  404a1c:	b0ed883a 	add	r22,r22,r3
  404a20:	102b883a 	mov	r21,r2
  404a24:	d9001117 	ldw	r4,68(sp)
  404a28:	d9401217 	ldw	r5,72(sp)
  404a2c:	000d883a 	mov	r6,zero
  404a30:	01cff834 	movhi	r7,16352
  404a34:	da801515 	stw	r10,84(sp)
  404a38:	04096400 	call	409640 <__adddf3>
  404a3c:	da801517 	ldw	r10,84(sp)
  404a40:	1009883a 	mov	r4,r2
  404a44:	180b883a 	mov	r5,r3
  404a48:	500f883a 	mov	r7,r10
  404a4c:	a80d883a 	mov	r6,r21
  404a50:	0409d0c0 	call	409d0c <__ltdf2>
  404a54:	da801517 	ldw	r10,84(sp)
  404a58:	10003b0e 	bge	r2,zero,404b48 <_dtoa_r+0x1534>
  404a5c:	d9c01317 	ldw	r7,76(sp)
  404a60:	b53fffc3 	ldbu	r20,-1(r22)
  404a64:	d9c00615 	stw	r7,24(sp)
  404a68:	003d3106 	br	403f30 <_dtoa_r+0x91c>
  404a6c:	d8800817 	ldw	r2,32(sp)
  404a70:	11e5c83a 	sub	r18,r2,r7
  404a74:	0005883a 	mov	r2,zero
  404a78:	003d5006 	br	403fbc <_dtoa_r+0x9a8>
  404a7c:	05800044 	movi	r22,1
  404a80:	003dc406 	br	404194 <_dtoa_r+0xb80>
  404a84:	a5000044 	addi	r20,r20,1
  404a88:	15000005 	stb	r20,0(r2)
  404a8c:	003c8206 	br	403c98 <_dtoa_r+0x684>
  404a90:	d8800217 	ldw	r2,8(sp)
  404a94:	00c00d84 	movi	r3,54
  404a98:	dcc00a17 	ldw	r19,40(sp)
  404a9c:	1885c83a 	sub	r2,r3,r2
  404aa0:	dc800817 	ldw	r18,32(sp)
  404aa4:	003d4506 	br	403fbc <_dtoa_r+0x9a8>
  404aa8:	dcc00317 	ldw	r19,12(sp)
  404aac:	8829883a 	mov	r20,r17
  404ab0:	04800084 	movi	r18,2
  404ab4:	003bea06 	br	403a60 <_dtoa_r+0x44c>
  404ab8:	d9000917 	ldw	r4,36(sp)
  404abc:	203f1126 	beq	r4,zero,404704 <_dtoa_r+0x10f0>
  404ac0:	d9c00e17 	ldw	r7,56(sp)
  404ac4:	01fca20e 	bge	zero,r7,403d50 <_dtoa_r+0x73c>
  404ac8:	a00b883a 	mov	r5,r20
  404acc:	9809883a 	mov	r4,r19
  404ad0:	000d883a 	mov	r6,zero
  404ad4:	01d00934 	movhi	r7,16420
  404ad8:	04096f40 	call	4096f4 <__muldf3>
  404adc:	91000044 	addi	r4,r18,1
  404ae0:	1027883a 	mov	r19,r2
  404ae4:	1829883a 	mov	r20,r3
  404ae8:	0409d680 	call	409d68 <__floatsidf>
  404aec:	9809883a 	mov	r4,r19
  404af0:	a00b883a 	mov	r5,r20
  404af4:	100d883a 	mov	r6,r2
  404af8:	180f883a 	mov	r7,r3
  404afc:	04096f40 	call	4096f4 <__muldf3>
  404b00:	1009883a 	mov	r4,r2
  404b04:	180b883a 	mov	r5,r3
  404b08:	000d883a 	mov	r6,zero
  404b0c:	01d00734 	movhi	r7,16412
  404b10:	04096400 	call	409640 <__adddf3>
  404b14:	1025883a 	mov	r18,r2
  404b18:	d8800617 	ldw	r2,24(sp)
  404b1c:	057f3034 	movhi	r21,64704
  404b20:	1d6b883a 	add	r21,r3,r21
  404b24:	10bfffc4 	addi	r2,r2,-1
  404b28:	d8801315 	stw	r2,76(sp)
  404b2c:	dac00e17 	ldw	r11,56(sp)
  404b30:	003be706 	br	403ad0 <_dtoa_r+0x4bc>
  404b34:	01000e44 	movi	r4,57
  404b38:	91000005 	stb	r4,0(r18)
  404b3c:	95800044 	addi	r22,r18,1
  404b40:	982b883a 	mov	r21,r19
  404b44:	003da106 	br	4041cc <_dtoa_r+0xbb8>
  404b48:	d9801117 	ldw	r6,68(sp)
  404b4c:	d9c01217 	ldw	r7,72(sp)
  404b50:	0009883a 	mov	r4,zero
  404b54:	014ff834 	movhi	r5,16352
  404b58:	da801515 	stw	r10,84(sp)
  404b5c:	04096940 	call	409694 <__subdf3>
  404b60:	da801517 	ldw	r10,84(sp)
  404b64:	1009883a 	mov	r4,r2
  404b68:	180b883a 	mov	r5,r3
  404b6c:	a80d883a 	mov	r6,r21
  404b70:	500f883a 	mov	r7,r10
  404b74:	0409c440 	call	409c44 <__gtdf2>
  404b78:	00bc750e 	bge	zero,r2,403d50 <_dtoa_r+0x73c>
  404b7c:	01000c04 	movi	r4,48
  404b80:	00000106 	br	404b88 <_dtoa_r+0x1574>
  404b84:	102d883a 	mov	r22,r2
  404b88:	b0bfffc4 	addi	r2,r22,-1
  404b8c:	10c00007 	ldb	r3,0(r2)
  404b90:	193ffc26 	beq	r3,r4,404b84 <_dtoa_r+0x1570>
  404b94:	d8801317 	ldw	r2,76(sp)
  404b98:	d8800615 	stw	r2,24(sp)
  404b9c:	003c3e06 	br	403c98 <_dtoa_r+0x684>
  404ba0:	d9001317 	ldw	r4,76(sp)
  404ba4:	df001117 	ldw	fp,68(sp)
  404ba8:	d9000615 	stw	r4,24(sp)
  404bac:	003ce006 	br	403f30 <_dtoa_r+0x91c>
  404bb0:	df001117 	ldw	fp,68(sp)
  404bb4:	dc401217 	ldw	r17,72(sp)
  404bb8:	003c6506 	br	403d50 <_dtoa_r+0x73c>
  404bbc:	103e7a1e 	bne	r2,zero,4045a8 <_dtoa_r+0xf94>
  404bc0:	1880004c 	andi	r2,r3,1
  404bc4:	103e7826 	beq	r2,zero,4045a8 <_dtoa_r+0xf94>
  404bc8:	003e7406 	br	40459c <_dtoa_r+0xf88>
  404bcc:	8009883a 	mov	r4,r16
  404bd0:	a80b883a 	mov	r5,r21
  404bd4:	01800284 	movi	r6,10
  404bd8:	000f883a 	mov	r7,zero
  404bdc:	04069bc0 	call	4069bc <__multadd>
  404be0:	d9000e17 	ldw	r4,56(sp)
  404be4:	102b883a 	mov	r21,r2
  404be8:	d9000915 	stw	r4,36(sp)
  404bec:	003d5106 	br	404134 <_dtoa_r+0xb20>
  404bf0:	04800084 	movi	r18,2
  404bf4:	003b9a06 	br	403a60 <_dtoa_r+0x44c>
  404bf8:	d8c01317 	ldw	r3,76(sp)
  404bfc:	d8c00615 	stw	r3,24(sp)
  404c00:	003ccb06 	br	403f30 <_dtoa_r+0x91c>
  404c04:	d8c01317 	ldw	r3,76(sp)
  404c08:	d8c00615 	stw	r3,24(sp)
  404c0c:	003c2206 	br	403c98 <_dtoa_r+0x684>
  404c10:	20fd3826 	beq	r4,r3,4040f4 <_dtoa_r+0xae0>
  404c14:	00c00f04 	movi	r3,60
  404c18:	1885c83a 	sub	r2,r3,r2
  404c1c:	003da906 	br	4042c4 <_dtoa_r+0xcb0>
  404c20:	000b883a 	mov	r5,zero
  404c24:	003b5406 	br	403978 <_dtoa_r+0x364>
  404c28:	04c00044 	movi	r19,1
  404c2c:	003b3b06 	br	40391c <_dtoa_r+0x308>

00404c30 <_fflush_r>:
  404c30:	defffb04 	addi	sp,sp,-20
  404c34:	dcc00315 	stw	r19,12(sp)
  404c38:	dc400115 	stw	r17,4(sp)
  404c3c:	dfc00415 	stw	ra,16(sp)
  404c40:	dc800215 	stw	r18,8(sp)
  404c44:	dc000015 	stw	r16,0(sp)
  404c48:	2027883a 	mov	r19,r4
  404c4c:	2823883a 	mov	r17,r5
  404c50:	20000226 	beq	r4,zero,404c5c <_fflush_r+0x2c>
  404c54:	20800e17 	ldw	r2,56(r4)
  404c58:	10005726 	beq	r2,zero,404db8 <_fflush_r+0x188>
  404c5c:	8880030b 	ldhu	r2,12(r17)
  404c60:	10c0020c 	andi	r3,r2,8
  404c64:	18ffffcc 	andi	r3,r3,65535
  404c68:	18e0001c 	xori	r3,r3,32768
  404c6c:	18e00004 	addi	r3,r3,-32768
  404c70:	1800311e 	bne	r3,zero,404d38 <_fflush_r+0x108>
  404c74:	89000117 	ldw	r4,4(r17)
  404c78:	10c20014 	ori	r3,r2,2048
  404c7c:	88c0030d 	sth	r3,12(r17)
  404c80:	180b883a 	mov	r5,r3
  404c84:	0100520e 	bge	zero,r4,404dd0 <_fflush_r+0x1a0>
  404c88:	88c00a17 	ldw	r3,40(r17)
  404c8c:	18002226 	beq	r3,zero,404d18 <_fflush_r+0xe8>
  404c90:	1084000c 	andi	r2,r2,4096
  404c94:	10bfffcc 	andi	r2,r2,65535
  404c98:	10a0001c 	xori	r2,r2,32768
  404c9c:	10a00004 	addi	r2,r2,-32768
  404ca0:	10004e26 	beq	r2,zero,404ddc <_fflush_r+0x1ac>
  404ca4:	8c001417 	ldw	r16,80(r17)
  404ca8:	2940010c 	andi	r5,r5,4
  404cac:	297fffcc 	andi	r5,r5,65535
  404cb0:	2960001c 	xori	r5,r5,32768
  404cb4:	29600004 	addi	r5,r5,-32768
  404cb8:	28000626 	beq	r5,zero,404cd4 <_fflush_r+0xa4>
  404cbc:	89000117 	ldw	r4,4(r17)
  404cc0:	88800c17 	ldw	r2,48(r17)
  404cc4:	8121c83a 	sub	r16,r16,r4
  404cc8:	10000226 	beq	r2,zero,404cd4 <_fflush_r+0xa4>
  404ccc:	88800f17 	ldw	r2,60(r17)
  404cd0:	80a1c83a 	sub	r16,r16,r2
  404cd4:	89400717 	ldw	r5,28(r17)
  404cd8:	9809883a 	mov	r4,r19
  404cdc:	800d883a 	mov	r6,r16
  404ce0:	000f883a 	mov	r7,zero
  404ce4:	183ee83a 	callr	r3
  404ce8:	8080281e 	bne	r16,r2,404d8c <_fflush_r+0x15c>
  404cec:	8880030b 	ldhu	r2,12(r17)
  404cf0:	88c00417 	ldw	r3,16(r17)
  404cf4:	88000115 	stw	zero,4(r17)
  404cf8:	113dffcc 	andi	r4,r2,63487
  404cfc:	1084000c 	andi	r2,r2,4096
  404d00:	10bfffcc 	andi	r2,r2,65535
  404d04:	10a0001c 	xori	r2,r2,32768
  404d08:	8900030d 	sth	r4,12(r17)
  404d0c:	88c00015 	stw	r3,0(r17)
  404d10:	10a00004 	addi	r2,r2,-32768
  404d14:	10002c1e 	bne	r2,zero,404dc8 <_fflush_r+0x198>
  404d18:	0005883a 	mov	r2,zero
  404d1c:	dfc00417 	ldw	ra,16(sp)
  404d20:	dcc00317 	ldw	r19,12(sp)
  404d24:	dc800217 	ldw	r18,8(sp)
  404d28:	dc400117 	ldw	r17,4(sp)
  404d2c:	dc000017 	ldw	r16,0(sp)
  404d30:	dec00504 	addi	sp,sp,20
  404d34:	f800283a 	ret
  404d38:	8c800417 	ldw	r18,16(r17)
  404d3c:	903ff626 	beq	r18,zero,404d18 <_fflush_r+0xe8>
  404d40:	8c000017 	ldw	r16,0(r17)
  404d44:	108000cc 	andi	r2,r2,3
  404d48:	8c800015 	stw	r18,0(r17)
  404d4c:	84a1c83a 	sub	r16,r16,r18
  404d50:	10001b1e 	bne	r2,zero,404dc0 <_fflush_r+0x190>
  404d54:	88800517 	ldw	r2,20(r17)
  404d58:	88800215 	stw	r2,8(r17)
  404d5c:	04000316 	blt	zero,r16,404d6c <_fflush_r+0x13c>
  404d60:	003fed06 	br	404d18 <_fflush_r+0xe8>
  404d64:	90a5883a 	add	r18,r18,r2
  404d68:	043feb0e 	bge	zero,r16,404d18 <_fflush_r+0xe8>
  404d6c:	88800917 	ldw	r2,36(r17)
  404d70:	89400717 	ldw	r5,28(r17)
  404d74:	800f883a 	mov	r7,r16
  404d78:	900d883a 	mov	r6,r18
  404d7c:	9809883a 	mov	r4,r19
  404d80:	103ee83a 	callr	r2
  404d84:	80a1c83a 	sub	r16,r16,r2
  404d88:	00bff616 	blt	zero,r2,404d64 <_fflush_r+0x134>
  404d8c:	88c0030b 	ldhu	r3,12(r17)
  404d90:	00bfffc4 	movi	r2,-1
  404d94:	18c01014 	ori	r3,r3,64
  404d98:	88c0030d 	sth	r3,12(r17)
  404d9c:	dfc00417 	ldw	ra,16(sp)
  404da0:	dcc00317 	ldw	r19,12(sp)
  404da4:	dc800217 	ldw	r18,8(sp)
  404da8:	dc400117 	ldw	r17,4(sp)
  404dac:	dc000017 	ldw	r16,0(sp)
  404db0:	dec00504 	addi	sp,sp,20
  404db4:	f800283a 	ret
  404db8:	0404eec0 	call	404eec <__sinit>
  404dbc:	003fa706 	br	404c5c <_fflush_r+0x2c>
  404dc0:	0005883a 	mov	r2,zero
  404dc4:	003fe406 	br	404d58 <_fflush_r+0x128>
  404dc8:	8c001415 	stw	r16,80(r17)
  404dcc:	003fd206 	br	404d18 <_fflush_r+0xe8>
  404dd0:	88c00f17 	ldw	r3,60(r17)
  404dd4:	00ffac16 	blt	zero,r3,404c88 <_fflush_r+0x58>
  404dd8:	003fcf06 	br	404d18 <_fflush_r+0xe8>
  404ddc:	89400717 	ldw	r5,28(r17)
  404de0:	9809883a 	mov	r4,r19
  404de4:	000d883a 	mov	r6,zero
  404de8:	01c00044 	movi	r7,1
  404dec:	183ee83a 	callr	r3
  404df0:	1021883a 	mov	r16,r2
  404df4:	00bfffc4 	movi	r2,-1
  404df8:	80800326 	beq	r16,r2,404e08 <_fflush_r+0x1d8>
  404dfc:	8940030b 	ldhu	r5,12(r17)
  404e00:	88c00a17 	ldw	r3,40(r17)
  404e04:	003fa806 	br	404ca8 <_fflush_r+0x78>
  404e08:	98c00017 	ldw	r3,0(r19)
  404e0c:	00800744 	movi	r2,29
  404e10:	18bfde1e 	bne	r3,r2,404d8c <_fflush_r+0x15c>
  404e14:	003fc006 	br	404d18 <_fflush_r+0xe8>

00404e18 <fflush>:
  404e18:	200b883a 	mov	r5,r4
  404e1c:	20000426 	beq	r4,zero,404e30 <fflush+0x18>
  404e20:	008010b4 	movhi	r2,66
  404e24:	10ae0604 	addi	r2,r2,-18408
  404e28:	11000017 	ldw	r4,0(r2)
  404e2c:	0404c301 	jmpi	404c30 <_fflush_r>
  404e30:	008010b4 	movhi	r2,66
  404e34:	10ae0504 	addi	r2,r2,-18412
  404e38:	11000017 	ldw	r4,0(r2)
  404e3c:	01401034 	movhi	r5,64
  404e40:	29530c04 	addi	r5,r5,19504
  404e44:	0405acc1 	jmpi	405acc <_fwalk_reent>

00404e48 <__fp_lock>:
  404e48:	0005883a 	mov	r2,zero
  404e4c:	f800283a 	ret

00404e50 <__fp_unlock>:
  404e50:	0005883a 	mov	r2,zero
  404e54:	f800283a 	ret

00404e58 <_cleanup_r>:
  404e58:	01401074 	movhi	r5,65
  404e5c:	29612f04 	addi	r5,r5,-31556
  404e60:	0405a241 	jmpi	405a24 <_fwalk>

00404e64 <__sfmoreglue>:
  404e64:	defffc04 	addi	sp,sp,-16
  404e68:	dc800215 	stw	r18,8(sp)
  404e6c:	2825883a 	mov	r18,r5
  404e70:	dc000015 	stw	r16,0(sp)
  404e74:	01401704 	movi	r5,92
  404e78:	2021883a 	mov	r16,r4
  404e7c:	9009883a 	mov	r4,r18
  404e80:	dfc00315 	stw	ra,12(sp)
  404e84:	dc400115 	stw	r17,4(sp)
  404e88:	0400e700 	call	400e70 <__mulsi3>
  404e8c:	8009883a 	mov	r4,r16
  404e90:	11400304 	addi	r5,r2,12
  404e94:	1023883a 	mov	r17,r2
  404e98:	0405e080 	call	405e08 <_malloc_r>
  404e9c:	1021883a 	mov	r16,r2
  404ea0:	10000726 	beq	r2,zero,404ec0 <__sfmoreglue+0x5c>
  404ea4:	11000304 	addi	r4,r2,12
  404ea8:	10000015 	stw	zero,0(r2)
  404eac:	14800115 	stw	r18,4(r2)
  404eb0:	11000215 	stw	r4,8(r2)
  404eb4:	000b883a 	mov	r5,zero
  404eb8:	880d883a 	mov	r6,r17
  404ebc:	04068100 	call	406810 <memset>
  404ec0:	8005883a 	mov	r2,r16
  404ec4:	dfc00317 	ldw	ra,12(sp)
  404ec8:	dc800217 	ldw	r18,8(sp)
  404ecc:	dc400117 	ldw	r17,4(sp)
  404ed0:	dc000017 	ldw	r16,0(sp)
  404ed4:	dec00404 	addi	sp,sp,16
  404ed8:	f800283a 	ret

00404edc <_cleanup>:
  404edc:	008010b4 	movhi	r2,66
  404ee0:	10ae0504 	addi	r2,r2,-18412
  404ee4:	11000017 	ldw	r4,0(r2)
  404ee8:	0404e581 	jmpi	404e58 <_cleanup_r>

00404eec <__sinit>:
  404eec:	20800e17 	ldw	r2,56(r4)
  404ef0:	1000401e 	bne	r2,zero,404ff4 <__sinit+0x108>
  404ef4:	21400117 	ldw	r5,4(r4)
  404ef8:	01801034 	movhi	r6,64
  404efc:	31939604 	addi	r6,r6,20056
  404f00:	20c00217 	ldw	r3,8(r4)
  404f04:	21800f15 	stw	r6,60(r4)
  404f08:	2080bb04 	addi	r2,r4,748
  404f0c:	02400044 	movi	r9,1
  404f10:	018000c4 	movi	r6,3
  404f14:	2180b915 	stw	r6,740(r4)
  404f18:	2080ba15 	stw	r2,744(r4)
  404f1c:	22400e15 	stw	r9,56(r4)
  404f20:	20800317 	ldw	r2,12(r4)
  404f24:	2000b815 	stw	zero,736(r4)
  404f28:	02001074 	movhi	r8,65
  404f2c:	42200004 	addi	r8,r8,-32768
  404f30:	01c01074 	movhi	r7,65
  404f34:	39e01504 	addi	r7,r7,-32684
  404f38:	01801074 	movhi	r6,65
  404f3c:	31a03704 	addi	r6,r6,-32548
  404f40:	01001074 	movhi	r4,65
  404f44:	21204e04 	addi	r4,r4,-32456
  404f48:	02800104 	movi	r10,4
  404f4c:	28000015 	stw	zero,0(r5)
  404f50:	28000115 	stw	zero,4(r5)
  404f54:	28000215 	stw	zero,8(r5)
  404f58:	2a80030d 	sth	r10,12(r5)
  404f5c:	2800038d 	sth	zero,14(r5)
  404f60:	28000415 	stw	zero,16(r5)
  404f64:	28000515 	stw	zero,20(r5)
  404f68:	28000615 	stw	zero,24(r5)
  404f6c:	29400715 	stw	r5,28(r5)
  404f70:	2a000815 	stw	r8,32(r5)
  404f74:	29c00915 	stw	r7,36(r5)
  404f78:	29800a15 	stw	r6,40(r5)
  404f7c:	29000b15 	stw	r4,44(r5)
  404f80:	01400284 	movi	r5,10
  404f84:	18000015 	stw	zero,0(r3)
  404f88:	18000115 	stw	zero,4(r3)
  404f8c:	18000215 	stw	zero,8(r3)
  404f90:	1940030d 	sth	r5,12(r3)
  404f94:	1a40038d 	sth	r9,14(r3)
  404f98:	18000415 	stw	zero,16(r3)
  404f9c:	18000515 	stw	zero,20(r3)
  404fa0:	18000615 	stw	zero,24(r3)
  404fa4:	18c00715 	stw	r3,28(r3)
  404fa8:	1a000815 	stw	r8,32(r3)
  404fac:	19c00915 	stw	r7,36(r3)
  404fb0:	19800a15 	stw	r6,40(r3)
  404fb4:	19000b15 	stw	r4,44(r3)
  404fb8:	00c00484 	movi	r3,18
  404fbc:	10c0030d 	sth	r3,12(r2)
  404fc0:	00c00084 	movi	r3,2
  404fc4:	10000015 	stw	zero,0(r2)
  404fc8:	10000115 	stw	zero,4(r2)
  404fcc:	10000215 	stw	zero,8(r2)
  404fd0:	10c0038d 	sth	r3,14(r2)
  404fd4:	10000415 	stw	zero,16(r2)
  404fd8:	10000515 	stw	zero,20(r2)
  404fdc:	10000615 	stw	zero,24(r2)
  404fe0:	10800715 	stw	r2,28(r2)
  404fe4:	12000815 	stw	r8,32(r2)
  404fe8:	11c00915 	stw	r7,36(r2)
  404fec:	11800a15 	stw	r6,40(r2)
  404ff0:	11000b15 	stw	r4,44(r2)
  404ff4:	f800283a 	ret

00404ff8 <__sfp>:
  404ff8:	defffc04 	addi	sp,sp,-16
  404ffc:	008010b4 	movhi	r2,66
  405000:	10ae0504 	addi	r2,r2,-18412
  405004:	dc400115 	stw	r17,4(sp)
  405008:	14400017 	ldw	r17,0(r2)
  40500c:	dc800215 	stw	r18,8(sp)
  405010:	dfc00315 	stw	ra,12(sp)
  405014:	88800e17 	ldw	r2,56(r17)
  405018:	dc000015 	stw	r16,0(sp)
  40501c:	2025883a 	mov	r18,r4
  405020:	10002826 	beq	r2,zero,4050c4 <__sfp+0xcc>
  405024:	8c40b804 	addi	r17,r17,736
  405028:	043fffc4 	movi	r16,-1
  40502c:	89400117 	ldw	r5,4(r17)
  405030:	88800217 	ldw	r2,8(r17)
  405034:	297fffc4 	addi	r5,r5,-1
  405038:	28000a16 	blt	r5,zero,405064 <__sfp+0x6c>
  40503c:	10c0030f 	ldh	r3,12(r2)
  405040:	18000c26 	beq	r3,zero,405074 <__sfp+0x7c>
  405044:	10c01a04 	addi	r3,r2,104
  405048:	00000206 	br	405054 <__sfp+0x5c>
  40504c:	19bfe90f 	ldh	r6,-92(r3)
  405050:	30000826 	beq	r6,zero,405074 <__sfp+0x7c>
  405054:	297fffc4 	addi	r5,r5,-1
  405058:	18bffd04 	addi	r2,r3,-12
  40505c:	18c01704 	addi	r3,r3,92
  405060:	2c3ffa1e 	bne	r5,r16,40504c <__sfp+0x54>
  405064:	88800017 	ldw	r2,0(r17)
  405068:	10001926 	beq	r2,zero,4050d0 <__sfp+0xd8>
  40506c:	1023883a 	mov	r17,r2
  405070:	003fee06 	br	40502c <__sfp+0x34>
  405074:	00ffffc4 	movi	r3,-1
  405078:	10c0038d 	sth	r3,14(r2)
  40507c:	00c00044 	movi	r3,1
  405080:	10c0030d 	sth	r3,12(r2)
  405084:	10000015 	stw	zero,0(r2)
  405088:	10000215 	stw	zero,8(r2)
  40508c:	10000115 	stw	zero,4(r2)
  405090:	10000415 	stw	zero,16(r2)
  405094:	10000515 	stw	zero,20(r2)
  405098:	10000615 	stw	zero,24(r2)
  40509c:	10000c15 	stw	zero,48(r2)
  4050a0:	10000d15 	stw	zero,52(r2)
  4050a4:	10001115 	stw	zero,68(r2)
  4050a8:	10001215 	stw	zero,72(r2)
  4050ac:	dfc00317 	ldw	ra,12(sp)
  4050b0:	dc800217 	ldw	r18,8(sp)
  4050b4:	dc400117 	ldw	r17,4(sp)
  4050b8:	dc000017 	ldw	r16,0(sp)
  4050bc:	dec00404 	addi	sp,sp,16
  4050c0:	f800283a 	ret
  4050c4:	8809883a 	mov	r4,r17
  4050c8:	0404eec0 	call	404eec <__sinit>
  4050cc:	003fd506 	br	405024 <__sfp+0x2c>
  4050d0:	9009883a 	mov	r4,r18
  4050d4:	01400104 	movi	r5,4
  4050d8:	0404e640 	call	404e64 <__sfmoreglue>
  4050dc:	88800015 	stw	r2,0(r17)
  4050e0:	103fe21e 	bne	r2,zero,40506c <__sfp+0x74>
  4050e4:	00800304 	movi	r2,12
  4050e8:	90800015 	stw	r2,0(r18)
  4050ec:	0005883a 	mov	r2,zero
  4050f0:	003fee06 	br	4050ac <__sfp+0xb4>

004050f4 <__sfp_lock_acquire>:
  4050f4:	f800283a 	ret

004050f8 <__sfp_lock_release>:
  4050f8:	f800283a 	ret

004050fc <__sinit_lock_acquire>:
  4050fc:	f800283a 	ret

00405100 <__sinit_lock_release>:
  405100:	f800283a 	ret

00405104 <__fp_lock_all>:
  405104:	008010b4 	movhi	r2,66
  405108:	10ae0604 	addi	r2,r2,-18408
  40510c:	11000017 	ldw	r4,0(r2)
  405110:	01401034 	movhi	r5,64
  405114:	29539204 	addi	r5,r5,20040
  405118:	0405a241 	jmpi	405a24 <_fwalk>

0040511c <__fp_unlock_all>:
  40511c:	008010b4 	movhi	r2,66
  405120:	10ae0604 	addi	r2,r2,-18408
  405124:	11000017 	ldw	r4,0(r2)
  405128:	01401034 	movhi	r5,64
  40512c:	29539404 	addi	r5,r5,20048
  405130:	0405a241 	jmpi	405a24 <_fwalk>

00405134 <_malloc_trim_r>:
  405134:	defffb04 	addi	sp,sp,-20
  405138:	dcc00315 	stw	r19,12(sp)
  40513c:	dc800215 	stw	r18,8(sp)
  405140:	dc400115 	stw	r17,4(sp)
  405144:	dc000015 	stw	r16,0(sp)
  405148:	2827883a 	mov	r19,r5
  40514c:	dfc00415 	stw	ra,16(sp)
  405150:	044010b4 	movhi	r17,66
  405154:	8c67fd04 	addi	r17,r17,-24588
  405158:	2021883a 	mov	r16,r4
  40515c:	040b9080 	call	40b908 <__malloc_lock>
  405160:	88800217 	ldw	r2,8(r17)
  405164:	14800117 	ldw	r18,4(r2)
  405168:	00bfff04 	movi	r2,-4
  40516c:	90a4703a 	and	r18,r18,r2
  405170:	9083fbc4 	addi	r2,r18,4079
  405174:	14e7c83a 	sub	r19,r2,r19
  405178:	9826d33a 	srli	r19,r19,12
  40517c:	0083ffc4 	movi	r2,4095
  405180:	9cffffc4 	addi	r19,r19,-1
  405184:	9826933a 	slli	r19,r19,12
  405188:	14c0060e 	bge	r2,r19,4051a4 <_malloc_trim_r+0x70>
  40518c:	8009883a 	mov	r4,r16
  405190:	000b883a 	mov	r5,zero
  405194:	0407f9c0 	call	407f9c <_sbrk_r>
  405198:	88c00217 	ldw	r3,8(r17)
  40519c:	1c87883a 	add	r3,r3,r18
  4051a0:	10c00a26 	beq	r2,r3,4051cc <_malloc_trim_r+0x98>
  4051a4:	8009883a 	mov	r4,r16
  4051a8:	040ba740 	call	40ba74 <__malloc_unlock>
  4051ac:	0005883a 	mov	r2,zero
  4051b0:	dfc00417 	ldw	ra,16(sp)
  4051b4:	dcc00317 	ldw	r19,12(sp)
  4051b8:	dc800217 	ldw	r18,8(sp)
  4051bc:	dc400117 	ldw	r17,4(sp)
  4051c0:	dc000017 	ldw	r16,0(sp)
  4051c4:	dec00504 	addi	sp,sp,20
  4051c8:	f800283a 	ret
  4051cc:	8009883a 	mov	r4,r16
  4051d0:	04cbc83a 	sub	r5,zero,r19
  4051d4:	0407f9c0 	call	407f9c <_sbrk_r>
  4051d8:	00ffffc4 	movi	r3,-1
  4051dc:	10c01326 	beq	r2,r3,40522c <_malloc_trim_r+0xf8>
  4051e0:	008010b4 	movhi	r2,66
  4051e4:	10b5a704 	addi	r2,r2,-10596
  4051e8:	11000017 	ldw	r4,0(r2)
  4051ec:	88c00217 	ldw	r3,8(r17)
  4051f0:	94e5c83a 	sub	r18,r18,r19
  4051f4:	94800054 	ori	r18,r18,1
  4051f8:	24e7c83a 	sub	r19,r4,r19
  4051fc:	1c800115 	stw	r18,4(r3)
  405200:	8009883a 	mov	r4,r16
  405204:	14c00015 	stw	r19,0(r2)
  405208:	040ba740 	call	40ba74 <__malloc_unlock>
  40520c:	00800044 	movi	r2,1
  405210:	dfc00417 	ldw	ra,16(sp)
  405214:	dcc00317 	ldw	r19,12(sp)
  405218:	dc800217 	ldw	r18,8(sp)
  40521c:	dc400117 	ldw	r17,4(sp)
  405220:	dc000017 	ldw	r16,0(sp)
  405224:	dec00504 	addi	sp,sp,20
  405228:	f800283a 	ret
  40522c:	8009883a 	mov	r4,r16
  405230:	000b883a 	mov	r5,zero
  405234:	0407f9c0 	call	407f9c <_sbrk_r>
  405238:	88c00217 	ldw	r3,8(r17)
  40523c:	014003c4 	movi	r5,15
  405240:	10c9c83a 	sub	r4,r2,r3
  405244:	293fd70e 	bge	r5,r4,4051a4 <_malloc_trim_r+0x70>
  405248:	014010b4 	movhi	r5,66
  40524c:	296e0804 	addi	r5,r5,-18400
  405250:	29400017 	ldw	r5,0(r5)
  405254:	21000054 	ori	r4,r4,1
  405258:	19000115 	stw	r4,4(r3)
  40525c:	1145c83a 	sub	r2,r2,r5
  405260:	014010b4 	movhi	r5,66
  405264:	2975a704 	addi	r5,r5,-10596
  405268:	28800015 	stw	r2,0(r5)
  40526c:	003fcd06 	br	4051a4 <_malloc_trim_r+0x70>

00405270 <_free_r>:
  405270:	defffd04 	addi	sp,sp,-12
  405274:	dc400115 	stw	r17,4(sp)
  405278:	dc000015 	stw	r16,0(sp)
  40527c:	dfc00215 	stw	ra,8(sp)
  405280:	2821883a 	mov	r16,r5
  405284:	2023883a 	mov	r17,r4
  405288:	28004b26 	beq	r5,zero,4053b8 <_free_r+0x148>
  40528c:	040b9080 	call	40b908 <__malloc_lock>
  405290:	823fff17 	ldw	r8,-4(r16)
  405294:	00bfff84 	movi	r2,-2
  405298:	81bffe04 	addi	r6,r16,-8
  40529c:	4084703a 	and	r2,r8,r2
  4052a0:	3087883a 	add	r3,r6,r2
  4052a4:	014010b4 	movhi	r5,66
  4052a8:	2967fd04 	addi	r5,r5,-24588
  4052ac:	1a400117 	ldw	r9,4(r3)
  4052b0:	29000217 	ldw	r4,8(r5)
  4052b4:	01ffff04 	movi	r7,-4
  4052b8:	49ce703a 	and	r7,r9,r7
  4052bc:	20c06526 	beq	r4,r3,405454 <_free_r+0x1e4>
  4052c0:	19c00115 	stw	r7,4(r3)
  4052c4:	4200004c 	andi	r8,r8,1
  4052c8:	40003026 	beq	r8,zero,40538c <_free_r+0x11c>
  4052cc:	0009883a 	mov	r4,zero
  4052d0:	19d1883a 	add	r8,r3,r7
  4052d4:	42000117 	ldw	r8,4(r8)
  4052d8:	4200004c 	andi	r8,r8,1
  4052dc:	4000061e 	bne	r8,zero,4052f8 <_free_r+0x88>
  4052e0:	11c5883a 	add	r2,r2,r7
  4052e4:	19c00217 	ldw	r7,8(r3)
  4052e8:	20004e26 	beq	r4,zero,405424 <_free_r+0x1b4>
  4052ec:	18c00317 	ldw	r3,12(r3)
  4052f0:	38c00315 	stw	r3,12(r7)
  4052f4:	19c00215 	stw	r7,8(r3)
  4052f8:	11c00054 	ori	r7,r2,1
  4052fc:	3087883a 	add	r3,r6,r2
  405300:	31c00115 	stw	r7,4(r6)
  405304:	18800015 	stw	r2,0(r3)
  405308:	20001a1e 	bne	r4,zero,405374 <_free_r+0x104>
  40530c:	00c07fc4 	movi	r3,511
  405310:	18802e2e 	bgeu	r3,r2,4053cc <_free_r+0x15c>
  405314:	1006d27a 	srli	r3,r2,9
  405318:	01000104 	movi	r4,4
  40531c:	20c06636 	bltu	r4,r3,4054b8 <_free_r+0x248>
  405320:	1008d1ba 	srli	r4,r2,6
  405324:	21000e04 	addi	r4,r4,56
  405328:	210f883a 	add	r7,r4,r4
  40532c:	39cf883a 	add	r7,r7,r7
  405330:	39cf883a 	add	r7,r7,r7
  405334:	29cf883a 	add	r7,r5,r7
  405338:	38c00217 	ldw	r3,8(r7)
  40533c:	014010b4 	movhi	r5,66
  405340:	2967fd04 	addi	r5,r5,-24588
  405344:	19c06126 	beq	r3,r7,4054cc <_free_r+0x25c>
  405348:	013fff04 	movi	r4,-4
  40534c:	19400117 	ldw	r5,4(r3)
  405350:	290a703a 	and	r5,r5,r4
  405354:	1140022e 	bgeu	r2,r5,405360 <_free_r+0xf0>
  405358:	18c00217 	ldw	r3,8(r3)
  40535c:	38fffb1e 	bne	r7,r3,40534c <_free_r+0xdc>
  405360:	18800317 	ldw	r2,12(r3)
  405364:	30800315 	stw	r2,12(r6)
  405368:	30c00215 	stw	r3,8(r6)
  40536c:	11800215 	stw	r6,8(r2)
  405370:	19800315 	stw	r6,12(r3)
  405374:	8809883a 	mov	r4,r17
  405378:	dfc00217 	ldw	ra,8(sp)
  40537c:	dc400117 	ldw	r17,4(sp)
  405380:	dc000017 	ldw	r16,0(sp)
  405384:	dec00304 	addi	sp,sp,12
  405388:	040ba741 	jmpi	40ba74 <__malloc_unlock>
  40538c:	813ffe17 	ldw	r4,-8(r16)
  405390:	2a400204 	addi	r9,r5,8
  405394:	310dc83a 	sub	r6,r6,r4
  405398:	32000217 	ldw	r8,8(r6)
  40539c:	1105883a 	add	r2,r2,r4
  4053a0:	42404326 	beq	r8,r9,4054b0 <_free_r+0x240>
  4053a4:	32400317 	ldw	r9,12(r6)
  4053a8:	0009883a 	mov	r4,zero
  4053ac:	42400315 	stw	r9,12(r8)
  4053b0:	4a000215 	stw	r8,8(r9)
  4053b4:	003fc606 	br	4052d0 <_free_r+0x60>
  4053b8:	dfc00217 	ldw	ra,8(sp)
  4053bc:	dc400117 	ldw	r17,4(sp)
  4053c0:	dc000017 	ldw	r16,0(sp)
  4053c4:	dec00304 	addi	sp,sp,12
  4053c8:	f800283a 	ret
  4053cc:	1004d0fa 	srli	r2,r2,3
  4053d0:	02000044 	movi	r8,1
  4053d4:	29c00117 	ldw	r7,4(r5)
  4053d8:	1087883a 	add	r3,r2,r2
  4053dc:	18c7883a 	add	r3,r3,r3
  4053e0:	1005d0ba 	srai	r2,r2,2
  4053e4:	18c7883a 	add	r3,r3,r3
  4053e8:	28c7883a 	add	r3,r5,r3
  4053ec:	19000217 	ldw	r4,8(r3)
  4053f0:	4084983a 	sll	r2,r8,r2
  4053f4:	30c00315 	stw	r3,12(r6)
  4053f8:	31000215 	stw	r4,8(r6)
  4053fc:	11c4b03a 	or	r2,r2,r7
  405400:	21800315 	stw	r6,12(r4)
  405404:	8809883a 	mov	r4,r17
  405408:	28800115 	stw	r2,4(r5)
  40540c:	19800215 	stw	r6,8(r3)
  405410:	dfc00217 	ldw	ra,8(sp)
  405414:	dc400117 	ldw	r17,4(sp)
  405418:	dc000017 	ldw	r16,0(sp)
  40541c:	dec00304 	addi	sp,sp,12
  405420:	040ba741 	jmpi	40ba74 <__malloc_unlock>
  405424:	020010b4 	movhi	r8,66
  405428:	4227ff04 	addi	r8,r8,-24580
  40542c:	3a3faf1e 	bne	r7,r8,4052ec <_free_r+0x7c>
  405430:	29800515 	stw	r6,20(r5)
  405434:	29800415 	stw	r6,16(r5)
  405438:	11000054 	ori	r4,r2,1
  40543c:	3087883a 	add	r3,r6,r2
  405440:	31c00315 	stw	r7,12(r6)
  405444:	31c00215 	stw	r7,8(r6)
  405448:	31000115 	stw	r4,4(r6)
  40544c:	18800015 	stw	r2,0(r3)
  405450:	003fc806 	br	405374 <_free_r+0x104>
  405454:	4200004c 	andi	r8,r8,1
  405458:	3885883a 	add	r2,r7,r2
  40545c:	4000071e 	bne	r8,zero,40547c <_free_r+0x20c>
  405460:	81fffe17 	ldw	r7,-8(r16)
  405464:	31cdc83a 	sub	r6,r6,r7
  405468:	30c00317 	ldw	r3,12(r6)
  40546c:	31000217 	ldw	r4,8(r6)
  405470:	11c5883a 	add	r2,r2,r7
  405474:	20c00315 	stw	r3,12(r4)
  405478:	19000215 	stw	r4,8(r3)
  40547c:	00c010b4 	movhi	r3,66
  405480:	18ee0904 	addi	r3,r3,-18396
  405484:	18c00017 	ldw	r3,0(r3)
  405488:	11000054 	ori	r4,r2,1
  40548c:	31000115 	stw	r4,4(r6)
  405490:	29800215 	stw	r6,8(r5)
  405494:	10ffb736 	bltu	r2,r3,405374 <_free_r+0x104>
  405498:	008010b4 	movhi	r2,66
  40549c:	10b58404 	addi	r2,r2,-10736
  4054a0:	11400017 	ldw	r5,0(r2)
  4054a4:	8809883a 	mov	r4,r17
  4054a8:	04051340 	call	405134 <_malloc_trim_r>
  4054ac:	003fb106 	br	405374 <_free_r+0x104>
  4054b0:	01000044 	movi	r4,1
  4054b4:	003f8606 	br	4052d0 <_free_r+0x60>
  4054b8:	01000504 	movi	r4,20
  4054bc:	20c00b36 	bltu	r4,r3,4054ec <_free_r+0x27c>
  4054c0:	190016c4 	addi	r4,r3,91
  4054c4:	210f883a 	add	r7,r4,r4
  4054c8:	003f9806 	br	40532c <_free_r+0xbc>
  4054cc:	2009d0ba 	srai	r4,r4,2
  4054d0:	00800044 	movi	r2,1
  4054d4:	29c00117 	ldw	r7,4(r5)
  4054d8:	1108983a 	sll	r4,r2,r4
  4054dc:	1805883a 	mov	r2,r3
  4054e0:	21c8b03a 	or	r4,r4,r7
  4054e4:	29000115 	stw	r4,4(r5)
  4054e8:	003f9e06 	br	405364 <_free_r+0xf4>
  4054ec:	01001504 	movi	r4,84
  4054f0:	20c00436 	bltu	r4,r3,405504 <_free_r+0x294>
  4054f4:	1008d33a 	srli	r4,r2,12
  4054f8:	21001b84 	addi	r4,r4,110
  4054fc:	210f883a 	add	r7,r4,r4
  405500:	003f8a06 	br	40532c <_free_r+0xbc>
  405504:	01005504 	movi	r4,340
  405508:	20c00436 	bltu	r4,r3,40551c <_free_r+0x2ac>
  40550c:	1008d3fa 	srli	r4,r2,15
  405510:	21001dc4 	addi	r4,r4,119
  405514:	210f883a 	add	r7,r4,r4
  405518:	003f8406 	br	40532c <_free_r+0xbc>
  40551c:	01015504 	movi	r4,1364
  405520:	20c00436 	bltu	r4,r3,405534 <_free_r+0x2c4>
  405524:	1008d4ba 	srli	r4,r2,18
  405528:	21001f04 	addi	r4,r4,124
  40552c:	210f883a 	add	r7,r4,r4
  405530:	003f7e06 	br	40532c <_free_r+0xbc>
  405534:	01c03f04 	movi	r7,252
  405538:	01001f84 	movi	r4,126
  40553c:	003f7b06 	br	40532c <_free_r+0xbc>

00405540 <__sfvwrite_r>:
  405540:	30800217 	ldw	r2,8(r6)
  405544:	defff504 	addi	sp,sp,-44
  405548:	dd400615 	stw	r21,24(sp)
  40554c:	dd000515 	stw	r20,20(sp)
  405550:	dc000115 	stw	r16,4(sp)
  405554:	dfc00a15 	stw	ra,40(sp)
  405558:	df000915 	stw	fp,36(sp)
  40555c:	ddc00815 	stw	r23,32(sp)
  405560:	dd800715 	stw	r22,28(sp)
  405564:	dcc00415 	stw	r19,16(sp)
  405568:	dc800315 	stw	r18,12(sp)
  40556c:	dc400215 	stw	r17,8(sp)
  405570:	3029883a 	mov	r20,r6
  405574:	202b883a 	mov	r21,r4
  405578:	2821883a 	mov	r16,r5
  40557c:	10002126 	beq	r2,zero,405604 <__sfvwrite_r+0xc4>
  405580:	2880030b 	ldhu	r2,12(r5)
  405584:	10c0020c 	andi	r3,r2,8
  405588:	18ffffcc 	andi	r3,r3,65535
  40558c:	18e0001c 	xori	r3,r3,32768
  405590:	18e00004 	addi	r3,r3,-32768
  405594:	18002826 	beq	r3,zero,405638 <__sfvwrite_r+0xf8>
  405598:	28c00417 	ldw	r3,16(r5)
  40559c:	18002626 	beq	r3,zero,405638 <__sfvwrite_r+0xf8>
  4055a0:	10c0008c 	andi	r3,r2,2
  4055a4:	18ffffcc 	andi	r3,r3,65535
  4055a8:	18e0001c 	xori	r3,r3,32768
  4055ac:	18e00004 	addi	r3,r3,-32768
  4055b0:	a4400017 	ldw	r17,0(r20)
  4055b4:	18002b26 	beq	r3,zero,405664 <__sfvwrite_r+0x124>
  4055b8:	0027883a 	mov	r19,zero
  4055bc:	0025883a 	mov	r18,zero
  4055c0:	05810004 	movi	r22,1024
  4055c4:	980d883a 	mov	r6,r19
  4055c8:	a809883a 	mov	r4,r21
  4055cc:	90004f26 	beq	r18,zero,40570c <__sfvwrite_r+0x1cc>
  4055d0:	900f883a 	mov	r7,r18
  4055d4:	81400717 	ldw	r5,28(r16)
  4055d8:	b480012e 	bgeu	r22,r18,4055e0 <__sfvwrite_r+0xa0>
  4055dc:	01c10004 	movi	r7,1024
  4055e0:	80800917 	ldw	r2,36(r16)
  4055e4:	103ee83a 	callr	r2
  4055e8:	0080540e 	bge	zero,r2,40573c <__sfvwrite_r+0x1fc>
  4055ec:	a0c00217 	ldw	r3,8(r20)
  4055f0:	98a7883a 	add	r19,r19,r2
  4055f4:	90a5c83a 	sub	r18,r18,r2
  4055f8:	1885c83a 	sub	r2,r3,r2
  4055fc:	a0800215 	stw	r2,8(r20)
  405600:	103ff01e 	bne	r2,zero,4055c4 <__sfvwrite_r+0x84>
  405604:	0005883a 	mov	r2,zero
  405608:	dfc00a17 	ldw	ra,40(sp)
  40560c:	df000917 	ldw	fp,36(sp)
  405610:	ddc00817 	ldw	r23,32(sp)
  405614:	dd800717 	ldw	r22,28(sp)
  405618:	dd400617 	ldw	r21,24(sp)
  40561c:	dd000517 	ldw	r20,20(sp)
  405620:	dcc00417 	ldw	r19,16(sp)
  405624:	dc800317 	ldw	r18,12(sp)
  405628:	dc400217 	ldw	r17,8(sp)
  40562c:	dc000117 	ldw	r16,4(sp)
  405630:	dec00b04 	addi	sp,sp,44
  405634:	f800283a 	ret
  405638:	a809883a 	mov	r4,r21
  40563c:	800b883a 	mov	r5,r16
  405640:	04030c40 	call	4030c4 <__swsetup_r>
  405644:	1000f01e 	bne	r2,zero,405a08 <__sfvwrite_r+0x4c8>
  405648:	8080030b 	ldhu	r2,12(r16)
  40564c:	a4400017 	ldw	r17,0(r20)
  405650:	10c0008c 	andi	r3,r2,2
  405654:	18ffffcc 	andi	r3,r3,65535
  405658:	18e0001c 	xori	r3,r3,32768
  40565c:	18e00004 	addi	r3,r3,-32768
  405660:	183fd51e 	bne	r3,zero,4055b8 <__sfvwrite_r+0x78>
  405664:	10c0004c 	andi	r3,r2,1
  405668:	002d883a 	mov	r22,zero
  40566c:	1800381e 	bne	r3,zero,405750 <__sfvwrite_r+0x210>
  405670:	0025883a 	mov	r18,zero
  405674:	90002126 	beq	r18,zero,4056fc <__sfvwrite_r+0x1bc>
  405678:	10c0800c 	andi	r3,r2,512
  40567c:	18ffffcc 	andi	r3,r3,65535
  405680:	18e0001c 	xori	r3,r3,32768
  405684:	18e00004 	addi	r3,r3,-32768
  405688:	84c00217 	ldw	r19,8(r16)
  40568c:	18006b26 	beq	r3,zero,40583c <__sfvwrite_r+0x2fc>
  405690:	980f883a 	mov	r7,r19
  405694:	94c08636 	bltu	r18,r19,4058b0 <__sfvwrite_r+0x370>
  405698:	10c1200c 	andi	r3,r2,1152
  40569c:	18009f1e 	bne	r3,zero,40591c <__sfvwrite_r+0x3dc>
  4056a0:	81000017 	ldw	r4,0(r16)
  4056a4:	982f883a 	mov	r23,r19
  4056a8:	9039883a 	mov	fp,r18
  4056ac:	9027883a 	mov	r19,r18
  4056b0:	380d883a 	mov	r6,r7
  4056b4:	b00b883a 	mov	r5,r22
  4056b8:	d9c00015 	stw	r7,0(sp)
  4056bc:	04066840 	call	406684 <memmove>
  4056c0:	d9c00017 	ldw	r7,0(sp)
  4056c4:	81000217 	ldw	r4,8(r16)
  4056c8:	80800017 	ldw	r2,0(r16)
  4056cc:	25efc83a 	sub	r23,r4,r23
  4056d0:	11cf883a 	add	r7,r2,r7
  4056d4:	85c00215 	stw	r23,8(r16)
  4056d8:	81c00015 	stw	r7,0(r16)
  4056dc:	a0800217 	ldw	r2,8(r20)
  4056e0:	b72d883a 	add	r22,r22,fp
  4056e4:	9725c83a 	sub	r18,r18,fp
  4056e8:	14e7c83a 	sub	r19,r2,r19
  4056ec:	a4c00215 	stw	r19,8(r20)
  4056f0:	983fc426 	beq	r19,zero,405604 <__sfvwrite_r+0xc4>
  4056f4:	8080030b 	ldhu	r2,12(r16)
  4056f8:	903fdf1e 	bne	r18,zero,405678 <__sfvwrite_r+0x138>
  4056fc:	8d800017 	ldw	r22,0(r17)
  405700:	8c800117 	ldw	r18,4(r17)
  405704:	8c400204 	addi	r17,r17,8
  405708:	003fda06 	br	405674 <__sfvwrite_r+0x134>
  40570c:	8cc00017 	ldw	r19,0(r17)
  405710:	8c800117 	ldw	r18,4(r17)
  405714:	8c400204 	addi	r17,r17,8
  405718:	003faa06 	br	4055c4 <__sfvwrite_r+0x84>
  40571c:	040793c0 	call	40793c <_realloc_r>
  405720:	102f883a 	mov	r23,r2
  405724:	10009f1e 	bne	r2,zero,4059a4 <__sfvwrite_r+0x464>
  405728:	81400417 	ldw	r5,16(r16)
  40572c:	a809883a 	mov	r4,r21
  405730:	04052700 	call	405270 <_free_r>
  405734:	00800304 	movi	r2,12
  405738:	a8800015 	stw	r2,0(r21)
  40573c:	80c0030b 	ldhu	r3,12(r16)
  405740:	00bfffc4 	movi	r2,-1
  405744:	18c01014 	ori	r3,r3,64
  405748:	80c0030d 	sth	r3,12(r16)
  40574c:	003fae06 	br	405608 <__sfvwrite_r+0xc8>
  405750:	0007883a 	mov	r3,zero
  405754:	0039883a 	mov	fp,zero
  405758:	0025883a 	mov	r18,zero
  40575c:	90001e26 	beq	r18,zero,4057d8 <__sfvwrite_r+0x298>
  405760:	18006526 	beq	r3,zero,4058f8 <__sfvwrite_r+0x3b8>
  405764:	b02f883a 	mov	r23,r22
  405768:	9580012e 	bgeu	r18,r22,405770 <__sfvwrite_r+0x230>
  40576c:	902f883a 	mov	r23,r18
  405770:	81000017 	ldw	r4,0(r16)
  405774:	80800417 	ldw	r2,16(r16)
  405778:	84c00217 	ldw	r19,8(r16)
  40577c:	81c00517 	ldw	r7,20(r16)
  405780:	1100022e 	bgeu	r2,r4,40578c <__sfvwrite_r+0x24c>
  405784:	99e7883a 	add	r19,r19,r7
  405788:	9dc01816 	blt	r19,r23,4057ec <__sfvwrite_r+0x2ac>
  40578c:	b9c03b16 	blt	r23,r7,40587c <__sfvwrite_r+0x33c>
  405790:	80800917 	ldw	r2,36(r16)
  405794:	81400717 	ldw	r5,28(r16)
  405798:	a809883a 	mov	r4,r21
  40579c:	d8c00015 	stw	r3,0(sp)
  4057a0:	e00d883a 	mov	r6,fp
  4057a4:	103ee83a 	callr	r2
  4057a8:	1027883a 	mov	r19,r2
  4057ac:	d8c00017 	ldw	r3,0(sp)
  4057b0:	00bfe20e 	bge	zero,r2,40573c <__sfvwrite_r+0x1fc>
  4057b4:	b4edc83a 	sub	r22,r22,r19
  4057b8:	b0001a26 	beq	r22,zero,405824 <__sfvwrite_r+0x2e4>
  4057bc:	a0800217 	ldw	r2,8(r20)
  4057c0:	e4f9883a 	add	fp,fp,r19
  4057c4:	94e5c83a 	sub	r18,r18,r19
  4057c8:	14e7c83a 	sub	r19,r2,r19
  4057cc:	a4c00215 	stw	r19,8(r20)
  4057d0:	983f8c26 	beq	r19,zero,405604 <__sfvwrite_r+0xc4>
  4057d4:	903fe21e 	bne	r18,zero,405760 <__sfvwrite_r+0x220>
  4057d8:	8f000017 	ldw	fp,0(r17)
  4057dc:	8c800117 	ldw	r18,4(r17)
  4057e0:	0007883a 	mov	r3,zero
  4057e4:	8c400204 	addi	r17,r17,8
  4057e8:	003fdc06 	br	40575c <__sfvwrite_r+0x21c>
  4057ec:	e00b883a 	mov	r5,fp
  4057f0:	980d883a 	mov	r6,r19
  4057f4:	d8c00015 	stw	r3,0(sp)
  4057f8:	04066840 	call	406684 <memmove>
  4057fc:	80800017 	ldw	r2,0(r16)
  405800:	a809883a 	mov	r4,r21
  405804:	800b883a 	mov	r5,r16
  405808:	14c5883a 	add	r2,r2,r19
  40580c:	80800015 	stw	r2,0(r16)
  405810:	0404c300 	call	404c30 <_fflush_r>
  405814:	d8c00017 	ldw	r3,0(sp)
  405818:	103fc81e 	bne	r2,zero,40573c <__sfvwrite_r+0x1fc>
  40581c:	b4edc83a 	sub	r22,r22,r19
  405820:	b03fe61e 	bne	r22,zero,4057bc <__sfvwrite_r+0x27c>
  405824:	a809883a 	mov	r4,r21
  405828:	800b883a 	mov	r5,r16
  40582c:	0404c300 	call	404c30 <_fflush_r>
  405830:	103fc21e 	bne	r2,zero,40573c <__sfvwrite_r+0x1fc>
  405834:	0007883a 	mov	r3,zero
  405838:	003fe006 	br	4057bc <__sfvwrite_r+0x27c>
  40583c:	81000017 	ldw	r4,0(r16)
  405840:	80800417 	ldw	r2,16(r16)
  405844:	1100022e 	bgeu	r2,r4,405850 <__sfvwrite_r+0x310>
  405848:	9839883a 	mov	fp,r19
  40584c:	9c806036 	bltu	r19,r18,4059d0 <__sfvwrite_r+0x490>
  405850:	81c00517 	ldw	r7,20(r16)
  405854:	91c01c36 	bltu	r18,r7,4058c8 <__sfvwrite_r+0x388>
  405858:	80800917 	ldw	r2,36(r16)
  40585c:	81400717 	ldw	r5,28(r16)
  405860:	a809883a 	mov	r4,r21
  405864:	b00d883a 	mov	r6,r22
  405868:	103ee83a 	callr	r2
  40586c:	1027883a 	mov	r19,r2
  405870:	00bfb20e 	bge	zero,r2,40573c <__sfvwrite_r+0x1fc>
  405874:	1039883a 	mov	fp,r2
  405878:	003f9806 	br	4056dc <__sfvwrite_r+0x19c>
  40587c:	b80d883a 	mov	r6,r23
  405880:	e00b883a 	mov	r5,fp
  405884:	d8c00015 	stw	r3,0(sp)
  405888:	04066840 	call	406684 <memmove>
  40588c:	80800217 	ldw	r2,8(r16)
  405890:	81000017 	ldw	r4,0(r16)
  405894:	b827883a 	mov	r19,r23
  405898:	15c5c83a 	sub	r2,r2,r23
  40589c:	25ef883a 	add	r23,r4,r23
  4058a0:	80800215 	stw	r2,8(r16)
  4058a4:	85c00015 	stw	r23,0(r16)
  4058a8:	d8c00017 	ldw	r3,0(sp)
  4058ac:	003fc106 	br	4057b4 <__sfvwrite_r+0x274>
  4058b0:	81000017 	ldw	r4,0(r16)
  4058b4:	902f883a 	mov	r23,r18
  4058b8:	9039883a 	mov	fp,r18
  4058bc:	9027883a 	mov	r19,r18
  4058c0:	900f883a 	mov	r7,r18
  4058c4:	003f7a06 	br	4056b0 <__sfvwrite_r+0x170>
  4058c8:	b00b883a 	mov	r5,r22
  4058cc:	900d883a 	mov	r6,r18
  4058d0:	04066840 	call	406684 <memmove>
  4058d4:	80c00217 	ldw	r3,8(r16)
  4058d8:	80800017 	ldw	r2,0(r16)
  4058dc:	9027883a 	mov	r19,r18
  4058e0:	1c87c83a 	sub	r3,r3,r18
  4058e4:	1485883a 	add	r2,r2,r18
  4058e8:	80c00215 	stw	r3,8(r16)
  4058ec:	80800015 	stw	r2,0(r16)
  4058f0:	9039883a 	mov	fp,r18
  4058f4:	003f7906 	br	4056dc <__sfvwrite_r+0x19c>
  4058f8:	e009883a 	mov	r4,fp
  4058fc:	01400284 	movi	r5,10
  405900:	900d883a 	mov	r6,r18
  405904:	040658c0 	call	40658c <memchr>
  405908:	10003c26 	beq	r2,zero,4059fc <__sfvwrite_r+0x4bc>
  40590c:	15800044 	addi	r22,r2,1
  405910:	b72dc83a 	sub	r22,r22,fp
  405914:	00c00044 	movi	r3,1
  405918:	003f9206 	br	405764 <__sfvwrite_r+0x224>
  40591c:	81000517 	ldw	r4,20(r16)
  405920:	81400417 	ldw	r5,16(r16)
  405924:	80c00017 	ldw	r3,0(r16)
  405928:	210d883a 	add	r6,r4,r4
  40592c:	3109883a 	add	r4,r6,r4
  405930:	2026d7fa 	srli	r19,r4,31
  405934:	1979c83a 	sub	fp,r3,r5
  405938:	e1800044 	addi	r6,fp,1
  40593c:	9909883a 	add	r4,r19,r4
  405940:	2027d07a 	srai	r19,r4,1
  405944:	3489883a 	add	r4,r6,r18
  405948:	980d883a 	mov	r6,r19
  40594c:	9900022e 	bgeu	r19,r4,405958 <__sfvwrite_r+0x418>
  405950:	2027883a 	mov	r19,r4
  405954:	200d883a 	mov	r6,r4
  405958:	1081000c 	andi	r2,r2,1024
  40595c:	10bfffcc 	andi	r2,r2,65535
  405960:	10a0001c 	xori	r2,r2,32768
  405964:	10a00004 	addi	r2,r2,-32768
  405968:	a809883a 	mov	r4,r21
  40596c:	103f6b26 	beq	r2,zero,40571c <__sfvwrite_r+0x1dc>
  405970:	300b883a 	mov	r5,r6
  405974:	0405e080 	call	405e08 <_malloc_r>
  405978:	102f883a 	mov	r23,r2
  40597c:	103f6d26 	beq	r2,zero,405734 <__sfvwrite_r+0x1f4>
  405980:	81400417 	ldw	r5,16(r16)
  405984:	1009883a 	mov	r4,r2
  405988:	e00d883a 	mov	r6,fp
  40598c:	0400f1c0 	call	400f1c <memcpy>
  405990:	8080030b 	ldhu	r2,12(r16)
  405994:	00fedfc4 	movi	r3,-1153
  405998:	10c4703a 	and	r2,r2,r3
  40599c:	10802014 	ori	r2,r2,128
  4059a0:	8080030d 	sth	r2,12(r16)
  4059a4:	bf09883a 	add	r4,r23,fp
  4059a8:	9f07c83a 	sub	r3,r19,fp
  4059ac:	85c00415 	stw	r23,16(r16)
  4059b0:	84c00515 	stw	r19,20(r16)
  4059b4:	81000015 	stw	r4,0(r16)
  4059b8:	902f883a 	mov	r23,r18
  4059bc:	80c00215 	stw	r3,8(r16)
  4059c0:	9039883a 	mov	fp,r18
  4059c4:	9027883a 	mov	r19,r18
  4059c8:	900f883a 	mov	r7,r18
  4059cc:	003f3806 	br	4056b0 <__sfvwrite_r+0x170>
  4059d0:	b00b883a 	mov	r5,r22
  4059d4:	980d883a 	mov	r6,r19
  4059d8:	04066840 	call	406684 <memmove>
  4059dc:	80800017 	ldw	r2,0(r16)
  4059e0:	a809883a 	mov	r4,r21
  4059e4:	800b883a 	mov	r5,r16
  4059e8:	14c5883a 	add	r2,r2,r19
  4059ec:	80800015 	stw	r2,0(r16)
  4059f0:	0404c300 	call	404c30 <_fflush_r>
  4059f4:	103f3926 	beq	r2,zero,4056dc <__sfvwrite_r+0x19c>
  4059f8:	003f5006 	br	40573c <__sfvwrite_r+0x1fc>
  4059fc:	95800044 	addi	r22,r18,1
  405a00:	00c00044 	movi	r3,1
  405a04:	003f5706 	br	405764 <__sfvwrite_r+0x224>
  405a08:	80c0030b 	ldhu	r3,12(r16)
  405a0c:	00bfffc4 	movi	r2,-1
  405a10:	18c01014 	ori	r3,r3,64
  405a14:	80c0030d 	sth	r3,12(r16)
  405a18:	00c00244 	movi	r3,9
  405a1c:	a8c00015 	stw	r3,0(r21)
  405a20:	003ef906 	br	405608 <__sfvwrite_r+0xc8>

00405a24 <_fwalk>:
  405a24:	defff904 	addi	sp,sp,-28
  405a28:	dcc00315 	stw	r19,12(sp)
  405a2c:	24c0b804 	addi	r19,r4,736
  405a30:	dd400515 	stw	r21,20(sp)
  405a34:	dd000415 	stw	r20,16(sp)
  405a38:	dfc00615 	stw	ra,24(sp)
  405a3c:	dc800215 	stw	r18,8(sp)
  405a40:	dc400115 	stw	r17,4(sp)
  405a44:	dc000015 	stw	r16,0(sp)
  405a48:	282b883a 	mov	r21,r5
  405a4c:	0029883a 	mov	r20,zero
  405a50:	04050f40 	call	4050f4 <__sfp_lock_acquire>
  405a54:	98001226 	beq	r19,zero,405aa0 <_fwalk+0x7c>
  405a58:	04bfffc4 	movi	r18,-1
  405a5c:	9c400117 	ldw	r17,4(r19)
  405a60:	9c000217 	ldw	r16,8(r19)
  405a64:	8c7fffc4 	addi	r17,r17,-1
  405a68:	88000b16 	blt	r17,zero,405a98 <_fwalk+0x74>
  405a6c:	84000304 	addi	r16,r16,12
  405a70:	80c0000f 	ldh	r3,0(r16)
  405a74:	8c7fffc4 	addi	r17,r17,-1
  405a78:	813ffd04 	addi	r4,r16,-12
  405a7c:	18000426 	beq	r3,zero,405a90 <_fwalk+0x6c>
  405a80:	80c0008f 	ldh	r3,2(r16)
  405a84:	1c800226 	beq	r3,r18,405a90 <_fwalk+0x6c>
  405a88:	a83ee83a 	callr	r21
  405a8c:	a0a8b03a 	or	r20,r20,r2
  405a90:	84001704 	addi	r16,r16,92
  405a94:	8cbff61e 	bne	r17,r18,405a70 <_fwalk+0x4c>
  405a98:	9cc00017 	ldw	r19,0(r19)
  405a9c:	983fef1e 	bne	r19,zero,405a5c <_fwalk+0x38>
  405aa0:	04050f80 	call	4050f8 <__sfp_lock_release>
  405aa4:	a005883a 	mov	r2,r20
  405aa8:	dfc00617 	ldw	ra,24(sp)
  405aac:	dd400517 	ldw	r21,20(sp)
  405ab0:	dd000417 	ldw	r20,16(sp)
  405ab4:	dcc00317 	ldw	r19,12(sp)
  405ab8:	dc800217 	ldw	r18,8(sp)
  405abc:	dc400117 	ldw	r17,4(sp)
  405ac0:	dc000017 	ldw	r16,0(sp)
  405ac4:	dec00704 	addi	sp,sp,28
  405ac8:	f800283a 	ret

00405acc <_fwalk_reent>:
  405acc:	defff804 	addi	sp,sp,-32
  405ad0:	dcc00315 	stw	r19,12(sp)
  405ad4:	24c0b804 	addi	r19,r4,736
  405ad8:	dd800615 	stw	r22,24(sp)
  405adc:	dd400515 	stw	r21,20(sp)
  405ae0:	dd000415 	stw	r20,16(sp)
  405ae4:	dfc00715 	stw	ra,28(sp)
  405ae8:	dc800215 	stw	r18,8(sp)
  405aec:	dc400115 	stw	r17,4(sp)
  405af0:	dc000015 	stw	r16,0(sp)
  405af4:	2029883a 	mov	r20,r4
  405af8:	282b883a 	mov	r21,r5
  405afc:	002d883a 	mov	r22,zero
  405b00:	04050f40 	call	4050f4 <__sfp_lock_acquire>
  405b04:	98001326 	beq	r19,zero,405b54 <_fwalk_reent+0x88>
  405b08:	04bfffc4 	movi	r18,-1
  405b0c:	9c400117 	ldw	r17,4(r19)
  405b10:	9c000217 	ldw	r16,8(r19)
  405b14:	8c7fffc4 	addi	r17,r17,-1
  405b18:	88000c16 	blt	r17,zero,405b4c <_fwalk_reent+0x80>
  405b1c:	84000304 	addi	r16,r16,12
  405b20:	80c0000f 	ldh	r3,0(r16)
  405b24:	8c7fffc4 	addi	r17,r17,-1
  405b28:	817ffd04 	addi	r5,r16,-12
  405b2c:	18000526 	beq	r3,zero,405b44 <_fwalk_reent+0x78>
  405b30:	80c0008f 	ldh	r3,2(r16)
  405b34:	a009883a 	mov	r4,r20
  405b38:	1c800226 	beq	r3,r18,405b44 <_fwalk_reent+0x78>
  405b3c:	a83ee83a 	callr	r21
  405b40:	b0acb03a 	or	r22,r22,r2
  405b44:	84001704 	addi	r16,r16,92
  405b48:	8cbff51e 	bne	r17,r18,405b20 <_fwalk_reent+0x54>
  405b4c:	9cc00017 	ldw	r19,0(r19)
  405b50:	983fee1e 	bne	r19,zero,405b0c <_fwalk_reent+0x40>
  405b54:	04050f80 	call	4050f8 <__sfp_lock_release>
  405b58:	b005883a 	mov	r2,r22
  405b5c:	dfc00717 	ldw	ra,28(sp)
  405b60:	dd800617 	ldw	r22,24(sp)
  405b64:	dd400517 	ldw	r21,20(sp)
  405b68:	dd000417 	ldw	r20,16(sp)
  405b6c:	dcc00317 	ldw	r19,12(sp)
  405b70:	dc800217 	ldw	r18,8(sp)
  405b74:	dc400117 	ldw	r17,4(sp)
  405b78:	dc000017 	ldw	r16,0(sp)
  405b7c:	dec00804 	addi	sp,sp,32
  405b80:	f800283a 	ret

00405b84 <_setlocale_r>:
  405b84:	defffc04 	addi	sp,sp,-16
  405b88:	dc800215 	stw	r18,8(sp)
  405b8c:	dc400115 	stw	r17,4(sp)
  405b90:	dc000015 	stw	r16,0(sp)
  405b94:	dfc00315 	stw	ra,12(sp)
  405b98:	3021883a 	mov	r16,r6
  405b9c:	2023883a 	mov	r17,r4
  405ba0:	2825883a 	mov	r18,r5
  405ba4:	30001626 	beq	r6,zero,405c00 <_setlocale_r+0x7c>
  405ba8:	3009883a 	mov	r4,r6
  405bac:	014010b4 	movhi	r5,66
  405bb0:	2965cf04 	addi	r5,r5,-26820
  405bb4:	04081400 	call	408140 <strcmp>
  405bb8:	10000a1e 	bne	r2,zero,405be4 <_setlocale_r+0x60>
  405bbc:	8c800c15 	stw	r18,48(r17)
  405bc0:	8c000d15 	stw	r16,52(r17)
  405bc4:	008010b4 	movhi	r2,66
  405bc8:	10a5cf04 	addi	r2,r2,-26820
  405bcc:	dfc00317 	ldw	ra,12(sp)
  405bd0:	dc800217 	ldw	r18,8(sp)
  405bd4:	dc400117 	ldw	r17,4(sp)
  405bd8:	dc000017 	ldw	r16,0(sp)
  405bdc:	dec00404 	addi	sp,sp,16
  405be0:	f800283a 	ret
  405be4:	8009883a 	mov	r4,r16
  405be8:	014010b4 	movhi	r5,66
  405bec:	2965d904 	addi	r5,r5,-26780
  405bf0:	04081400 	call	408140 <strcmp>
  405bf4:	103ff126 	beq	r2,zero,405bbc <_setlocale_r+0x38>
  405bf8:	0005883a 	mov	r2,zero
  405bfc:	003ff306 	br	405bcc <_setlocale_r+0x48>
  405c00:	008010b4 	movhi	r2,66
  405c04:	10a5cf04 	addi	r2,r2,-26820
  405c08:	dfc00317 	ldw	ra,12(sp)
  405c0c:	dc800217 	ldw	r18,8(sp)
  405c10:	dc400117 	ldw	r17,4(sp)
  405c14:	dc000017 	ldw	r16,0(sp)
  405c18:	dec00404 	addi	sp,sp,16
  405c1c:	f800283a 	ret

00405c20 <__locale_charset>:
  405c20:	008010b4 	movhi	r2,66
  405c24:	10a5ee04 	addi	r2,r2,-26696
  405c28:	f800283a 	ret

00405c2c <_localeconv_r>:
  405c2c:	008010b4 	movhi	r2,66
  405c30:	10a5f204 	addi	r2,r2,-26680
  405c34:	f800283a 	ret

00405c38 <setlocale>:
  405c38:	00c010b4 	movhi	r3,66
  405c3c:	18ee0604 	addi	r3,r3,-18408
  405c40:	2005883a 	mov	r2,r4
  405c44:	19000017 	ldw	r4,0(r3)
  405c48:	280d883a 	mov	r6,r5
  405c4c:	100b883a 	mov	r5,r2
  405c50:	0405b841 	jmpi	405b84 <_setlocale_r>

00405c54 <localeconv>:
  405c54:	008010b4 	movhi	r2,66
  405c58:	10a5f204 	addi	r2,r2,-26680
  405c5c:	f800283a 	ret

00405c60 <__smakebuf_r>:
  405c60:	2880030b 	ldhu	r2,12(r5)
  405c64:	deffed04 	addi	sp,sp,-76
  405c68:	dc401015 	stw	r17,64(sp)
  405c6c:	10c0008c 	andi	r3,r2,2
  405c70:	18ffffcc 	andi	r3,r3,65535
  405c74:	18e0001c 	xori	r3,r3,32768
  405c78:	dc000f15 	stw	r16,60(sp)
  405c7c:	dfc01215 	stw	ra,72(sp)
  405c80:	dc801115 	stw	r18,68(sp)
  405c84:	18e00004 	addi	r3,r3,-32768
  405c88:	2821883a 	mov	r16,r5
  405c8c:	2023883a 	mov	r17,r4
  405c90:	1800381e 	bne	r3,zero,405d74 <__smakebuf_r+0x114>
  405c94:	2940038f 	ldh	r5,14(r5)
  405c98:	28002d16 	blt	r5,zero,405d50 <__smakebuf_r+0xf0>
  405c9c:	d80d883a 	mov	r6,sp
  405ca0:	04084d00 	call	4084d0 <_fstat_r>
  405ca4:	10002916 	blt	r2,zero,405d4c <__smakebuf_r+0xec>
  405ca8:	d8800117 	ldw	r2,4(sp)
  405cac:	00e00014 	movui	r3,32768
  405cb0:	10bc000c 	andi	r2,r2,61440
  405cb4:	10c03c26 	beq	r2,r3,405da8 <__smakebuf_r+0x148>
  405cb8:	80c0030b 	ldhu	r3,12(r16)
  405cbc:	18c20014 	ori	r3,r3,2048
  405cc0:	80c0030d 	sth	r3,12(r16)
  405cc4:	00c80004 	movi	r3,8192
  405cc8:	10c00c1e 	bne	r2,r3,405cfc <__smakebuf_r+0x9c>
  405ccc:	8140038f 	ldh	r5,14(r16)
  405cd0:	8809883a 	mov	r4,r17
  405cd4:	04085380 	call	408538 <_isatty_r>
  405cd8:	10000826 	beq	r2,zero,405cfc <__smakebuf_r+0x9c>
  405cdc:	80c0030b 	ldhu	r3,12(r16)
  405ce0:	808010c4 	addi	r2,r16,67
  405ce4:	80800015 	stw	r2,0(r16)
  405ce8:	18c00054 	ori	r3,r3,1
  405cec:	80800415 	stw	r2,16(r16)
  405cf0:	00800044 	movi	r2,1
  405cf4:	80c0030d 	sth	r3,12(r16)
  405cf8:	80800515 	stw	r2,20(r16)
  405cfc:	04810004 	movi	r18,1024
  405d00:	8809883a 	mov	r4,r17
  405d04:	900b883a 	mov	r5,r18
  405d08:	0405e080 	call	405e08 <_malloc_r>
  405d0c:	10003026 	beq	r2,zero,405dd0 <__smakebuf_r+0x170>
  405d10:	80c0030b 	ldhu	r3,12(r16)
  405d14:	01001034 	movhi	r4,64
  405d18:	21139604 	addi	r4,r4,20056
  405d1c:	89000f15 	stw	r4,60(r17)
  405d20:	18c02014 	ori	r3,r3,128
  405d24:	80c0030d 	sth	r3,12(r16)
  405d28:	80800015 	stw	r2,0(r16)
  405d2c:	80800415 	stw	r2,16(r16)
  405d30:	84800515 	stw	r18,20(r16)
  405d34:	dfc01217 	ldw	ra,72(sp)
  405d38:	dc801117 	ldw	r18,68(sp)
  405d3c:	dc401017 	ldw	r17,64(sp)
  405d40:	dc000f17 	ldw	r16,60(sp)
  405d44:	dec01304 	addi	sp,sp,76
  405d48:	f800283a 	ret
  405d4c:	8080030b 	ldhu	r2,12(r16)
  405d50:	10c0200c 	andi	r3,r2,128
  405d54:	18ffffcc 	andi	r3,r3,65535
  405d58:	18e0001c 	xori	r3,r3,32768
  405d5c:	18e00004 	addi	r3,r3,-32768
  405d60:	18000f1e 	bne	r3,zero,405da0 <__smakebuf_r+0x140>
  405d64:	04810004 	movi	r18,1024
  405d68:	10820014 	ori	r2,r2,2048
  405d6c:	8080030d 	sth	r2,12(r16)
  405d70:	003fe306 	br	405d00 <__smakebuf_r+0xa0>
  405d74:	288010c4 	addi	r2,r5,67
  405d78:	28800015 	stw	r2,0(r5)
  405d7c:	28800415 	stw	r2,16(r5)
  405d80:	00800044 	movi	r2,1
  405d84:	28800515 	stw	r2,20(r5)
  405d88:	dfc01217 	ldw	ra,72(sp)
  405d8c:	dc801117 	ldw	r18,68(sp)
  405d90:	dc401017 	ldw	r17,64(sp)
  405d94:	dc000f17 	ldw	r16,60(sp)
  405d98:	dec01304 	addi	sp,sp,76
  405d9c:	f800283a 	ret
  405da0:	04801004 	movi	r18,64
  405da4:	003ff006 	br	405d68 <__smakebuf_r+0x108>
  405da8:	81000a17 	ldw	r4,40(r16)
  405dac:	00c01074 	movhi	r3,65
  405db0:	18e03704 	addi	r3,r3,-32548
  405db4:	20ffc01e 	bne	r4,r3,405cb8 <__smakebuf_r+0x58>
  405db8:	8080030b 	ldhu	r2,12(r16)
  405dbc:	00c10004 	movi	r3,1024
  405dc0:	80c01315 	stw	r3,76(r16)
  405dc4:	10c4b03a 	or	r2,r2,r3
  405dc8:	8080030d 	sth	r2,12(r16)
  405dcc:	003fcb06 	br	405cfc <__smakebuf_r+0x9c>
  405dd0:	8080030b 	ldhu	r2,12(r16)
  405dd4:	10c0800c 	andi	r3,r2,512
  405dd8:	18ffffcc 	andi	r3,r3,65535
  405ddc:	18e0001c 	xori	r3,r3,32768
  405de0:	18e00004 	addi	r3,r3,-32768
  405de4:	183fd31e 	bne	r3,zero,405d34 <__smakebuf_r+0xd4>
  405de8:	10800094 	ori	r2,r2,2
  405dec:	80c010c4 	addi	r3,r16,67
  405df0:	8080030d 	sth	r2,12(r16)
  405df4:	00800044 	movi	r2,1
  405df8:	80c00015 	stw	r3,0(r16)
  405dfc:	80c00415 	stw	r3,16(r16)
  405e00:	80800515 	stw	r2,20(r16)
  405e04:	003fcb06 	br	405d34 <__smakebuf_r+0xd4>

00405e08 <_malloc_r>:
  405e08:	defff604 	addi	sp,sp,-40
  405e0c:	dc800215 	stw	r18,8(sp)
  405e10:	dfc00915 	stw	ra,36(sp)
  405e14:	df000815 	stw	fp,32(sp)
  405e18:	ddc00715 	stw	r23,28(sp)
  405e1c:	dd800615 	stw	r22,24(sp)
  405e20:	dd400515 	stw	r21,20(sp)
  405e24:	dd000415 	stw	r20,16(sp)
  405e28:	dcc00315 	stw	r19,12(sp)
  405e2c:	dc400115 	stw	r17,4(sp)
  405e30:	dc000015 	stw	r16,0(sp)
  405e34:	288002c4 	addi	r2,r5,11
  405e38:	00c00584 	movi	r3,22
  405e3c:	2025883a 	mov	r18,r4
  405e40:	18802b2e 	bgeu	r3,r2,405ef0 <_malloc_r+0xe8>
  405e44:	047ffe04 	movi	r17,-8
  405e48:	1462703a 	and	r17,r2,r17
  405e4c:	88002a16 	blt	r17,zero,405ef8 <_malloc_r+0xf0>
  405e50:	89402936 	bltu	r17,r5,405ef8 <_malloc_r+0xf0>
  405e54:	9009883a 	mov	r4,r18
  405e58:	040b9080 	call	40b908 <__malloc_lock>
  405e5c:	00807dc4 	movi	r2,503
  405e60:	14402936 	bltu	r2,r17,405f08 <_malloc_r+0x100>
  405e64:	8808d0fa 	srli	r4,r17,3
  405e68:	04c010b4 	movhi	r19,66
  405e6c:	9ce7fd04 	addi	r19,r19,-24588
  405e70:	2105883a 	add	r2,r4,r4
  405e74:	1085883a 	add	r2,r2,r2
  405e78:	1085883a 	add	r2,r2,r2
  405e7c:	9885883a 	add	r2,r19,r2
  405e80:	14000317 	ldw	r16,12(r2)
  405e84:	80815526 	beq	r16,r2,4063dc <_malloc_r+0x5d4>
  405e88:	81000117 	ldw	r4,4(r16)
  405e8c:	00bfff04 	movi	r2,-4
  405e90:	80c00317 	ldw	r3,12(r16)
  405e94:	2084703a 	and	r2,r4,r2
  405e98:	8085883a 	add	r2,r16,r2
  405e9c:	11800117 	ldw	r6,4(r2)
  405ea0:	81400217 	ldw	r5,8(r16)
  405ea4:	9009883a 	mov	r4,r18
  405ea8:	31800054 	ori	r6,r6,1
  405eac:	11800115 	stw	r6,4(r2)
  405eb0:	28c00315 	stw	r3,12(r5)
  405eb4:	19400215 	stw	r5,8(r3)
  405eb8:	040ba740 	call	40ba74 <__malloc_unlock>
  405ebc:	80800204 	addi	r2,r16,8
  405ec0:	dfc00917 	ldw	ra,36(sp)
  405ec4:	df000817 	ldw	fp,32(sp)
  405ec8:	ddc00717 	ldw	r23,28(sp)
  405ecc:	dd800617 	ldw	r22,24(sp)
  405ed0:	dd400517 	ldw	r21,20(sp)
  405ed4:	dd000417 	ldw	r20,16(sp)
  405ed8:	dcc00317 	ldw	r19,12(sp)
  405edc:	dc800217 	ldw	r18,8(sp)
  405ee0:	dc400117 	ldw	r17,4(sp)
  405ee4:	dc000017 	ldw	r16,0(sp)
  405ee8:	dec00a04 	addi	sp,sp,40
  405eec:	f800283a 	ret
  405ef0:	04400404 	movi	r17,16
  405ef4:	897fd72e 	bgeu	r17,r5,405e54 <_malloc_r+0x4c>
  405ef8:	00800304 	movi	r2,12
  405efc:	90800015 	stw	r2,0(r18)
  405f00:	0005883a 	mov	r2,zero
  405f04:	003fee06 	br	405ec0 <_malloc_r+0xb8>
  405f08:	8808d27a 	srli	r4,r17,9
  405f0c:	20007126 	beq	r4,zero,4060d4 <_malloc_r+0x2cc>
  405f10:	00800104 	movi	r2,4
  405f14:	1100eb36 	bltu	r2,r4,4062c4 <_malloc_r+0x4bc>
  405f18:	8808d1ba 	srli	r4,r17,6
  405f1c:	21000e04 	addi	r4,r4,56
  405f20:	210b883a 	add	r5,r4,r4
  405f24:	294b883a 	add	r5,r5,r5
  405f28:	294b883a 	add	r5,r5,r5
  405f2c:	04c010b4 	movhi	r19,66
  405f30:	9ce7fd04 	addi	r19,r19,-24588
  405f34:	994b883a 	add	r5,r19,r5
  405f38:	2c000317 	ldw	r16,12(r5)
  405f3c:	2c000e26 	beq	r5,r16,405f78 <_malloc_r+0x170>
  405f40:	80c00117 	ldw	r3,4(r16)
  405f44:	01ffff04 	movi	r7,-4
  405f48:	018003c4 	movi	r6,15
  405f4c:	19c6703a 	and	r3,r3,r7
  405f50:	1c45c83a 	sub	r2,r3,r17
  405f54:	30800716 	blt	r6,r2,405f74 <_malloc_r+0x16c>
  405f58:	1000610e 	bge	r2,zero,4060e0 <_malloc_r+0x2d8>
  405f5c:	84000317 	ldw	r16,12(r16)
  405f60:	2c000526 	beq	r5,r16,405f78 <_malloc_r+0x170>
  405f64:	80c00117 	ldw	r3,4(r16)
  405f68:	19c6703a 	and	r3,r3,r7
  405f6c:	1c45c83a 	sub	r2,r3,r17
  405f70:	30bff90e 	bge	r6,r2,405f58 <_malloc_r+0x150>
  405f74:	213fffc4 	addi	r4,r4,-1
  405f78:	21000044 	addi	r4,r4,1
  405f7c:	9c000417 	ldw	r16,16(r19)
  405f80:	00c010b4 	movhi	r3,66
  405f84:	18e7fd04 	addi	r3,r3,-24588
  405f88:	1a400204 	addi	r9,r3,8
  405f8c:	8240ff26 	beq	r16,r9,40638c <_malloc_r+0x584>
  405f90:	81400117 	ldw	r5,4(r16)
  405f94:	00bfff04 	movi	r2,-4
  405f98:	018003c4 	movi	r6,15
  405f9c:	2884703a 	and	r2,r5,r2
  405fa0:	144bc83a 	sub	r5,r2,r17
  405fa4:	3140ea16 	blt	r6,r5,406350 <_malloc_r+0x548>
  405fa8:	1a400515 	stw	r9,20(r3)
  405fac:	1a400415 	stw	r9,16(r3)
  405fb0:	2800570e 	bge	r5,zero,406110 <_malloc_r+0x308>
  405fb4:	01407fc4 	movi	r5,511
  405fb8:	2880ca36 	bltu	r5,r2,4062e4 <_malloc_r+0x4dc>
  405fbc:	1004d0fa 	srli	r2,r2,3
  405fc0:	02000044 	movi	r8,1
  405fc4:	19c00117 	ldw	r7,4(r3)
  405fc8:	108b883a 	add	r5,r2,r2
  405fcc:	294b883a 	add	r5,r5,r5
  405fd0:	1005d0ba 	srai	r2,r2,2
  405fd4:	294b883a 	add	r5,r5,r5
  405fd8:	28cb883a 	add	r5,r5,r3
  405fdc:	29800217 	ldw	r6,8(r5)
  405fe0:	4084983a 	sll	r2,r8,r2
  405fe4:	81400315 	stw	r5,12(r16)
  405fe8:	81800215 	stw	r6,8(r16)
  405fec:	11c4b03a 	or	r2,r2,r7
  405ff0:	18800115 	stw	r2,4(r3)
  405ff4:	2c000215 	stw	r16,8(r5)
  405ff8:	34000315 	stw	r16,12(r6)
  405ffc:	200bd0ba 	srai	r5,r4,2
  406000:	00c00044 	movi	r3,1
  406004:	194a983a 	sll	r5,r3,r5
  406008:	11404936 	bltu	r2,r5,406130 <_malloc_r+0x328>
  40600c:	1146703a 	and	r3,r2,r5
  406010:	18000a1e 	bne	r3,zero,40603c <_malloc_r+0x234>
  406014:	00ffff04 	movi	r3,-4
  406018:	294b883a 	add	r5,r5,r5
  40601c:	20c8703a 	and	r4,r4,r3
  406020:	1146703a 	and	r3,r2,r5
  406024:	21000104 	addi	r4,r4,4
  406028:	1800041e 	bne	r3,zero,40603c <_malloc_r+0x234>
  40602c:	294b883a 	add	r5,r5,r5
  406030:	1146703a 	and	r3,r2,r5
  406034:	21000104 	addi	r4,r4,4
  406038:	183ffc26 	beq	r3,zero,40602c <_malloc_r+0x224>
  40603c:	023fff04 	movi	r8,-4
  406040:	01c003c4 	movi	r7,15
  406044:	2105883a 	add	r2,r4,r4
  406048:	1085883a 	add	r2,r2,r2
  40604c:	1085883a 	add	r2,r2,r2
  406050:	9899883a 	add	r12,r19,r2
  406054:	62800304 	addi	r10,r12,12
  406058:	2017883a 	mov	r11,r4
  40605c:	54000017 	ldw	r16,0(r10)
  406060:	51bffd04 	addi	r6,r10,-12
  406064:	8180041e 	bne	r16,r6,406078 <_malloc_r+0x270>
  406068:	0000ca06 	br	406394 <_malloc_r+0x58c>
  40606c:	10001c0e 	bge	r2,zero,4060e0 <_malloc_r+0x2d8>
  406070:	84000317 	ldw	r16,12(r16)
  406074:	8180c726 	beq	r16,r6,406394 <_malloc_r+0x58c>
  406078:	80c00117 	ldw	r3,4(r16)
  40607c:	1a06703a 	and	r3,r3,r8
  406080:	1c45c83a 	sub	r2,r3,r17
  406084:	38bff90e 	bge	r7,r2,40606c <_malloc_r+0x264>
  406088:	81000317 	ldw	r4,12(r16)
  40608c:	81400217 	ldw	r5,8(r16)
  406090:	8447883a 	add	r3,r16,r17
  406094:	8c400054 	ori	r17,r17,1
  406098:	29000315 	stw	r4,12(r5)
  40609c:	21400215 	stw	r5,8(r4)
  4060a0:	84400115 	stw	r17,4(r16)
  4060a4:	1889883a 	add	r4,r3,r2
  4060a8:	11400054 	ori	r5,r2,1
  4060ac:	98c00515 	stw	r3,20(r19)
  4060b0:	98c00415 	stw	r3,16(r19)
  4060b4:	20800015 	stw	r2,0(r4)
  4060b8:	1a400315 	stw	r9,12(r3)
  4060bc:	1a400215 	stw	r9,8(r3)
  4060c0:	19400115 	stw	r5,4(r3)
  4060c4:	9009883a 	mov	r4,r18
  4060c8:	040ba740 	call	40ba74 <__malloc_unlock>
  4060cc:	80800204 	addi	r2,r16,8
  4060d0:	003f7b06 	br	405ec0 <_malloc_r+0xb8>
  4060d4:	8808d0fa 	srli	r4,r17,3
  4060d8:	210b883a 	add	r5,r4,r4
  4060dc:	003f9106 	br	405f24 <_malloc_r+0x11c>
  4060e0:	80c7883a 	add	r3,r16,r3
  4060e4:	19400117 	ldw	r5,4(r3)
  4060e8:	80800317 	ldw	r2,12(r16)
  4060ec:	81000217 	ldw	r4,8(r16)
  4060f0:	29400054 	ori	r5,r5,1
  4060f4:	19400115 	stw	r5,4(r3)
  4060f8:	20800315 	stw	r2,12(r4)
  4060fc:	11000215 	stw	r4,8(r2)
  406100:	9009883a 	mov	r4,r18
  406104:	040ba740 	call	40ba74 <__malloc_unlock>
  406108:	80800204 	addi	r2,r16,8
  40610c:	003f6c06 	br	405ec0 <_malloc_r+0xb8>
  406110:	8085883a 	add	r2,r16,r2
  406114:	10c00117 	ldw	r3,4(r2)
  406118:	9009883a 	mov	r4,r18
  40611c:	18c00054 	ori	r3,r3,1
  406120:	10c00115 	stw	r3,4(r2)
  406124:	040ba740 	call	40ba74 <__malloc_unlock>
  406128:	80800204 	addi	r2,r16,8
  40612c:	003f6406 	br	405ec0 <_malloc_r+0xb8>
  406130:	9c000217 	ldw	r16,8(r19)
  406134:	00bfff04 	movi	r2,-4
  406138:	85400117 	ldw	r21,4(r16)
  40613c:	a8aa703a 	and	r21,r21,r2
  406140:	ac400336 	bltu	r21,r17,406150 <_malloc_r+0x348>
  406144:	ac45c83a 	sub	r2,r21,r17
  406148:	00c003c4 	movi	r3,15
  40614c:	18805316 	blt	r3,r2,40629c <_malloc_r+0x494>
  406150:	d5e78117 	ldw	r23,-25084(gp)
  406154:	d0e00517 	ldw	r3,-32748(gp)
  406158:	00bfffc4 	movi	r2,-1
  40615c:	8579883a 	add	fp,r16,r21
  406160:	8def883a 	add	r23,r17,r23
  406164:	1880d226 	beq	r3,r2,4064b0 <_malloc_r+0x6a8>
  406168:	bdc403c4 	addi	r23,r23,4111
  40616c:	00bc0004 	movi	r2,-4096
  406170:	b8ae703a 	and	r23,r23,r2
  406174:	9009883a 	mov	r4,r18
  406178:	b80b883a 	mov	r5,r23
  40617c:	0407f9c0 	call	407f9c <_sbrk_r>
  406180:	1029883a 	mov	r20,r2
  406184:	00bfffc4 	movi	r2,-1
  406188:	a080d126 	beq	r20,r2,4064d0 <_malloc_r+0x6c8>
  40618c:	a7009f36 	bltu	r20,fp,40640c <_malloc_r+0x604>
  406190:	058010b4 	movhi	r22,66
  406194:	b5b5a704 	addi	r22,r22,-10596
  406198:	b0800017 	ldw	r2,0(r22)
  40619c:	b885883a 	add	r2,r23,r2
  4061a0:	b0800015 	stw	r2,0(r22)
  4061a4:	e500cf26 	beq	fp,r20,4064e4 <_malloc_r+0x6dc>
  4061a8:	d1200517 	ldw	r4,-32748(gp)
  4061ac:	00ffffc4 	movi	r3,-1
  4061b0:	20c0e026 	beq	r4,r3,406534 <_malloc_r+0x72c>
  4061b4:	a739c83a 	sub	fp,r20,fp
  4061b8:	1705883a 	add	r2,r2,fp
  4061bc:	b0800015 	stw	r2,0(r22)
  4061c0:	a08001cc 	andi	r2,r20,7
  4061c4:	1000a526 	beq	r2,zero,40645c <_malloc_r+0x654>
  4061c8:	a0a9c83a 	sub	r20,r20,r2
  4061cc:	00c40204 	movi	r3,4104
  4061d0:	a5000204 	addi	r20,r20,8
  4061d4:	1885c83a 	sub	r2,r3,r2
  4061d8:	a5c7883a 	add	r3,r20,r23
  4061dc:	18c3ffcc 	andi	r3,r3,4095
  4061e0:	10efc83a 	sub	r23,r2,r3
  4061e4:	9009883a 	mov	r4,r18
  4061e8:	b80b883a 	mov	r5,r23
  4061ec:	0407f9c0 	call	407f9c <_sbrk_r>
  4061f0:	00ffffc4 	movi	r3,-1
  4061f4:	10c0cc26 	beq	r2,r3,406528 <_malloc_r+0x720>
  4061f8:	1505c83a 	sub	r2,r2,r20
  4061fc:	b887883a 	add	r3,r23,r2
  406200:	18c00054 	ori	r3,r3,1
  406204:	b0800017 	ldw	r2,0(r22)
  406208:	9d000215 	stw	r20,8(r19)
  40620c:	a0c00115 	stw	r3,4(r20)
  406210:	b885883a 	add	r2,r23,r2
  406214:	b0800015 	stw	r2,0(r22)
  406218:	84c00e26 	beq	r16,r19,406254 <_malloc_r+0x44c>
  40621c:	00c003c4 	movi	r3,15
  406220:	1d40902e 	bgeu	r3,r21,406464 <_malloc_r+0x65c>
  406224:	ad7ffd04 	addi	r21,r21,-12
  406228:	013ffe04 	movi	r4,-8
  40622c:	a908703a 	and	r4,r21,r4
  406230:	810b883a 	add	r5,r16,r4
  406234:	01800144 	movi	r6,5
  406238:	29800115 	stw	r6,4(r5)
  40623c:	29800215 	stw	r6,8(r5)
  406240:	81400117 	ldw	r5,4(r16)
  406244:	2940004c 	andi	r5,r5,1
  406248:	214ab03a 	or	r5,r4,r5
  40624c:	81400115 	stw	r5,4(r16)
  406250:	1900ae36 	bltu	r3,r4,40650c <_malloc_r+0x704>
  406254:	d0e78017 	ldw	r3,-25088(gp)
  406258:	1880012e 	bgeu	r3,r2,406260 <_malloc_r+0x458>
  40625c:	d0a78015 	stw	r2,-25088(gp)
  406260:	d0e77f17 	ldw	r3,-25092(gp)
  406264:	9c000217 	ldw	r16,8(r19)
  406268:	1880012e 	bgeu	r3,r2,406270 <_malloc_r+0x468>
  40626c:	d0a77f15 	stw	r2,-25092(gp)
  406270:	80c00117 	ldw	r3,4(r16)
  406274:	00bfff04 	movi	r2,-4
  406278:	1886703a 	and	r3,r3,r2
  40627c:	1c45c83a 	sub	r2,r3,r17
  406280:	1c400236 	bltu	r3,r17,40628c <_malloc_r+0x484>
  406284:	00c003c4 	movi	r3,15
  406288:	18800416 	blt	r3,r2,40629c <_malloc_r+0x494>
  40628c:	9009883a 	mov	r4,r18
  406290:	040ba740 	call	40ba74 <__malloc_unlock>
  406294:	0005883a 	mov	r2,zero
  406298:	003f0906 	br	405ec0 <_malloc_r+0xb8>
  40629c:	88c00054 	ori	r3,r17,1
  4062a0:	10800054 	ori	r2,r2,1
  4062a4:	80c00115 	stw	r3,4(r16)
  4062a8:	8463883a 	add	r17,r16,r17
  4062ac:	88800115 	stw	r2,4(r17)
  4062b0:	9009883a 	mov	r4,r18
  4062b4:	9c400215 	stw	r17,8(r19)
  4062b8:	040ba740 	call	40ba74 <__malloc_unlock>
  4062bc:	80800204 	addi	r2,r16,8
  4062c0:	003eff06 	br	405ec0 <_malloc_r+0xb8>
  4062c4:	00800504 	movi	r2,20
  4062c8:	1100492e 	bgeu	r2,r4,4063f0 <_malloc_r+0x5e8>
  4062cc:	00801504 	movi	r2,84
  4062d0:	11005c36 	bltu	r2,r4,406444 <_malloc_r+0x63c>
  4062d4:	8808d33a 	srli	r4,r17,12
  4062d8:	21001b84 	addi	r4,r4,110
  4062dc:	210b883a 	add	r5,r4,r4
  4062e0:	003f1006 	br	405f24 <_malloc_r+0x11c>
  4062e4:	1006d27a 	srli	r3,r2,9
  4062e8:	01400104 	movi	r5,4
  4062ec:	28c0432e 	bgeu	r5,r3,4063fc <_malloc_r+0x5f4>
  4062f0:	01400504 	movi	r5,20
  4062f4:	28c07036 	bltu	r5,r3,4064b8 <_malloc_r+0x6b0>
  4062f8:	194016c4 	addi	r5,r3,91
  4062fc:	294d883a 	add	r6,r5,r5
  406300:	318d883a 	add	r6,r6,r6
  406304:	318d883a 	add	r6,r6,r6
  406308:	998d883a 	add	r6,r19,r6
  40630c:	30c00217 	ldw	r3,8(r6)
  406310:	01c010b4 	movhi	r7,66
  406314:	39e7fd04 	addi	r7,r7,-24588
  406318:	19805726 	beq	r3,r6,406478 <_malloc_r+0x670>
  40631c:	01ffff04 	movi	r7,-4
  406320:	19400117 	ldw	r5,4(r3)
  406324:	29ca703a 	and	r5,r5,r7
  406328:	1140022e 	bgeu	r2,r5,406334 <_malloc_r+0x52c>
  40632c:	18c00217 	ldw	r3,8(r3)
  406330:	30fffb1e 	bne	r6,r3,406320 <_malloc_r+0x518>
  406334:	19400317 	ldw	r5,12(r3)
  406338:	98800117 	ldw	r2,4(r19)
  40633c:	81400315 	stw	r5,12(r16)
  406340:	80c00215 	stw	r3,8(r16)
  406344:	2c000215 	stw	r16,8(r5)
  406348:	1c000315 	stw	r16,12(r3)
  40634c:	003f2b06 	br	405ffc <_malloc_r+0x1f4>
  406350:	8445883a 	add	r2,r16,r17
  406354:	8c400054 	ori	r17,r17,1
  406358:	18800515 	stw	r2,20(r3)
  40635c:	18800415 	stw	r2,16(r3)
  406360:	29000054 	ori	r4,r5,1
  406364:	1147883a 	add	r3,r2,r5
  406368:	84400115 	stw	r17,4(r16)
  40636c:	11000115 	stw	r4,4(r2)
  406370:	12400315 	stw	r9,12(r2)
  406374:	12400215 	stw	r9,8(r2)
  406378:	19400015 	stw	r5,0(r3)
  40637c:	9009883a 	mov	r4,r18
  406380:	040ba740 	call	40ba74 <__malloc_unlock>
  406384:	80800204 	addi	r2,r16,8
  406388:	003ecd06 	br	405ec0 <_malloc_r+0xb8>
  40638c:	18800117 	ldw	r2,4(r3)
  406390:	003f1a06 	br	405ffc <_malloc_r+0x1f4>
  406394:	5ac00044 	addi	r11,r11,1
  406398:	588000cc 	andi	r2,r11,3
  40639c:	52800204 	addi	r10,r10,8
  4063a0:	103f2e1e 	bne	r2,zero,40605c <_malloc_r+0x254>
  4063a4:	20c000cc 	andi	r3,r4,3
  4063a8:	60bffe04 	addi	r2,r12,-8
  4063ac:	18006f26 	beq	r3,zero,40656c <_malloc_r+0x764>
  4063b0:	63000017 	ldw	r12,0(r12)
  4063b4:	213fffc4 	addi	r4,r4,-1
  4063b8:	60bffa26 	beq	r12,r2,4063a4 <_malloc_r+0x59c>
  4063bc:	98800117 	ldw	r2,4(r19)
  4063c0:	294b883a 	add	r5,r5,r5
  4063c4:	117f5a36 	bltu	r2,r5,406130 <_malloc_r+0x328>
  4063c8:	283f5926 	beq	r5,zero,406130 <_malloc_r+0x328>
  4063cc:	1146703a 	and	r3,r2,r5
  4063d0:	18001626 	beq	r3,zero,40642c <_malloc_r+0x624>
  4063d4:	5809883a 	mov	r4,r11
  4063d8:	003f1a06 	br	406044 <_malloc_r+0x23c>
  4063dc:	80800204 	addi	r2,r16,8
  4063e0:	84000517 	ldw	r16,20(r16)
  4063e4:	143ea81e 	bne	r2,r16,405e88 <_malloc_r+0x80>
  4063e8:	21000084 	addi	r4,r4,2
  4063ec:	003ee306 	br	405f7c <_malloc_r+0x174>
  4063f0:	210016c4 	addi	r4,r4,91
  4063f4:	210b883a 	add	r5,r4,r4
  4063f8:	003eca06 	br	405f24 <_malloc_r+0x11c>
  4063fc:	100ad1ba 	srli	r5,r2,6
  406400:	29400e04 	addi	r5,r5,56
  406404:	294d883a 	add	r6,r5,r5
  406408:	003fbd06 	br	406300 <_malloc_r+0x4f8>
  40640c:	84ff6026 	beq	r16,r19,406190 <_malloc_r+0x388>
  406410:	008010b4 	movhi	r2,66
  406414:	10a7fd04 	addi	r2,r2,-24588
  406418:	14000217 	ldw	r16,8(r2)
  40641c:	00bfff04 	movi	r2,-4
  406420:	80c00117 	ldw	r3,4(r16)
  406424:	1886703a 	and	r3,r3,r2
  406428:	003f9406 	br	40627c <_malloc_r+0x474>
  40642c:	294b883a 	add	r5,r5,r5
  406430:	1146703a 	and	r3,r2,r5
  406434:	5ac00104 	addi	r11,r11,4
  406438:	183ffc26 	beq	r3,zero,40642c <_malloc_r+0x624>
  40643c:	5809883a 	mov	r4,r11
  406440:	003f0006 	br	406044 <_malloc_r+0x23c>
  406444:	00805504 	movi	r2,340
  406448:	11001336 	bltu	r2,r4,406498 <_malloc_r+0x690>
  40644c:	8808d3fa 	srli	r4,r17,15
  406450:	21001dc4 	addi	r4,r4,119
  406454:	210b883a 	add	r5,r4,r4
  406458:	003eb206 	br	405f24 <_malloc_r+0x11c>
  40645c:	00840004 	movi	r2,4096
  406460:	003f5d06 	br	4061d8 <_malloc_r+0x3d0>
  406464:	00800044 	movi	r2,1
  406468:	a0800115 	stw	r2,4(r20)
  40646c:	a021883a 	mov	r16,r20
  406470:	0007883a 	mov	r3,zero
  406474:	003f8106 	br	40627c <_malloc_r+0x474>
  406478:	280bd0ba 	srai	r5,r5,2
  40647c:	01800044 	movi	r6,1
  406480:	38800117 	ldw	r2,4(r7)
  406484:	314c983a 	sll	r6,r6,r5
  406488:	180b883a 	mov	r5,r3
  40648c:	3084b03a 	or	r2,r6,r2
  406490:	38800115 	stw	r2,4(r7)
  406494:	003fa906 	br	40633c <_malloc_r+0x534>
  406498:	00815504 	movi	r2,1364
  40649c:	11001836 	bltu	r2,r4,406500 <_malloc_r+0x6f8>
  4064a0:	8808d4ba 	srli	r4,r17,18
  4064a4:	21001f04 	addi	r4,r4,124
  4064a8:	210b883a 	add	r5,r4,r4
  4064ac:	003e9d06 	br	405f24 <_malloc_r+0x11c>
  4064b0:	bdc00404 	addi	r23,r23,16
  4064b4:	003f2f06 	br	406174 <_malloc_r+0x36c>
  4064b8:	01401504 	movi	r5,84
  4064bc:	28c01f36 	bltu	r5,r3,40653c <_malloc_r+0x734>
  4064c0:	100ad33a 	srli	r5,r2,12
  4064c4:	29401b84 	addi	r5,r5,110
  4064c8:	294d883a 	add	r6,r5,r5
  4064cc:	003f8c06 	br	406300 <_malloc_r+0x4f8>
  4064d0:	9c000217 	ldw	r16,8(r19)
  4064d4:	00bfff04 	movi	r2,-4
  4064d8:	80c00117 	ldw	r3,4(r16)
  4064dc:	1886703a 	and	r3,r3,r2
  4064e0:	003f6606 	br	40627c <_malloc_r+0x474>
  4064e4:	e0c3ffcc 	andi	r3,fp,4095
  4064e8:	183f2f1e 	bne	r3,zero,4061a8 <_malloc_r+0x3a0>
  4064ec:	98c00217 	ldw	r3,8(r19)
  4064f0:	bd49883a 	add	r4,r23,r21
  4064f4:	21000054 	ori	r4,r4,1
  4064f8:	19000115 	stw	r4,4(r3)
  4064fc:	003f5506 	br	406254 <_malloc_r+0x44c>
  406500:	01403f04 	movi	r5,252
  406504:	01001f84 	movi	r4,126
  406508:	003e8606 	br	405f24 <_malloc_r+0x11c>
  40650c:	9009883a 	mov	r4,r18
  406510:	81400204 	addi	r5,r16,8
  406514:	04052700 	call	405270 <_free_r>
  406518:	008010b4 	movhi	r2,66
  40651c:	10b5a704 	addi	r2,r2,-10596
  406520:	10800017 	ldw	r2,0(r2)
  406524:	003f4b06 	br	406254 <_malloc_r+0x44c>
  406528:	00c00044 	movi	r3,1
  40652c:	002f883a 	mov	r23,zero
  406530:	003f3406 	br	406204 <_malloc_r+0x3fc>
  406534:	d5200515 	stw	r20,-32748(gp)
  406538:	003f2106 	br	4061c0 <_malloc_r+0x3b8>
  40653c:	01405504 	movi	r5,340
  406540:	28c00436 	bltu	r5,r3,406554 <_malloc_r+0x74c>
  406544:	100ad3fa 	srli	r5,r2,15
  406548:	29401dc4 	addi	r5,r5,119
  40654c:	294d883a 	add	r6,r5,r5
  406550:	003f6b06 	br	406300 <_malloc_r+0x4f8>
  406554:	01415504 	movi	r5,1364
  406558:	28c00936 	bltu	r5,r3,406580 <_malloc_r+0x778>
  40655c:	100ad4ba 	srli	r5,r2,18
  406560:	29401f04 	addi	r5,r5,124
  406564:	294d883a 	add	r6,r5,r5
  406568:	003f6506 	br	406300 <_malloc_r+0x4f8>
  40656c:	98800117 	ldw	r2,4(r19)
  406570:	0146303a 	nor	r3,zero,r5
  406574:	1884703a 	and	r2,r3,r2
  406578:	98800115 	stw	r2,4(r19)
  40657c:	003f9006 	br	4063c0 <_malloc_r+0x5b8>
  406580:	01803f04 	movi	r6,252
  406584:	01401f84 	movi	r5,126
  406588:	003f5d06 	br	406300 <_malloc_r+0x4f8>

0040658c <memchr>:
  40658c:	008000c4 	movi	r2,3
  406590:	29403fcc 	andi	r5,r5,255
  406594:	1180282e 	bgeu	r2,r6,406638 <memchr+0xac>
  406598:	2086703a 	and	r3,r4,r2
  40659c:	1800351e 	bne	r3,zero,406674 <memchr+0xe8>
  4065a0:	2816923a 	slli	r11,r5,8
  4065a4:	2093883a 	add	r9,r4,r2
  4065a8:	22000084 	addi	r8,r4,2
  4065ac:	5957883a 	add	r11,r11,r5
  4065b0:	5816923a 	slli	r11,r11,8
  4065b4:	20c00044 	addi	r3,r4,1
  4065b8:	037fbff4 	movhi	r13,65279
  4065bc:	6b7fbfc4 	addi	r13,r13,-257
  4065c0:	5957883a 	add	r11,r11,r5
  4065c4:	5816923a 	slli	r11,r11,8
  4065c8:	03202074 	movhi	r12,32897
  4065cc:	63202004 	addi	r12,r12,-32640
  4065d0:	101d883a 	mov	r14,r2
  4065d4:	5957883a 	add	r11,r11,r5
  4065d8:	21c00017 	ldw	r7,0(r4)
  4065dc:	31bfff04 	addi	r6,r6,-4
  4065e0:	1805883a 	mov	r2,r3
  4065e4:	3acef03a 	xor	r7,r7,r11
  4065e8:	3b55883a 	add	r10,r7,r13
  4065ec:	01ce303a 	nor	r7,zero,r7
  4065f0:	51ce703a 	and	r7,r10,r7
  4065f4:	3b0e703a 	and	r7,r7,r12
  4065f8:	38000a26 	beq	r7,zero,406624 <memchr+0x98>
  4065fc:	21c00003 	ldbu	r7,0(r4)
  406600:	39401e26 	beq	r7,r5,40667c <memchr+0xf0>
  406604:	19c00003 	ldbu	r7,0(r3)
  406608:	39401926 	beq	r7,r5,406670 <memchr+0xe4>
  40660c:	41c00003 	ldbu	r7,0(r8)
  406610:	4005883a 	mov	r2,r8
  406614:	39401626 	beq	r7,r5,406670 <memchr+0xe4>
  406618:	49c00003 	ldbu	r7,0(r9)
  40661c:	4805883a 	mov	r2,r9
  406620:	39401326 	beq	r7,r5,406670 <memchr+0xe4>
  406624:	21000104 	addi	r4,r4,4
  406628:	4a400104 	addi	r9,r9,4
  40662c:	42000104 	addi	r8,r8,4
  406630:	18c00104 	addi	r3,r3,4
  406634:	71bfe836 	bltu	r14,r6,4065d8 <memchr+0x4c>
  406638:	2005883a 	mov	r2,r4
  40663c:	30000a26 	beq	r6,zero,406668 <memchr+0xdc>
  406640:	10c00003 	ldbu	r3,0(r2)
  406644:	19400a26 	beq	r3,r5,406670 <memchr+0xe4>
  406648:	10c00044 	addi	r3,r2,1
  40664c:	118d883a 	add	r6,r2,r6
  406650:	00000306 	br	406660 <memchr+0xd4>
  406654:	11000003 	ldbu	r4,0(r2)
  406658:	18c00044 	addi	r3,r3,1
  40665c:	21400426 	beq	r4,r5,406670 <memchr+0xe4>
  406660:	1805883a 	mov	r2,r3
  406664:	19bffb1e 	bne	r3,r6,406654 <memchr+0xc8>
  406668:	0005883a 	mov	r2,zero
  40666c:	f800283a 	ret
  406670:	f800283a 	ret
  406674:	2005883a 	mov	r2,r4
  406678:	003ff106 	br	406640 <memchr+0xb4>
  40667c:	2005883a 	mov	r2,r4
  406680:	f800283a 	ret

00406684 <memmove>:
  406684:	defffb04 	addi	sp,sp,-20
  406688:	dc000015 	stw	r16,0(sp)
  40668c:	dfc00415 	stw	ra,16(sp)
  406690:	dcc00315 	stw	r19,12(sp)
  406694:	dc800215 	stw	r18,8(sp)
  406698:	dc400115 	stw	r17,4(sp)
  40669c:	2021883a 	mov	r16,r4
  4066a0:	300f883a 	mov	r7,r6
  4066a4:	2900122e 	bgeu	r5,r4,4066f0 <memmove+0x6c>
  4066a8:	2987883a 	add	r3,r5,r6
  4066ac:	20c0102e 	bgeu	r4,r3,4066f0 <memmove+0x6c>
  4066b0:	218b883a 	add	r5,r4,r6
  4066b4:	1989c83a 	sub	r4,r3,r6
  4066b8:	30000526 	beq	r6,zero,4066d0 <memmove+0x4c>
  4066bc:	18ffffc4 	addi	r3,r3,-1
  4066c0:	18800003 	ldbu	r2,0(r3)
  4066c4:	297fffc4 	addi	r5,r5,-1
  4066c8:	28800005 	stb	r2,0(r5)
  4066cc:	193ffb1e 	bne	r3,r4,4066bc <memmove+0x38>
  4066d0:	8005883a 	mov	r2,r16
  4066d4:	dfc00417 	ldw	ra,16(sp)
  4066d8:	dcc00317 	ldw	r19,12(sp)
  4066dc:	dc800217 	ldw	r18,8(sp)
  4066e0:	dc400117 	ldw	r17,4(sp)
  4066e4:	dc000017 	ldw	r16,0(sp)
  4066e8:	dec00504 	addi	sp,sp,20
  4066ec:	f800283a 	ret
  4066f0:	008003c4 	movi	r2,15
  4066f4:	1180422e 	bgeu	r2,r6,406800 <memmove+0x17c>
  4066f8:	2c04b03a 	or	r2,r5,r16
  4066fc:	108000cc 	andi	r2,r2,3
  406700:	10003f1e 	bne	r2,zero,406800 <memmove+0x17c>
  406704:	32bffc04 	addi	r10,r6,-16
  406708:	5014d13a 	srli	r10,r10,4
  40670c:	81000404 	addi	r4,r16,16
  406710:	8007883a 	mov	r3,r16
  406714:	5004913a 	slli	r2,r10,4
  406718:	280f883a 	mov	r7,r5
  40671c:	2089883a 	add	r4,r4,r2
  406720:	38800017 	ldw	r2,0(r7)
  406724:	18c00404 	addi	r3,r3,16
  406728:	39c00404 	addi	r7,r7,16
  40672c:	18bffc15 	stw	r2,-16(r3)
  406730:	38bffd17 	ldw	r2,-12(r7)
  406734:	18bffd15 	stw	r2,-12(r3)
  406738:	38bffe17 	ldw	r2,-8(r7)
  40673c:	18bffe15 	stw	r2,-8(r3)
  406740:	38bfff17 	ldw	r2,-4(r7)
  406744:	18bfff15 	stw	r2,-4(r3)
  406748:	193ff51e 	bne	r3,r4,406720 <memmove+0x9c>
  40674c:	52800044 	addi	r10,r10,1
  406750:	5014913a 	slli	r10,r10,4
  406754:	31c003cc 	andi	r7,r6,15
  406758:	008000c4 	movi	r2,3
  40675c:	8287883a 	add	r3,r16,r10
  406760:	2a95883a 	add	r10,r5,r10
  406764:	11c0282e 	bgeu	r2,r7,406808 <memmove+0x184>
  406768:	3c7fff04 	addi	r17,r7,-4
  40676c:	8808d0ba 	srli	r4,r17,2
  406770:	1a400104 	addi	r9,r3,4
  406774:	180d883a 	mov	r6,r3
  406778:	2105883a 	add	r2,r4,r4
  40677c:	1085883a 	add	r2,r2,r2
  406780:	4893883a 	add	r9,r9,r2
  406784:	5005883a 	mov	r2,r10
  406788:	12000017 	ldw	r8,0(r2)
  40678c:	31800104 	addi	r6,r6,4
  406790:	10800104 	addi	r2,r2,4
  406794:	323fff15 	stw	r8,-4(r6)
  406798:	327ffb1e 	bne	r6,r9,406788 <memmove+0x104>
  40679c:	20800044 	addi	r2,r4,1
  4067a0:	1085883a 	add	r2,r2,r2
  4067a4:	1085883a 	add	r2,r2,r2
  4067a8:	017fff04 	movi	r5,-4
  4067ac:	18a5883a 	add	r18,r3,r2
  4067b0:	50a7883a 	add	r19,r10,r2
  4067b4:	0400e700 	call	400e70 <__mulsi3>
  4067b8:	144f883a 	add	r7,r2,r17
  4067bc:	980b883a 	mov	r5,r19
  4067c0:	9007883a 	mov	r3,r18
  4067c4:	383fc226 	beq	r7,zero,4066d0 <memmove+0x4c>
  4067c8:	19cf883a 	add	r7,r3,r7
  4067cc:	29800003 	ldbu	r6,0(r5)
  4067d0:	18c00044 	addi	r3,r3,1
  4067d4:	29400044 	addi	r5,r5,1
  4067d8:	19bfffc5 	stb	r6,-1(r3)
  4067dc:	19fffb1e 	bne	r3,r7,4067cc <memmove+0x148>
  4067e0:	8005883a 	mov	r2,r16
  4067e4:	dfc00417 	ldw	ra,16(sp)
  4067e8:	dcc00317 	ldw	r19,12(sp)
  4067ec:	dc800217 	ldw	r18,8(sp)
  4067f0:	dc400117 	ldw	r17,4(sp)
  4067f4:	dc000017 	ldw	r16,0(sp)
  4067f8:	dec00504 	addi	sp,sp,20
  4067fc:	f800283a 	ret
  406800:	8007883a 	mov	r3,r16
  406804:	003fef06 	br	4067c4 <memmove+0x140>
  406808:	500b883a 	mov	r5,r10
  40680c:	003fed06 	br	4067c4 <memmove+0x140>

00406810 <memset>:
  406810:	00c000c4 	movi	r3,3
  406814:	2005883a 	mov	r2,r4
  406818:	29403fcc 	andi	r5,r5,255
  40681c:	19802d2e 	bgeu	r3,r6,4068d4 <memset+0xc4>
  406820:	20c6703a 	and	r3,r4,r3
  406824:	18002e1e 	bne	r3,zero,4068e0 <memset+0xd0>
  406828:	2806923a 	slli	r3,r5,8
  40682c:	010003c4 	movi	r4,15
  406830:	3011883a 	mov	r8,r6
  406834:	1946b03a 	or	r3,r3,r5
  406838:	180e943a 	slli	r7,r3,16
  40683c:	38ceb03a 	or	r7,r7,r3
  406840:	1007883a 	mov	r3,r2
  406844:	21800f2e 	bgeu	r4,r6,406884 <memset+0x74>
  406848:	19c00015 	stw	r7,0(r3)
  40684c:	19c00115 	stw	r7,4(r3)
  406850:	19c00215 	stw	r7,8(r3)
  406854:	19c00315 	stw	r7,12(r3)
  406858:	423ffc04 	addi	r8,r8,-16
  40685c:	18c00404 	addi	r3,r3,16
  406860:	223ff936 	bltu	r4,r8,406848 <memset+0x38>
  406864:	30fffc04 	addi	r3,r6,-16
  406868:	1806d13a 	srli	r3,r3,4
  40686c:	318003cc 	andi	r6,r6,15
  406870:	010000c4 	movi	r4,3
  406874:	18c00044 	addi	r3,r3,1
  406878:	1806913a 	slli	r3,r3,4
  40687c:	10c7883a 	add	r3,r2,r3
  406880:	21800e2e 	bgeu	r4,r6,4068bc <memset+0xac>
  406884:	1813883a 	mov	r9,r3
  406888:	3011883a 	mov	r8,r6
  40688c:	010000c4 	movi	r4,3
  406890:	49c00015 	stw	r7,0(r9)
  406894:	423fff04 	addi	r8,r8,-4
  406898:	4a400104 	addi	r9,r9,4
  40689c:	223ffc36 	bltu	r4,r8,406890 <memset+0x80>
  4068a0:	313fff04 	addi	r4,r6,-4
  4068a4:	2008d0ba 	srli	r4,r4,2
  4068a8:	318000cc 	andi	r6,r6,3
  4068ac:	21000044 	addi	r4,r4,1
  4068b0:	2109883a 	add	r4,r4,r4
  4068b4:	2109883a 	add	r4,r4,r4
  4068b8:	1907883a 	add	r3,r3,r4
  4068bc:	30000a26 	beq	r6,zero,4068e8 <memset+0xd8>
  4068c0:	198d883a 	add	r6,r3,r6
  4068c4:	19400005 	stb	r5,0(r3)
  4068c8:	18c00044 	addi	r3,r3,1
  4068cc:	19bffd1e 	bne	r3,r6,4068c4 <memset+0xb4>
  4068d0:	f800283a 	ret
  4068d4:	2007883a 	mov	r3,r4
  4068d8:	303ff91e 	bne	r6,zero,4068c0 <memset+0xb0>
  4068dc:	00000206 	br	4068e8 <memset+0xd8>
  4068e0:	2007883a 	mov	r3,r4
  4068e4:	003ff606 	br	4068c0 <memset+0xb0>
  4068e8:	f800283a 	ret

004068ec <_Balloc>:
  4068ec:	20801317 	ldw	r2,76(r4)
  4068f0:	defffc04 	addi	sp,sp,-16
  4068f4:	dc400115 	stw	r17,4(sp)
  4068f8:	dc000015 	stw	r16,0(sp)
  4068fc:	dfc00315 	stw	ra,12(sp)
  406900:	dc800215 	stw	r18,8(sp)
  406904:	2023883a 	mov	r17,r4
  406908:	2821883a 	mov	r16,r5
  40690c:	10000f26 	beq	r2,zero,40694c <_Balloc+0x60>
  406910:	8407883a 	add	r3,r16,r16
  406914:	18c7883a 	add	r3,r3,r3
  406918:	10c7883a 	add	r3,r2,r3
  40691c:	18800017 	ldw	r2,0(r3)
  406920:	10001126 	beq	r2,zero,406968 <_Balloc+0x7c>
  406924:	11000017 	ldw	r4,0(r2)
  406928:	19000015 	stw	r4,0(r3)
  40692c:	10000415 	stw	zero,16(r2)
  406930:	10000315 	stw	zero,12(r2)
  406934:	dfc00317 	ldw	ra,12(sp)
  406938:	dc800217 	ldw	r18,8(sp)
  40693c:	dc400117 	ldw	r17,4(sp)
  406940:	dc000017 	ldw	r16,0(sp)
  406944:	dec00404 	addi	sp,sp,16
  406948:	f800283a 	ret
  40694c:	01400104 	movi	r5,4
  406950:	01800404 	movi	r6,16
  406954:	04082500 	call	408250 <_calloc_r>
  406958:	88801315 	stw	r2,76(r17)
  40695c:	103fec1e 	bne	r2,zero,406910 <_Balloc+0x24>
  406960:	0005883a 	mov	r2,zero
  406964:	003ff306 	br	406934 <_Balloc+0x48>
  406968:	01400044 	movi	r5,1
  40696c:	2c24983a 	sll	r18,r5,r16
  406970:	8809883a 	mov	r4,r17
  406974:	91800144 	addi	r6,r18,5
  406978:	318d883a 	add	r6,r6,r6
  40697c:	318d883a 	add	r6,r6,r6
  406980:	04082500 	call	408250 <_calloc_r>
  406984:	103ff626 	beq	r2,zero,406960 <_Balloc+0x74>
  406988:	14000115 	stw	r16,4(r2)
  40698c:	14800215 	stw	r18,8(r2)
  406990:	003fe606 	br	40692c <_Balloc+0x40>

00406994 <_Bfree>:
  406994:	28000826 	beq	r5,zero,4069b8 <_Bfree+0x24>
  406998:	28c00117 	ldw	r3,4(r5)
  40699c:	20801317 	ldw	r2,76(r4)
  4069a0:	18c7883a 	add	r3,r3,r3
  4069a4:	18c7883a 	add	r3,r3,r3
  4069a8:	10c5883a 	add	r2,r2,r3
  4069ac:	10c00017 	ldw	r3,0(r2)
  4069b0:	28c00015 	stw	r3,0(r5)
  4069b4:	11400015 	stw	r5,0(r2)
  4069b8:	f800283a 	ret

004069bc <__multadd>:
  4069bc:	defff604 	addi	sp,sp,-40
  4069c0:	dd400515 	stw	r21,20(sp)
  4069c4:	2d400417 	ldw	r21,16(r5)
  4069c8:	df000815 	stw	fp,32(sp)
  4069cc:	ddc00715 	stw	r23,28(sp)
  4069d0:	dd800615 	stw	r22,24(sp)
  4069d4:	dd000415 	stw	r20,16(sp)
  4069d8:	dc400115 	stw	r17,4(sp)
  4069dc:	dc000015 	stw	r16,0(sp)
  4069e0:	dfc00915 	stw	ra,36(sp)
  4069e4:	dcc00315 	stw	r19,12(sp)
  4069e8:	dc800215 	stw	r18,8(sp)
  4069ec:	282d883a 	mov	r22,r5
  4069f0:	202f883a 	mov	r23,r4
  4069f4:	3029883a 	mov	r20,r6
  4069f8:	3839883a 	mov	fp,r7
  4069fc:	2c000504 	addi	r16,r5,20
  406a00:	0023883a 	mov	r17,zero
  406a04:	84c00017 	ldw	r19,0(r16)
  406a08:	a00b883a 	mov	r5,r20
  406a0c:	8c400044 	addi	r17,r17,1
  406a10:	993fffcc 	andi	r4,r19,65535
  406a14:	0400e700 	call	400e70 <__mulsi3>
  406a18:	1725883a 	add	r18,r2,fp
  406a1c:	9808d43a 	srli	r4,r19,16
  406a20:	9026d43a 	srli	r19,r18,16
  406a24:	a00b883a 	mov	r5,r20
  406a28:	0400e700 	call	400e70 <__mulsi3>
  406a2c:	988f883a 	add	r7,r19,r2
  406a30:	3804943a 	slli	r2,r7,16
  406a34:	94bfffcc 	andi	r18,r18,65535
  406a38:	3838d43a 	srli	fp,r7,16
  406a3c:	14a5883a 	add	r18,r2,r18
  406a40:	84800015 	stw	r18,0(r16)
  406a44:	84000104 	addi	r16,r16,4
  406a48:	8d7fee16 	blt	r17,r21,406a04 <__multadd+0x48>
  406a4c:	e0000926 	beq	fp,zero,406a74 <__multadd+0xb8>
  406a50:	b0800217 	ldw	r2,8(r22)
  406a54:	a880140e 	bge	r21,r2,406aa8 <__multadd+0xec>
  406a58:	a8800144 	addi	r2,r21,5
  406a5c:	1085883a 	add	r2,r2,r2
  406a60:	1085883a 	add	r2,r2,r2
  406a64:	b085883a 	add	r2,r22,r2
  406a68:	ad400044 	addi	r21,r21,1
  406a6c:	17000015 	stw	fp,0(r2)
  406a70:	b5400415 	stw	r21,16(r22)
  406a74:	b005883a 	mov	r2,r22
  406a78:	dfc00917 	ldw	ra,36(sp)
  406a7c:	df000817 	ldw	fp,32(sp)
  406a80:	ddc00717 	ldw	r23,28(sp)
  406a84:	dd800617 	ldw	r22,24(sp)
  406a88:	dd400517 	ldw	r21,20(sp)
  406a8c:	dd000417 	ldw	r20,16(sp)
  406a90:	dcc00317 	ldw	r19,12(sp)
  406a94:	dc800217 	ldw	r18,8(sp)
  406a98:	dc400117 	ldw	r17,4(sp)
  406a9c:	dc000017 	ldw	r16,0(sp)
  406aa0:	dec00a04 	addi	sp,sp,40
  406aa4:	f800283a 	ret
  406aa8:	b1400117 	ldw	r5,4(r22)
  406aac:	b809883a 	mov	r4,r23
  406ab0:	29400044 	addi	r5,r5,1
  406ab4:	04068ec0 	call	4068ec <_Balloc>
  406ab8:	b1800417 	ldw	r6,16(r22)
  406abc:	b1400304 	addi	r5,r22,12
  406ac0:	11000304 	addi	r4,r2,12
  406ac4:	31800084 	addi	r6,r6,2
  406ac8:	318d883a 	add	r6,r6,r6
  406acc:	318d883a 	add	r6,r6,r6
  406ad0:	1021883a 	mov	r16,r2
  406ad4:	0400f1c0 	call	400f1c <memcpy>
  406ad8:	b0c00117 	ldw	r3,4(r22)
  406adc:	b8801317 	ldw	r2,76(r23)
  406ae0:	18c7883a 	add	r3,r3,r3
  406ae4:	18c7883a 	add	r3,r3,r3
  406ae8:	10c5883a 	add	r2,r2,r3
  406aec:	10c00017 	ldw	r3,0(r2)
  406af0:	b0c00015 	stw	r3,0(r22)
  406af4:	15800015 	stw	r22,0(r2)
  406af8:	802d883a 	mov	r22,r16
  406afc:	003fd606 	br	406a58 <__multadd+0x9c>

00406b00 <__s2b>:
  406b00:	defff904 	addi	sp,sp,-28
  406b04:	dd000415 	stw	r20,16(sp)
  406b08:	dc400115 	stw	r17,4(sp)
  406b0c:	2829883a 	mov	r20,r5
  406b10:	2023883a 	mov	r17,r4
  406b14:	01400244 	movi	r5,9
  406b18:	39000204 	addi	r4,r7,8
  406b1c:	dcc00315 	stw	r19,12(sp)
  406b20:	dc800215 	stw	r18,8(sp)
  406b24:	dfc00615 	stw	ra,24(sp)
  406b28:	dd400515 	stw	r21,20(sp)
  406b2c:	dc000015 	stw	r16,0(sp)
  406b30:	3825883a 	mov	r18,r7
  406b34:	3027883a 	mov	r19,r6
  406b38:	040a0a00 	call	40a0a0 <__divsi3>
  406b3c:	00c00044 	movi	r3,1
  406b40:	000b883a 	mov	r5,zero
  406b44:	1880030e 	bge	r3,r2,406b54 <__s2b+0x54>
  406b48:	18c7883a 	add	r3,r3,r3
  406b4c:	29400044 	addi	r5,r5,1
  406b50:	18bffd16 	blt	r3,r2,406b48 <__s2b+0x48>
  406b54:	8809883a 	mov	r4,r17
  406b58:	04068ec0 	call	4068ec <_Balloc>
  406b5c:	d8c00717 	ldw	r3,28(sp)
  406b60:	10c00515 	stw	r3,20(r2)
  406b64:	00c00044 	movi	r3,1
  406b68:	10c00415 	stw	r3,16(r2)
  406b6c:	00c00244 	movi	r3,9
  406b70:	1cc0210e 	bge	r3,r19,406bf8 <__s2b+0xf8>
  406b74:	a0eb883a 	add	r21,r20,r3
  406b78:	a821883a 	mov	r16,r21
  406b7c:	a4e9883a 	add	r20,r20,r19
  406b80:	81c00007 	ldb	r7,0(r16)
  406b84:	8809883a 	mov	r4,r17
  406b88:	84000044 	addi	r16,r16,1
  406b8c:	100b883a 	mov	r5,r2
  406b90:	01800284 	movi	r6,10
  406b94:	39fff404 	addi	r7,r7,-48
  406b98:	04069bc0 	call	4069bc <__multadd>
  406b9c:	853ff81e 	bne	r16,r20,406b80 <__s2b+0x80>
  406ba0:	ace1883a 	add	r16,r21,r19
  406ba4:	843ffe04 	addi	r16,r16,-8
  406ba8:	9c800a0e 	bge	r19,r18,406bd4 <__s2b+0xd4>
  406bac:	94e5c83a 	sub	r18,r18,r19
  406bb0:	84a5883a 	add	r18,r16,r18
  406bb4:	81c00007 	ldb	r7,0(r16)
  406bb8:	8809883a 	mov	r4,r17
  406bbc:	84000044 	addi	r16,r16,1
  406bc0:	100b883a 	mov	r5,r2
  406bc4:	01800284 	movi	r6,10
  406bc8:	39fff404 	addi	r7,r7,-48
  406bcc:	04069bc0 	call	4069bc <__multadd>
  406bd0:	84bff81e 	bne	r16,r18,406bb4 <__s2b+0xb4>
  406bd4:	dfc00617 	ldw	ra,24(sp)
  406bd8:	dd400517 	ldw	r21,20(sp)
  406bdc:	dd000417 	ldw	r20,16(sp)
  406be0:	dcc00317 	ldw	r19,12(sp)
  406be4:	dc800217 	ldw	r18,8(sp)
  406be8:	dc400117 	ldw	r17,4(sp)
  406bec:	dc000017 	ldw	r16,0(sp)
  406bf0:	dec00704 	addi	sp,sp,28
  406bf4:	f800283a 	ret
  406bf8:	a4000284 	addi	r16,r20,10
  406bfc:	1827883a 	mov	r19,r3
  406c00:	003fe906 	br	406ba8 <__s2b+0xa8>

00406c04 <__hi0bits>:
  406c04:	20bfffec 	andhi	r2,r4,65535
  406c08:	1000141e 	bne	r2,zero,406c5c <__hi0bits+0x58>
  406c0c:	2008943a 	slli	r4,r4,16
  406c10:	00800404 	movi	r2,16
  406c14:	20ffc02c 	andhi	r3,r4,65280
  406c18:	1800021e 	bne	r3,zero,406c24 <__hi0bits+0x20>
  406c1c:	2008923a 	slli	r4,r4,8
  406c20:	10800204 	addi	r2,r2,8
  406c24:	20fc002c 	andhi	r3,r4,61440
  406c28:	1800021e 	bne	r3,zero,406c34 <__hi0bits+0x30>
  406c2c:	2008913a 	slli	r4,r4,4
  406c30:	10800104 	addi	r2,r2,4
  406c34:	20f0002c 	andhi	r3,r4,49152
  406c38:	1800031e 	bne	r3,zero,406c48 <__hi0bits+0x44>
  406c3c:	2109883a 	add	r4,r4,r4
  406c40:	10800084 	addi	r2,r2,2
  406c44:	2109883a 	add	r4,r4,r4
  406c48:	20000316 	blt	r4,zero,406c58 <__hi0bits+0x54>
  406c4c:	2110002c 	andhi	r4,r4,16384
  406c50:	2000041e 	bne	r4,zero,406c64 <__hi0bits+0x60>
  406c54:	00800804 	movi	r2,32
  406c58:	f800283a 	ret
  406c5c:	0005883a 	mov	r2,zero
  406c60:	003fec06 	br	406c14 <__hi0bits+0x10>
  406c64:	10800044 	addi	r2,r2,1
  406c68:	f800283a 	ret

00406c6c <__lo0bits>:
  406c6c:	20c00017 	ldw	r3,0(r4)
  406c70:	188001cc 	andi	r2,r3,7
  406c74:	10000826 	beq	r2,zero,406c98 <__lo0bits+0x2c>
  406c78:	1880004c 	andi	r2,r3,1
  406c7c:	1000211e 	bne	r2,zero,406d04 <__lo0bits+0x98>
  406c80:	1880008c 	andi	r2,r3,2
  406c84:	1000211e 	bne	r2,zero,406d0c <__lo0bits+0xa0>
  406c88:	1806d0ba 	srli	r3,r3,2
  406c8c:	00800084 	movi	r2,2
  406c90:	20c00015 	stw	r3,0(r4)
  406c94:	f800283a 	ret
  406c98:	18bfffcc 	andi	r2,r3,65535
  406c9c:	10001326 	beq	r2,zero,406cec <__lo0bits+0x80>
  406ca0:	0005883a 	mov	r2,zero
  406ca4:	19403fcc 	andi	r5,r3,255
  406ca8:	2800021e 	bne	r5,zero,406cb4 <__lo0bits+0x48>
  406cac:	1806d23a 	srli	r3,r3,8
  406cb0:	10800204 	addi	r2,r2,8
  406cb4:	194003cc 	andi	r5,r3,15
  406cb8:	2800021e 	bne	r5,zero,406cc4 <__lo0bits+0x58>
  406cbc:	1806d13a 	srli	r3,r3,4
  406cc0:	10800104 	addi	r2,r2,4
  406cc4:	194000cc 	andi	r5,r3,3
  406cc8:	2800021e 	bne	r5,zero,406cd4 <__lo0bits+0x68>
  406ccc:	1806d0ba 	srli	r3,r3,2
  406cd0:	10800084 	addi	r2,r2,2
  406cd4:	1940004c 	andi	r5,r3,1
  406cd8:	2800081e 	bne	r5,zero,406cfc <__lo0bits+0x90>
  406cdc:	1806d07a 	srli	r3,r3,1
  406ce0:	1800051e 	bne	r3,zero,406cf8 <__lo0bits+0x8c>
  406ce4:	00800804 	movi	r2,32
  406ce8:	f800283a 	ret
  406cec:	1806d43a 	srli	r3,r3,16
  406cf0:	00800404 	movi	r2,16
  406cf4:	003feb06 	br	406ca4 <__lo0bits+0x38>
  406cf8:	10800044 	addi	r2,r2,1
  406cfc:	20c00015 	stw	r3,0(r4)
  406d00:	f800283a 	ret
  406d04:	0005883a 	mov	r2,zero
  406d08:	f800283a 	ret
  406d0c:	1806d07a 	srli	r3,r3,1
  406d10:	00800044 	movi	r2,1
  406d14:	20c00015 	stw	r3,0(r4)
  406d18:	f800283a 	ret

00406d1c <__i2b>:
  406d1c:	defffd04 	addi	sp,sp,-12
  406d20:	dc000015 	stw	r16,0(sp)
  406d24:	04000044 	movi	r16,1
  406d28:	dc400115 	stw	r17,4(sp)
  406d2c:	2823883a 	mov	r17,r5
  406d30:	800b883a 	mov	r5,r16
  406d34:	dfc00215 	stw	ra,8(sp)
  406d38:	04068ec0 	call	4068ec <_Balloc>
  406d3c:	14400515 	stw	r17,20(r2)
  406d40:	14000415 	stw	r16,16(r2)
  406d44:	dfc00217 	ldw	ra,8(sp)
  406d48:	dc400117 	ldw	r17,4(sp)
  406d4c:	dc000017 	ldw	r16,0(sp)
  406d50:	dec00304 	addi	sp,sp,12
  406d54:	f800283a 	ret

00406d58 <__multiply>:
  406d58:	defff004 	addi	sp,sp,-64
  406d5c:	dc800815 	stw	r18,32(sp)
  406d60:	dc400715 	stw	r17,28(sp)
  406d64:	34800417 	ldw	r18,16(r6)
  406d68:	2c400417 	ldw	r17,16(r5)
  406d6c:	ddc00d15 	stw	r23,52(sp)
  406d70:	dc000615 	stw	r16,24(sp)
  406d74:	dfc00f15 	stw	ra,60(sp)
  406d78:	df000e15 	stw	fp,56(sp)
  406d7c:	dd800c15 	stw	r22,48(sp)
  406d80:	dd400b15 	stw	r21,44(sp)
  406d84:	dd000a15 	stw	r20,40(sp)
  406d88:	dcc00915 	stw	r19,36(sp)
  406d8c:	2821883a 	mov	r16,r5
  406d90:	302f883a 	mov	r23,r6
  406d94:	8c80050e 	bge	r17,r18,406dac <__multiply+0x54>
  406d98:	8807883a 	mov	r3,r17
  406d9c:	3021883a 	mov	r16,r6
  406da0:	9023883a 	mov	r17,r18
  406da4:	282f883a 	mov	r23,r5
  406da8:	1825883a 	mov	r18,r3
  406dac:	80800217 	ldw	r2,8(r16)
  406db0:	8c87883a 	add	r3,r17,r18
  406db4:	d8c00115 	stw	r3,4(sp)
  406db8:	81400117 	ldw	r5,4(r16)
  406dbc:	10c0010e 	bge	r2,r3,406dc4 <__multiply+0x6c>
  406dc0:	29400044 	addi	r5,r5,1
  406dc4:	04068ec0 	call	4068ec <_Balloc>
  406dc8:	d8c00117 	ldw	r3,4(sp)
  406dcc:	d8800515 	stw	r2,20(sp)
  406dd0:	14c00504 	addi	r19,r2,20
  406dd4:	1d400144 	addi	r21,r3,5
  406dd8:	ad6b883a 	add	r21,r21,r21
  406ddc:	ad6b883a 	add	r21,r21,r21
  406de0:	156b883a 	add	r21,r2,r21
  406de4:	dd400215 	stw	r21,8(sp)
  406de8:	9805883a 	mov	r2,r19
  406dec:	9d40042e 	bgeu	r19,r21,406e00 <__multiply+0xa8>
  406df0:	d8c00217 	ldw	r3,8(sp)
  406df4:	10000015 	stw	zero,0(r2)
  406df8:	10800104 	addi	r2,r2,4
  406dfc:	10fffc36 	bltu	r2,r3,406df0 <__multiply+0x98>
  406e00:	94800144 	addi	r18,r18,5
  406e04:	94a5883a 	add	r18,r18,r18
  406e08:	94ad883a 	add	r22,r18,r18
  406e0c:	8c400144 	addi	r17,r17,5
  406e10:	8c63883a 	add	r17,r17,r17
  406e14:	bdad883a 	add	r22,r23,r22
  406e18:	80c00504 	addi	r3,r16,20
  406e1c:	8c63883a 	add	r17,r17,r17
  406e20:	bc800504 	addi	r18,r23,20
  406e24:	dd800315 	stw	r22,12(sp)
  406e28:	d8c00415 	stw	r3,16(sp)
  406e2c:	dcc00015 	stw	r19,0(sp)
  406e30:	8463883a 	add	r17,r16,r17
  406e34:	9580412e 	bgeu	r18,r22,406f3c <__multiply+0x1e4>
  406e38:	90800017 	ldw	r2,0(r18)
  406e3c:	173fffcc 	andi	fp,r2,65535
  406e40:	e0001a26 	beq	fp,zero,406eac <__multiply+0x154>
  406e44:	dd000017 	ldw	r20,0(sp)
  406e48:	dd800417 	ldw	r22,16(sp)
  406e4c:	002b883a 	mov	r21,zero
  406e50:	b4c00017 	ldw	r19,0(r22)
  406e54:	a4000017 	ldw	r16,0(r20)
  406e58:	e00b883a 	mov	r5,fp
  406e5c:	993fffcc 	andi	r4,r19,65535
  406e60:	0400e700 	call	400e70 <__mulsi3>
  406e64:	9808d43a 	srli	r4,r19,16
  406e68:	817fffcc 	andi	r5,r16,65535
  406e6c:	1145883a 	add	r2,r2,r5
  406e70:	e00b883a 	mov	r5,fp
  406e74:	1567883a 	add	r19,r2,r21
  406e78:	8020d43a 	srli	r16,r16,16
  406e7c:	0400e700 	call	400e70 <__mulsi3>
  406e80:	9808d43a 	srli	r4,r19,16
  406e84:	1405883a 	add	r2,r2,r16
  406e88:	a4c0000d 	sth	r19,0(r20)
  406e8c:	110f883a 	add	r7,r2,r4
  406e90:	a1c0008d 	sth	r7,2(r20)
  406e94:	b5800104 	addi	r22,r22,4
  406e98:	382ad43a 	srli	r21,r7,16
  406e9c:	a5000104 	addi	r20,r20,4
  406ea0:	b47feb36 	bltu	r22,r17,406e50 <__multiply+0xf8>
  406ea4:	a5400015 	stw	r21,0(r20)
  406ea8:	90800017 	ldw	r2,0(r18)
  406eac:	1038d43a 	srli	fp,r2,16
  406eb0:	e0001c26 	beq	fp,zero,406f24 <__multiply+0x1cc>
  406eb4:	d8c00017 	ldw	r3,0(sp)
  406eb8:	dd000417 	ldw	r20,16(sp)
  406ebc:	002b883a 	mov	r21,zero
  406ec0:	1d800017 	ldw	r22,0(r3)
  406ec4:	182f883a 	mov	r23,r3
  406ec8:	b021883a 	mov	r16,r22
  406ecc:	a4c00017 	ldw	r19,0(r20)
  406ed0:	8020d43a 	srli	r16,r16,16
  406ed4:	e00b883a 	mov	r5,fp
  406ed8:	993fffcc 	andi	r4,r19,65535
  406edc:	0400e700 	call	400e70 <__mulsi3>
  406ee0:	1405883a 	add	r2,r2,r16
  406ee4:	9808d43a 	srli	r4,r19,16
  406ee8:	156b883a 	add	r21,r2,r21
  406eec:	bdc00104 	addi	r23,r23,4
  406ef0:	bdbfff0d 	sth	r22,-4(r23)
  406ef4:	bd7fff8d 	sth	r21,-2(r23)
  406ef8:	bc000017 	ldw	r16,0(r23)
  406efc:	e00b883a 	mov	r5,fp
  406f00:	0400e700 	call	400e70 <__mulsi3>
  406f04:	a80ed43a 	srli	r7,r21,16
  406f08:	813fffcc 	andi	r4,r16,65535
  406f0c:	2085883a 	add	r2,r4,r2
  406f10:	11ed883a 	add	r22,r2,r7
  406f14:	a5000104 	addi	r20,r20,4
  406f18:	b02ad43a 	srli	r21,r22,16
  406f1c:	a47feb36 	bltu	r20,r17,406ecc <__multiply+0x174>
  406f20:	bd800015 	stw	r22,0(r23)
  406f24:	d8c00017 	ldw	r3,0(sp)
  406f28:	94800104 	addi	r18,r18,4
  406f2c:	18c00104 	addi	r3,r3,4
  406f30:	d8c00015 	stw	r3,0(sp)
  406f34:	d8c00317 	ldw	r3,12(sp)
  406f38:	90ffbf36 	bltu	r18,r3,406e38 <__multiply+0xe0>
  406f3c:	d8c00117 	ldw	r3,4(sp)
  406f40:	00c00c0e 	bge	zero,r3,406f74 <__multiply+0x21c>
  406f44:	d8c00217 	ldw	r3,8(sp)
  406f48:	18bfff17 	ldw	r2,-4(r3)
  406f4c:	1d7fff04 	addi	r21,r3,-4
  406f50:	10000326 	beq	r2,zero,406f60 <__multiply+0x208>
  406f54:	00000706 	br	406f74 <__multiply+0x21c>
  406f58:	a8800017 	ldw	r2,0(r21)
  406f5c:	1000051e 	bne	r2,zero,406f74 <__multiply+0x21c>
  406f60:	d8c00117 	ldw	r3,4(sp)
  406f64:	ad7fff04 	addi	r21,r21,-4
  406f68:	18ffffc4 	addi	r3,r3,-1
  406f6c:	d8c00115 	stw	r3,4(sp)
  406f70:	183ff91e 	bne	r3,zero,406f58 <__multiply+0x200>
  406f74:	d8800517 	ldw	r2,20(sp)
  406f78:	d8c00117 	ldw	r3,4(sp)
  406f7c:	10c00415 	stw	r3,16(r2)
  406f80:	dfc00f17 	ldw	ra,60(sp)
  406f84:	df000e17 	ldw	fp,56(sp)
  406f88:	ddc00d17 	ldw	r23,52(sp)
  406f8c:	dd800c17 	ldw	r22,48(sp)
  406f90:	dd400b17 	ldw	r21,44(sp)
  406f94:	dd000a17 	ldw	r20,40(sp)
  406f98:	dcc00917 	ldw	r19,36(sp)
  406f9c:	dc800817 	ldw	r18,32(sp)
  406fa0:	dc400717 	ldw	r17,28(sp)
  406fa4:	dc000617 	ldw	r16,24(sp)
  406fa8:	dec01004 	addi	sp,sp,64
  406fac:	f800283a 	ret

00406fb0 <__pow5mult>:
  406fb0:	defffb04 	addi	sp,sp,-20
  406fb4:	dcc00315 	stw	r19,12(sp)
  406fb8:	dc800215 	stw	r18,8(sp)
  406fbc:	dc000015 	stw	r16,0(sp)
  406fc0:	dfc00415 	stw	ra,16(sp)
  406fc4:	dc400115 	stw	r17,4(sp)
  406fc8:	308000cc 	andi	r2,r6,3
  406fcc:	3021883a 	mov	r16,r6
  406fd0:	2027883a 	mov	r19,r4
  406fd4:	2825883a 	mov	r18,r5
  406fd8:	10002e1e 	bne	r2,zero,407094 <__pow5mult+0xe4>
  406fdc:	8021d0ba 	srai	r16,r16,2
  406fe0:	80001a26 	beq	r16,zero,40704c <__pow5mult+0x9c>
  406fe4:	9c401217 	ldw	r17,72(r19)
  406fe8:	8800061e 	bne	r17,zero,407004 <__pow5mult+0x54>
  406fec:	00003406 	br	4070c0 <__pow5mult+0x110>
  406ff0:	8021d07a 	srai	r16,r16,1
  406ff4:	80001526 	beq	r16,zero,40704c <__pow5mult+0x9c>
  406ff8:	88c00017 	ldw	r3,0(r17)
  406ffc:	18001b26 	beq	r3,zero,40706c <__pow5mult+0xbc>
  407000:	1823883a 	mov	r17,r3
  407004:	80c0004c 	andi	r3,r16,1
  407008:	183ff926 	beq	r3,zero,406ff0 <__pow5mult+0x40>
  40700c:	900b883a 	mov	r5,r18
  407010:	880d883a 	mov	r6,r17
  407014:	9809883a 	mov	r4,r19
  407018:	0406d580 	call	406d58 <__multiply>
  40701c:	90001b26 	beq	r18,zero,40708c <__pow5mult+0xdc>
  407020:	91000117 	ldw	r4,4(r18)
  407024:	98c01317 	ldw	r3,76(r19)
  407028:	8021d07a 	srai	r16,r16,1
  40702c:	2109883a 	add	r4,r4,r4
  407030:	2109883a 	add	r4,r4,r4
  407034:	1907883a 	add	r3,r3,r4
  407038:	19000017 	ldw	r4,0(r3)
  40703c:	91000015 	stw	r4,0(r18)
  407040:	1c800015 	stw	r18,0(r3)
  407044:	1025883a 	mov	r18,r2
  407048:	803feb1e 	bne	r16,zero,406ff8 <__pow5mult+0x48>
  40704c:	9005883a 	mov	r2,r18
  407050:	dfc00417 	ldw	ra,16(sp)
  407054:	dcc00317 	ldw	r19,12(sp)
  407058:	dc800217 	ldw	r18,8(sp)
  40705c:	dc400117 	ldw	r17,4(sp)
  407060:	dc000017 	ldw	r16,0(sp)
  407064:	dec00504 	addi	sp,sp,20
  407068:	f800283a 	ret
  40706c:	880b883a 	mov	r5,r17
  407070:	880d883a 	mov	r6,r17
  407074:	9809883a 	mov	r4,r19
  407078:	0406d580 	call	406d58 <__multiply>
  40707c:	88800015 	stw	r2,0(r17)
  407080:	10000015 	stw	zero,0(r2)
  407084:	1023883a 	mov	r17,r2
  407088:	003fde06 	br	407004 <__pow5mult+0x54>
  40708c:	1025883a 	mov	r18,r2
  407090:	003fd706 	br	406ff0 <__pow5mult+0x40>
  407094:	10bfffc4 	addi	r2,r2,-1
  407098:	1085883a 	add	r2,r2,r2
  40709c:	00c010b4 	movhi	r3,66
  4070a0:	18e64404 	addi	r3,r3,-26352
  4070a4:	1085883a 	add	r2,r2,r2
  4070a8:	1885883a 	add	r2,r3,r2
  4070ac:	11800017 	ldw	r6,0(r2)
  4070b0:	000f883a 	mov	r7,zero
  4070b4:	04069bc0 	call	4069bc <__multadd>
  4070b8:	1025883a 	mov	r18,r2
  4070bc:	003fc706 	br	406fdc <__pow5mult+0x2c>
  4070c0:	9809883a 	mov	r4,r19
  4070c4:	01409c44 	movi	r5,625
  4070c8:	0406d1c0 	call	406d1c <__i2b>
  4070cc:	98801215 	stw	r2,72(r19)
  4070d0:	1023883a 	mov	r17,r2
  4070d4:	10000015 	stw	zero,0(r2)
  4070d8:	003fca06 	br	407004 <__pow5mult+0x54>

004070dc <__lshift>:
  4070dc:	defff904 	addi	sp,sp,-28
  4070e0:	dd400515 	stw	r21,20(sp)
  4070e4:	dc400115 	stw	r17,4(sp)
  4070e8:	2d400417 	ldw	r21,16(r5)
  4070ec:	3023d17a 	srai	r17,r6,5
  4070f0:	28800217 	ldw	r2,8(r5)
  4070f4:	dd000415 	stw	r20,16(sp)
  4070f8:	8d6b883a 	add	r21,r17,r21
  4070fc:	dcc00315 	stw	r19,12(sp)
  407100:	dc800215 	stw	r18,8(sp)
  407104:	dc000015 	stw	r16,0(sp)
  407108:	dfc00615 	stw	ra,24(sp)
  40710c:	ac000044 	addi	r16,r21,1
  407110:	2825883a 	mov	r18,r5
  407114:	3029883a 	mov	r20,r6
  407118:	2027883a 	mov	r19,r4
  40711c:	29400117 	ldw	r5,4(r5)
  407120:	1400030e 	bge	r2,r16,407130 <__lshift+0x54>
  407124:	1085883a 	add	r2,r2,r2
  407128:	29400044 	addi	r5,r5,1
  40712c:	143ffd16 	blt	r2,r16,407124 <__lshift+0x48>
  407130:	9809883a 	mov	r4,r19
  407134:	04068ec0 	call	4068ec <_Balloc>
  407138:	10c00504 	addi	r3,r2,20
  40713c:	0440090e 	bge	zero,r17,407164 <__lshift+0x88>
  407140:	000f883a 	mov	r7,zero
  407144:	18000015 	stw	zero,0(r3)
  407148:	39c00044 	addi	r7,r7,1
  40714c:	18c00104 	addi	r3,r3,4
  407150:	3c7ffc1e 	bne	r7,r17,407144 <__lshift+0x68>
  407154:	38c00144 	addi	r3,r7,5
  407158:	18c7883a 	add	r3,r3,r3
  40715c:	18c7883a 	add	r3,r3,r3
  407160:	10c7883a 	add	r3,r2,r3
  407164:	92000417 	ldw	r8,16(r18)
  407168:	a18007cc 	andi	r6,r20,31
  40716c:	91c00504 	addi	r7,r18,20
  407170:	42000144 	addi	r8,r8,5
  407174:	4211883a 	add	r8,r8,r8
  407178:	4211883a 	add	r8,r8,r8
  40717c:	9211883a 	add	r8,r18,r8
  407180:	30002226 	beq	r6,zero,40720c <__lshift+0x130>
  407184:	02800804 	movi	r10,32
  407188:	5195c83a 	sub	r10,r10,r6
  40718c:	000b883a 	mov	r5,zero
  407190:	3a400017 	ldw	r9,0(r7)
  407194:	18c00104 	addi	r3,r3,4
  407198:	39c00104 	addi	r7,r7,4
  40719c:	4992983a 	sll	r9,r9,r6
  4071a0:	2a4ab03a 	or	r5,r5,r9
  4071a4:	197fff15 	stw	r5,-4(r3)
  4071a8:	397fff17 	ldw	r5,-4(r7)
  4071ac:	2a8ad83a 	srl	r5,r5,r10
  4071b0:	3a3ff736 	bltu	r7,r8,407190 <__lshift+0xb4>
  4071b4:	19400015 	stw	r5,0(r3)
  4071b8:	28000126 	beq	r5,zero,4071c0 <__lshift+0xe4>
  4071bc:	ac000084 	addi	r16,r21,2
  4071c0:	91000117 	ldw	r4,4(r18)
  4071c4:	98c01317 	ldw	r3,76(r19)
  4071c8:	843fffc4 	addi	r16,r16,-1
  4071cc:	2109883a 	add	r4,r4,r4
  4071d0:	2109883a 	add	r4,r4,r4
  4071d4:	1907883a 	add	r3,r3,r4
  4071d8:	19000017 	ldw	r4,0(r3)
  4071dc:	14000415 	stw	r16,16(r2)
  4071e0:	91000015 	stw	r4,0(r18)
  4071e4:	1c800015 	stw	r18,0(r3)
  4071e8:	dfc00617 	ldw	ra,24(sp)
  4071ec:	dd400517 	ldw	r21,20(sp)
  4071f0:	dd000417 	ldw	r20,16(sp)
  4071f4:	dcc00317 	ldw	r19,12(sp)
  4071f8:	dc800217 	ldw	r18,8(sp)
  4071fc:	dc400117 	ldw	r17,4(sp)
  407200:	dc000017 	ldw	r16,0(sp)
  407204:	dec00704 	addi	sp,sp,28
  407208:	f800283a 	ret
  40720c:	39400017 	ldw	r5,0(r7)
  407210:	18c00104 	addi	r3,r3,4
  407214:	39c00104 	addi	r7,r7,4
  407218:	197fff15 	stw	r5,-4(r3)
  40721c:	3a3fe82e 	bgeu	r7,r8,4071c0 <__lshift+0xe4>
  407220:	39400017 	ldw	r5,0(r7)
  407224:	18c00104 	addi	r3,r3,4
  407228:	39c00104 	addi	r7,r7,4
  40722c:	197fff15 	stw	r5,-4(r3)
  407230:	3a3ff636 	bltu	r7,r8,40720c <__lshift+0x130>
  407234:	003fe206 	br	4071c0 <__lshift+0xe4>

00407238 <__mcmp>:
  407238:	20800417 	ldw	r2,16(r4)
  40723c:	28c00417 	ldw	r3,16(r5)
  407240:	10c5c83a 	sub	r2,r2,r3
  407244:	10000f1e 	bne	r2,zero,407284 <__mcmp+0x4c>
  407248:	18c00144 	addi	r3,r3,5
  40724c:	18c7883a 	add	r3,r3,r3
  407250:	18c7883a 	add	r3,r3,r3
  407254:	21c00504 	addi	r7,r4,20
  407258:	28cb883a 	add	r5,r5,r3
  40725c:	20c9883a 	add	r4,r4,r3
  407260:	213fff04 	addi	r4,r4,-4
  407264:	297fff04 	addi	r5,r5,-4
  407268:	21800017 	ldw	r6,0(r4)
  40726c:	28c00017 	ldw	r3,0(r5)
  407270:	30c0021e 	bne	r6,r3,40727c <__mcmp+0x44>
  407274:	393ffa36 	bltu	r7,r4,407260 <__mcmp+0x28>
  407278:	f800283a 	ret
  40727c:	30c00236 	bltu	r6,r3,407288 <__mcmp+0x50>
  407280:	00800044 	movi	r2,1
  407284:	f800283a 	ret
  407288:	00bfffc4 	movi	r2,-1
  40728c:	f800283a 	ret

00407290 <__mdiff>:
  407290:	defffb04 	addi	sp,sp,-20
  407294:	dc000015 	stw	r16,0(sp)
  407298:	2821883a 	mov	r16,r5
  40729c:	dc800215 	stw	r18,8(sp)
  4072a0:	300b883a 	mov	r5,r6
  4072a4:	2025883a 	mov	r18,r4
  4072a8:	8009883a 	mov	r4,r16
  4072ac:	dc400115 	stw	r17,4(sp)
  4072b0:	dfc00415 	stw	ra,16(sp)
  4072b4:	dcc00315 	stw	r19,12(sp)
  4072b8:	3023883a 	mov	r17,r6
  4072bc:	04072380 	call	407238 <__mcmp>
  4072c0:	10005026 	beq	r2,zero,407404 <__mdiff+0x174>
  4072c4:	10004a16 	blt	r2,zero,4073f0 <__mdiff+0x160>
  4072c8:	0027883a 	mov	r19,zero
  4072cc:	81400117 	ldw	r5,4(r16)
  4072d0:	9009883a 	mov	r4,r18
  4072d4:	04068ec0 	call	4068ec <_Balloc>
  4072d8:	82400417 	ldw	r9,16(r16)
  4072dc:	89800417 	ldw	r6,16(r17)
  4072e0:	14c00315 	stw	r19,12(r2)
  4072e4:	4b800144 	addi	r14,r9,5
  4072e8:	31800144 	addi	r6,r6,5
  4072ec:	739d883a 	add	r14,r14,r14
  4072f0:	318d883a 	add	r6,r6,r6
  4072f4:	739d883a 	add	r14,r14,r14
  4072f8:	318d883a 	add	r6,r6,r6
  4072fc:	81c00504 	addi	r7,r16,20
  407300:	839d883a 	add	r14,r16,r14
  407304:	8a000504 	addi	r8,r17,20
  407308:	898d883a 	add	r6,r17,r6
  40730c:	10c00504 	addi	r3,r2,20
  407310:	0009883a 	mov	r4,zero
  407314:	3b000017 	ldw	r12,0(r7)
  407318:	42c00017 	ldw	r11,0(r8)
  40731c:	42000104 	addi	r8,r8,4
  407320:	62bfffcc 	andi	r10,r12,65535
  407324:	5b7fffcc 	andi	r13,r11,65535
  407328:	5109883a 	add	r4,r10,r4
  40732c:	2355c83a 	sub	r10,r4,r13
  407330:	5816d43a 	srli	r11,r11,16
  407334:	6008d43a 	srli	r4,r12,16
  407338:	501bd43a 	srai	r13,r10,16
  40733c:	1a80000d 	sth	r10,0(r3)
  407340:	22c9c83a 	sub	r4,r4,r11
  407344:	2349883a 	add	r4,r4,r13
  407348:	1900008d 	sth	r4,2(r3)
  40734c:	39c00104 	addi	r7,r7,4
  407350:	2009d43a 	srai	r4,r4,16
  407354:	18c00104 	addi	r3,r3,4
  407358:	41bfee36 	bltu	r8,r6,407314 <__mdiff+0x84>
  40735c:	180b883a 	mov	r5,r3
  407360:	3815883a 	mov	r10,r7
  407364:	3b80132e 	bgeu	r7,r14,4073b4 <__mdiff+0x124>
  407368:	3a000017 	ldw	r8,0(r7)
  40736c:	18c00104 	addi	r3,r3,4
  407370:	39c00104 	addi	r7,r7,4
  407374:	41bfffcc 	andi	r6,r8,65535
  407378:	310d883a 	add	r6,r6,r4
  40737c:	3009d43a 	srai	r4,r6,16
  407380:	4010d43a 	srli	r8,r8,16
  407384:	19bfff0d 	sth	r6,-4(r3)
  407388:	2209883a 	add	r4,r4,r8
  40738c:	193fff8d 	sth	r4,-2(r3)
  407390:	2009d43a 	srai	r4,r4,16
  407394:	3bbff436 	bltu	r7,r14,407368 <__mdiff+0xd8>
  407398:	0286303a 	nor	r3,zero,r10
  40739c:	1b87883a 	add	r3,r3,r14
  4073a0:	1806d0ba 	srli	r3,r3,2
  4073a4:	18c00044 	addi	r3,r3,1
  4073a8:	18c7883a 	add	r3,r3,r3
  4073ac:	18c7883a 	add	r3,r3,r3
  4073b0:	28c7883a 	add	r3,r5,r3
  4073b4:	193fff17 	ldw	r4,-4(r3)
  4073b8:	18ffff04 	addi	r3,r3,-4
  4073bc:	2000041e 	bne	r4,zero,4073d0 <__mdiff+0x140>
  4073c0:	18ffff04 	addi	r3,r3,-4
  4073c4:	19000017 	ldw	r4,0(r3)
  4073c8:	4a7fffc4 	addi	r9,r9,-1
  4073cc:	203ffc26 	beq	r4,zero,4073c0 <__mdiff+0x130>
  4073d0:	12400415 	stw	r9,16(r2)
  4073d4:	dfc00417 	ldw	ra,16(sp)
  4073d8:	dcc00317 	ldw	r19,12(sp)
  4073dc:	dc800217 	ldw	r18,8(sp)
  4073e0:	dc400117 	ldw	r17,4(sp)
  4073e4:	dc000017 	ldw	r16,0(sp)
  4073e8:	dec00504 	addi	sp,sp,20
  4073ec:	f800283a 	ret
  4073f0:	8005883a 	mov	r2,r16
  4073f4:	04c00044 	movi	r19,1
  4073f8:	8821883a 	mov	r16,r17
  4073fc:	1023883a 	mov	r17,r2
  407400:	003fb206 	br	4072cc <__mdiff+0x3c>
  407404:	9009883a 	mov	r4,r18
  407408:	000b883a 	mov	r5,zero
  40740c:	04068ec0 	call	4068ec <_Balloc>
  407410:	00c00044 	movi	r3,1
  407414:	10c00415 	stw	r3,16(r2)
  407418:	10000515 	stw	zero,20(r2)
  40741c:	dfc00417 	ldw	ra,16(sp)
  407420:	dcc00317 	ldw	r19,12(sp)
  407424:	dc800217 	ldw	r18,8(sp)
  407428:	dc400117 	ldw	r17,4(sp)
  40742c:	dc000017 	ldw	r16,0(sp)
  407430:	dec00504 	addi	sp,sp,20
  407434:	f800283a 	ret

00407438 <__ulp>:
  407438:	295ffc2c 	andhi	r5,r5,32752
  40743c:	00bf3034 	movhi	r2,64704
  407440:	2887883a 	add	r3,r5,r2
  407444:	00c0020e 	bge	zero,r3,407450 <__ulp+0x18>
  407448:	0005883a 	mov	r2,zero
  40744c:	f800283a 	ret
  407450:	00c7c83a 	sub	r3,zero,r3
  407454:	1805d53a 	srai	r2,r3,20
  407458:	00c004c4 	movi	r3,19
  40745c:	18800a0e 	bge	r3,r2,407488 <__ulp+0x50>
  407460:	01000c84 	movi	r4,50
  407464:	0007883a 	mov	r3,zero
  407468:	20800516 	blt	r4,r2,407480 <__ulp+0x48>
  40746c:	01000cc4 	movi	r4,51
  407470:	2085c83a 	sub	r2,r4,r2
  407474:	01000044 	movi	r4,1
  407478:	2084983a 	sll	r2,r4,r2
  40747c:	f800283a 	ret
  407480:	00800044 	movi	r2,1
  407484:	f800283a 	ret
  407488:	00c00234 	movhi	r3,8
  40748c:	1887d83a 	sra	r3,r3,r2
  407490:	0005883a 	mov	r2,zero
  407494:	f800283a 	ret

00407498 <__b2d>:
  407498:	defffa04 	addi	sp,sp,-24
  40749c:	dc000015 	stw	r16,0(sp)
  4074a0:	24000417 	ldw	r16,16(r4)
  4074a4:	dc400115 	stw	r17,4(sp)
  4074a8:	dcc00315 	stw	r19,12(sp)
  4074ac:	84000144 	addi	r16,r16,5
  4074b0:	8421883a 	add	r16,r16,r16
  4074b4:	8421883a 	add	r16,r16,r16
  4074b8:	2421883a 	add	r16,r4,r16
  4074bc:	847fff17 	ldw	r17,-4(r16)
  4074c0:	24c00504 	addi	r19,r4,20
  4074c4:	dd000415 	stw	r20,16(sp)
  4074c8:	8809883a 	mov	r4,r17
  4074cc:	dc800215 	stw	r18,8(sp)
  4074d0:	2829883a 	mov	r20,r5
  4074d4:	dfc00515 	stw	ra,20(sp)
  4074d8:	0406c040 	call	406c04 <__hi0bits>
  4074dc:	00c00804 	movi	r3,32
  4074e0:	1887c83a 	sub	r3,r3,r2
  4074e4:	a0c00015 	stw	r3,0(r20)
  4074e8:	00c00284 	movi	r3,10
  4074ec:	84bfff04 	addi	r18,r16,-4
  4074f0:	18801216 	blt	r3,r2,40753c <__b2d+0xa4>
  4074f4:	010002c4 	movi	r4,11
  4074f8:	2089c83a 	sub	r4,r4,r2
  4074fc:	8906d83a 	srl	r3,r17,r4
  407500:	18cffc34 	orhi	r3,r3,16368
  407504:	9c80322e 	bgeu	r19,r18,4075d0 <__b2d+0x138>
  407508:	817ffe17 	ldw	r5,-8(r16)
  40750c:	2908d83a 	srl	r4,r5,r4
  407510:	10800544 	addi	r2,r2,21
  407514:	88a2983a 	sll	r17,r17,r2
  407518:	2444b03a 	or	r2,r4,r17
  40751c:	dfc00517 	ldw	ra,20(sp)
  407520:	dd000417 	ldw	r20,16(sp)
  407524:	dcc00317 	ldw	r19,12(sp)
  407528:	dc800217 	ldw	r18,8(sp)
  40752c:	dc400117 	ldw	r17,4(sp)
  407530:	dc000017 	ldw	r16,0(sp)
  407534:	dec00604 	addi	sp,sp,24
  407538:	f800283a 	ret
  40753c:	9c801636 	bltu	r19,r18,407598 <__b2d+0x100>
  407540:	113ffd44 	addi	r4,r2,-11
  407544:	000b883a 	mov	r5,zero
  407548:	20001726 	beq	r4,zero,4075a8 <__b2d+0x110>
  40754c:	00c00ac4 	movi	r3,43
  407550:	1885c83a 	sub	r2,r3,r2
  407554:	8906983a 	sll	r3,r17,r4
  407558:	288cd83a 	srl	r6,r5,r2
  40755c:	18cffc34 	orhi	r3,r3,16368
  407560:	1986b03a 	or	r3,r3,r6
  407564:	9c801c2e 	bgeu	r19,r18,4075d8 <__b2d+0x140>
  407568:	91bfff17 	ldw	r6,-4(r18)
  40756c:	3084d83a 	srl	r2,r6,r2
  407570:	2908983a 	sll	r4,r5,r4
  407574:	1104b03a 	or	r2,r2,r4
  407578:	dfc00517 	ldw	ra,20(sp)
  40757c:	dd000417 	ldw	r20,16(sp)
  407580:	dcc00317 	ldw	r19,12(sp)
  407584:	dc800217 	ldw	r18,8(sp)
  407588:	dc400117 	ldw	r17,4(sp)
  40758c:	dc000017 	ldw	r16,0(sp)
  407590:	dec00604 	addi	sp,sp,24
  407594:	f800283a 	ret
  407598:	113ffd44 	addi	r4,r2,-11
  40759c:	84bffe04 	addi	r18,r16,-8
  4075a0:	817ffe17 	ldw	r5,-8(r16)
  4075a4:	203fe91e 	bne	r4,zero,40754c <__b2d+0xb4>
  4075a8:	88cffc34 	orhi	r3,r17,16368
  4075ac:	2805883a 	mov	r2,r5
  4075b0:	dfc00517 	ldw	ra,20(sp)
  4075b4:	dd000417 	ldw	r20,16(sp)
  4075b8:	dcc00317 	ldw	r19,12(sp)
  4075bc:	dc800217 	ldw	r18,8(sp)
  4075c0:	dc400117 	ldw	r17,4(sp)
  4075c4:	dc000017 	ldw	r16,0(sp)
  4075c8:	dec00604 	addi	sp,sp,24
  4075cc:	f800283a 	ret
  4075d0:	0009883a 	mov	r4,zero
  4075d4:	003fce06 	br	407510 <__b2d+0x78>
  4075d8:	0005883a 	mov	r2,zero
  4075dc:	003fe406 	br	407570 <__b2d+0xd8>

004075e0 <__d2b>:
  4075e0:	defff804 	addi	sp,sp,-32
  4075e4:	dc400315 	stw	r17,12(sp)
  4075e8:	3023883a 	mov	r17,r6
  4075ec:	dc800415 	stw	r18,16(sp)
  4075f0:	8824907a 	slli	r18,r17,1
  4075f4:	dcc00515 	stw	r19,20(sp)
  4075f8:	2827883a 	mov	r19,r5
  4075fc:	9024d57a 	srli	r18,r18,21
  407600:	01400044 	movi	r5,1
  407604:	dd000615 	stw	r20,24(sp)
  407608:	dc000215 	stw	r16,8(sp)
  40760c:	dfc00715 	stw	ra,28(sp)
  407610:	3829883a 	mov	r20,r7
  407614:	04068ec0 	call	4068ec <_Balloc>
  407618:	1021883a 	mov	r16,r2
  40761c:	00800434 	movhi	r2,16
  407620:	10bfffc4 	addi	r2,r2,-1
  407624:	88a2703a 	and	r17,r17,r2
  407628:	90000126 	beq	r18,zero,407630 <__d2b+0x50>
  40762c:	8c400434 	orhi	r17,r17,16
  407630:	dc400015 	stw	r17,0(sp)
  407634:	98002226 	beq	r19,zero,4076c0 <__d2b+0xe0>
  407638:	d9000104 	addi	r4,sp,4
  40763c:	dcc00115 	stw	r19,4(sp)
  407640:	0406c6c0 	call	406c6c <__lo0bits>
  407644:	d8c00017 	ldw	r3,0(sp)
  407648:	10002d1e 	bne	r2,zero,407700 <__d2b+0x120>
  40764c:	d9000117 	ldw	r4,4(sp)
  407650:	81000515 	stw	r4,20(r16)
  407654:	1823003a 	cmpeq	r17,r3,zero
  407658:	01000084 	movi	r4,2
  40765c:	2463c83a 	sub	r17,r4,r17
  407660:	80c00615 	stw	r3,24(r16)
  407664:	84400415 	stw	r17,16(r16)
  407668:	90001d1e 	bne	r18,zero,4076e0 <__d2b+0x100>
  40766c:	88c00104 	addi	r3,r17,4
  407670:	18c7883a 	add	r3,r3,r3
  407674:	18c7883a 	add	r3,r3,r3
  407678:	80c7883a 	add	r3,r16,r3
  40767c:	19000017 	ldw	r4,0(r3)
  407680:	10bef384 	addi	r2,r2,-1074
  407684:	a0800015 	stw	r2,0(r20)
  407688:	0406c040 	call	406c04 <__hi0bits>
  40768c:	8822917a 	slli	r17,r17,5
  407690:	d8c00817 	ldw	r3,32(sp)
  407694:	8885c83a 	sub	r2,r17,r2
  407698:	18800015 	stw	r2,0(r3)
  40769c:	8005883a 	mov	r2,r16
  4076a0:	dfc00717 	ldw	ra,28(sp)
  4076a4:	dd000617 	ldw	r20,24(sp)
  4076a8:	dcc00517 	ldw	r19,20(sp)
  4076ac:	dc800417 	ldw	r18,16(sp)
  4076b0:	dc400317 	ldw	r17,12(sp)
  4076b4:	dc000217 	ldw	r16,8(sp)
  4076b8:	dec00804 	addi	sp,sp,32
  4076bc:	f800283a 	ret
  4076c0:	d809883a 	mov	r4,sp
  4076c4:	0406c6c0 	call	406c6c <__lo0bits>
  4076c8:	d8c00017 	ldw	r3,0(sp)
  4076cc:	04400044 	movi	r17,1
  4076d0:	84400415 	stw	r17,16(r16)
  4076d4:	80c00515 	stw	r3,20(r16)
  4076d8:	10800804 	addi	r2,r2,32
  4076dc:	903fe326 	beq	r18,zero,40766c <__d2b+0x8c>
  4076e0:	00c00d44 	movi	r3,53
  4076e4:	94bef344 	addi	r18,r18,-1075
  4076e8:	90a5883a 	add	r18,r18,r2
  4076ec:	1885c83a 	sub	r2,r3,r2
  4076f0:	d8c00817 	ldw	r3,32(sp)
  4076f4:	a4800015 	stw	r18,0(r20)
  4076f8:	18800015 	stw	r2,0(r3)
  4076fc:	003fe706 	br	40769c <__d2b+0xbc>
  407700:	01000804 	movi	r4,32
  407704:	2089c83a 	sub	r4,r4,r2
  407708:	1908983a 	sll	r4,r3,r4
  40770c:	d9400117 	ldw	r5,4(sp)
  407710:	1886d83a 	srl	r3,r3,r2
  407714:	2148b03a 	or	r4,r4,r5
  407718:	81000515 	stw	r4,20(r16)
  40771c:	d8c00015 	stw	r3,0(sp)
  407720:	003fcc06 	br	407654 <__d2b+0x74>

00407724 <__ratio>:
  407724:	defff904 	addi	sp,sp,-28
  407728:	dc400315 	stw	r17,12(sp)
  40772c:	2823883a 	mov	r17,r5
  407730:	d9400104 	addi	r5,sp,4
  407734:	dfc00615 	stw	ra,24(sp)
  407738:	dcc00515 	stw	r19,20(sp)
  40773c:	dc800415 	stw	r18,16(sp)
  407740:	2027883a 	mov	r19,r4
  407744:	dc000215 	stw	r16,8(sp)
  407748:	04074980 	call	407498 <__b2d>
  40774c:	8809883a 	mov	r4,r17
  407750:	d80b883a 	mov	r5,sp
  407754:	1025883a 	mov	r18,r2
  407758:	1821883a 	mov	r16,r3
  40775c:	04074980 	call	407498 <__b2d>
  407760:	99400417 	ldw	r5,16(r19)
  407764:	89000417 	ldw	r4,16(r17)
  407768:	d9800117 	ldw	r6,4(sp)
  40776c:	2909c83a 	sub	r4,r5,r4
  407770:	d9400017 	ldw	r5,0(sp)
  407774:	2008917a 	slli	r4,r4,5
  407778:	314bc83a 	sub	r5,r6,r5
  40777c:	290b883a 	add	r5,r5,r4
  407780:	01400e0e 	bge	zero,r5,4077bc <__ratio+0x98>
  407784:	280a953a 	slli	r5,r5,20
  407788:	2c21883a 	add	r16,r5,r16
  40778c:	9009883a 	mov	r4,r18
  407790:	800b883a 	mov	r5,r16
  407794:	100d883a 	mov	r6,r2
  407798:	180f883a 	mov	r7,r3
  40779c:	04099d80 	call	4099d8 <__divdf3>
  4077a0:	dfc00617 	ldw	ra,24(sp)
  4077a4:	dcc00517 	ldw	r19,20(sp)
  4077a8:	dc800417 	ldw	r18,16(sp)
  4077ac:	dc400317 	ldw	r17,12(sp)
  4077b0:	dc000217 	ldw	r16,8(sp)
  4077b4:	dec00704 	addi	sp,sp,28
  4077b8:	f800283a 	ret
  4077bc:	280a953a 	slli	r5,r5,20
  4077c0:	1947c83a 	sub	r3,r3,r5
  4077c4:	003ff106 	br	40778c <__ratio+0x68>

004077c8 <_mprec_log10>:
  4077c8:	defffe04 	addi	sp,sp,-8
  4077cc:	dc000015 	stw	r16,0(sp)
  4077d0:	dfc00115 	stw	ra,4(sp)
  4077d4:	008005c4 	movi	r2,23
  4077d8:	2021883a 	mov	r16,r4
  4077dc:	11000d0e 	bge	r2,r4,407814 <_mprec_log10+0x4c>
  4077e0:	0005883a 	mov	r2,zero
  4077e4:	00cffc34 	movhi	r3,16368
  4077e8:	843fffc4 	addi	r16,r16,-1
  4077ec:	1009883a 	mov	r4,r2
  4077f0:	180b883a 	mov	r5,r3
  4077f4:	000d883a 	mov	r6,zero
  4077f8:	01d00934 	movhi	r7,16420
  4077fc:	04096f40 	call	4096f4 <__muldf3>
  407800:	803ff91e 	bne	r16,zero,4077e8 <_mprec_log10+0x20>
  407804:	dfc00117 	ldw	ra,4(sp)
  407808:	dc000017 	ldw	r16,0(sp)
  40780c:	dec00204 	addi	sp,sp,8
  407810:	f800283a 	ret
  407814:	202090fa 	slli	r16,r4,3
  407818:	008010b4 	movhi	r2,66
  40781c:	10a61204 	addi	r2,r2,-26552
  407820:	1421883a 	add	r16,r2,r16
  407824:	80800017 	ldw	r2,0(r16)
  407828:	80c00117 	ldw	r3,4(r16)
  40782c:	dfc00117 	ldw	ra,4(sp)
  407830:	dc000017 	ldw	r16,0(sp)
  407834:	dec00204 	addi	sp,sp,8
  407838:	f800283a 	ret

0040783c <__copybits>:
  40783c:	297fffc4 	addi	r5,r5,-1
  407840:	31c00417 	ldw	r7,16(r6)
  407844:	2811d17a 	srai	r8,r5,5
  407848:	30800504 	addi	r2,r6,20
  40784c:	39c00144 	addi	r7,r7,5
  407850:	42000044 	addi	r8,r8,1
  407854:	39cf883a 	add	r7,r7,r7
  407858:	4211883a 	add	r8,r8,r8
  40785c:	39cf883a 	add	r7,r7,r7
  407860:	4211883a 	add	r8,r8,r8
  407864:	31cf883a 	add	r7,r6,r7
  407868:	2211883a 	add	r8,r4,r8
  40786c:	11c00d2e 	bgeu	r2,r7,4078a4 <__copybits+0x68>
  407870:	2007883a 	mov	r3,r4
  407874:	11400017 	ldw	r5,0(r2)
  407878:	18c00104 	addi	r3,r3,4
  40787c:	10800104 	addi	r2,r2,4
  407880:	197fff15 	stw	r5,-4(r3)
  407884:	11fffb36 	bltu	r2,r7,407874 <__copybits+0x38>
  407888:	3985c83a 	sub	r2,r7,r6
  40788c:	10bffac4 	addi	r2,r2,-21
  407890:	1004d0ba 	srli	r2,r2,2
  407894:	10800044 	addi	r2,r2,1
  407898:	1085883a 	add	r2,r2,r2
  40789c:	1085883a 	add	r2,r2,r2
  4078a0:	2089883a 	add	r4,r4,r2
  4078a4:	2200032e 	bgeu	r4,r8,4078b4 <__copybits+0x78>
  4078a8:	20000015 	stw	zero,0(r4)
  4078ac:	21000104 	addi	r4,r4,4
  4078b0:	223ffd36 	bltu	r4,r8,4078a8 <__copybits+0x6c>
  4078b4:	f800283a 	ret

004078b8 <__any_on>:
  4078b8:	21800417 	ldw	r6,16(r4)
  4078bc:	2805d17a 	srai	r2,r5,5
  4078c0:	20c00504 	addi	r3,r4,20
  4078c4:	30800f0e 	bge	r6,r2,407904 <__any_on+0x4c>
  4078c8:	3005883a 	mov	r2,r6
  4078cc:	10800144 	addi	r2,r2,5
  4078d0:	1085883a 	add	r2,r2,r2
  4078d4:	1085883a 	add	r2,r2,r2
  4078d8:	2089883a 	add	r4,r4,r2
  4078dc:	1900152e 	bgeu	r3,r4,407934 <__any_on+0x7c>
  4078e0:	20bfff17 	ldw	r2,-4(r4)
  4078e4:	213fff04 	addi	r4,r4,-4
  4078e8:	1000041e 	bne	r2,zero,4078fc <__any_on+0x44>
  4078ec:	1900112e 	bgeu	r3,r4,407934 <__any_on+0x7c>
  4078f0:	213fff04 	addi	r4,r4,-4
  4078f4:	20800017 	ldw	r2,0(r4)
  4078f8:	103ffc26 	beq	r2,zero,4078ec <__any_on+0x34>
  4078fc:	00800044 	movi	r2,1
  407900:	f800283a 	ret
  407904:	11bff10e 	bge	r2,r6,4078cc <__any_on+0x14>
  407908:	294007cc 	andi	r5,r5,31
  40790c:	283fef26 	beq	r5,zero,4078cc <__any_on+0x14>
  407910:	11800144 	addi	r6,r2,5
  407914:	318d883a 	add	r6,r6,r6
  407918:	318d883a 	add	r6,r6,r6
  40791c:	218d883a 	add	r6,r4,r6
  407920:	31800017 	ldw	r6,0(r6)
  407924:	314ed83a 	srl	r7,r6,r5
  407928:	394a983a 	sll	r5,r7,r5
  40792c:	29bff31e 	bne	r5,r6,4078fc <__any_on+0x44>
  407930:	003fe606 	br	4078cc <__any_on+0x14>
  407934:	0005883a 	mov	r2,zero
  407938:	f800283a 	ret

0040793c <_realloc_r>:
  40793c:	defff504 	addi	sp,sp,-44
  407940:	dd400615 	stw	r21,24(sp)
  407944:	dc800315 	stw	r18,12(sp)
  407948:	dc000115 	stw	r16,4(sp)
  40794c:	dfc00a15 	stw	ra,40(sp)
  407950:	df000915 	stw	fp,36(sp)
  407954:	ddc00815 	stw	r23,32(sp)
  407958:	dd800715 	stw	r22,28(sp)
  40795c:	dd000515 	stw	r20,20(sp)
  407960:	dcc00415 	stw	r19,16(sp)
  407964:	dc400215 	stw	r17,8(sp)
  407968:	2821883a 	mov	r16,r5
  40796c:	202b883a 	mov	r21,r4
  407970:	3025883a 	mov	r18,r6
  407974:	28009626 	beq	r5,zero,407bd0 <_realloc_r+0x294>
  407978:	040b9080 	call	40b908 <__malloc_lock>
  40797c:	80bfff17 	ldw	r2,-4(r16)
  407980:	04ffff04 	movi	r19,-4
  407984:	90c002c4 	addi	r3,r18,11
  407988:	01000584 	movi	r4,22
  40798c:	85bffe04 	addi	r22,r16,-8
  407990:	14e6703a 	and	r19,r2,r19
  407994:	20c0372e 	bgeu	r4,r3,407a74 <_realloc_r+0x138>
  407998:	047ffe04 	movi	r17,-8
  40799c:	1c62703a 	and	r17,r3,r17
  4079a0:	8807883a 	mov	r3,r17
  4079a4:	88005a16 	blt	r17,zero,407b10 <_realloc_r+0x1d4>
  4079a8:	8c805936 	bltu	r17,r18,407b10 <_realloc_r+0x1d4>
  4079ac:	98c0340e 	bge	r19,r3,407a80 <_realloc_r+0x144>
  4079b0:	070010b4 	movhi	fp,66
  4079b4:	e727fd04 	addi	fp,fp,-24588
  4079b8:	e1400217 	ldw	r5,8(fp)
  4079bc:	b4c9883a 	add	r4,r22,r19
  4079c0:	29009026 	beq	r5,r4,407c04 <_realloc_r+0x2c8>
  4079c4:	21800117 	ldw	r6,4(r4)
  4079c8:	01ffff84 	movi	r7,-2
  4079cc:	31ce703a 	and	r7,r6,r7
  4079d0:	21cf883a 	add	r7,r4,r7
  4079d4:	39c00117 	ldw	r7,4(r7)
  4079d8:	39c0004c 	andi	r7,r7,1
  4079dc:	38004326 	beq	r7,zero,407aec <_realloc_r+0x1b0>
  4079e0:	000d883a 	mov	r6,zero
  4079e4:	0009883a 	mov	r4,zero
  4079e8:	1080004c 	andi	r2,r2,1
  4079ec:	10005a1e 	bne	r2,zero,407b58 <_realloc_r+0x21c>
  4079f0:	85fffe17 	ldw	r23,-8(r16)
  4079f4:	00bfff04 	movi	r2,-4
  4079f8:	b5efc83a 	sub	r23,r22,r23
  4079fc:	b9c00117 	ldw	r7,4(r23)
  407a00:	388e703a 	and	r7,r7,r2
  407a04:	3ccf883a 	add	r7,r7,r19
  407a08:	20005226 	beq	r4,zero,407b54 <_realloc_r+0x218>
  407a0c:	31e9883a 	add	r20,r6,r7
  407a10:	2140c726 	beq	r4,r5,407d30 <_realloc_r+0x3f4>
  407a14:	a0c04f16 	blt	r20,r3,407b54 <_realloc_r+0x218>
  407a18:	20800317 	ldw	r2,12(r4)
  407a1c:	20c00217 	ldw	r3,8(r4)
  407a20:	99bfff04 	addi	r6,r19,-4
  407a24:	01000904 	movi	r4,36
  407a28:	18800315 	stw	r2,12(r3)
  407a2c:	10c00215 	stw	r3,8(r2)
  407a30:	b8c00217 	ldw	r3,8(r23)
  407a34:	b8800317 	ldw	r2,12(r23)
  407a38:	bc800204 	addi	r18,r23,8
  407a3c:	18800315 	stw	r2,12(r3)
  407a40:	10c00215 	stw	r3,8(r2)
  407a44:	2180ed36 	bltu	r4,r6,407dfc <_realloc_r+0x4c0>
  407a48:	008004c4 	movi	r2,19
  407a4c:	11809b2e 	bgeu	r2,r6,407cbc <_realloc_r+0x380>
  407a50:	80800017 	ldw	r2,0(r16)
  407a54:	b8800215 	stw	r2,8(r23)
  407a58:	80800117 	ldw	r2,4(r16)
  407a5c:	b8800315 	stw	r2,12(r23)
  407a60:	008006c4 	movi	r2,27
  407a64:	1180f936 	bltu	r2,r6,407e4c <_realloc_r+0x510>
  407a68:	b8800404 	addi	r2,r23,16
  407a6c:	80c00204 	addi	r3,r16,8
  407a70:	00009406 	br	407cc4 <_realloc_r+0x388>
  407a74:	00c00404 	movi	r3,16
  407a78:	1823883a 	mov	r17,r3
  407a7c:	003fca06 	br	4079a8 <_realloc_r+0x6c>
  407a80:	9829883a 	mov	r20,r19
  407a84:	a447c83a 	sub	r3,r20,r17
  407a88:	010003c4 	movi	r4,15
  407a8c:	1080004c 	andi	r2,r2,1
  407a90:	20c02336 	bltu	r4,r3,407b20 <_realloc_r+0x1e4>
  407a94:	1504b03a 	or	r2,r2,r20
  407a98:	b0800115 	stw	r2,4(r22)
  407a9c:	b52d883a 	add	r22,r22,r20
  407aa0:	b0800117 	ldw	r2,4(r22)
  407aa4:	10800054 	ori	r2,r2,1
  407aa8:	b0800115 	stw	r2,4(r22)
  407aac:	a809883a 	mov	r4,r21
  407ab0:	040ba740 	call	40ba74 <__malloc_unlock>
  407ab4:	8025883a 	mov	r18,r16
  407ab8:	9005883a 	mov	r2,r18
  407abc:	dfc00a17 	ldw	ra,40(sp)
  407ac0:	df000917 	ldw	fp,36(sp)
  407ac4:	ddc00817 	ldw	r23,32(sp)
  407ac8:	dd800717 	ldw	r22,28(sp)
  407acc:	dd400617 	ldw	r21,24(sp)
  407ad0:	dd000517 	ldw	r20,20(sp)
  407ad4:	dcc00417 	ldw	r19,16(sp)
  407ad8:	dc800317 	ldw	r18,12(sp)
  407adc:	dc400217 	ldw	r17,8(sp)
  407ae0:	dc000117 	ldw	r16,4(sp)
  407ae4:	dec00b04 	addi	sp,sp,44
  407ae8:	f800283a 	ret
  407aec:	01ffff04 	movi	r7,-4
  407af0:	31cc703a 	and	r6,r6,r7
  407af4:	34e9883a 	add	r20,r6,r19
  407af8:	a0ffbb16 	blt	r20,r3,4079e8 <_realloc_r+0xac>
  407afc:	20c00317 	ldw	r3,12(r4)
  407b00:	21000217 	ldw	r4,8(r4)
  407b04:	20c00315 	stw	r3,12(r4)
  407b08:	19000215 	stw	r4,8(r3)
  407b0c:	003fdd06 	br	407a84 <_realloc_r+0x148>
  407b10:	00800304 	movi	r2,12
  407b14:	a8800015 	stw	r2,0(r21)
  407b18:	0025883a 	mov	r18,zero
  407b1c:	003fe606 	br	407ab8 <_realloc_r+0x17c>
  407b20:	1444b03a 	or	r2,r2,r17
  407b24:	b0800115 	stw	r2,4(r22)
  407b28:	b44b883a 	add	r5,r22,r17
  407b2c:	18800054 	ori	r2,r3,1
  407b30:	28800115 	stw	r2,4(r5)
  407b34:	28c7883a 	add	r3,r5,r3
  407b38:	18800117 	ldw	r2,4(r3)
  407b3c:	a809883a 	mov	r4,r21
  407b40:	29400204 	addi	r5,r5,8
  407b44:	10800054 	ori	r2,r2,1
  407b48:	18800115 	stw	r2,4(r3)
  407b4c:	04052700 	call	405270 <_free_r>
  407b50:	003fd606 	br	407aac <_realloc_r+0x170>
  407b54:	38c0330e 	bge	r7,r3,407c24 <_realloc_r+0x2e8>
  407b58:	900b883a 	mov	r5,r18
  407b5c:	a809883a 	mov	r4,r21
  407b60:	0405e080 	call	405e08 <_malloc_r>
  407b64:	1025883a 	mov	r18,r2
  407b68:	10001626 	beq	r2,zero,407bc4 <_realloc_r+0x288>
  407b6c:	80bfff17 	ldw	r2,-4(r16)
  407b70:	00ffff84 	movi	r3,-2
  407b74:	913ffe04 	addi	r4,r18,-8
  407b78:	10c6703a 	and	r3,r2,r3
  407b7c:	b0c7883a 	add	r3,r22,r3
  407b80:	20c09926 	beq	r4,r3,407de8 <_realloc_r+0x4ac>
  407b84:	99bfff04 	addi	r6,r19,-4
  407b88:	00800904 	movi	r2,36
  407b8c:	11806436 	bltu	r2,r6,407d20 <_realloc_r+0x3e4>
  407b90:	00c004c4 	movi	r3,19
  407b94:	19804036 	bltu	r3,r6,407c98 <_realloc_r+0x35c>
  407b98:	9005883a 	mov	r2,r18
  407b9c:	8007883a 	mov	r3,r16
  407ba0:	19000017 	ldw	r4,0(r3)
  407ba4:	11000015 	stw	r4,0(r2)
  407ba8:	19000117 	ldw	r4,4(r3)
  407bac:	11000115 	stw	r4,4(r2)
  407bb0:	18c00217 	ldw	r3,8(r3)
  407bb4:	10c00215 	stw	r3,8(r2)
  407bb8:	a809883a 	mov	r4,r21
  407bbc:	800b883a 	mov	r5,r16
  407bc0:	04052700 	call	405270 <_free_r>
  407bc4:	a809883a 	mov	r4,r21
  407bc8:	040ba740 	call	40ba74 <__malloc_unlock>
  407bcc:	003fba06 	br	407ab8 <_realloc_r+0x17c>
  407bd0:	300b883a 	mov	r5,r6
  407bd4:	dfc00a17 	ldw	ra,40(sp)
  407bd8:	df000917 	ldw	fp,36(sp)
  407bdc:	ddc00817 	ldw	r23,32(sp)
  407be0:	dd800717 	ldw	r22,28(sp)
  407be4:	dd400617 	ldw	r21,24(sp)
  407be8:	dd000517 	ldw	r20,20(sp)
  407bec:	dcc00417 	ldw	r19,16(sp)
  407bf0:	dc800317 	ldw	r18,12(sp)
  407bf4:	dc400217 	ldw	r17,8(sp)
  407bf8:	dc000117 	ldw	r16,4(sp)
  407bfc:	dec00b04 	addi	sp,sp,44
  407c00:	0405e081 	jmpi	405e08 <_malloc_r>
  407c04:	29800117 	ldw	r6,4(r5)
  407c08:	013fff04 	movi	r4,-4
  407c0c:	89c00404 	addi	r7,r17,16
  407c10:	310c703a 	and	r6,r6,r4
  407c14:	34c9883a 	add	r4,r6,r19
  407c18:	21c0340e 	bge	r4,r7,407cec <_realloc_r+0x3b0>
  407c1c:	2809883a 	mov	r4,r5
  407c20:	003f7106 	br	4079e8 <_realloc_r+0xac>
  407c24:	b8800317 	ldw	r2,12(r23)
  407c28:	b8c00217 	ldw	r3,8(r23)
  407c2c:	99bfff04 	addi	r6,r19,-4
  407c30:	01000904 	movi	r4,36
  407c34:	18800315 	stw	r2,12(r3)
  407c38:	10c00215 	stw	r3,8(r2)
  407c3c:	bc800204 	addi	r18,r23,8
  407c40:	21807836 	bltu	r4,r6,407e24 <_realloc_r+0x4e8>
  407c44:	008004c4 	movi	r2,19
  407c48:	1180732e 	bgeu	r2,r6,407e18 <_realloc_r+0x4dc>
  407c4c:	80800017 	ldw	r2,0(r16)
  407c50:	b8800215 	stw	r2,8(r23)
  407c54:	80800117 	ldw	r2,4(r16)
  407c58:	b8800315 	stw	r2,12(r23)
  407c5c:	008006c4 	movi	r2,27
  407c60:	11808936 	bltu	r2,r6,407e88 <_realloc_r+0x54c>
  407c64:	b8800404 	addi	r2,r23,16
  407c68:	80c00204 	addi	r3,r16,8
  407c6c:	19000017 	ldw	r4,0(r3)
  407c70:	9021883a 	mov	r16,r18
  407c74:	3829883a 	mov	r20,r7
  407c78:	11000015 	stw	r4,0(r2)
  407c7c:	19000117 	ldw	r4,4(r3)
  407c80:	b82d883a 	mov	r22,r23
  407c84:	11000115 	stw	r4,4(r2)
  407c88:	18c00217 	ldw	r3,8(r3)
  407c8c:	10c00215 	stw	r3,8(r2)
  407c90:	b8800117 	ldw	r2,4(r23)
  407c94:	003f7b06 	br	407a84 <_realloc_r+0x148>
  407c98:	80c00017 	ldw	r3,0(r16)
  407c9c:	90c00015 	stw	r3,0(r18)
  407ca0:	80c00117 	ldw	r3,4(r16)
  407ca4:	90c00115 	stw	r3,4(r18)
  407ca8:	00c006c4 	movi	r3,27
  407cac:	19804636 	bltu	r3,r6,407dc8 <_realloc_r+0x48c>
  407cb0:	90800204 	addi	r2,r18,8
  407cb4:	80c00204 	addi	r3,r16,8
  407cb8:	003fb906 	br	407ba0 <_realloc_r+0x264>
  407cbc:	9005883a 	mov	r2,r18
  407cc0:	8007883a 	mov	r3,r16
  407cc4:	19000017 	ldw	r4,0(r3)
  407cc8:	9021883a 	mov	r16,r18
  407ccc:	b82d883a 	mov	r22,r23
  407cd0:	11000015 	stw	r4,0(r2)
  407cd4:	19000117 	ldw	r4,4(r3)
  407cd8:	11000115 	stw	r4,4(r2)
  407cdc:	18c00217 	ldw	r3,8(r3)
  407ce0:	10c00215 	stw	r3,8(r2)
  407ce4:	b8800117 	ldw	r2,4(r23)
  407ce8:	003f6606 	br	407a84 <_realloc_r+0x148>
  407cec:	2445c83a 	sub	r2,r4,r17
  407cf0:	b46d883a 	add	r22,r22,r17
  407cf4:	10800054 	ori	r2,r2,1
  407cf8:	b0800115 	stw	r2,4(r22)
  407cfc:	80bfff17 	ldw	r2,-4(r16)
  407d00:	a809883a 	mov	r4,r21
  407d04:	e5800215 	stw	r22,8(fp)
  407d08:	1080004c 	andi	r2,r2,1
  407d0c:	88a2b03a 	or	r17,r17,r2
  407d10:	847fff15 	stw	r17,-4(r16)
  407d14:	040ba740 	call	40ba74 <__malloc_unlock>
  407d18:	8025883a 	mov	r18,r16
  407d1c:	003f6606 	br	407ab8 <_realloc_r+0x17c>
  407d20:	9009883a 	mov	r4,r18
  407d24:	800b883a 	mov	r5,r16
  407d28:	04066840 	call	406684 <memmove>
  407d2c:	003fa206 	br	407bb8 <_realloc_r+0x27c>
  407d30:	88800404 	addi	r2,r17,16
  407d34:	a0bf8716 	blt	r20,r2,407b54 <_realloc_r+0x218>
  407d38:	b8800317 	ldw	r2,12(r23)
  407d3c:	b8c00217 	ldw	r3,8(r23)
  407d40:	99bfff04 	addi	r6,r19,-4
  407d44:	01000904 	movi	r4,36
  407d48:	18800315 	stw	r2,12(r3)
  407d4c:	10c00215 	stw	r3,8(r2)
  407d50:	bc800204 	addi	r18,r23,8
  407d54:	21806536 	bltu	r4,r6,407eec <_realloc_r+0x5b0>
  407d58:	008004c4 	movi	r2,19
  407d5c:	1180592e 	bgeu	r2,r6,407ec4 <_realloc_r+0x588>
  407d60:	80800017 	ldw	r2,0(r16)
  407d64:	b8800215 	stw	r2,8(r23)
  407d68:	80800117 	ldw	r2,4(r16)
  407d6c:	b8800315 	stw	r2,12(r23)
  407d70:	008006c4 	movi	r2,27
  407d74:	11806136 	bltu	r2,r6,407efc <_realloc_r+0x5c0>
  407d78:	b8800404 	addi	r2,r23,16
  407d7c:	80c00204 	addi	r3,r16,8
  407d80:	19000017 	ldw	r4,0(r3)
  407d84:	11000015 	stw	r4,0(r2)
  407d88:	19000117 	ldw	r4,4(r3)
  407d8c:	11000115 	stw	r4,4(r2)
  407d90:	18c00217 	ldw	r3,8(r3)
  407d94:	10c00215 	stw	r3,8(r2)
  407d98:	a447c83a 	sub	r3,r20,r17
  407d9c:	bc45883a 	add	r2,r23,r17
  407da0:	18c00054 	ori	r3,r3,1
  407da4:	10c00115 	stw	r3,4(r2)
  407da8:	b8c00117 	ldw	r3,4(r23)
  407dac:	e0800215 	stw	r2,8(fp)
  407db0:	a809883a 	mov	r4,r21
  407db4:	1880004c 	andi	r2,r3,1
  407db8:	88a2b03a 	or	r17,r17,r2
  407dbc:	bc400115 	stw	r17,4(r23)
  407dc0:	040ba740 	call	40ba74 <__malloc_unlock>
  407dc4:	003f3c06 	br	407ab8 <_realloc_r+0x17c>
  407dc8:	80c00217 	ldw	r3,8(r16)
  407dcc:	90c00215 	stw	r3,8(r18)
  407dd0:	80c00317 	ldw	r3,12(r16)
  407dd4:	90c00315 	stw	r3,12(r18)
  407dd8:	30802426 	beq	r6,r2,407e6c <_realloc_r+0x530>
  407ddc:	90800404 	addi	r2,r18,16
  407de0:	80c00404 	addi	r3,r16,16
  407de4:	003f6e06 	br	407ba0 <_realloc_r+0x264>
  407de8:	953fff17 	ldw	r20,-4(r18)
  407dec:	00ffff04 	movi	r3,-4
  407df0:	a0e8703a 	and	r20,r20,r3
  407df4:	a4e9883a 	add	r20,r20,r19
  407df8:	003f2206 	br	407a84 <_realloc_r+0x148>
  407dfc:	800b883a 	mov	r5,r16
  407e00:	9009883a 	mov	r4,r18
  407e04:	04066840 	call	406684 <memmove>
  407e08:	9021883a 	mov	r16,r18
  407e0c:	b8800117 	ldw	r2,4(r23)
  407e10:	b82d883a 	mov	r22,r23
  407e14:	003f1b06 	br	407a84 <_realloc_r+0x148>
  407e18:	9005883a 	mov	r2,r18
  407e1c:	8007883a 	mov	r3,r16
  407e20:	003f9206 	br	407c6c <_realloc_r+0x330>
  407e24:	800b883a 	mov	r5,r16
  407e28:	9009883a 	mov	r4,r18
  407e2c:	d9c00015 	stw	r7,0(sp)
  407e30:	04066840 	call	406684 <memmove>
  407e34:	d9c00017 	ldw	r7,0(sp)
  407e38:	9021883a 	mov	r16,r18
  407e3c:	b8800117 	ldw	r2,4(r23)
  407e40:	3829883a 	mov	r20,r7
  407e44:	b82d883a 	mov	r22,r23
  407e48:	003f0e06 	br	407a84 <_realloc_r+0x148>
  407e4c:	80800217 	ldw	r2,8(r16)
  407e50:	b8800415 	stw	r2,16(r23)
  407e54:	80800317 	ldw	r2,12(r16)
  407e58:	b8800515 	stw	r2,20(r23)
  407e5c:	31001226 	beq	r6,r4,407ea8 <_realloc_r+0x56c>
  407e60:	b8800604 	addi	r2,r23,24
  407e64:	80c00404 	addi	r3,r16,16
  407e68:	003f9606 	br	407cc4 <_realloc_r+0x388>
  407e6c:	81000417 	ldw	r4,16(r16)
  407e70:	90800604 	addi	r2,r18,24
  407e74:	80c00604 	addi	r3,r16,24
  407e78:	91000415 	stw	r4,16(r18)
  407e7c:	81000517 	ldw	r4,20(r16)
  407e80:	91000515 	stw	r4,20(r18)
  407e84:	003f4606 	br	407ba0 <_realloc_r+0x264>
  407e88:	80800217 	ldw	r2,8(r16)
  407e8c:	b8800415 	stw	r2,16(r23)
  407e90:	80800317 	ldw	r2,12(r16)
  407e94:	b8800515 	stw	r2,20(r23)
  407e98:	31000d26 	beq	r6,r4,407ed0 <_realloc_r+0x594>
  407e9c:	b8800604 	addi	r2,r23,24
  407ea0:	80c00404 	addi	r3,r16,16
  407ea4:	003f7106 	br	407c6c <_realloc_r+0x330>
  407ea8:	81000417 	ldw	r4,16(r16)
  407eac:	b8800804 	addi	r2,r23,32
  407eb0:	80c00604 	addi	r3,r16,24
  407eb4:	b9000615 	stw	r4,24(r23)
  407eb8:	81000517 	ldw	r4,20(r16)
  407ebc:	b9000715 	stw	r4,28(r23)
  407ec0:	003f8006 	br	407cc4 <_realloc_r+0x388>
  407ec4:	9005883a 	mov	r2,r18
  407ec8:	8007883a 	mov	r3,r16
  407ecc:	003fac06 	br	407d80 <_realloc_r+0x444>
  407ed0:	81000417 	ldw	r4,16(r16)
  407ed4:	b8800804 	addi	r2,r23,32
  407ed8:	80c00604 	addi	r3,r16,24
  407edc:	b9000615 	stw	r4,24(r23)
  407ee0:	81000517 	ldw	r4,20(r16)
  407ee4:	b9000715 	stw	r4,28(r23)
  407ee8:	003f6006 	br	407c6c <_realloc_r+0x330>
  407eec:	9009883a 	mov	r4,r18
  407ef0:	800b883a 	mov	r5,r16
  407ef4:	04066840 	call	406684 <memmove>
  407ef8:	003fa706 	br	407d98 <_realloc_r+0x45c>
  407efc:	80800217 	ldw	r2,8(r16)
  407f00:	b8800415 	stw	r2,16(r23)
  407f04:	80800317 	ldw	r2,12(r16)
  407f08:	b8800515 	stw	r2,20(r23)
  407f0c:	31000326 	beq	r6,r4,407f1c <_realloc_r+0x5e0>
  407f10:	b8800604 	addi	r2,r23,24
  407f14:	80c00404 	addi	r3,r16,16
  407f18:	003f9906 	br	407d80 <_realloc_r+0x444>
  407f1c:	81000417 	ldw	r4,16(r16)
  407f20:	b8800804 	addi	r2,r23,32
  407f24:	80c00604 	addi	r3,r16,24
  407f28:	b9000615 	stw	r4,24(r23)
  407f2c:	81000517 	ldw	r4,20(r16)
  407f30:	b9000715 	stw	r4,28(r23)
  407f34:	003f9206 	br	407d80 <_realloc_r+0x444>

00407f38 <__isinfd>:
  407f38:	0105c83a 	sub	r2,zero,r4
  407f3c:	1108b03a 	or	r4,r2,r4
  407f40:	2004d7fa 	srli	r2,r4,31
  407f44:	00e00034 	movhi	r3,32768
  407f48:	18ffffc4 	addi	r3,r3,-1
  407f4c:	28ca703a 	and	r5,r5,r3
  407f50:	1144b03a 	or	r2,r2,r5
  407f54:	00dffc34 	movhi	r3,32752
  407f58:	1885c83a 	sub	r2,r3,r2
  407f5c:	0087c83a 	sub	r3,zero,r2
  407f60:	1884b03a 	or	r2,r3,r2
  407f64:	1005d7fa 	srai	r2,r2,31
  407f68:	10800044 	addi	r2,r2,1
  407f6c:	f800283a 	ret

00407f70 <__isnand>:
  407f70:	0105c83a 	sub	r2,zero,r4
  407f74:	1108b03a 	or	r4,r2,r4
  407f78:	2004d7fa 	srli	r2,r4,31
  407f7c:	00e00034 	movhi	r3,32768
  407f80:	18ffffc4 	addi	r3,r3,-1
  407f84:	28ca703a 	and	r5,r5,r3
  407f88:	1144b03a 	or	r2,r2,r5
  407f8c:	00dffc34 	movhi	r3,32752
  407f90:	1885c83a 	sub	r2,r3,r2
  407f94:	1004d7fa 	srli	r2,r2,31
  407f98:	f800283a 	ret

00407f9c <_sbrk_r>:
  407f9c:	defffd04 	addi	sp,sp,-12
  407fa0:	dc400115 	stw	r17,4(sp)
  407fa4:	dc000015 	stw	r16,0(sp)
  407fa8:	2023883a 	mov	r17,r4
  407fac:	040010b4 	movhi	r16,66
  407fb0:	84358504 	addi	r16,r16,-10732
  407fb4:	2809883a 	mov	r4,r5
  407fb8:	dfc00215 	stw	ra,8(sp)
  407fbc:	80000015 	stw	zero,0(r16)
  407fc0:	040b4d40 	call	40b4d4 <sbrk>
  407fc4:	00ffffc4 	movi	r3,-1
  407fc8:	10c00526 	beq	r2,r3,407fe0 <_sbrk_r+0x44>
  407fcc:	dfc00217 	ldw	ra,8(sp)
  407fd0:	dc400117 	ldw	r17,4(sp)
  407fd4:	dc000017 	ldw	r16,0(sp)
  407fd8:	dec00304 	addi	sp,sp,12
  407fdc:	f800283a 	ret
  407fe0:	80c00017 	ldw	r3,0(r16)
  407fe4:	183ff926 	beq	r3,zero,407fcc <_sbrk_r+0x30>
  407fe8:	88c00015 	stw	r3,0(r17)
  407fec:	dfc00217 	ldw	ra,8(sp)
  407ff0:	dc400117 	ldw	r17,4(sp)
  407ff4:	dc000017 	ldw	r16,0(sp)
  407ff8:	dec00304 	addi	sp,sp,12
  407ffc:	f800283a 	ret

00408000 <__sread>:
  408000:	defffe04 	addi	sp,sp,-8
  408004:	dc000015 	stw	r16,0(sp)
  408008:	2821883a 	mov	r16,r5
  40800c:	2940038f 	ldh	r5,14(r5)
  408010:	dfc00115 	stw	ra,4(sp)
  408014:	04086080 	call	408608 <_read_r>
  408018:	10000716 	blt	r2,zero,408038 <__sread+0x38>
  40801c:	80c01417 	ldw	r3,80(r16)
  408020:	1887883a 	add	r3,r3,r2
  408024:	80c01415 	stw	r3,80(r16)
  408028:	dfc00117 	ldw	ra,4(sp)
  40802c:	dc000017 	ldw	r16,0(sp)
  408030:	dec00204 	addi	sp,sp,8
  408034:	f800283a 	ret
  408038:	80c0030b 	ldhu	r3,12(r16)
  40803c:	18fbffcc 	andi	r3,r3,61439
  408040:	80c0030d 	sth	r3,12(r16)
  408044:	dfc00117 	ldw	ra,4(sp)
  408048:	dc000017 	ldw	r16,0(sp)
  40804c:	dec00204 	addi	sp,sp,8
  408050:	f800283a 	ret

00408054 <__swrite>:
  408054:	2880030b 	ldhu	r2,12(r5)
  408058:	defffb04 	addi	sp,sp,-20
  40805c:	dcc00315 	stw	r19,12(sp)
  408060:	10c0400c 	andi	r3,r2,256
  408064:	18ffffcc 	andi	r3,r3,65535
  408068:	18e0001c 	xori	r3,r3,32768
  40806c:	dc800215 	stw	r18,8(sp)
  408070:	dc400115 	stw	r17,4(sp)
  408074:	dc000015 	stw	r16,0(sp)
  408078:	dfc00415 	stw	ra,16(sp)
  40807c:	18e00004 	addi	r3,r3,-32768
  408080:	2821883a 	mov	r16,r5
  408084:	2027883a 	mov	r19,r4
  408088:	3025883a 	mov	r18,r6
  40808c:	3823883a 	mov	r17,r7
  408090:	18000526 	beq	r3,zero,4080a8 <__swrite+0x54>
  408094:	2940038f 	ldh	r5,14(r5)
  408098:	000d883a 	mov	r6,zero
  40809c:	01c00084 	movi	r7,2
  4080a0:	040859c0 	call	40859c <_lseek_r>
  4080a4:	8080030b 	ldhu	r2,12(r16)
  4080a8:	8140038f 	ldh	r5,14(r16)
  4080ac:	10bbffcc 	andi	r2,r2,61439
  4080b0:	9809883a 	mov	r4,r19
  4080b4:	900d883a 	mov	r6,r18
  4080b8:	880f883a 	mov	r7,r17
  4080bc:	8080030d 	sth	r2,12(r16)
  4080c0:	dfc00417 	ldw	ra,16(sp)
  4080c4:	dcc00317 	ldw	r19,12(sp)
  4080c8:	dc800217 	ldw	r18,8(sp)
  4080cc:	dc400117 	ldw	r17,4(sp)
  4080d0:	dc000017 	ldw	r16,0(sp)
  4080d4:	dec00504 	addi	sp,sp,20
  4080d8:	04081e41 	jmpi	4081e4 <_write_r>

004080dc <__sseek>:
  4080dc:	defffe04 	addi	sp,sp,-8
  4080e0:	dc000015 	stw	r16,0(sp)
  4080e4:	2821883a 	mov	r16,r5
  4080e8:	2940038f 	ldh	r5,14(r5)
  4080ec:	dfc00115 	stw	ra,4(sp)
  4080f0:	040859c0 	call	40859c <_lseek_r>
  4080f4:	00ffffc4 	movi	r3,-1
  4080f8:	10c00826 	beq	r2,r3,40811c <__sseek+0x40>
  4080fc:	80c0030b 	ldhu	r3,12(r16)
  408100:	80801415 	stw	r2,80(r16)
  408104:	18c40014 	ori	r3,r3,4096
  408108:	80c0030d 	sth	r3,12(r16)
  40810c:	dfc00117 	ldw	ra,4(sp)
  408110:	dc000017 	ldw	r16,0(sp)
  408114:	dec00204 	addi	sp,sp,8
  408118:	f800283a 	ret
  40811c:	80c0030b 	ldhu	r3,12(r16)
  408120:	18fbffcc 	andi	r3,r3,61439
  408124:	80c0030d 	sth	r3,12(r16)
  408128:	dfc00117 	ldw	ra,4(sp)
  40812c:	dc000017 	ldw	r16,0(sp)
  408130:	dec00204 	addi	sp,sp,8
  408134:	f800283a 	ret

00408138 <__sclose>:
  408138:	2940038f 	ldh	r5,14(r5)
  40813c:	040831c1 	jmpi	40831c <_close_r>

00408140 <strcmp>:
  408140:	2904b03a 	or	r2,r5,r4
  408144:	108000cc 	andi	r2,r2,3
  408148:	1000171e 	bne	r2,zero,4081a8 <strcmp+0x68>
  40814c:	20800017 	ldw	r2,0(r4)
  408150:	28c00017 	ldw	r3,0(r5)
  408154:	10c0141e 	bne	r2,r3,4081a8 <strcmp+0x68>
  408158:	027fbff4 	movhi	r9,65279
  40815c:	4a7fbfc4 	addi	r9,r9,-257
  408160:	1247883a 	add	r3,r2,r9
  408164:	0084303a 	nor	r2,zero,r2
  408168:	1884703a 	and	r2,r3,r2
  40816c:	02202074 	movhi	r8,32897
  408170:	42202004 	addi	r8,r8,-32640
  408174:	1204703a 	and	r2,r2,r8
  408178:	10000226 	beq	r2,zero,408184 <strcmp+0x44>
  40817c:	00001706 	br	4081dc <strcmp+0x9c>
  408180:	3000161e 	bne	r6,zero,4081dc <strcmp+0x9c>
  408184:	21000104 	addi	r4,r4,4
  408188:	20800017 	ldw	r2,0(r4)
  40818c:	29400104 	addi	r5,r5,4
  408190:	28c00017 	ldw	r3,0(r5)
  408194:	124f883a 	add	r7,r2,r9
  408198:	008c303a 	nor	r6,zero,r2
  40819c:	398c703a 	and	r6,r7,r6
  4081a0:	320c703a 	and	r6,r6,r8
  4081a4:	10fff626 	beq	r2,r3,408180 <strcmp+0x40>
  4081a8:	20800007 	ldb	r2,0(r4)
  4081ac:	1000051e 	bne	r2,zero,4081c4 <strcmp+0x84>
  4081b0:	00000606 	br	4081cc <strcmp+0x8c>
  4081b4:	21000044 	addi	r4,r4,1
  4081b8:	20800007 	ldb	r2,0(r4)
  4081bc:	29400044 	addi	r5,r5,1
  4081c0:	10000226 	beq	r2,zero,4081cc <strcmp+0x8c>
  4081c4:	28c00007 	ldb	r3,0(r5)
  4081c8:	10fffa26 	beq	r2,r3,4081b4 <strcmp+0x74>
  4081cc:	20c00003 	ldbu	r3,0(r4)
  4081d0:	28800003 	ldbu	r2,0(r5)
  4081d4:	1885c83a 	sub	r2,r3,r2
  4081d8:	f800283a 	ret
  4081dc:	0005883a 	mov	r2,zero
  4081e0:	f800283a 	ret

004081e4 <_write_r>:
  4081e4:	defffd04 	addi	sp,sp,-12
  4081e8:	dc400115 	stw	r17,4(sp)
  4081ec:	dc000015 	stw	r16,0(sp)
  4081f0:	2023883a 	mov	r17,r4
  4081f4:	040010b4 	movhi	r16,66
  4081f8:	84358504 	addi	r16,r16,-10732
  4081fc:	2809883a 	mov	r4,r5
  408200:	300b883a 	mov	r5,r6
  408204:	380d883a 	mov	r6,r7
  408208:	dfc00215 	stw	ra,8(sp)
  40820c:	80000015 	stw	zero,0(r16)
  408210:	040b7000 	call	40b700 <write>
  408214:	00ffffc4 	movi	r3,-1
  408218:	10c00526 	beq	r2,r3,408230 <_write_r+0x4c>
  40821c:	dfc00217 	ldw	ra,8(sp)
  408220:	dc400117 	ldw	r17,4(sp)
  408224:	dc000017 	ldw	r16,0(sp)
  408228:	dec00304 	addi	sp,sp,12
  40822c:	f800283a 	ret
  408230:	80c00017 	ldw	r3,0(r16)
  408234:	183ff926 	beq	r3,zero,40821c <_write_r+0x38>
  408238:	88c00015 	stw	r3,0(r17)
  40823c:	dfc00217 	ldw	ra,8(sp)
  408240:	dc400117 	ldw	r17,4(sp)
  408244:	dc000017 	ldw	r16,0(sp)
  408248:	dec00304 	addi	sp,sp,12
  40824c:	f800283a 	ret

00408250 <_calloc_r>:
  408250:	defffe04 	addi	sp,sp,-8
  408254:	dc000015 	stw	r16,0(sp)
  408258:	2021883a 	mov	r16,r4
  40825c:	3009883a 	mov	r4,r6
  408260:	dfc00115 	stw	ra,4(sp)
  408264:	0400e700 	call	400e70 <__mulsi3>
  408268:	8009883a 	mov	r4,r16
  40826c:	100b883a 	mov	r5,r2
  408270:	0405e080 	call	405e08 <_malloc_r>
  408274:	1021883a 	mov	r16,r2
  408278:	10000c26 	beq	r2,zero,4082ac <_calloc_r+0x5c>
  40827c:	11bfff17 	ldw	r6,-4(r2)
  408280:	00ffff04 	movi	r3,-4
  408284:	00800904 	movi	r2,36
  408288:	30cc703a 	and	r6,r6,r3
  40828c:	30cd883a 	add	r6,r6,r3
  408290:	11801436 	bltu	r2,r6,4082e4 <_calloc_r+0x94>
  408294:	00c004c4 	movi	r3,19
  408298:	19800936 	bltu	r3,r6,4082c0 <_calloc_r+0x70>
  40829c:	8005883a 	mov	r2,r16
  4082a0:	10000015 	stw	zero,0(r2)
  4082a4:	10000115 	stw	zero,4(r2)
  4082a8:	10000215 	stw	zero,8(r2)
  4082ac:	8005883a 	mov	r2,r16
  4082b0:	dfc00117 	ldw	ra,4(sp)
  4082b4:	dc000017 	ldw	r16,0(sp)
  4082b8:	dec00204 	addi	sp,sp,8
  4082bc:	f800283a 	ret
  4082c0:	80000015 	stw	zero,0(r16)
  4082c4:	80000115 	stw	zero,4(r16)
  4082c8:	00c006c4 	movi	r3,27
  4082cc:	19800d2e 	bgeu	r3,r6,408304 <_calloc_r+0xb4>
  4082d0:	80000215 	stw	zero,8(r16)
  4082d4:	80000315 	stw	zero,12(r16)
  4082d8:	30800c26 	beq	r6,r2,40830c <_calloc_r+0xbc>
  4082dc:	80800404 	addi	r2,r16,16
  4082e0:	003fef06 	br	4082a0 <_calloc_r+0x50>
  4082e4:	8009883a 	mov	r4,r16
  4082e8:	000b883a 	mov	r5,zero
  4082ec:	04068100 	call	406810 <memset>
  4082f0:	8005883a 	mov	r2,r16
  4082f4:	dfc00117 	ldw	ra,4(sp)
  4082f8:	dc000017 	ldw	r16,0(sp)
  4082fc:	dec00204 	addi	sp,sp,8
  408300:	f800283a 	ret
  408304:	80800204 	addi	r2,r16,8
  408308:	003fe506 	br	4082a0 <_calloc_r+0x50>
  40830c:	80000415 	stw	zero,16(r16)
  408310:	80000515 	stw	zero,20(r16)
  408314:	80800604 	addi	r2,r16,24
  408318:	003fe106 	br	4082a0 <_calloc_r+0x50>

0040831c <_close_r>:
  40831c:	defffd04 	addi	sp,sp,-12
  408320:	dc400115 	stw	r17,4(sp)
  408324:	dc000015 	stw	r16,0(sp)
  408328:	2023883a 	mov	r17,r4
  40832c:	040010b4 	movhi	r16,66
  408330:	84358504 	addi	r16,r16,-10732
  408334:	2809883a 	mov	r4,r5
  408338:	dfc00215 	stw	ra,8(sp)
  40833c:	80000015 	stw	zero,0(r16)
  408340:	040a7e80 	call	40a7e8 <close>
  408344:	00ffffc4 	movi	r3,-1
  408348:	10c00526 	beq	r2,r3,408360 <_close_r+0x44>
  40834c:	dfc00217 	ldw	ra,8(sp)
  408350:	dc400117 	ldw	r17,4(sp)
  408354:	dc000017 	ldw	r16,0(sp)
  408358:	dec00304 	addi	sp,sp,12
  40835c:	f800283a 	ret
  408360:	80c00017 	ldw	r3,0(r16)
  408364:	183ff926 	beq	r3,zero,40834c <_close_r+0x30>
  408368:	88c00015 	stw	r3,0(r17)
  40836c:	dfc00217 	ldw	ra,8(sp)
  408370:	dc400117 	ldw	r17,4(sp)
  408374:	dc000017 	ldw	r16,0(sp)
  408378:	dec00304 	addi	sp,sp,12
  40837c:	f800283a 	ret

00408380 <_fclose_r>:
  408380:	defffc04 	addi	sp,sp,-16
  408384:	dc400115 	stw	r17,4(sp)
  408388:	dc000015 	stw	r16,0(sp)
  40838c:	dfc00315 	stw	ra,12(sp)
  408390:	dc800215 	stw	r18,8(sp)
  408394:	2821883a 	mov	r16,r5
  408398:	2023883a 	mov	r17,r4
  40839c:	28003426 	beq	r5,zero,408470 <_fclose_r+0xf0>
  4083a0:	04050f40 	call	4050f4 <__sfp_lock_acquire>
  4083a4:	88000226 	beq	r17,zero,4083b0 <_fclose_r+0x30>
  4083a8:	88800e17 	ldw	r2,56(r17)
  4083ac:	10003826 	beq	r2,zero,408490 <_fclose_r+0x110>
  4083b0:	8080030f 	ldh	r2,12(r16)
  4083b4:	10002526 	beq	r2,zero,40844c <_fclose_r+0xcc>
  4083b8:	8809883a 	mov	r4,r17
  4083bc:	800b883a 	mov	r5,r16
  4083c0:	0404c300 	call	404c30 <_fflush_r>
  4083c4:	1025883a 	mov	r18,r2
  4083c8:	80800b17 	ldw	r2,44(r16)
  4083cc:	10000426 	beq	r2,zero,4083e0 <_fclose_r+0x60>
  4083d0:	81400717 	ldw	r5,28(r16)
  4083d4:	8809883a 	mov	r4,r17
  4083d8:	103ee83a 	callr	r2
  4083dc:	10003516 	blt	r2,zero,4084b4 <_fclose_r+0x134>
  4083e0:	8080030b 	ldhu	r2,12(r16)
  4083e4:	1080200c 	andi	r2,r2,128
  4083e8:	10bfffcc 	andi	r2,r2,65535
  4083ec:	10a0001c 	xori	r2,r2,32768
  4083f0:	10a00004 	addi	r2,r2,-32768
  4083f4:	10002b1e 	bne	r2,zero,4084a4 <_fclose_r+0x124>
  4083f8:	81400c17 	ldw	r5,48(r16)
  4083fc:	28000526 	beq	r5,zero,408414 <_fclose_r+0x94>
  408400:	80801004 	addi	r2,r16,64
  408404:	28800226 	beq	r5,r2,408410 <_fclose_r+0x90>
  408408:	8809883a 	mov	r4,r17
  40840c:	04052700 	call	405270 <_free_r>
  408410:	80000c15 	stw	zero,48(r16)
  408414:	81401117 	ldw	r5,68(r16)
  408418:	28000326 	beq	r5,zero,408428 <_fclose_r+0xa8>
  40841c:	8809883a 	mov	r4,r17
  408420:	04052700 	call	405270 <_free_r>
  408424:	80001115 	stw	zero,68(r16)
  408428:	8000030d 	sth	zero,12(r16)
  40842c:	04050f80 	call	4050f8 <__sfp_lock_release>
  408430:	9005883a 	mov	r2,r18
  408434:	dfc00317 	ldw	ra,12(sp)
  408438:	dc800217 	ldw	r18,8(sp)
  40843c:	dc400117 	ldw	r17,4(sp)
  408440:	dc000017 	ldw	r16,0(sp)
  408444:	dec00404 	addi	sp,sp,16
  408448:	f800283a 	ret
  40844c:	04050f80 	call	4050f8 <__sfp_lock_release>
  408450:	0025883a 	mov	r18,zero
  408454:	9005883a 	mov	r2,r18
  408458:	dfc00317 	ldw	ra,12(sp)
  40845c:	dc800217 	ldw	r18,8(sp)
  408460:	dc400117 	ldw	r17,4(sp)
  408464:	dc000017 	ldw	r16,0(sp)
  408468:	dec00404 	addi	sp,sp,16
  40846c:	f800283a 	ret
  408470:	0025883a 	mov	r18,zero
  408474:	9005883a 	mov	r2,r18
  408478:	dfc00317 	ldw	ra,12(sp)
  40847c:	dc800217 	ldw	r18,8(sp)
  408480:	dc400117 	ldw	r17,4(sp)
  408484:	dc000017 	ldw	r16,0(sp)
  408488:	dec00404 	addi	sp,sp,16
  40848c:	f800283a 	ret
  408490:	8809883a 	mov	r4,r17
  408494:	0404eec0 	call	404eec <__sinit>
  408498:	8080030f 	ldh	r2,12(r16)
  40849c:	103fc61e 	bne	r2,zero,4083b8 <_fclose_r+0x38>
  4084a0:	003fea06 	br	40844c <_fclose_r+0xcc>
  4084a4:	81400417 	ldw	r5,16(r16)
  4084a8:	8809883a 	mov	r4,r17
  4084ac:	04052700 	call	405270 <_free_r>
  4084b0:	003fd106 	br	4083f8 <_fclose_r+0x78>
  4084b4:	04bfffc4 	movi	r18,-1
  4084b8:	003fc906 	br	4083e0 <_fclose_r+0x60>

004084bc <fclose>:
  4084bc:	008010b4 	movhi	r2,66
  4084c0:	10ae0604 	addi	r2,r2,-18408
  4084c4:	200b883a 	mov	r5,r4
  4084c8:	11000017 	ldw	r4,0(r2)
  4084cc:	04083801 	jmpi	408380 <_fclose_r>

004084d0 <_fstat_r>:
  4084d0:	defffd04 	addi	sp,sp,-12
  4084d4:	dc400115 	stw	r17,4(sp)
  4084d8:	dc000015 	stw	r16,0(sp)
  4084dc:	2023883a 	mov	r17,r4
  4084e0:	040010b4 	movhi	r16,66
  4084e4:	84358504 	addi	r16,r16,-10732
  4084e8:	2809883a 	mov	r4,r5
  4084ec:	300b883a 	mov	r5,r6
  4084f0:	dfc00215 	stw	ra,8(sp)
  4084f4:	80000015 	stw	zero,0(r16)
  4084f8:	040ab440 	call	40ab44 <fstat>
  4084fc:	00ffffc4 	movi	r3,-1
  408500:	10c00526 	beq	r2,r3,408518 <_fstat_r+0x48>
  408504:	dfc00217 	ldw	ra,8(sp)
  408508:	dc400117 	ldw	r17,4(sp)
  40850c:	dc000017 	ldw	r16,0(sp)
  408510:	dec00304 	addi	sp,sp,12
  408514:	f800283a 	ret
  408518:	80c00017 	ldw	r3,0(r16)
  40851c:	183ff926 	beq	r3,zero,408504 <_fstat_r+0x34>
  408520:	88c00015 	stw	r3,0(r17)
  408524:	dfc00217 	ldw	ra,8(sp)
  408528:	dc400117 	ldw	r17,4(sp)
  40852c:	dc000017 	ldw	r16,0(sp)
  408530:	dec00304 	addi	sp,sp,12
  408534:	f800283a 	ret

00408538 <_isatty_r>:
  408538:	defffd04 	addi	sp,sp,-12
  40853c:	dc400115 	stw	r17,4(sp)
  408540:	dc000015 	stw	r16,0(sp)
  408544:	2023883a 	mov	r17,r4
  408548:	040010b4 	movhi	r16,66
  40854c:	84358504 	addi	r16,r16,-10732
  408550:	2809883a 	mov	r4,r5
  408554:	dfc00215 	stw	ra,8(sp)
  408558:	80000015 	stw	zero,0(r16)
  40855c:	040af900 	call	40af90 <isatty>
  408560:	00ffffc4 	movi	r3,-1
  408564:	10c00526 	beq	r2,r3,40857c <_isatty_r+0x44>
  408568:	dfc00217 	ldw	ra,8(sp)
  40856c:	dc400117 	ldw	r17,4(sp)
  408570:	dc000017 	ldw	r16,0(sp)
  408574:	dec00304 	addi	sp,sp,12
  408578:	f800283a 	ret
  40857c:	80c00017 	ldw	r3,0(r16)
  408580:	183ff926 	beq	r3,zero,408568 <_isatty_r+0x30>
  408584:	88c00015 	stw	r3,0(r17)
  408588:	dfc00217 	ldw	ra,8(sp)
  40858c:	dc400117 	ldw	r17,4(sp)
  408590:	dc000017 	ldw	r16,0(sp)
  408594:	dec00304 	addi	sp,sp,12
  408598:	f800283a 	ret

0040859c <_lseek_r>:
  40859c:	defffd04 	addi	sp,sp,-12
  4085a0:	dc400115 	stw	r17,4(sp)
  4085a4:	dc000015 	stw	r16,0(sp)
  4085a8:	2023883a 	mov	r17,r4
  4085ac:	040010b4 	movhi	r16,66
  4085b0:	84358504 	addi	r16,r16,-10732
  4085b4:	2809883a 	mov	r4,r5
  4085b8:	300b883a 	mov	r5,r6
  4085bc:	380d883a 	mov	r6,r7
  4085c0:	dfc00215 	stw	ra,8(sp)
  4085c4:	80000015 	stw	zero,0(r16)
  4085c8:	040b1700 	call	40b170 <lseek>
  4085cc:	00ffffc4 	movi	r3,-1
  4085d0:	10c00526 	beq	r2,r3,4085e8 <_lseek_r+0x4c>
  4085d4:	dfc00217 	ldw	ra,8(sp)
  4085d8:	dc400117 	ldw	r17,4(sp)
  4085dc:	dc000017 	ldw	r16,0(sp)
  4085e0:	dec00304 	addi	sp,sp,12
  4085e4:	f800283a 	ret
  4085e8:	80c00017 	ldw	r3,0(r16)
  4085ec:	183ff926 	beq	r3,zero,4085d4 <_lseek_r+0x38>
  4085f0:	88c00015 	stw	r3,0(r17)
  4085f4:	dfc00217 	ldw	ra,8(sp)
  4085f8:	dc400117 	ldw	r17,4(sp)
  4085fc:	dc000017 	ldw	r16,0(sp)
  408600:	dec00304 	addi	sp,sp,12
  408604:	f800283a 	ret

00408608 <_read_r>:
  408608:	defffd04 	addi	sp,sp,-12
  40860c:	dc400115 	stw	r17,4(sp)
  408610:	dc000015 	stw	r16,0(sp)
  408614:	2023883a 	mov	r17,r4
  408618:	040010b4 	movhi	r16,66
  40861c:	84358504 	addi	r16,r16,-10732
  408620:	2809883a 	mov	r4,r5
  408624:	300b883a 	mov	r5,r6
  408628:	380d883a 	mov	r6,r7
  40862c:	dfc00215 	stw	ra,8(sp)
  408630:	80000015 	stw	zero,0(r16)
  408634:	040b3600 	call	40b360 <read>
  408638:	00ffffc4 	movi	r3,-1
  40863c:	10c00526 	beq	r2,r3,408654 <_read_r+0x4c>
  408640:	dfc00217 	ldw	ra,8(sp)
  408644:	dc400117 	ldw	r17,4(sp)
  408648:	dc000017 	ldw	r16,0(sp)
  40864c:	dec00304 	addi	sp,sp,12
  408650:	f800283a 	ret
  408654:	80c00017 	ldw	r3,0(r16)
  408658:	183ff926 	beq	r3,zero,408640 <_read_r+0x38>
  40865c:	88c00015 	stw	r3,0(r17)
  408660:	dfc00217 	ldw	ra,8(sp)
  408664:	dc400117 	ldw	r17,4(sp)
  408668:	dc000017 	ldw	r16,0(sp)
  40866c:	dec00304 	addi	sp,sp,12
  408670:	f800283a 	ret

00408674 <__udivdi3>:
  408674:	defff504 	addi	sp,sp,-44
  408678:	dd000515 	stw	r20,20(sp)
  40867c:	dcc00415 	stw	r19,16(sp)
  408680:	dc800315 	stw	r18,12(sp)
  408684:	dc400215 	stw	r17,8(sp)
  408688:	dc000115 	stw	r16,4(sp)
  40868c:	dfc00a15 	stw	ra,40(sp)
  408690:	df000915 	stw	fp,36(sp)
  408694:	ddc00815 	stw	r23,32(sp)
  408698:	dd800715 	stw	r22,28(sp)
  40869c:	dd400615 	stw	r21,24(sp)
  4086a0:	2025883a 	mov	r18,r4
  4086a4:	2823883a 	mov	r17,r5
  4086a8:	3021883a 	mov	r16,r6
  4086ac:	2027883a 	mov	r19,r4
  4086b0:	2829883a 	mov	r20,r5
  4086b4:	3800451e 	bne	r7,zero,4087cc <__udivdi3+0x158>
  4086b8:	2980652e 	bgeu	r5,r6,408850 <__udivdi3+0x1dc>
  4086bc:	00bfffd4 	movui	r2,65535
  4086c0:	1180b436 	bltu	r2,r6,408994 <__udivdi3+0x320>
  4086c4:	00803fc4 	movi	r2,255
  4086c8:	11816636 	bltu	r2,r6,408c64 <__udivdi3+0x5f0>
  4086cc:	0005883a 	mov	r2,zero
  4086d0:	0007883a 	mov	r3,zero
  4086d4:	3084d83a 	srl	r2,r6,r2
  4086d8:	010010b4 	movhi	r4,66
  4086dc:	21264c04 	addi	r4,r4,-26320
  4086e0:	2085883a 	add	r2,r4,r2
  4086e4:	10800003 	ldbu	r2,0(r2)
  4086e8:	10c7883a 	add	r3,r2,r3
  4086ec:	00800804 	movi	r2,32
  4086f0:	10c5c83a 	sub	r2,r2,r3
  4086f4:	10000526 	beq	r2,zero,40870c <__udivdi3+0x98>
  4086f8:	88a2983a 	sll	r17,r17,r2
  4086fc:	90c6d83a 	srl	r3,r18,r3
  408700:	30a0983a 	sll	r16,r6,r2
  408704:	90a6983a 	sll	r19,r18,r2
  408708:	88e8b03a 	or	r20,r17,r3
  40870c:	8022d43a 	srli	r17,r16,16
  408710:	a009883a 	mov	r4,r20
  408714:	857fffcc 	andi	r21,r16,65535
  408718:	880b883a 	mov	r5,r17
  40871c:	040a1540 	call	40a154 <__umodsi3>
  408720:	a009883a 	mov	r4,r20
  408724:	880b883a 	mov	r5,r17
  408728:	102d883a 	mov	r22,r2
  40872c:	040a14c0 	call	40a14c <__udivsi3>
  408730:	1009883a 	mov	r4,r2
  408734:	a80b883a 	mov	r5,r21
  408738:	1025883a 	mov	r18,r2
  40873c:	0400e700 	call	400e70 <__mulsi3>
  408740:	1009883a 	mov	r4,r2
  408744:	b006943a 	slli	r3,r22,16
  408748:	9804d43a 	srli	r2,r19,16
  40874c:	1886b03a 	or	r3,r3,r2
  408750:	1900052e 	bgeu	r3,r4,408768 <__udivdi3+0xf4>
  408754:	1c07883a 	add	r3,r3,r16
  408758:	90bfffc4 	addi	r2,r18,-1
  40875c:	1c000136 	bltu	r3,r16,408764 <__udivdi3+0xf0>
  408760:	19015536 	bltu	r3,r4,408cb8 <__udivdi3+0x644>
  408764:	1025883a 	mov	r18,r2
  408768:	1929c83a 	sub	r20,r3,r4
  40876c:	880b883a 	mov	r5,r17
  408770:	a009883a 	mov	r4,r20
  408774:	040a1540 	call	40a154 <__umodsi3>
  408778:	102d883a 	mov	r22,r2
  40877c:	880b883a 	mov	r5,r17
  408780:	a009883a 	mov	r4,r20
  408784:	b02c943a 	slli	r22,r22,16
  408788:	040a14c0 	call	40a14c <__udivsi3>
  40878c:	1009883a 	mov	r4,r2
  408790:	a80b883a 	mov	r5,r21
  408794:	9cffffcc 	andi	r19,r19,65535
  408798:	1023883a 	mov	r17,r2
  40879c:	b4e6b03a 	or	r19,r22,r19
  4087a0:	0400e700 	call	400e70 <__mulsi3>
  4087a4:	9880052e 	bgeu	r19,r2,4087bc <__udivdi3+0x148>
  4087a8:	9c27883a 	add	r19,r19,r16
  4087ac:	88ffffc4 	addi	r3,r17,-1
  4087b0:	9c011436 	bltu	r19,r16,408c04 <__udivdi3+0x590>
  4087b4:	9881132e 	bgeu	r19,r2,408c04 <__udivdi3+0x590>
  4087b8:	8c7fff84 	addi	r17,r17,-2
  4087bc:	9004943a 	slli	r2,r18,16
  4087c0:	0007883a 	mov	r3,zero
  4087c4:	8884b03a 	or	r2,r17,r2
  4087c8:	00001506 	br	408820 <__udivdi3+0x1ac>
  4087cc:	29c06a36 	bltu	r5,r7,408978 <__udivdi3+0x304>
  4087d0:	00bfffd4 	movui	r2,65535
  4087d4:	11c06a2e 	bgeu	r2,r7,408980 <__udivdi3+0x30c>
  4087d8:	00804034 	movhi	r2,256
  4087dc:	10bfffc4 	addi	r2,r2,-1
  4087e0:	11c11436 	bltu	r2,r7,408c34 <__udivdi3+0x5c0>
  4087e4:	00c00404 	movi	r3,16
  4087e8:	180b883a 	mov	r5,r3
  4087ec:	38c6d83a 	srl	r3,r7,r3
  4087f0:	010010b4 	movhi	r4,66
  4087f4:	21264c04 	addi	r4,r4,-26320
  4087f8:	04000804 	movi	r16,32
  4087fc:	20c7883a 	add	r3,r4,r3
  408800:	18800003 	ldbu	r2,0(r3)
  408804:	1145883a 	add	r2,r2,r5
  408808:	80a1c83a 	sub	r16,r16,r2
  40880c:	80006e1e 	bne	r16,zero,4089c8 <__udivdi3+0x354>
  408810:	0007883a 	mov	r3,zero
  408814:	3c406a36 	bltu	r7,r17,4089c0 <__udivdi3+0x34c>
  408818:	9180692e 	bgeu	r18,r6,4089c0 <__udivdi3+0x34c>
  40881c:	0005883a 	mov	r2,zero
  408820:	dfc00a17 	ldw	ra,40(sp)
  408824:	df000917 	ldw	fp,36(sp)
  408828:	ddc00817 	ldw	r23,32(sp)
  40882c:	dd800717 	ldw	r22,28(sp)
  408830:	dd400617 	ldw	r21,24(sp)
  408834:	dd000517 	ldw	r20,20(sp)
  408838:	dcc00417 	ldw	r19,16(sp)
  40883c:	dc800317 	ldw	r18,12(sp)
  408840:	dc400217 	ldw	r17,8(sp)
  408844:	dc000117 	ldw	r16,4(sp)
  408848:	dec00b04 	addi	sp,sp,44
  40884c:	f800283a 	ret
  408850:	3000041e 	bne	r6,zero,408864 <__udivdi3+0x1f0>
  408854:	01000044 	movi	r4,1
  408858:	000b883a 	mov	r5,zero
  40885c:	040a14c0 	call	40a14c <__udivsi3>
  408860:	1021883a 	mov	r16,r2
  408864:	00bfffd4 	movui	r2,65535
  408868:	1400502e 	bgeu	r2,r16,4089ac <__udivdi3+0x338>
  40886c:	00804034 	movhi	r2,256
  408870:	10bfffc4 	addi	r2,r2,-1
  408874:	1400f536 	bltu	r2,r16,408c4c <__udivdi3+0x5d8>
  408878:	00800404 	movi	r2,16
  40887c:	1007883a 	mov	r3,r2
  408880:	8084d83a 	srl	r2,r16,r2
  408884:	010010b4 	movhi	r4,66
  408888:	21264c04 	addi	r4,r4,-26320
  40888c:	2085883a 	add	r2,r4,r2
  408890:	10800003 	ldbu	r2,0(r2)
  408894:	10c7883a 	add	r3,r2,r3
  408898:	00800804 	movi	r2,32
  40889c:	10c5c83a 	sub	r2,r2,r3
  4088a0:	1000a01e 	bne	r2,zero,408b24 <__udivdi3+0x4b0>
  4088a4:	8028d43a 	srli	r20,r16,16
  4088a8:	8c23c83a 	sub	r17,r17,r16
  4088ac:	857fffcc 	andi	r21,r16,65535
  4088b0:	00c00044 	movi	r3,1
  4088b4:	8809883a 	mov	r4,r17
  4088b8:	a00b883a 	mov	r5,r20
  4088bc:	d8c00015 	stw	r3,0(sp)
  4088c0:	040a1540 	call	40a154 <__umodsi3>
  4088c4:	8809883a 	mov	r4,r17
  4088c8:	a00b883a 	mov	r5,r20
  4088cc:	102d883a 	mov	r22,r2
  4088d0:	040a14c0 	call	40a14c <__udivsi3>
  4088d4:	1009883a 	mov	r4,r2
  4088d8:	a80b883a 	mov	r5,r21
  4088dc:	1025883a 	mov	r18,r2
  4088e0:	0400e700 	call	400e70 <__mulsi3>
  4088e4:	1009883a 	mov	r4,r2
  4088e8:	b00c943a 	slli	r6,r22,16
  4088ec:	9804d43a 	srli	r2,r19,16
  4088f0:	d8c00017 	ldw	r3,0(sp)
  4088f4:	308cb03a 	or	r6,r6,r2
  4088f8:	3100052e 	bgeu	r6,r4,408910 <__udivdi3+0x29c>
  4088fc:	340d883a 	add	r6,r6,r16
  408900:	90bfffc4 	addi	r2,r18,-1
  408904:	34000136 	bltu	r6,r16,40890c <__udivdi3+0x298>
  408908:	3100e836 	bltu	r6,r4,408cac <__udivdi3+0x638>
  40890c:	1025883a 	mov	r18,r2
  408910:	3123c83a 	sub	r17,r6,r4
  408914:	8809883a 	mov	r4,r17
  408918:	a00b883a 	mov	r5,r20
  40891c:	d8c00015 	stw	r3,0(sp)
  408920:	040a1540 	call	40a154 <__umodsi3>
  408924:	102d883a 	mov	r22,r2
  408928:	8809883a 	mov	r4,r17
  40892c:	a00b883a 	mov	r5,r20
  408930:	b02c943a 	slli	r22,r22,16
  408934:	040a14c0 	call	40a14c <__udivsi3>
  408938:	1009883a 	mov	r4,r2
  40893c:	a80b883a 	mov	r5,r21
  408940:	9cffffcc 	andi	r19,r19,65535
  408944:	1023883a 	mov	r17,r2
  408948:	b4e6b03a 	or	r19,r22,r19
  40894c:	0400e700 	call	400e70 <__mulsi3>
  408950:	d8c00017 	ldw	r3,0(sp)
  408954:	9880052e 	bgeu	r19,r2,40896c <__udivdi3+0x2f8>
  408958:	9c27883a 	add	r19,r19,r16
  40895c:	893fffc4 	addi	r4,r17,-1
  408960:	9c00aa36 	bltu	r19,r16,408c0c <__udivdi3+0x598>
  408964:	9880a92e 	bgeu	r19,r2,408c0c <__udivdi3+0x598>
  408968:	8c7fff84 	addi	r17,r17,-2
  40896c:	9004943a 	slli	r2,r18,16
  408970:	8884b03a 	or	r2,r17,r2
  408974:	003faa06 	br	408820 <__udivdi3+0x1ac>
  408978:	0007883a 	mov	r3,zero
  40897c:	003fa706 	br	40881c <__udivdi3+0x1a8>
  408980:	00803fc4 	movi	r2,255
  408984:	11c0ae36 	bltu	r2,r7,408c40 <__udivdi3+0x5cc>
  408988:	0007883a 	mov	r3,zero
  40898c:	000b883a 	mov	r5,zero
  408990:	003f9606 	br	4087ec <__udivdi3+0x178>
  408994:	00804034 	movhi	r2,256
  408998:	10bfffc4 	addi	r2,r2,-1
  40899c:	1180ae36 	bltu	r2,r6,408c58 <__udivdi3+0x5e4>
  4089a0:	00800404 	movi	r2,16
  4089a4:	1007883a 	mov	r3,r2
  4089a8:	003f4a06 	br	4086d4 <__udivdi3+0x60>
  4089ac:	00803fc4 	movi	r2,255
  4089b0:	1400af36 	bltu	r2,r16,408c70 <__udivdi3+0x5fc>
  4089b4:	0005883a 	mov	r2,zero
  4089b8:	0007883a 	mov	r3,zero
  4089bc:	003fb006 	br	408880 <__udivdi3+0x20c>
  4089c0:	00800044 	movi	r2,1
  4089c4:	003f9606 	br	408820 <__udivdi3+0x1ac>
  4089c8:	3c0e983a 	sll	r7,r7,r16
  4089cc:	3086d83a 	srl	r3,r6,r2
  4089d0:	88aed83a 	srl	r23,r17,r2
  4089d4:	9084d83a 	srl	r2,r18,r2
  4089d8:	38e6b03a 	or	r19,r7,r3
  4089dc:	9828d43a 	srli	r20,r19,16
  4089e0:	8c22983a 	sll	r17,r17,r16
  4089e4:	b809883a 	mov	r4,r23
  4089e8:	a00b883a 	mov	r5,r20
  4089ec:	342a983a 	sll	r21,r6,r16
  4089f0:	88a2b03a 	or	r17,r17,r2
  4089f4:	040a1540 	call	40a154 <__umodsi3>
  4089f8:	b809883a 	mov	r4,r23
  4089fc:	a00b883a 	mov	r5,r20
  408a00:	1039883a 	mov	fp,r2
  408a04:	9dbfffcc 	andi	r22,r19,65535
  408a08:	040a14c0 	call	40a14c <__udivsi3>
  408a0c:	1009883a 	mov	r4,r2
  408a10:	b00b883a 	mov	r5,r22
  408a14:	102f883a 	mov	r23,r2
  408a18:	0400e700 	call	400e70 <__mulsi3>
  408a1c:	1009883a 	mov	r4,r2
  408a20:	e00e943a 	slli	r7,fp,16
  408a24:	8804d43a 	srli	r2,r17,16
  408a28:	388eb03a 	or	r7,r7,r2
  408a2c:	3900042e 	bgeu	r7,r4,408a40 <__udivdi3+0x3cc>
  408a30:	3ccf883a 	add	r7,r7,r19
  408a34:	b8bfffc4 	addi	r2,r23,-1
  408a38:	3cc0942e 	bgeu	r7,r19,408c8c <__udivdi3+0x618>
  408a3c:	102f883a 	mov	r23,r2
  408a40:	3939c83a 	sub	fp,r7,r4
  408a44:	a00b883a 	mov	r5,r20
  408a48:	e009883a 	mov	r4,fp
  408a4c:	040a1540 	call	40a154 <__umodsi3>
  408a50:	a00b883a 	mov	r5,r20
  408a54:	e009883a 	mov	r4,fp
  408a58:	d8800015 	stw	r2,0(sp)
  408a5c:	040a14c0 	call	40a14c <__udivsi3>
  408a60:	1009883a 	mov	r4,r2
  408a64:	b00b883a 	mov	r5,r22
  408a68:	1029883a 	mov	r20,r2
  408a6c:	0400e700 	call	400e70 <__mulsi3>
  408a70:	d8c00017 	ldw	r3,0(sp)
  408a74:	8c7fffcc 	andi	r17,r17,65535
  408a78:	1806943a 	slli	r3,r3,16
  408a7c:	1c46b03a 	or	r3,r3,r17
  408a80:	1880042e 	bgeu	r3,r2,408a94 <__udivdi3+0x420>
  408a84:	1cc7883a 	add	r3,r3,r19
  408a88:	a13fffc4 	addi	r4,r20,-1
  408a8c:	1cc07b2e 	bgeu	r3,r19,408c7c <__udivdi3+0x608>
  408a90:	2029883a 	mov	r20,r4
  408a94:	b82e943a 	slli	r23,r23,16
  408a98:	a822d43a 	srli	r17,r21,16
  408a9c:	ad7fffcc 	andi	r21,r21,65535
  408aa0:	a5e8b03a 	or	r20,r20,r23
  408aa4:	a5bfffcc 	andi	r22,r20,65535
  408aa8:	b009883a 	mov	r4,r22
  408aac:	a80b883a 	mov	r5,r21
  408ab0:	18afc83a 	sub	r23,r3,r2
  408ab4:	a026d43a 	srli	r19,r20,16
  408ab8:	0400e700 	call	400e70 <__mulsi3>
  408abc:	b009883a 	mov	r4,r22
  408ac0:	880b883a 	mov	r5,r17
  408ac4:	1039883a 	mov	fp,r2
  408ac8:	0400e700 	call	400e70 <__mulsi3>
  408acc:	a80b883a 	mov	r5,r21
  408ad0:	9809883a 	mov	r4,r19
  408ad4:	102d883a 	mov	r22,r2
  408ad8:	0400e700 	call	400e70 <__mulsi3>
  408adc:	9809883a 	mov	r4,r19
  408ae0:	880b883a 	mov	r5,r17
  408ae4:	102b883a 	mov	r21,r2
  408ae8:	0400e700 	call	400e70 <__mulsi3>
  408aec:	100b883a 	mov	r5,r2
  408af0:	e004d43a 	srli	r2,fp,16
  408af4:	ad89883a 	add	r4,r21,r22
  408af8:	2089883a 	add	r4,r4,r2
  408afc:	2540022e 	bgeu	r4,r21,408b08 <__udivdi3+0x494>
  408b00:	00800074 	movhi	r2,1
  408b04:	288b883a 	add	r5,r5,r2
  408b08:	2004d43a 	srli	r2,r4,16
  408b0c:	288b883a 	add	r5,r5,r2
  408b10:	b9404536 	bltu	r23,r5,408c28 <__udivdi3+0x5b4>
  408b14:	b9403f26 	beq	r23,r5,408c14 <__udivdi3+0x5a0>
  408b18:	a005883a 	mov	r2,r20
  408b1c:	0007883a 	mov	r3,zero
  408b20:	003f3f06 	br	408820 <__udivdi3+0x1ac>
  408b24:	80a0983a 	sll	r16,r16,r2
  408b28:	88eed83a 	srl	r23,r17,r3
  408b2c:	90c6d83a 	srl	r3,r18,r3
  408b30:	8028d43a 	srli	r20,r16,16
  408b34:	88a2983a 	sll	r17,r17,r2
  408b38:	b809883a 	mov	r4,r23
  408b3c:	a00b883a 	mov	r5,r20
  408b40:	88ecb03a 	or	r22,r17,r3
  408b44:	90a6983a 	sll	r19,r18,r2
  408b48:	040a1540 	call	40a154 <__umodsi3>
  408b4c:	b809883a 	mov	r4,r23
  408b50:	a00b883a 	mov	r5,r20
  408b54:	1023883a 	mov	r17,r2
  408b58:	857fffcc 	andi	r21,r16,65535
  408b5c:	040a14c0 	call	40a14c <__udivsi3>
  408b60:	1009883a 	mov	r4,r2
  408b64:	a80b883a 	mov	r5,r21
  408b68:	102f883a 	mov	r23,r2
  408b6c:	0400e700 	call	400e70 <__mulsi3>
  408b70:	1009883a 	mov	r4,r2
  408b74:	880a943a 	slli	r5,r17,16
  408b78:	b004d43a 	srli	r2,r22,16
  408b7c:	288ab03a 	or	r5,r5,r2
  408b80:	2900062e 	bgeu	r5,r4,408b9c <__udivdi3+0x528>
  408b84:	2c0b883a 	add	r5,r5,r16
  408b88:	b8bfffc4 	addi	r2,r23,-1
  408b8c:	2c004536 	bltu	r5,r16,408ca4 <__udivdi3+0x630>
  408b90:	2900442e 	bgeu	r5,r4,408ca4 <__udivdi3+0x630>
  408b94:	bdffff84 	addi	r23,r23,-2
  408b98:	2c0b883a 	add	r5,r5,r16
  408b9c:	2925c83a 	sub	r18,r5,r4
  408ba0:	9009883a 	mov	r4,r18
  408ba4:	a00b883a 	mov	r5,r20
  408ba8:	040a1540 	call	40a154 <__umodsi3>
  408bac:	1023883a 	mov	r17,r2
  408bb0:	9009883a 	mov	r4,r18
  408bb4:	a00b883a 	mov	r5,r20
  408bb8:	8822943a 	slli	r17,r17,16
  408bbc:	040a14c0 	call	40a14c <__udivsi3>
  408bc0:	1009883a 	mov	r4,r2
  408bc4:	a80b883a 	mov	r5,r21
  408bc8:	b5bfffcc 	andi	r22,r22,65535
  408bcc:	1025883a 	mov	r18,r2
  408bd0:	8da2b03a 	or	r17,r17,r22
  408bd4:	0400e700 	call	400e70 <__mulsi3>
  408bd8:	8880062e 	bgeu	r17,r2,408bf4 <__udivdi3+0x580>
  408bdc:	8c23883a 	add	r17,r17,r16
  408be0:	90ffffc4 	addi	r3,r18,-1
  408be4:	8c002d36 	bltu	r17,r16,408c9c <__udivdi3+0x628>
  408be8:	88802c2e 	bgeu	r17,r2,408c9c <__udivdi3+0x628>
  408bec:	94bfff84 	addi	r18,r18,-2
  408bf0:	8c23883a 	add	r17,r17,r16
  408bf4:	b806943a 	slli	r3,r23,16
  408bf8:	88a3c83a 	sub	r17,r17,r2
  408bfc:	90c6b03a 	or	r3,r18,r3
  408c00:	003f2c06 	br	4088b4 <__udivdi3+0x240>
  408c04:	1823883a 	mov	r17,r3
  408c08:	003eec06 	br	4087bc <__udivdi3+0x148>
  408c0c:	2023883a 	mov	r17,r4
  408c10:	003f5606 	br	40896c <__udivdi3+0x2f8>
  408c14:	2008943a 	slli	r4,r4,16
  408c18:	9420983a 	sll	r16,r18,r16
  408c1c:	e73fffcc 	andi	fp,fp,65535
  408c20:	2709883a 	add	r4,r4,fp
  408c24:	813fbc2e 	bgeu	r16,r4,408b18 <__udivdi3+0x4a4>
  408c28:	a0bfffc4 	addi	r2,r20,-1
  408c2c:	0007883a 	mov	r3,zero
  408c30:	003efb06 	br	408820 <__udivdi3+0x1ac>
  408c34:	00c00604 	movi	r3,24
  408c38:	180b883a 	mov	r5,r3
  408c3c:	003eeb06 	br	4087ec <__udivdi3+0x178>
  408c40:	00c00204 	movi	r3,8
  408c44:	180b883a 	mov	r5,r3
  408c48:	003ee806 	br	4087ec <__udivdi3+0x178>
  408c4c:	00800604 	movi	r2,24
  408c50:	1007883a 	mov	r3,r2
  408c54:	003f0a06 	br	408880 <__udivdi3+0x20c>
  408c58:	00800604 	movi	r2,24
  408c5c:	1007883a 	mov	r3,r2
  408c60:	003e9c06 	br	4086d4 <__udivdi3+0x60>
  408c64:	00800204 	movi	r2,8
  408c68:	1007883a 	mov	r3,r2
  408c6c:	003e9906 	br	4086d4 <__udivdi3+0x60>
  408c70:	00800204 	movi	r2,8
  408c74:	1007883a 	mov	r3,r2
  408c78:	003f0106 	br	408880 <__udivdi3+0x20c>
  408c7c:	18bf842e 	bgeu	r3,r2,408a90 <__udivdi3+0x41c>
  408c80:	a53fff84 	addi	r20,r20,-2
  408c84:	1cc7883a 	add	r3,r3,r19
  408c88:	003f8206 	br	408a94 <__udivdi3+0x420>
  408c8c:	393f6b2e 	bgeu	r7,r4,408a3c <__udivdi3+0x3c8>
  408c90:	bdffff84 	addi	r23,r23,-2
  408c94:	3ccf883a 	add	r7,r7,r19
  408c98:	003f6906 	br	408a40 <__udivdi3+0x3cc>
  408c9c:	1825883a 	mov	r18,r3
  408ca0:	003fd406 	br	408bf4 <__udivdi3+0x580>
  408ca4:	102f883a 	mov	r23,r2
  408ca8:	003fbc06 	br	408b9c <__udivdi3+0x528>
  408cac:	94bfff84 	addi	r18,r18,-2
  408cb0:	340d883a 	add	r6,r6,r16
  408cb4:	003f1606 	br	408910 <__udivdi3+0x29c>
  408cb8:	94bfff84 	addi	r18,r18,-2
  408cbc:	1c07883a 	add	r3,r3,r16
  408cc0:	003ea906 	br	408768 <__udivdi3+0xf4>

00408cc4 <__umoddi3>:
  408cc4:	defff304 	addi	sp,sp,-52
  408cc8:	dd000715 	stw	r20,28(sp)
  408ccc:	dcc00615 	stw	r19,24(sp)
  408cd0:	dc800515 	stw	r18,20(sp)
  408cd4:	dc400415 	stw	r17,16(sp)
  408cd8:	dc000315 	stw	r16,12(sp)
  408cdc:	dfc00c15 	stw	ra,48(sp)
  408ce0:	df000b15 	stw	fp,44(sp)
  408ce4:	ddc00a15 	stw	r23,40(sp)
  408ce8:	dd800915 	stw	r22,36(sp)
  408cec:	dd400815 	stw	r21,32(sp)
  408cf0:	2025883a 	mov	r18,r4
  408cf4:	2823883a 	mov	r17,r5
  408cf8:	3021883a 	mov	r16,r6
  408cfc:	2027883a 	mov	r19,r4
  408d00:	2829883a 	mov	r20,r5
  408d04:	38003a1e 	bne	r7,zero,408df0 <__umoddi3+0x12c>
  408d08:	2980522e 	bgeu	r5,r6,408e54 <__umoddi3+0x190>
  408d0c:	00bfffd4 	movui	r2,65535
  408d10:	1180a436 	bltu	r2,r6,408fa4 <__umoddi3+0x2e0>
  408d14:	00803fc4 	movi	r2,255
  408d18:	11816036 	bltu	r2,r6,40929c <__umoddi3+0x5d8>
  408d1c:	0005883a 	mov	r2,zero
  408d20:	0009883a 	mov	r4,zero
  408d24:	3084d83a 	srl	r2,r6,r2
  408d28:	00c010b4 	movhi	r3,66
  408d2c:	18e64c04 	addi	r3,r3,-26320
  408d30:	05400804 	movi	r21,32
  408d34:	1885883a 	add	r2,r3,r2
  408d38:	10800003 	ldbu	r2,0(r2)
  408d3c:	1109883a 	add	r4,r2,r4
  408d40:	a92bc83a 	sub	r21,r21,r4
  408d44:	a8010e26 	beq	r21,zero,409180 <__umoddi3+0x4bc>
  408d48:	8d62983a 	sll	r17,r17,r21
  408d4c:	9108d83a 	srl	r4,r18,r4
  408d50:	3560983a 	sll	r16,r6,r21
  408d54:	9566983a 	sll	r19,r18,r21
  408d58:	8928b03a 	or	r20,r17,r4
  408d5c:	8022d43a 	srli	r17,r16,16
  408d60:	a009883a 	mov	r4,r20
  408d64:	84bfffcc 	andi	r18,r16,65535
  408d68:	880b883a 	mov	r5,r17
  408d6c:	040a1540 	call	40a154 <__umodsi3>
  408d70:	a009883a 	mov	r4,r20
  408d74:	880b883a 	mov	r5,r17
  408d78:	102d883a 	mov	r22,r2
  408d7c:	040a14c0 	call	40a14c <__udivsi3>
  408d80:	1009883a 	mov	r4,r2
  408d84:	900b883a 	mov	r5,r18
  408d88:	0400e700 	call	400e70 <__mulsi3>
  408d8c:	1009883a 	mov	r4,r2
  408d90:	b006943a 	slli	r3,r22,16
  408d94:	9804d43a 	srli	r2,r19,16
  408d98:	1886b03a 	or	r3,r3,r2
  408d9c:	1900042e 	bgeu	r3,r4,408db0 <__umoddi3+0xec>
  408da0:	1c07883a 	add	r3,r3,r16
  408da4:	1c000236 	bltu	r3,r16,408db0 <__umoddi3+0xec>
  408da8:	1900012e 	bgeu	r3,r4,408db0 <__umoddi3+0xec>
  408dac:	1c07883a 	add	r3,r3,r16
  408db0:	1929c83a 	sub	r20,r3,r4
  408db4:	a009883a 	mov	r4,r20
  408db8:	880b883a 	mov	r5,r17
  408dbc:	040a1540 	call	40a154 <__umodsi3>
  408dc0:	102d883a 	mov	r22,r2
  408dc4:	a009883a 	mov	r4,r20
  408dc8:	880b883a 	mov	r5,r17
  408dcc:	b02c943a 	slli	r22,r22,16
  408dd0:	040a14c0 	call	40a14c <__udivsi3>
  408dd4:	1009883a 	mov	r4,r2
  408dd8:	900b883a 	mov	r5,r18
  408ddc:	9cffffcc 	andi	r19,r19,65535
  408de0:	0400e700 	call	400e70 <__mulsi3>
  408de4:	b4e6b03a 	or	r19,r22,r19
  408de8:	9880572e 	bgeu	r19,r2,408f48 <__umoddi3+0x284>
  408dec:	00005206 	br	408f38 <__umoddi3+0x274>
  408df0:	29c05936 	bltu	r5,r7,408f58 <__umoddi3+0x294>
  408df4:	00bfffd4 	movui	r2,65535
  408df8:	11c0652e 	bgeu	r2,r7,408f90 <__umoddi3+0x2cc>
  408dfc:	00804034 	movhi	r2,256
  408e00:	10bfffc4 	addi	r2,r2,-1
  408e04:	11c11936 	bltu	r2,r7,40926c <__umoddi3+0x5a8>
  408e08:	00c00404 	movi	r3,16
  408e0c:	1827883a 	mov	r19,r3
  408e10:	38c6d83a 	srl	r3,r7,r3
  408e14:	010010b4 	movhi	r4,66
  408e18:	21264c04 	addi	r4,r4,-26320
  408e1c:	04000804 	movi	r16,32
  408e20:	20c7883a 	add	r3,r4,r3
  408e24:	18800003 	ldbu	r2,0(r3)
  408e28:	14e7883a 	add	r19,r2,r19
  408e2c:	84e1c83a 	sub	r16,r16,r19
  408e30:	8000671e 	bne	r16,zero,408fd0 <__umoddi3+0x30c>
  408e34:	3c400136 	bltu	r7,r17,408e3c <__umoddi3+0x178>
  408e38:	91812536 	bltu	r18,r6,4092d0 <__umoddi3+0x60c>
  408e3c:	9185c83a 	sub	r2,r18,r6
  408e40:	89e3c83a 	sub	r17,r17,r7
  408e44:	90a5803a 	cmpltu	r18,r18,r2
  408e48:	8ca9c83a 	sub	r20,r17,r18
  408e4c:	a007883a 	mov	r3,r20
  408e50:	00004306 	br	408f60 <__umoddi3+0x29c>
  408e54:	3000041e 	bne	r6,zero,408e68 <__umoddi3+0x1a4>
  408e58:	01000044 	movi	r4,1
  408e5c:	000b883a 	mov	r5,zero
  408e60:	040a14c0 	call	40a14c <__udivsi3>
  408e64:	1021883a 	mov	r16,r2
  408e68:	00bfffd4 	movui	r2,65535
  408e6c:	1400532e 	bgeu	r2,r16,408fbc <__umoddi3+0x2f8>
  408e70:	00804034 	movhi	r2,256
  408e74:	10bfffc4 	addi	r2,r2,-1
  408e78:	14010536 	bltu	r2,r16,409290 <__umoddi3+0x5cc>
  408e7c:	00800404 	movi	r2,16
  408e80:	1007883a 	mov	r3,r2
  408e84:	8084d83a 	srl	r2,r16,r2
  408e88:	010010b4 	movhi	r4,66
  408e8c:	21264c04 	addi	r4,r4,-26320
  408e90:	05400804 	movi	r21,32
  408e94:	2085883a 	add	r2,r4,r2
  408e98:	10800003 	ldbu	r2,0(r2)
  408e9c:	10c7883a 	add	r3,r2,r3
  408ea0:	a8ebc83a 	sub	r21,r21,r3
  408ea4:	a800b81e 	bne	r21,zero,409188 <__umoddi3+0x4c4>
  408ea8:	8028d43a 	srli	r20,r16,16
  408eac:	8c23c83a 	sub	r17,r17,r16
  408eb0:	85bfffcc 	andi	r22,r16,65535
  408eb4:	8809883a 	mov	r4,r17
  408eb8:	a00b883a 	mov	r5,r20
  408ebc:	040a1540 	call	40a154 <__umodsi3>
  408ec0:	8809883a 	mov	r4,r17
  408ec4:	a00b883a 	mov	r5,r20
  408ec8:	1025883a 	mov	r18,r2
  408ecc:	040a14c0 	call	40a14c <__udivsi3>
  408ed0:	1009883a 	mov	r4,r2
  408ed4:	b00b883a 	mov	r5,r22
  408ed8:	0400e700 	call	400e70 <__mulsi3>
  408edc:	1009883a 	mov	r4,r2
  408ee0:	9006943a 	slli	r3,r18,16
  408ee4:	9804d43a 	srli	r2,r19,16
  408ee8:	1886b03a 	or	r3,r3,r2
  408eec:	1900032e 	bgeu	r3,r4,408efc <__umoddi3+0x238>
  408ef0:	1c07883a 	add	r3,r3,r16
  408ef4:	1c000136 	bltu	r3,r16,408efc <__umoddi3+0x238>
  408ef8:	1900f336 	bltu	r3,r4,4092c8 <__umoddi3+0x604>
  408efc:	1923c83a 	sub	r17,r3,r4
  408f00:	8809883a 	mov	r4,r17
  408f04:	a00b883a 	mov	r5,r20
  408f08:	040a1540 	call	40a154 <__umodsi3>
  408f0c:	102f883a 	mov	r23,r2
  408f10:	8809883a 	mov	r4,r17
  408f14:	a00b883a 	mov	r5,r20
  408f18:	b82e943a 	slli	r23,r23,16
  408f1c:	040a14c0 	call	40a14c <__udivsi3>
  408f20:	1009883a 	mov	r4,r2
  408f24:	b00b883a 	mov	r5,r22
  408f28:	9cffffcc 	andi	r19,r19,65535
  408f2c:	0400e700 	call	400e70 <__mulsi3>
  408f30:	bce6b03a 	or	r19,r23,r19
  408f34:	9880042e 	bgeu	r19,r2,408f48 <__umoddi3+0x284>
  408f38:	9c27883a 	add	r19,r19,r16
  408f3c:	9c000236 	bltu	r19,r16,408f48 <__umoddi3+0x284>
  408f40:	9880012e 	bgeu	r19,r2,408f48 <__umoddi3+0x284>
  408f44:	9c27883a 	add	r19,r19,r16
  408f48:	9885c83a 	sub	r2,r19,r2
  408f4c:	1544d83a 	srl	r2,r2,r21
  408f50:	0007883a 	mov	r3,zero
  408f54:	00000206 	br	408f60 <__umoddi3+0x29c>
  408f58:	2005883a 	mov	r2,r4
  408f5c:	2807883a 	mov	r3,r5
  408f60:	dfc00c17 	ldw	ra,48(sp)
  408f64:	df000b17 	ldw	fp,44(sp)
  408f68:	ddc00a17 	ldw	r23,40(sp)
  408f6c:	dd800917 	ldw	r22,36(sp)
  408f70:	dd400817 	ldw	r21,32(sp)
  408f74:	dd000717 	ldw	r20,28(sp)
  408f78:	dcc00617 	ldw	r19,24(sp)
  408f7c:	dc800517 	ldw	r18,20(sp)
  408f80:	dc400417 	ldw	r17,16(sp)
  408f84:	dc000317 	ldw	r16,12(sp)
  408f88:	dec00d04 	addi	sp,sp,52
  408f8c:	f800283a 	ret
  408f90:	00803fc4 	movi	r2,255
  408f94:	11c0b236 	bltu	r2,r7,409260 <__umoddi3+0x59c>
  408f98:	0007883a 	mov	r3,zero
  408f9c:	0027883a 	mov	r19,zero
  408fa0:	003f9b06 	br	408e10 <__umoddi3+0x14c>
  408fa4:	00804034 	movhi	r2,256
  408fa8:	10bfffc4 	addi	r2,r2,-1
  408fac:	1180b236 	bltu	r2,r6,409278 <__umoddi3+0x5b4>
  408fb0:	00800404 	movi	r2,16
  408fb4:	1009883a 	mov	r4,r2
  408fb8:	003f5a06 	br	408d24 <__umoddi3+0x60>
  408fbc:	00803fc4 	movi	r2,255
  408fc0:	1400b036 	bltu	r2,r16,409284 <__umoddi3+0x5c0>
  408fc4:	0005883a 	mov	r2,zero
  408fc8:	0007883a 	mov	r3,zero
  408fcc:	003fad06 	br	408e84 <__umoddi3+0x1c0>
  408fd0:	34c4d83a 	srl	r2,r6,r19
  408fd4:	3c0e983a 	sll	r7,r7,r16
  408fd8:	8cf8d83a 	srl	fp,r17,r19
  408fdc:	8c22983a 	sll	r17,r17,r16
  408fe0:	38a8b03a 	or	r20,r7,r2
  408fe4:	a02ad43a 	srli	r21,r20,16
  408fe8:	94c4d83a 	srl	r2,r18,r19
  408fec:	e009883a 	mov	r4,fp
  408ff0:	a80b883a 	mov	r5,r21
  408ff4:	342c983a 	sll	r22,r6,r16
  408ff8:	88a2b03a 	or	r17,r17,r2
  408ffc:	040a1540 	call	40a154 <__umodsi3>
  409000:	e009883a 	mov	r4,fp
  409004:	a80b883a 	mov	r5,r21
  409008:	a5ffffcc 	andi	r23,r20,65535
  40900c:	d8800215 	stw	r2,8(sp)
  409010:	040a14c0 	call	40a14c <__udivsi3>
  409014:	1009883a 	mov	r4,r2
  409018:	b80b883a 	mov	r5,r23
  40901c:	1039883a 	mov	fp,r2
  409020:	0400e700 	call	400e70 <__mulsi3>
  409024:	d8c00217 	ldw	r3,8(sp)
  409028:	1009883a 	mov	r4,r2
  40902c:	8804d43a 	srli	r2,r17,16
  409030:	1806943a 	slli	r3,r3,16
  409034:	9424983a 	sll	r18,r18,r16
  409038:	1886b03a 	or	r3,r3,r2
  40903c:	1900042e 	bgeu	r3,r4,409050 <__umoddi3+0x38c>
  409040:	1d07883a 	add	r3,r3,r20
  409044:	e0bfffc4 	addi	r2,fp,-1
  409048:	1d009b2e 	bgeu	r3,r20,4092b8 <__umoddi3+0x5f4>
  40904c:	1039883a 	mov	fp,r2
  409050:	1907c83a 	sub	r3,r3,r4
  409054:	1809883a 	mov	r4,r3
  409058:	a80b883a 	mov	r5,r21
  40905c:	d8c00215 	stw	r3,8(sp)
  409060:	040a1540 	call	40a154 <__umodsi3>
  409064:	d8c00217 	ldw	r3,8(sp)
  409068:	a80b883a 	mov	r5,r21
  40906c:	d8800015 	stw	r2,0(sp)
  409070:	1809883a 	mov	r4,r3
  409074:	040a14c0 	call	40a14c <__udivsi3>
  409078:	1009883a 	mov	r4,r2
  40907c:	b80b883a 	mov	r5,r23
  409080:	102b883a 	mov	r21,r2
  409084:	0400e700 	call	400e70 <__mulsi3>
  409088:	d9c00017 	ldw	r7,0(sp)
  40908c:	8c7fffcc 	andi	r17,r17,65535
  409090:	380e943a 	slli	r7,r7,16
  409094:	3c4eb03a 	or	r7,r7,r17
  409098:	3880042e 	bgeu	r7,r2,4090ac <__umoddi3+0x3e8>
  40909c:	3d0f883a 	add	r7,r7,r20
  4090a0:	a8ffffc4 	addi	r3,r21,-1
  4090a4:	3d00802e 	bgeu	r7,r20,4092a8 <__umoddi3+0x5e4>
  4090a8:	182b883a 	mov	r21,r3
  4090ac:	e038943a 	slli	fp,fp,16
  4090b0:	b010d43a 	srli	r8,r22,16
  4090b4:	b1bfffcc 	andi	r6,r22,65535
  4090b8:	af2ab03a 	or	r21,r21,fp
  4090bc:	a82ed43a 	srli	r23,r21,16
  4090c0:	ad7fffcc 	andi	r21,r21,65535
  4090c4:	300b883a 	mov	r5,r6
  4090c8:	a809883a 	mov	r4,r21
  4090cc:	38a3c83a 	sub	r17,r7,r2
  4090d0:	d9800115 	stw	r6,4(sp)
  4090d4:	da000015 	stw	r8,0(sp)
  4090d8:	0400e700 	call	400e70 <__mulsi3>
  4090dc:	da000017 	ldw	r8,0(sp)
  4090e0:	a809883a 	mov	r4,r21
  4090e4:	1039883a 	mov	fp,r2
  4090e8:	400b883a 	mov	r5,r8
  4090ec:	da000215 	stw	r8,8(sp)
  4090f0:	0400e700 	call	400e70 <__mulsi3>
  4090f4:	d9800117 	ldw	r6,4(sp)
  4090f8:	b809883a 	mov	r4,r23
  4090fc:	d8800015 	stw	r2,0(sp)
  409100:	300b883a 	mov	r5,r6
  409104:	0400e700 	call	400e70 <__mulsi3>
  409108:	d8c00217 	ldw	r3,8(sp)
  40910c:	b809883a 	mov	r4,r23
  409110:	102b883a 	mov	r21,r2
  409114:	180b883a 	mov	r5,r3
  409118:	0400e700 	call	400e70 <__mulsi3>
  40911c:	d9c00017 	ldw	r7,0(sp)
  409120:	1007883a 	mov	r3,r2
  409124:	e004d43a 	srli	r2,fp,16
  409128:	a9c9883a 	add	r4,r21,r7
  40912c:	2089883a 	add	r4,r4,r2
  409130:	2540022e 	bgeu	r4,r21,40913c <__umoddi3+0x478>
  409134:	00800074 	movhi	r2,1
  409138:	1887883a 	add	r3,r3,r2
  40913c:	2004d43a 	srli	r2,r4,16
  409140:	2008943a 	slli	r4,r4,16
  409144:	e73fffcc 	andi	fp,fp,65535
  409148:	1887883a 	add	r3,r3,r2
  40914c:	2709883a 	add	r4,r4,fp
  409150:	88c03d36 	bltu	r17,r3,409248 <__umoddi3+0x584>
  409154:	88c06126 	beq	r17,r3,4092dc <__umoddi3+0x618>
  409158:	88c7c83a 	sub	r3,r17,r3
  40915c:	202d883a 	mov	r22,r4
  409160:	95adc83a 	sub	r22,r18,r22
  409164:	95a5803a 	cmpltu	r18,r18,r22
  409168:	1c87c83a 	sub	r3,r3,r18
  40916c:	1cc4983a 	sll	r2,r3,r19
  409170:	b42cd83a 	srl	r22,r22,r16
  409174:	1c06d83a 	srl	r3,r3,r16
  409178:	1584b03a 	or	r2,r2,r22
  40917c:	003f7806 	br	408f60 <__umoddi3+0x29c>
  409180:	002b883a 	mov	r21,zero
  409184:	003ef506 	br	408d5c <__umoddi3+0x98>
  409188:	8560983a 	sll	r16,r16,r21
  40918c:	88e6d83a 	srl	r19,r17,r3
  409190:	90c6d83a 	srl	r3,r18,r3
  409194:	8028d43a 	srli	r20,r16,16
  409198:	8d62983a 	sll	r17,r17,r21
  40919c:	9809883a 	mov	r4,r19
  4091a0:	a00b883a 	mov	r5,r20
  4091a4:	88eeb03a 	or	r23,r17,r3
  4091a8:	040a1540 	call	40a154 <__umodsi3>
  4091ac:	9809883a 	mov	r4,r19
  4091b0:	a00b883a 	mov	r5,r20
  4091b4:	1023883a 	mov	r17,r2
  4091b8:	85bfffcc 	andi	r22,r16,65535
  4091bc:	040a14c0 	call	40a14c <__udivsi3>
  4091c0:	1009883a 	mov	r4,r2
  4091c4:	b00b883a 	mov	r5,r22
  4091c8:	0400e700 	call	400e70 <__mulsi3>
  4091cc:	1007883a 	mov	r3,r2
  4091d0:	8808943a 	slli	r4,r17,16
  4091d4:	b804d43a 	srli	r2,r23,16
  4091d8:	9566983a 	sll	r19,r18,r21
  4091dc:	2088b03a 	or	r4,r4,r2
  4091e0:	20c0042e 	bgeu	r4,r3,4091f4 <__umoddi3+0x530>
  4091e4:	2409883a 	add	r4,r4,r16
  4091e8:	24000236 	bltu	r4,r16,4091f4 <__umoddi3+0x530>
  4091ec:	20c0012e 	bgeu	r4,r3,4091f4 <__umoddi3+0x530>
  4091f0:	2409883a 	add	r4,r4,r16
  4091f4:	20e5c83a 	sub	r18,r4,r3
  4091f8:	9009883a 	mov	r4,r18
  4091fc:	a00b883a 	mov	r5,r20
  409200:	040a1540 	call	40a154 <__umodsi3>
  409204:	1023883a 	mov	r17,r2
  409208:	9009883a 	mov	r4,r18
  40920c:	a00b883a 	mov	r5,r20
  409210:	8822943a 	slli	r17,r17,16
  409214:	040a14c0 	call	40a14c <__udivsi3>
  409218:	1009883a 	mov	r4,r2
  40921c:	b00b883a 	mov	r5,r22
  409220:	bdffffcc 	andi	r23,r23,65535
  409224:	0400e700 	call	400e70 <__mulsi3>
  409228:	8de2b03a 	or	r17,r17,r23
  40922c:	8880042e 	bgeu	r17,r2,409240 <__umoddi3+0x57c>
  409230:	8c23883a 	add	r17,r17,r16
  409234:	8c000236 	bltu	r17,r16,409240 <__umoddi3+0x57c>
  409238:	8880012e 	bgeu	r17,r2,409240 <__umoddi3+0x57c>
  40923c:	8c23883a 	add	r17,r17,r16
  409240:	88a3c83a 	sub	r17,r17,r2
  409244:	003f1b06 	br	408eb4 <__umoddi3+0x1f0>
  409248:	25adc83a 	sub	r22,r4,r22
  40924c:	1d07c83a 	sub	r3,r3,r20
  409250:	2589803a 	cmpltu	r4,r4,r22
  409254:	1907c83a 	sub	r3,r3,r4
  409258:	88c7c83a 	sub	r3,r17,r3
  40925c:	003fc006 	br	409160 <__umoddi3+0x49c>
  409260:	00c00204 	movi	r3,8
  409264:	1827883a 	mov	r19,r3
  409268:	003ee906 	br	408e10 <__umoddi3+0x14c>
  40926c:	00c00604 	movi	r3,24
  409270:	1827883a 	mov	r19,r3
  409274:	003ee606 	br	408e10 <__umoddi3+0x14c>
  409278:	00800604 	movi	r2,24
  40927c:	1009883a 	mov	r4,r2
  409280:	003ea806 	br	408d24 <__umoddi3+0x60>
  409284:	00800204 	movi	r2,8
  409288:	1007883a 	mov	r3,r2
  40928c:	003efd06 	br	408e84 <__umoddi3+0x1c0>
  409290:	00800604 	movi	r2,24
  409294:	1007883a 	mov	r3,r2
  409298:	003efa06 	br	408e84 <__umoddi3+0x1c0>
  40929c:	00800204 	movi	r2,8
  4092a0:	1009883a 	mov	r4,r2
  4092a4:	003e9f06 	br	408d24 <__umoddi3+0x60>
  4092a8:	38bf7f2e 	bgeu	r7,r2,4090a8 <__umoddi3+0x3e4>
  4092ac:	ad7fff84 	addi	r21,r21,-2
  4092b0:	3d0f883a 	add	r7,r7,r20
  4092b4:	003f7d06 	br	4090ac <__umoddi3+0x3e8>
  4092b8:	193f642e 	bgeu	r3,r4,40904c <__umoddi3+0x388>
  4092bc:	e73fff84 	addi	fp,fp,-2
  4092c0:	1d07883a 	add	r3,r3,r20
  4092c4:	003f6206 	br	409050 <__umoddi3+0x38c>
  4092c8:	1c07883a 	add	r3,r3,r16
  4092cc:	003f0b06 	br	408efc <__umoddi3+0x238>
  4092d0:	9005883a 	mov	r2,r18
  4092d4:	a007883a 	mov	r3,r20
  4092d8:	003f2106 	br	408f60 <__umoddi3+0x29c>
  4092dc:	913fda36 	bltu	r18,r4,409248 <__umoddi3+0x584>
  4092e0:	202d883a 	mov	r22,r4
  4092e4:	0007883a 	mov	r3,zero
  4092e8:	003f9d06 	br	409160 <__umoddi3+0x49c>

004092ec <_fpadd_parts>:
  4092ec:	2005883a 	mov	r2,r4
  4092f0:	21000017 	ldw	r4,0(r4)
  4092f4:	01c00044 	movi	r7,1
  4092f8:	3900622e 	bgeu	r7,r4,409484 <_fpadd_parts+0x198>
  4092fc:	28c00017 	ldw	r3,0(r5)
  409300:	38c05f2e 	bgeu	r7,r3,409480 <_fpadd_parts+0x194>
  409304:	01c00104 	movi	r7,4
  409308:	21c0c626 	beq	r4,r7,409624 <_fpadd_parts+0x338>
  40930c:	19c05c26 	beq	r3,r7,409480 <_fpadd_parts+0x194>
  409310:	01c00084 	movi	r7,2
  409314:	19c06b26 	beq	r3,r7,4094c4 <_fpadd_parts+0x1d8>
  409318:	21c05926 	beq	r4,r7,409480 <_fpadd_parts+0x194>
  40931c:	11c00217 	ldw	r7,8(r2)
  409320:	2ac00217 	ldw	r11,8(r5)
  409324:	13000317 	ldw	r12,12(r2)
  409328:	13400417 	ldw	r13,16(r2)
  40932c:	3ac9c83a 	sub	r4,r7,r11
  409330:	2a000317 	ldw	r8,12(r5)
  409334:	2a400417 	ldw	r9,16(r5)
  409338:	2015883a 	mov	r10,r4
  40933c:	20007516 	blt	r4,zero,409514 <_fpadd_parts+0x228>
  409340:	00c00fc4 	movi	r3,63
  409344:	1a805016 	blt	r3,r10,409488 <_fpadd_parts+0x19c>
  409348:	0100870e 	bge	zero,r4,409568 <_fpadd_parts+0x27c>
  40934c:	50fff804 	addi	r3,r10,-32
  409350:	18009916 	blt	r3,zero,4095b8 <_fpadd_parts+0x2cc>
  409354:	48d6d83a 	srl	r11,r9,r3
  409358:	001d883a 	mov	r14,zero
  40935c:	18009e16 	blt	r3,zero,4095d8 <_fpadd_parts+0x2ec>
  409360:	01000044 	movi	r4,1
  409364:	20c6983a 	sll	r3,r4,r3
  409368:	0015883a 	mov	r10,zero
  40936c:	513fffc4 	addi	r4,r10,-1
  409370:	2295403a 	cmpgeu	r10,r4,r10
  409374:	1a87c83a 	sub	r3,r3,r10
  409378:	1a52703a 	and	r9,r3,r9
  40937c:	2210703a 	and	r8,r4,r8
  409380:	4250b03a 	or	r8,r8,r9
  409384:	4010c03a 	cmpne	r8,r8,zero
  409388:	42d0b03a 	or	r8,r8,r11
  40938c:	7013883a 	mov	r9,r14
  409390:	11000117 	ldw	r4,4(r2)
  409394:	28800117 	ldw	r2,4(r5)
  409398:	20804126 	beq	r4,r2,4094a0 <_fpadd_parts+0x1b4>
  40939c:	20006326 	beq	r4,zero,40952c <_fpadd_parts+0x240>
  4093a0:	4305c83a 	sub	r2,r8,r12
  4093a4:	4091803a 	cmpltu	r8,r8,r2
  4093a8:	4b47c83a 	sub	r3,r9,r13
  4093ac:	1a07c83a 	sub	r3,r3,r8
  4093b0:	18006316 	blt	r3,zero,409540 <_fpadd_parts+0x254>
  4093b4:	30000115 	stw	zero,4(r6)
  4093b8:	31c00215 	stw	r7,8(r6)
  4093bc:	30800315 	stw	r2,12(r6)
  4093c0:	30c00415 	stw	r3,16(r6)
  4093c4:	11ffffc4 	addi	r7,r2,-1
  4093c8:	388b403a 	cmpgeu	r5,r7,r2
  4093cc:	194bc83a 	sub	r5,r3,r5
  4093d0:	01040034 	movhi	r4,4096
  4093d4:	213fffc4 	addi	r4,r4,-1
  4093d8:	21401736 	bltu	r4,r5,409438 <_fpadd_parts+0x14c>
  4093dc:	29008226 	beq	r5,r4,4095e8 <_fpadd_parts+0x2fc>
  4093e0:	31400217 	ldw	r5,8(r6)
  4093e4:	02840034 	movhi	r10,4096
  4093e8:	52bfffc4 	addi	r10,r10,-1
  4093ec:	033fff84 	movi	r12,-2
  4093f0:	297fffc4 	addi	r5,r5,-1
  4093f4:	00000106 	br	4093fc <_fpadd_parts+0x110>
  4093f8:	3a804a26 	beq	r7,r10,409524 <_fpadd_parts+0x238>
  4093fc:	1089883a 	add	r4,r2,r2
  409400:	2091803a 	cmpltu	r8,r4,r2
  409404:	18c7883a 	add	r3,r3,r3
  409408:	227fffc4 	addi	r9,r4,-1
  40940c:	40d1883a 	add	r8,r8,r3
  409410:	490f403a 	cmpgeu	r7,r9,r4
  409414:	41cfc83a 	sub	r7,r8,r7
  409418:	2817883a 	mov	r11,r5
  40941c:	2005883a 	mov	r2,r4
  409420:	4007883a 	mov	r3,r8
  409424:	297fffc4 	addi	r5,r5,-1
  409428:	51fff32e 	bgeu	r10,r7,4093f8 <_fpadd_parts+0x10c>
  40942c:	31000315 	stw	r4,12(r6)
  409430:	32000415 	stw	r8,16(r6)
  409434:	32c00215 	stw	r11,8(r6)
  409438:	010000c4 	movi	r4,3
  40943c:	31000015 	stw	r4,0(r6)
  409440:	01080034 	movhi	r4,8192
  409444:	213fffc4 	addi	r4,r4,-1
  409448:	20c00b2e 	bgeu	r4,r3,409478 <_fpadd_parts+0x18c>
  40944c:	180e97fa 	slli	r7,r3,31
  409450:	1008d07a 	srli	r4,r2,1
  409454:	31400217 	ldw	r5,8(r6)
  409458:	1806d07a 	srli	r3,r3,1
  40945c:	1080004c 	andi	r2,r2,1
  409460:	3908b03a 	or	r4,r7,r4
  409464:	1108b03a 	or	r4,r2,r4
  409468:	29400044 	addi	r5,r5,1
  40946c:	31000315 	stw	r4,12(r6)
  409470:	30c00415 	stw	r3,16(r6)
  409474:	31400215 	stw	r5,8(r6)
  409478:	3005883a 	mov	r2,r6
  40947c:	f800283a 	ret
  409480:	2805883a 	mov	r2,r5
  409484:	f800283a 	ret
  409488:	59c01e0e 	bge	r11,r7,409504 <_fpadd_parts+0x218>
  40948c:	11000117 	ldw	r4,4(r2)
  409490:	28800117 	ldw	r2,4(r5)
  409494:	0011883a 	mov	r8,zero
  409498:	0013883a 	mov	r9,zero
  40949c:	20bfbf1e 	bne	r4,r2,40939c <_fpadd_parts+0xb0>
  4094a0:	4305883a 	add	r2,r8,r12
  4094a4:	1207803a 	cmpltu	r3,r2,r8
  4094a8:	4b53883a 	add	r9,r9,r13
  4094ac:	1a47883a 	add	r3,r3,r9
  4094b0:	31000115 	stw	r4,4(r6)
  4094b4:	31c00215 	stw	r7,8(r6)
  4094b8:	30800315 	stw	r2,12(r6)
  4094bc:	30c00415 	stw	r3,16(r6)
  4094c0:	003fdd06 	br	409438 <_fpadd_parts+0x14c>
  4094c4:	20ffef1e 	bne	r4,r3,409484 <_fpadd_parts+0x198>
  4094c8:	31000015 	stw	r4,0(r6)
  4094cc:	10c00117 	ldw	r3,4(r2)
  4094d0:	30c00115 	stw	r3,4(r6)
  4094d4:	10c00217 	ldw	r3,8(r2)
  4094d8:	11000117 	ldw	r4,4(r2)
  4094dc:	29400117 	ldw	r5,4(r5)
  4094e0:	30c00215 	stw	r3,8(r6)
  4094e4:	10c00317 	ldw	r3,12(r2)
  4094e8:	2908703a 	and	r4,r5,r4
  4094ec:	30c00315 	stw	r3,12(r6)
  4094f0:	10c00417 	ldw	r3,16(r2)
  4094f4:	31000115 	stw	r4,4(r6)
  4094f8:	3005883a 	mov	r2,r6
  4094fc:	30c00415 	stw	r3,16(r6)
  409500:	f800283a 	ret
  409504:	580f883a 	mov	r7,r11
  409508:	0019883a 	mov	r12,zero
  40950c:	001b883a 	mov	r13,zero
  409510:	003f9f06 	br	409390 <_fpadd_parts+0xa4>
  409514:	0115c83a 	sub	r10,zero,r4
  409518:	00c00fc4 	movi	r3,63
  40951c:	1abfda16 	blt	r3,r10,409488 <_fpadd_parts+0x19c>
  409520:	003f8906 	br	409348 <_fpadd_parts+0x5c>
  409524:	627fb52e 	bgeu	r12,r9,4093fc <_fpadd_parts+0x110>
  409528:	003fc006 	br	40942c <_fpadd_parts+0x140>
  40952c:	6205c83a 	sub	r2,r12,r8
  409530:	6099803a 	cmpltu	r12,r12,r2
  409534:	6a47c83a 	sub	r3,r13,r9
  409538:	1b07c83a 	sub	r3,r3,r12
  40953c:	183f9d0e 	bge	r3,zero,4093b4 <_fpadd_parts+0xc8>
  409540:	0085c83a 	sub	r2,zero,r2
  409544:	1008c03a 	cmpne	r4,r2,zero
  409548:	00c7c83a 	sub	r3,zero,r3
  40954c:	1907c83a 	sub	r3,r3,r4
  409550:	01000044 	movi	r4,1
  409554:	31000115 	stw	r4,4(r6)
  409558:	31c00215 	stw	r7,8(r6)
  40955c:	30800315 	stw	r2,12(r6)
  409560:	30c00415 	stw	r3,16(r6)
  409564:	003f9706 	br	4093c4 <_fpadd_parts+0xd8>
  409568:	203f8926 	beq	r4,zero,409390 <_fpadd_parts+0xa4>
  40956c:	50fff804 	addi	r3,r10,-32
  409570:	3a8f883a 	add	r7,r7,r10
  409574:	18002316 	blt	r3,zero,409604 <_fpadd_parts+0x318>
  409578:	68d6d83a 	srl	r11,r13,r3
  40957c:	001d883a 	mov	r14,zero
  409580:	18001c16 	blt	r3,zero,4095f4 <_fpadd_parts+0x308>
  409584:	01000044 	movi	r4,1
  409588:	20c6983a 	sll	r3,r4,r3
  40958c:	0015883a 	mov	r10,zero
  409590:	513fffc4 	addi	r4,r10,-1
  409594:	2295403a 	cmpgeu	r10,r4,r10
  409598:	1a87c83a 	sub	r3,r3,r10
  40959c:	1b5a703a 	and	r13,r3,r13
  4095a0:	2318703a 	and	r12,r4,r12
  4095a4:	6358b03a 	or	r12,r12,r13
  4095a8:	6018c03a 	cmpne	r12,r12,zero
  4095ac:	62d8b03a 	or	r12,r12,r11
  4095b0:	701b883a 	mov	r13,r14
  4095b4:	003f7606 	br	409390 <_fpadd_parts+0xa4>
  4095b8:	4808907a 	slli	r4,r9,1
  4095bc:	02c007c4 	movi	r11,31
  4095c0:	5a97c83a 	sub	r11,r11,r10
  4095c4:	22c8983a 	sll	r4,r4,r11
  4095c8:	4296d83a 	srl	r11,r8,r10
  4095cc:	4a9cd83a 	srl	r14,r9,r10
  4095d0:	22d6b03a 	or	r11,r4,r11
  4095d4:	003f6106 	br	40935c <_fpadd_parts+0x70>
  4095d8:	00c00044 	movi	r3,1
  4095dc:	1a94983a 	sll	r10,r3,r10
  4095e0:	0007883a 	mov	r3,zero
  4095e4:	003f6106 	br	40936c <_fpadd_parts+0x80>
  4095e8:	013fff84 	movi	r4,-2
  4095ec:	21ff7c2e 	bgeu	r4,r7,4093e0 <_fpadd_parts+0xf4>
  4095f0:	003f9106 	br	409438 <_fpadd_parts+0x14c>
  4095f4:	00c00044 	movi	r3,1
  4095f8:	1a94983a 	sll	r10,r3,r10
  4095fc:	0007883a 	mov	r3,zero
  409600:	003fe306 	br	409590 <_fpadd_parts+0x2a4>
  409604:	6816907a 	slli	r11,r13,1
  409608:	010007c4 	movi	r4,31
  40960c:	2289c83a 	sub	r4,r4,r10
  409610:	5908983a 	sll	r4,r11,r4
  409614:	6296d83a 	srl	r11,r12,r10
  409618:	6a9cd83a 	srl	r14,r13,r10
  40961c:	22d6b03a 	or	r11,r4,r11
  409620:	003fd706 	br	409580 <_fpadd_parts+0x294>
  409624:	193f971e 	bne	r3,r4,409484 <_fpadd_parts+0x198>
  409628:	11000117 	ldw	r4,4(r2)
  40962c:	28c00117 	ldw	r3,4(r5)
  409630:	20ff9426 	beq	r4,r3,409484 <_fpadd_parts+0x198>
  409634:	008010b4 	movhi	r2,66
  409638:	10a64704 	addi	r2,r2,-26340
  40963c:	f800283a 	ret

00409640 <__adddf3>:
  409640:	deffec04 	addi	sp,sp,-80
  409644:	d9001115 	stw	r4,68(sp)
  409648:	d9401215 	stw	r5,72(sp)
  40964c:	d9001104 	addi	r4,sp,68
  409650:	d9400a04 	addi	r5,sp,40
  409654:	dfc01315 	stw	ra,76(sp)
  409658:	d9c01015 	stw	r7,64(sp)
  40965c:	d9800f15 	stw	r6,60(sp)
  409660:	040a53c0 	call	40a53c <__unpack_d>
  409664:	d9000f04 	addi	r4,sp,60
  409668:	d9400504 	addi	r5,sp,20
  40966c:	040a53c0 	call	40a53c <__unpack_d>
  409670:	d9000a04 	addi	r4,sp,40
  409674:	d9400504 	addi	r5,sp,20
  409678:	d80d883a 	mov	r6,sp
  40967c:	04092ec0 	call	4092ec <_fpadd_parts>
  409680:	1009883a 	mov	r4,r2
  409684:	040a3180 	call	40a318 <__pack_d>
  409688:	dfc01317 	ldw	ra,76(sp)
  40968c:	dec01404 	addi	sp,sp,80
  409690:	f800283a 	ret

00409694 <__subdf3>:
  409694:	deffec04 	addi	sp,sp,-80
  409698:	d9001115 	stw	r4,68(sp)
  40969c:	d9401215 	stw	r5,72(sp)
  4096a0:	d9001104 	addi	r4,sp,68
  4096a4:	d9400a04 	addi	r5,sp,40
  4096a8:	dfc01315 	stw	ra,76(sp)
  4096ac:	d9c01015 	stw	r7,64(sp)
  4096b0:	d9800f15 	stw	r6,60(sp)
  4096b4:	040a53c0 	call	40a53c <__unpack_d>
  4096b8:	d9000f04 	addi	r4,sp,60
  4096bc:	d9400504 	addi	r5,sp,20
  4096c0:	040a53c0 	call	40a53c <__unpack_d>
  4096c4:	d8800617 	ldw	r2,24(sp)
  4096c8:	d9000a04 	addi	r4,sp,40
  4096cc:	d9400504 	addi	r5,sp,20
  4096d0:	d80d883a 	mov	r6,sp
  4096d4:	1080005c 	xori	r2,r2,1
  4096d8:	d8800615 	stw	r2,24(sp)
  4096dc:	04092ec0 	call	4092ec <_fpadd_parts>
  4096e0:	1009883a 	mov	r4,r2
  4096e4:	040a3180 	call	40a318 <__pack_d>
  4096e8:	dfc01317 	ldw	ra,76(sp)
  4096ec:	dec01404 	addi	sp,sp,80
  4096f0:	f800283a 	ret

004096f4 <__muldf3>:
  4096f4:	deffe404 	addi	sp,sp,-112
  4096f8:	d9001115 	stw	r4,68(sp)
  4096fc:	d9401215 	stw	r5,72(sp)
  409700:	d9001104 	addi	r4,sp,68
  409704:	d9400a04 	addi	r5,sp,40
  409708:	dfc01b15 	stw	ra,108(sp)
  40970c:	d9800f15 	stw	r6,60(sp)
  409710:	d9c01015 	stw	r7,64(sp)
  409714:	ddc01a15 	stw	r23,104(sp)
  409718:	dd801915 	stw	r22,100(sp)
  40971c:	dd401815 	stw	r21,96(sp)
  409720:	dd001715 	stw	r20,92(sp)
  409724:	dcc01615 	stw	r19,88(sp)
  409728:	dc801515 	stw	r18,84(sp)
  40972c:	dc401415 	stw	r17,80(sp)
  409730:	dc001315 	stw	r16,76(sp)
  409734:	040a53c0 	call	40a53c <__unpack_d>
  409738:	d9000f04 	addi	r4,sp,60
  40973c:	d9400504 	addi	r5,sp,20
  409740:	040a53c0 	call	40a53c <__unpack_d>
  409744:	d8c00a17 	ldw	r3,40(sp)
  409748:	00800044 	movi	r2,1
  40974c:	10c01136 	bltu	r2,r3,409794 <__muldf3+0xa0>
  409750:	d8c00b17 	ldw	r3,44(sp)
  409754:	d8800617 	ldw	r2,24(sp)
  409758:	d9000a04 	addi	r4,sp,40
  40975c:	1884c03a 	cmpne	r2,r3,r2
  409760:	d8800b15 	stw	r2,44(sp)
  409764:	040a3180 	call	40a318 <__pack_d>
  409768:	dfc01b17 	ldw	ra,108(sp)
  40976c:	ddc01a17 	ldw	r23,104(sp)
  409770:	dd801917 	ldw	r22,100(sp)
  409774:	dd401817 	ldw	r21,96(sp)
  409778:	dd001717 	ldw	r20,92(sp)
  40977c:	dcc01617 	ldw	r19,88(sp)
  409780:	dc801517 	ldw	r18,84(sp)
  409784:	dc401417 	ldw	r17,80(sp)
  409788:	dc001317 	ldw	r16,76(sp)
  40978c:	dec01c04 	addi	sp,sp,112
  409790:	f800283a 	ret
  409794:	d9000517 	ldw	r4,20(sp)
  409798:	11000636 	bltu	r2,r4,4097b4 <__muldf3+0xc0>
  40979c:	d8800617 	ldw	r2,24(sp)
  4097a0:	d8c00b17 	ldw	r3,44(sp)
  4097a4:	d9000504 	addi	r4,sp,20
  4097a8:	1884c03a 	cmpne	r2,r3,r2
  4097ac:	d8800615 	stw	r2,24(sp)
  4097b0:	003fec06 	br	409764 <__muldf3+0x70>
  4097b4:	00800104 	movi	r2,4
  4097b8:	1880051e 	bne	r3,r2,4097d0 <__muldf3+0xdc>
  4097bc:	00800084 	movi	r2,2
  4097c0:	20bfe31e 	bne	r4,r2,409750 <__muldf3+0x5c>
  4097c4:	010010b4 	movhi	r4,66
  4097c8:	21264704 	addi	r4,r4,-26340
  4097cc:	003fe506 	br	409764 <__muldf3+0x70>
  4097d0:	2080031e 	bne	r4,r2,4097e0 <__muldf3+0xec>
  4097d4:	00800084 	movi	r2,2
  4097d8:	18bffa26 	beq	r3,r2,4097c4 <__muldf3+0xd0>
  4097dc:	003fef06 	br	40979c <__muldf3+0xa8>
  4097e0:	00800084 	movi	r2,2
  4097e4:	18bfda26 	beq	r3,r2,409750 <__muldf3+0x5c>
  4097e8:	20bfec26 	beq	r4,r2,40979c <__muldf3+0xa8>
  4097ec:	dc000d17 	ldw	r16,52(sp)
  4097f0:	dd000817 	ldw	r20,32(sp)
  4097f4:	dc800917 	ldw	r18,36(sp)
  4097f8:	8009883a 	mov	r4,r16
  4097fc:	000b883a 	mov	r5,zero
  409800:	a00d883a 	mov	r6,r20
  409804:	000f883a 	mov	r7,zero
  409808:	040a15c0 	call	40a15c <__muldi3>
  40980c:	dc400e17 	ldw	r17,56(sp)
  409810:	9009883a 	mov	r4,r18
  409814:	800d883a 	mov	r6,r16
  409818:	000b883a 	mov	r5,zero
  40981c:	000f883a 	mov	r7,zero
  409820:	102f883a 	mov	r23,r2
  409824:	1827883a 	mov	r19,r3
  409828:	040a15c0 	call	40a15c <__muldi3>
  40982c:	900d883a 	mov	r6,r18
  409830:	8809883a 	mov	r4,r17
  409834:	000b883a 	mov	r5,zero
  409838:	000f883a 	mov	r7,zero
  40983c:	102b883a 	mov	r21,r2
  409840:	1821883a 	mov	r16,r3
  409844:	040a15c0 	call	40a15c <__muldi3>
  409848:	8809883a 	mov	r4,r17
  40984c:	000b883a 	mov	r5,zero
  409850:	a00d883a 	mov	r6,r20
  409854:	000f883a 	mov	r7,zero
  409858:	102d883a 	mov	r22,r2
  40985c:	1825883a 	mov	r18,r3
  409860:	040a15c0 	call	40a15c <__muldi3>
  409864:	154b883a 	add	r5,r2,r21
  409868:	2889803a 	cmpltu	r4,r5,r2
  40986c:	1c07883a 	add	r3,r3,r16
  409870:	20c9883a 	add	r4,r4,r3
  409874:	24004b36 	bltu	r4,r16,4099a4 <__muldf3+0x2b0>
  409878:	8100011e 	bne	r16,r4,409880 <__muldf3+0x18c>
  40987c:	2d404936 	bltu	r5,r21,4099a4 <__muldf3+0x2b0>
  409880:	0011883a 	mov	r8,zero
  409884:	0007883a 	mov	r3,zero
  409888:	2ccb883a 	add	r5,r5,r19
  40988c:	b80d883a 	mov	r6,r23
  409890:	2cc0012e 	bgeu	r5,r19,409898 <__muldf3+0x1a4>
  409894:	02000044 	movi	r8,1
  409898:	258f883a 	add	r7,r4,r22
  40989c:	3909803a 	cmpltu	r4,r7,r4
  4098a0:	da400c17 	ldw	r9,48(sp)
  4098a4:	2489883a 	add	r4,r4,r18
  4098a8:	d8800717 	ldw	r2,28(sp)
  4098ac:	20c9883a 	add	r4,r4,r3
  4098b0:	da800b17 	ldw	r10,44(sp)
  4098b4:	d8c00617 	ldw	r3,24(sp)
  4098b8:	3a11883a 	add	r8,r7,r8
  4098bc:	4885883a 	add	r2,r9,r2
  4098c0:	50c6c03a 	cmpne	r3,r10,r3
  4098c4:	41cf803a 	cmpltu	r7,r8,r7
  4098c8:	12400104 	addi	r9,r2,4
  4098cc:	d8c00115 	stw	r3,4(sp)
  4098d0:	3909883a 	add	r4,r7,r4
  4098d4:	da400215 	stw	r9,8(sp)
  4098d8:	03480034 	movhi	r13,8192
  4098dc:	6b7fffc4 	addi	r13,r13,-1
  4098e0:	4007883a 	mov	r3,r8
  4098e4:	6900102e 	bgeu	r13,r4,409928 <__muldf3+0x234>
  4098e8:	10800144 	addi	r2,r2,5
  4098ec:	180ed07a 	srli	r7,r3,1
  4098f0:	18c0004c 	andi	r3,r3,1
  4098f4:	201097fa 	slli	r8,r4,31
  4098f8:	281697fa 	slli	r11,r5,31
  4098fc:	2008d07a 	srli	r4,r4,1
  409900:	3014d07a 	srli	r10,r6,1
  409904:	2812d07a 	srli	r9,r5,1
  409908:	1019883a 	mov	r12,r2
  40990c:	18000226 	beq	r3,zero,409918 <__muldf3+0x224>
  409910:	5a8cb03a 	or	r6,r11,r10
  409914:	49600034 	orhi	r5,r9,32768
  409918:	41c6b03a 	or	r3,r8,r7
  40991c:	10800044 	addi	r2,r2,1
  409920:	693ff236 	bltu	r13,r4,4098ec <__muldf3+0x1f8>
  409924:	db000215 	stw	r12,8(sp)
  409928:	03440034 	movhi	r13,4096
  40992c:	6b7fffc4 	addi	r13,r13,-1
  409930:	69001336 	bltu	r13,r4,409980 <__muldf3+0x28c>
  409934:	d8800217 	ldw	r2,8(sp)
  409938:	10bfffc4 	addi	r2,r2,-1
  40993c:	18d3883a 	add	r9,r3,r3
  409940:	48c7803a 	cmpltu	r3,r9,r3
  409944:	2109883a 	add	r4,r4,r4
  409948:	190f883a 	add	r7,r3,r4
  40994c:	3191883a 	add	r8,r6,r6
  409950:	4197803a 	cmpltu	r11,r8,r6
  409954:	2955883a 	add	r10,r5,r5
  409958:	1019883a 	mov	r12,r2
  40995c:	4807883a 	mov	r3,r9
  409960:	3809883a 	mov	r4,r7
  409964:	2800010e 	bge	r5,zero,40996c <__muldf3+0x278>
  409968:	48c00054 	ori	r3,r9,1
  40996c:	400d883a 	mov	r6,r8
  409970:	5a8b883a 	add	r5,r11,r10
  409974:	10bfffc4 	addi	r2,r2,-1
  409978:	69fff02e 	bgeu	r13,r7,40993c <__muldf3+0x248>
  40997c:	db000215 	stw	r12,8(sp)
  409980:	18803fcc 	andi	r2,r3,255
  409984:	01c02004 	movi	r7,128
  409988:	11c00926 	beq	r2,r7,4099b0 <__muldf3+0x2bc>
  40998c:	008000c4 	movi	r2,3
  409990:	d9000415 	stw	r4,16(sp)
  409994:	d8c00315 	stw	r3,12(sp)
  409998:	d8800015 	stw	r2,0(sp)
  40999c:	d809883a 	mov	r4,sp
  4099a0:	003f7006 	br	409764 <__muldf3+0x70>
  4099a4:	0011883a 	mov	r8,zero
  4099a8:	00c00044 	movi	r3,1
  4099ac:	003fb606 	br	409888 <__muldf3+0x194>
  4099b0:	19c0400c 	andi	r7,r3,256
  4099b4:	383ff51e 	bne	r7,zero,40998c <__muldf3+0x298>
  4099b8:	314ab03a 	or	r5,r6,r5
  4099bc:	283ff326 	beq	r5,zero,40998c <__muldf3+0x298>
  4099c0:	1885883a 	add	r2,r3,r2
  4099c4:	10cb803a 	cmpltu	r5,r2,r3
  4099c8:	00ffc004 	movi	r3,-256
  4099cc:	10c6703a 	and	r3,r2,r3
  4099d0:	2909883a 	add	r4,r5,r4
  4099d4:	003fed06 	br	40998c <__muldf3+0x298>

004099d8 <__divdf3>:
  4099d8:	defff104 	addi	sp,sp,-60
  4099dc:	d9000c15 	stw	r4,48(sp)
  4099e0:	d9400d15 	stw	r5,52(sp)
  4099e4:	d9000c04 	addi	r4,sp,48
  4099e8:	d9400504 	addi	r5,sp,20
  4099ec:	dfc00e15 	stw	ra,56(sp)
  4099f0:	d9800a15 	stw	r6,40(sp)
  4099f4:	d9c00b15 	stw	r7,44(sp)
  4099f8:	040a53c0 	call	40a53c <__unpack_d>
  4099fc:	d9000a04 	addi	r4,sp,40
  409a00:	d80b883a 	mov	r5,sp
  409a04:	040a53c0 	call	40a53c <__unpack_d>
  409a08:	d8c00517 	ldw	r3,20(sp)
  409a0c:	00800044 	movi	r2,1
  409a10:	10c00536 	bltu	r2,r3,409a28 <__divdf3+0x50>
  409a14:	d9000504 	addi	r4,sp,20
  409a18:	040a3180 	call	40a318 <__pack_d>
  409a1c:	dfc00e17 	ldw	ra,56(sp)
  409a20:	dec00f04 	addi	sp,sp,60
  409a24:	f800283a 	ret
  409a28:	d9000017 	ldw	r4,0(sp)
  409a2c:	11000536 	bltu	r2,r4,409a44 <__divdf3+0x6c>
  409a30:	d809883a 	mov	r4,sp
  409a34:	040a3180 	call	40a318 <__pack_d>
  409a38:	dfc00e17 	ldw	ra,56(sp)
  409a3c:	dec00f04 	addi	sp,sp,60
  409a40:	f800283a 	ret
  409a44:	d9800617 	ldw	r6,24(sp)
  409a48:	d9400117 	ldw	r5,4(sp)
  409a4c:	00800104 	movi	r2,4
  409a50:	314af03a 	xor	r5,r6,r5
  409a54:	d9400615 	stw	r5,24(sp)
  409a58:	18800226 	beq	r3,r2,409a64 <__divdf3+0x8c>
  409a5c:	01400084 	movi	r5,2
  409a60:	1940041e 	bne	r3,r5,409a74 <__divdf3+0x9c>
  409a64:	193feb1e 	bne	r3,r4,409a14 <__divdf3+0x3c>
  409a68:	010010b4 	movhi	r4,66
  409a6c:	21264704 	addi	r4,r4,-26340
  409a70:	003fe906 	br	409a18 <__divdf3+0x40>
  409a74:	20803326 	beq	r4,r2,409b44 <__divdf3+0x16c>
  409a78:	21403726 	beq	r4,r5,409b58 <__divdf3+0x180>
  409a7c:	d8800217 	ldw	r2,8(sp)
  409a80:	d9000717 	ldw	r4,28(sp)
  409a84:	d8c00917 	ldw	r3,36(sp)
  409a88:	da000417 	ldw	r8,16(sp)
  409a8c:	2089c83a 	sub	r4,r4,r2
  409a90:	d9000715 	stw	r4,28(sp)
  409a94:	d8800817 	ldw	r2,32(sp)
  409a98:	dbc00317 	ldw	r15,12(sp)
  409a9c:	1a000236 	bltu	r3,r8,409aa8 <__divdf3+0xd0>
  409aa0:	40c0081e 	bne	r8,r3,409ac4 <__divdf3+0xec>
  409aa4:	13c0072e 	bgeu	r2,r15,409ac4 <__divdf3+0xec>
  409aa8:	108b883a 	add	r5,r2,r2
  409aac:	288d803a 	cmpltu	r6,r5,r2
  409ab0:	18c7883a 	add	r3,r3,r3
  409ab4:	213fffc4 	addi	r4,r4,-1
  409ab8:	2805883a 	mov	r2,r5
  409abc:	30c7883a 	add	r3,r6,r3
  409ac0:	d9000715 	stw	r4,28(sp)
  409ac4:	01400f44 	movi	r5,61
  409ac8:	000f883a 	mov	r7,zero
  409acc:	01040034 	movhi	r4,4096
  409ad0:	0019883a 	mov	r12,zero
  409ad4:	001b883a 	mov	r13,zero
  409ad8:	201697fa 	slli	r11,r4,31
  409adc:	3814d07a 	srli	r10,r7,1
  409ae0:	297fffc4 	addi	r5,r5,-1
  409ae4:	1a000936 	bltu	r3,r8,409b0c <__divdf3+0x134>
  409ae8:	13cdc83a 	sub	r6,r2,r15
  409aec:	1193803a 	cmpltu	r9,r2,r6
  409af0:	1a1dc83a 	sub	r14,r3,r8
  409af4:	40c0011e 	bne	r8,r3,409afc <__divdf3+0x124>
  409af8:	13c00436 	bltu	r2,r15,409b0c <__divdf3+0x134>
  409afc:	3005883a 	mov	r2,r6
  409b00:	7247c83a 	sub	r3,r14,r9
  409b04:	61d8b03a 	or	r12,r12,r7
  409b08:	691ab03a 	or	r13,r13,r4
  409b0c:	108d883a 	add	r6,r2,r2
  409b10:	3093803a 	cmpltu	r9,r6,r2
  409b14:	18c7883a 	add	r3,r3,r3
  409b18:	5a8eb03a 	or	r7,r11,r10
  409b1c:	2008d07a 	srli	r4,r4,1
  409b20:	3005883a 	mov	r2,r6
  409b24:	48c7883a 	add	r3,r9,r3
  409b28:	283feb1e 	bne	r5,zero,409ad8 <__divdf3+0x100>
  409b2c:	61003fcc 	andi	r4,r12,255
  409b30:	01402004 	movi	r5,128
  409b34:	21400b26 	beq	r4,r5,409b64 <__divdf3+0x18c>
  409b38:	db000815 	stw	r12,32(sp)
  409b3c:	db400915 	stw	r13,36(sp)
  409b40:	003fb406 	br	409a14 <__divdf3+0x3c>
  409b44:	d8000815 	stw	zero,32(sp)
  409b48:	d8000915 	stw	zero,36(sp)
  409b4c:	d8000715 	stw	zero,28(sp)
  409b50:	d9000504 	addi	r4,sp,20
  409b54:	003fb006 	br	409a18 <__divdf3+0x40>
  409b58:	d8800515 	stw	r2,20(sp)
  409b5c:	d9000504 	addi	r4,sp,20
  409b60:	003fad06 	br	409a18 <__divdf3+0x40>
  409b64:	6140400c 	andi	r5,r12,256
  409b68:	283ff31e 	bne	r5,zero,409b38 <__divdf3+0x160>
  409b6c:	30c4b03a 	or	r2,r6,r3
  409b70:	103ff126 	beq	r2,zero,409b38 <__divdf3+0x160>
  409b74:	6109883a 	add	r4,r12,r4
  409b78:	2305803a 	cmpltu	r2,r4,r12
  409b7c:	033fc004 	movi	r12,-256
  409b80:	2318703a 	and	r12,r4,r12
  409b84:	135b883a 	add	r13,r2,r13
  409b88:	003feb06 	br	409b38 <__divdf3+0x160>

00409b8c <__eqdf2>:
  409b8c:	defff104 	addi	sp,sp,-60
  409b90:	d9000c15 	stw	r4,48(sp)
  409b94:	d9400d15 	stw	r5,52(sp)
  409b98:	d9000c04 	addi	r4,sp,48
  409b9c:	d9400504 	addi	r5,sp,20
  409ba0:	dfc00e15 	stw	ra,56(sp)
  409ba4:	d9800a15 	stw	r6,40(sp)
  409ba8:	d9c00b15 	stw	r7,44(sp)
  409bac:	040a53c0 	call	40a53c <__unpack_d>
  409bb0:	d9000a04 	addi	r4,sp,40
  409bb4:	d80b883a 	mov	r5,sp
  409bb8:	040a53c0 	call	40a53c <__unpack_d>
  409bbc:	d8c00517 	ldw	r3,20(sp)
  409bc0:	00800044 	movi	r2,1
  409bc4:	10c0052e 	bgeu	r2,r3,409bdc <__eqdf2+0x50>
  409bc8:	d8c00017 	ldw	r3,0(sp)
  409bcc:	10c0032e 	bgeu	r2,r3,409bdc <__eqdf2+0x50>
  409bd0:	d9000504 	addi	r4,sp,20
  409bd4:	d80b883a 	mov	r5,sp
  409bd8:	040a6400 	call	40a640 <__fpcmp_parts_d>
  409bdc:	dfc00e17 	ldw	ra,56(sp)
  409be0:	dec00f04 	addi	sp,sp,60
  409be4:	f800283a 	ret

00409be8 <__nedf2>:
  409be8:	defff104 	addi	sp,sp,-60
  409bec:	d9000c15 	stw	r4,48(sp)
  409bf0:	d9400d15 	stw	r5,52(sp)
  409bf4:	d9000c04 	addi	r4,sp,48
  409bf8:	d9400504 	addi	r5,sp,20
  409bfc:	dfc00e15 	stw	ra,56(sp)
  409c00:	d9800a15 	stw	r6,40(sp)
  409c04:	d9c00b15 	stw	r7,44(sp)
  409c08:	040a53c0 	call	40a53c <__unpack_d>
  409c0c:	d9000a04 	addi	r4,sp,40
  409c10:	d80b883a 	mov	r5,sp
  409c14:	040a53c0 	call	40a53c <__unpack_d>
  409c18:	d8c00517 	ldw	r3,20(sp)
  409c1c:	00800044 	movi	r2,1
  409c20:	10c0052e 	bgeu	r2,r3,409c38 <__nedf2+0x50>
  409c24:	d8c00017 	ldw	r3,0(sp)
  409c28:	10c0032e 	bgeu	r2,r3,409c38 <__nedf2+0x50>
  409c2c:	d9000504 	addi	r4,sp,20
  409c30:	d80b883a 	mov	r5,sp
  409c34:	040a6400 	call	40a640 <__fpcmp_parts_d>
  409c38:	dfc00e17 	ldw	ra,56(sp)
  409c3c:	dec00f04 	addi	sp,sp,60
  409c40:	f800283a 	ret

00409c44 <__gtdf2>:
  409c44:	defff104 	addi	sp,sp,-60
  409c48:	d9000c15 	stw	r4,48(sp)
  409c4c:	d9400d15 	stw	r5,52(sp)
  409c50:	d9000c04 	addi	r4,sp,48
  409c54:	d9400504 	addi	r5,sp,20
  409c58:	dfc00e15 	stw	ra,56(sp)
  409c5c:	d9800a15 	stw	r6,40(sp)
  409c60:	d9c00b15 	stw	r7,44(sp)
  409c64:	040a53c0 	call	40a53c <__unpack_d>
  409c68:	d9000a04 	addi	r4,sp,40
  409c6c:	d80b883a 	mov	r5,sp
  409c70:	040a53c0 	call	40a53c <__unpack_d>
  409c74:	d8c00517 	ldw	r3,20(sp)
  409c78:	00800044 	movi	r2,1
  409c7c:	10c0082e 	bgeu	r2,r3,409ca0 <__gtdf2+0x5c>
  409c80:	d8c00017 	ldw	r3,0(sp)
  409c84:	10c0062e 	bgeu	r2,r3,409ca0 <__gtdf2+0x5c>
  409c88:	d9000504 	addi	r4,sp,20
  409c8c:	d80b883a 	mov	r5,sp
  409c90:	040a6400 	call	40a640 <__fpcmp_parts_d>
  409c94:	dfc00e17 	ldw	ra,56(sp)
  409c98:	dec00f04 	addi	sp,sp,60
  409c9c:	f800283a 	ret
  409ca0:	00bfffc4 	movi	r2,-1
  409ca4:	003ffb06 	br	409c94 <__gtdf2+0x50>

00409ca8 <__gedf2>:
  409ca8:	defff104 	addi	sp,sp,-60
  409cac:	d9000c15 	stw	r4,48(sp)
  409cb0:	d9400d15 	stw	r5,52(sp)
  409cb4:	d9000c04 	addi	r4,sp,48
  409cb8:	d9400504 	addi	r5,sp,20
  409cbc:	dfc00e15 	stw	ra,56(sp)
  409cc0:	d9800a15 	stw	r6,40(sp)
  409cc4:	d9c00b15 	stw	r7,44(sp)
  409cc8:	040a53c0 	call	40a53c <__unpack_d>
  409ccc:	d9000a04 	addi	r4,sp,40
  409cd0:	d80b883a 	mov	r5,sp
  409cd4:	040a53c0 	call	40a53c <__unpack_d>
  409cd8:	d8c00517 	ldw	r3,20(sp)
  409cdc:	00800044 	movi	r2,1
  409ce0:	10c0082e 	bgeu	r2,r3,409d04 <__gedf2+0x5c>
  409ce4:	d8c00017 	ldw	r3,0(sp)
  409ce8:	10c0062e 	bgeu	r2,r3,409d04 <__gedf2+0x5c>
  409cec:	d9000504 	addi	r4,sp,20
  409cf0:	d80b883a 	mov	r5,sp
  409cf4:	040a6400 	call	40a640 <__fpcmp_parts_d>
  409cf8:	dfc00e17 	ldw	ra,56(sp)
  409cfc:	dec00f04 	addi	sp,sp,60
  409d00:	f800283a 	ret
  409d04:	00bfffc4 	movi	r2,-1
  409d08:	003ffb06 	br	409cf8 <__gedf2+0x50>

00409d0c <__ltdf2>:
  409d0c:	defff104 	addi	sp,sp,-60
  409d10:	d9000c15 	stw	r4,48(sp)
  409d14:	d9400d15 	stw	r5,52(sp)
  409d18:	d9000c04 	addi	r4,sp,48
  409d1c:	d9400504 	addi	r5,sp,20
  409d20:	dfc00e15 	stw	ra,56(sp)
  409d24:	d9800a15 	stw	r6,40(sp)
  409d28:	d9c00b15 	stw	r7,44(sp)
  409d2c:	040a53c0 	call	40a53c <__unpack_d>
  409d30:	d9000a04 	addi	r4,sp,40
  409d34:	d80b883a 	mov	r5,sp
  409d38:	040a53c0 	call	40a53c <__unpack_d>
  409d3c:	d8c00517 	ldw	r3,20(sp)
  409d40:	00800044 	movi	r2,1
  409d44:	10c0052e 	bgeu	r2,r3,409d5c <__ltdf2+0x50>
  409d48:	d8c00017 	ldw	r3,0(sp)
  409d4c:	10c0032e 	bgeu	r2,r3,409d5c <__ltdf2+0x50>
  409d50:	d9000504 	addi	r4,sp,20
  409d54:	d80b883a 	mov	r5,sp
  409d58:	040a6400 	call	40a640 <__fpcmp_parts_d>
  409d5c:	dfc00e17 	ldw	ra,56(sp)
  409d60:	dec00f04 	addi	sp,sp,60
  409d64:	f800283a 	ret

00409d68 <__floatsidf>:
  409d68:	2004d7fa 	srli	r2,r4,31
  409d6c:	defff904 	addi	sp,sp,-28
  409d70:	00c000c4 	movi	r3,3
  409d74:	dfc00615 	stw	ra,24(sp)
  409d78:	dc000515 	stw	r16,20(sp)
  409d7c:	d8c00015 	stw	r3,0(sp)
  409d80:	d8800115 	stw	r2,4(sp)
  409d84:	2000081e 	bne	r4,zero,409da8 <__floatsidf+0x40>
  409d88:	00800084 	movi	r2,2
  409d8c:	d8800015 	stw	r2,0(sp)
  409d90:	d809883a 	mov	r4,sp
  409d94:	040a3180 	call	40a318 <__pack_d>
  409d98:	dfc00617 	ldw	ra,24(sp)
  409d9c:	dc000517 	ldw	r16,20(sp)
  409da0:	dec00704 	addi	sp,sp,28
  409da4:	f800283a 	ret
  409da8:	00c00f04 	movi	r3,60
  409dac:	d8c00215 	stw	r3,8(sp)
  409db0:	10000f1e 	bne	r2,zero,409df0 <__floatsidf+0x88>
  409db4:	2021883a 	mov	r16,r4
  409db8:	8009883a 	mov	r4,r16
  409dbc:	040a26c0 	call	40a26c <__clzsi2>
  409dc0:	11000744 	addi	r4,r2,29
  409dc4:	0100110e 	bge	zero,r4,409e0c <__floatsidf+0xa4>
  409dc8:	10ffff44 	addi	r3,r2,-3
  409dcc:	18001216 	blt	r3,zero,409e18 <__floatsidf+0xb0>
  409dd0:	80c6983a 	sll	r3,r16,r3
  409dd4:	0009883a 	mov	r4,zero
  409dd8:	014007c4 	movi	r5,31
  409ddc:	2885c83a 	sub	r2,r5,r2
  409de0:	d9000315 	stw	r4,12(sp)
  409de4:	d8c00415 	stw	r3,16(sp)
  409de8:	d8800215 	stw	r2,8(sp)
  409dec:	003fe806 	br	409d90 <__floatsidf+0x28>
  409df0:	00a00034 	movhi	r2,32768
  409df4:	20800e26 	beq	r4,r2,409e30 <__floatsidf+0xc8>
  409df8:	0121c83a 	sub	r16,zero,r4
  409dfc:	8009883a 	mov	r4,r16
  409e00:	040a26c0 	call	40a26c <__clzsi2>
  409e04:	11000744 	addi	r4,r2,29
  409e08:	013fef16 	blt	zero,r4,409dc8 <__floatsidf+0x60>
  409e0c:	dc000315 	stw	r16,12(sp)
  409e10:	d8000415 	stw	zero,16(sp)
  409e14:	003fde06 	br	409d90 <__floatsidf+0x28>
  409e18:	800ad07a 	srli	r5,r16,1
  409e1c:	00c007c4 	movi	r3,31
  409e20:	1907c83a 	sub	r3,r3,r4
  409e24:	28c6d83a 	srl	r3,r5,r3
  409e28:	8108983a 	sll	r4,r16,r4
  409e2c:	003fea06 	br	409dd8 <__floatsidf+0x70>
  409e30:	0005883a 	mov	r2,zero
  409e34:	00f07834 	movhi	r3,49632
  409e38:	003fd706 	br	409d98 <__floatsidf+0x30>

00409e3c <__fixdfsi>:
  409e3c:	defff804 	addi	sp,sp,-32
  409e40:	d9000515 	stw	r4,20(sp)
  409e44:	d9400615 	stw	r5,24(sp)
  409e48:	d9000504 	addi	r4,sp,20
  409e4c:	d80b883a 	mov	r5,sp
  409e50:	dfc00715 	stw	ra,28(sp)
  409e54:	040a53c0 	call	40a53c <__unpack_d>
  409e58:	d8800017 	ldw	r2,0(sp)
  409e5c:	00c00084 	movi	r3,2
  409e60:	10c01c26 	beq	r2,r3,409ed4 <__fixdfsi+0x98>
  409e64:	00c00044 	movi	r3,1
  409e68:	18801a2e 	bgeu	r3,r2,409ed4 <__fixdfsi+0x98>
  409e6c:	00c00104 	movi	r3,4
  409e70:	10c01126 	beq	r2,r3,409eb8 <__fixdfsi+0x7c>
  409e74:	d8800217 	ldw	r2,8(sp)
  409e78:	10001616 	blt	r2,zero,409ed4 <__fixdfsi+0x98>
  409e7c:	00c00784 	movi	r3,30
  409e80:	18800d16 	blt	r3,r2,409eb8 <__fixdfsi+0x7c>
  409e84:	00c00f04 	movi	r3,60
  409e88:	1885c83a 	sub	r2,r3,r2
  409e8c:	10fff804 	addi	r3,r2,-32
  409e90:	d9400317 	ldw	r5,12(sp)
  409e94:	d9000417 	ldw	r4,16(sp)
  409e98:	18001616 	blt	r3,zero,409ef4 <__fixdfsi+0xb8>
  409e9c:	20c4d83a 	srl	r2,r4,r3
  409ea0:	d8c00117 	ldw	r3,4(sp)
  409ea4:	18000126 	beq	r3,zero,409eac <__fixdfsi+0x70>
  409ea8:	0085c83a 	sub	r2,zero,r2
  409eac:	dfc00717 	ldw	ra,28(sp)
  409eb0:	dec00804 	addi	sp,sp,32
  409eb4:	f800283a 	ret
  409eb8:	d8800117 	ldw	r2,4(sp)
  409ebc:	1000091e 	bne	r2,zero,409ee4 <__fixdfsi+0xa8>
  409ec0:	00a00034 	movhi	r2,32768
  409ec4:	10bfffc4 	addi	r2,r2,-1
  409ec8:	dfc00717 	ldw	ra,28(sp)
  409ecc:	dec00804 	addi	sp,sp,32
  409ed0:	f800283a 	ret
  409ed4:	0005883a 	mov	r2,zero
  409ed8:	dfc00717 	ldw	ra,28(sp)
  409edc:	dec00804 	addi	sp,sp,32
  409ee0:	f800283a 	ret
  409ee4:	00a00034 	movhi	r2,32768
  409ee8:	dfc00717 	ldw	ra,28(sp)
  409eec:	dec00804 	addi	sp,sp,32
  409ef0:	f800283a 	ret
  409ef4:	2008907a 	slli	r4,r4,1
  409ef8:	018007c4 	movi	r6,31
  409efc:	308dc83a 	sub	r6,r6,r2
  409f00:	2188983a 	sll	r4,r4,r6
  409f04:	2884d83a 	srl	r2,r5,r2
  409f08:	2084b03a 	or	r2,r4,r2
  409f0c:	003fe406 	br	409ea0 <__fixdfsi+0x64>

00409f10 <__floatunsidf>:
  409f10:	defff904 	addi	sp,sp,-28
  409f14:	dc000515 	stw	r16,20(sp)
  409f18:	dfc00615 	stw	ra,24(sp)
  409f1c:	d8000115 	stw	zero,4(sp)
  409f20:	2021883a 	mov	r16,r4
  409f24:	20001726 	beq	r4,zero,409f84 <__floatunsidf+0x74>
  409f28:	008000c4 	movi	r2,3
  409f2c:	d8800015 	stw	r2,0(sp)
  409f30:	00800f04 	movi	r2,60
  409f34:	d8800215 	stw	r2,8(sp)
  409f38:	040a26c0 	call	40a26c <__clzsi2>
  409f3c:	10c00744 	addi	r3,r2,29
  409f40:	18001816 	blt	r3,zero,409fa4 <__floatunsidf+0x94>
  409f44:	18002d26 	beq	r3,zero,409ffc <__floatunsidf+0xec>
  409f48:	113fff44 	addi	r4,r2,-3
  409f4c:	20002e16 	blt	r4,zero,40a008 <__floatunsidf+0xf8>
  409f50:	8108983a 	sll	r4,r16,r4
  409f54:	0021883a 	mov	r16,zero
  409f58:	014007c4 	movi	r5,31
  409f5c:	2885c83a 	sub	r2,r5,r2
  409f60:	dc000315 	stw	r16,12(sp)
  409f64:	d9000415 	stw	r4,16(sp)
  409f68:	d8800215 	stw	r2,8(sp)
  409f6c:	d809883a 	mov	r4,sp
  409f70:	040a3180 	call	40a318 <__pack_d>
  409f74:	dfc00617 	ldw	ra,24(sp)
  409f78:	dc000517 	ldw	r16,20(sp)
  409f7c:	dec00704 	addi	sp,sp,28
  409f80:	f800283a 	ret
  409f84:	00800084 	movi	r2,2
  409f88:	d809883a 	mov	r4,sp
  409f8c:	d8800015 	stw	r2,0(sp)
  409f90:	040a3180 	call	40a318 <__pack_d>
  409f94:	dfc00617 	ldw	ra,24(sp)
  409f98:	dc000517 	ldw	r16,20(sp)
  409f9c:	dec00704 	addi	sp,sp,28
  409fa0:	f800283a 	ret
  409fa4:	00c7c83a 	sub	r3,zero,r3
  409fa8:	193ff804 	addi	r4,r3,-32
  409fac:	20001c16 	blt	r4,zero,40a020 <__floatunsidf+0x110>
  409fb0:	000b883a 	mov	r5,zero
  409fb4:	2009d7fa 	srai	r4,r4,31
  409fb8:	80c6d83a 	srl	r3,r16,r3
  409fbc:	297fffc4 	addi	r5,r5,-1
  409fc0:	2c20703a 	and	r16,r5,r16
  409fc4:	8020c03a 	cmpne	r16,r16,zero
  409fc8:	1906703a 	and	r3,r3,r4
  409fcc:	010007c4 	movi	r4,31
  409fd0:	80c6b03a 	or	r3,r16,r3
  409fd4:	2085c83a 	sub	r2,r4,r2
  409fd8:	d809883a 	mov	r4,sp
  409fdc:	d8c00315 	stw	r3,12(sp)
  409fe0:	d8000415 	stw	zero,16(sp)
  409fe4:	d8800215 	stw	r2,8(sp)
  409fe8:	040a3180 	call	40a318 <__pack_d>
  409fec:	dfc00617 	ldw	ra,24(sp)
  409ff0:	dc000517 	ldw	r16,20(sp)
  409ff4:	dec00704 	addi	sp,sp,28
  409ff8:	f800283a 	ret
  409ffc:	dc000315 	stw	r16,12(sp)
  40a000:	d8000415 	stw	zero,16(sp)
  40a004:	003fd906 	br	409f6c <__floatunsidf+0x5c>
  40a008:	800ad07a 	srli	r5,r16,1
  40a00c:	010007c4 	movi	r4,31
  40a010:	20c9c83a 	sub	r4,r4,r3
  40a014:	2908d83a 	srl	r4,r5,r4
  40a018:	80e0983a 	sll	r16,r16,r3
  40a01c:	003fce06 	br	409f58 <__floatunsidf+0x48>
  40a020:	01400044 	movi	r5,1
  40a024:	28ca983a 	sll	r5,r5,r3
  40a028:	003fe206 	br	409fb4 <__floatunsidf+0xa4>

0040a02c <udivmodsi4>:
  40a02c:	2005883a 	mov	r2,r4
  40a030:	2900182e 	bgeu	r5,r4,40a094 <udivmodsi4+0x68>
  40a034:	28001716 	blt	r5,zero,40a094 <udivmodsi4+0x68>
  40a038:	01000804 	movi	r4,32
  40a03c:	00c00044 	movi	r3,1
  40a040:	00000206 	br	40a04c <udivmodsi4+0x20>
  40a044:	20001126 	beq	r4,zero,40a08c <udivmodsi4+0x60>
  40a048:	28000516 	blt	r5,zero,40a060 <udivmodsi4+0x34>
  40a04c:	294b883a 	add	r5,r5,r5
  40a050:	213fffc4 	addi	r4,r4,-1
  40a054:	18c7883a 	add	r3,r3,r3
  40a058:	28bffa36 	bltu	r5,r2,40a044 <udivmodsi4+0x18>
  40a05c:	18000b26 	beq	r3,zero,40a08c <udivmodsi4+0x60>
  40a060:	0009883a 	mov	r4,zero
  40a064:	11400236 	bltu	r2,r5,40a070 <udivmodsi4+0x44>
  40a068:	1145c83a 	sub	r2,r2,r5
  40a06c:	20c8b03a 	or	r4,r4,r3
  40a070:	1806d07a 	srli	r3,r3,1
  40a074:	280ad07a 	srli	r5,r5,1
  40a078:	183ffa1e 	bne	r3,zero,40a064 <udivmodsi4+0x38>
  40a07c:	3000021e 	bne	r6,zero,40a088 <udivmodsi4+0x5c>
  40a080:	2005883a 	mov	r2,r4
  40a084:	f800283a 	ret
  40a088:	f800283a 	ret
  40a08c:	0009883a 	mov	r4,zero
  40a090:	003ffa06 	br	40a07c <udivmodsi4+0x50>
  40a094:	00c00044 	movi	r3,1
  40a098:	0009883a 	mov	r4,zero
  40a09c:	003ff106 	br	40a064 <udivmodsi4+0x38>

0040a0a0 <__divsi3>:
  40a0a0:	defffe04 	addi	sp,sp,-8
  40a0a4:	dfc00115 	stw	ra,4(sp)
  40a0a8:	dc000015 	stw	r16,0(sp)
  40a0ac:	20000a16 	blt	r4,zero,40a0d8 <__divsi3+0x38>
  40a0b0:	0021883a 	mov	r16,zero
  40a0b4:	28000b16 	blt	r5,zero,40a0e4 <__divsi3+0x44>
  40a0b8:	000d883a 	mov	r6,zero
  40a0bc:	040a02c0 	call	40a02c <udivmodsi4>
  40a0c0:	80000126 	beq	r16,zero,40a0c8 <__divsi3+0x28>
  40a0c4:	0085c83a 	sub	r2,zero,r2
  40a0c8:	dfc00117 	ldw	ra,4(sp)
  40a0cc:	dc000017 	ldw	r16,0(sp)
  40a0d0:	dec00204 	addi	sp,sp,8
  40a0d4:	f800283a 	ret
  40a0d8:	0109c83a 	sub	r4,zero,r4
  40a0dc:	04000044 	movi	r16,1
  40a0e0:	283ff50e 	bge	r5,zero,40a0b8 <__divsi3+0x18>
  40a0e4:	014bc83a 	sub	r5,zero,r5
  40a0e8:	8400005c 	xori	r16,r16,1
  40a0ec:	003ff206 	br	40a0b8 <__divsi3+0x18>

0040a0f0 <__modsi3>:
  40a0f0:	deffff04 	addi	sp,sp,-4
  40a0f4:	dfc00015 	stw	ra,0(sp)
  40a0f8:	20000516 	blt	r4,zero,40a110 <__modsi3+0x20>
  40a0fc:	28000c16 	blt	r5,zero,40a130 <__modsi3+0x40>
  40a100:	01800044 	movi	r6,1
  40a104:	dfc00017 	ldw	ra,0(sp)
  40a108:	dec00104 	addi	sp,sp,4
  40a10c:	040a02c1 	jmpi	40a02c <udivmodsi4>
  40a110:	0109c83a 	sub	r4,zero,r4
  40a114:	28000b16 	blt	r5,zero,40a144 <__modsi3+0x54>
  40a118:	01800044 	movi	r6,1
  40a11c:	040a02c0 	call	40a02c <udivmodsi4>
  40a120:	0085c83a 	sub	r2,zero,r2
  40a124:	dfc00017 	ldw	ra,0(sp)
  40a128:	dec00104 	addi	sp,sp,4
  40a12c:	f800283a 	ret
  40a130:	014bc83a 	sub	r5,zero,r5
  40a134:	01800044 	movi	r6,1
  40a138:	dfc00017 	ldw	ra,0(sp)
  40a13c:	dec00104 	addi	sp,sp,4
  40a140:	040a02c1 	jmpi	40a02c <udivmodsi4>
  40a144:	014bc83a 	sub	r5,zero,r5
  40a148:	003ff306 	br	40a118 <__modsi3+0x28>

0040a14c <__udivsi3>:
  40a14c:	000d883a 	mov	r6,zero
  40a150:	040a02c1 	jmpi	40a02c <udivmodsi4>

0040a154 <__umodsi3>:
  40a154:	01800044 	movi	r6,1
  40a158:	040a02c1 	jmpi	40a02c <udivmodsi4>

0040a15c <__muldi3>:
  40a15c:	defff604 	addi	sp,sp,-40
  40a160:	dd400515 	stw	r21,20(sp)
  40a164:	dd000415 	stw	r20,16(sp)
  40a168:	257fffcc 	andi	r21,r4,65535
  40a16c:	353fffcc 	andi	r20,r6,65535
  40a170:	dcc00315 	stw	r19,12(sp)
  40a174:	3026d43a 	srli	r19,r6,16
  40a178:	dd800615 	stw	r22,24(sp)
  40a17c:	dc800215 	stw	r18,8(sp)
  40a180:	dc400115 	stw	r17,4(sp)
  40a184:	2024d43a 	srli	r18,r4,16
  40a188:	2023883a 	mov	r17,r4
  40a18c:	282d883a 	mov	r22,r5
  40a190:	a009883a 	mov	r4,r20
  40a194:	a80b883a 	mov	r5,r21
  40a198:	dfc00915 	stw	ra,36(sp)
  40a19c:	df000815 	stw	fp,32(sp)
  40a1a0:	ddc00715 	stw	r23,28(sp)
  40a1a4:	3839883a 	mov	fp,r7
  40a1a8:	dc000015 	stw	r16,0(sp)
  40a1ac:	3021883a 	mov	r16,r6
  40a1b0:	0400e700 	call	400e70 <__mulsi3>
  40a1b4:	a80b883a 	mov	r5,r21
  40a1b8:	9809883a 	mov	r4,r19
  40a1bc:	102f883a 	mov	r23,r2
  40a1c0:	0400e700 	call	400e70 <__mulsi3>
  40a1c4:	a009883a 	mov	r4,r20
  40a1c8:	900b883a 	mov	r5,r18
  40a1cc:	102b883a 	mov	r21,r2
  40a1d0:	0400e700 	call	400e70 <__mulsi3>
  40a1d4:	9809883a 	mov	r4,r19
  40a1d8:	900b883a 	mov	r5,r18
  40a1dc:	1029883a 	mov	r20,r2
  40a1e0:	0400e700 	call	400e70 <__mulsi3>
  40a1e4:	1007883a 	mov	r3,r2
  40a1e8:	b804d43a 	srli	r2,r23,16
  40a1ec:	a549883a 	add	r4,r20,r21
  40a1f0:	2089883a 	add	r4,r4,r2
  40a1f4:	2500022e 	bgeu	r4,r20,40a200 <__muldi3+0xa4>
  40a1f8:	00800074 	movhi	r2,1
  40a1fc:	1887883a 	add	r3,r3,r2
  40a200:	200cd43a 	srli	r6,r4,16
  40a204:	2004943a 	slli	r2,r4,16
  40a208:	e00b883a 	mov	r5,fp
  40a20c:	8809883a 	mov	r4,r17
  40a210:	bdffffcc 	andi	r23,r23,65535
  40a214:	19a3883a 	add	r17,r3,r6
  40a218:	15ef883a 	add	r23,r2,r23
  40a21c:	0400e700 	call	400e70 <__mulsi3>
  40a220:	8009883a 	mov	r4,r16
  40a224:	b00b883a 	mov	r5,r22
  40a228:	1025883a 	mov	r18,r2
  40a22c:	0400e700 	call	400e70 <__mulsi3>
  40a230:	9085883a 	add	r2,r18,r2
  40a234:	1447883a 	add	r3,r2,r17
  40a238:	b805883a 	mov	r2,r23
  40a23c:	dfc00917 	ldw	ra,36(sp)
  40a240:	df000817 	ldw	fp,32(sp)
  40a244:	ddc00717 	ldw	r23,28(sp)
  40a248:	dd800617 	ldw	r22,24(sp)
  40a24c:	dd400517 	ldw	r21,20(sp)
  40a250:	dd000417 	ldw	r20,16(sp)
  40a254:	dcc00317 	ldw	r19,12(sp)
  40a258:	dc800217 	ldw	r18,8(sp)
  40a25c:	dc400117 	ldw	r17,4(sp)
  40a260:	dc000017 	ldw	r16,0(sp)
  40a264:	dec00a04 	addi	sp,sp,40
  40a268:	f800283a 	ret

0040a26c <__clzsi2>:
  40a26c:	00bfffd4 	movui	r2,65535
  40a270:	11000b36 	bltu	r2,r4,40a2a0 <__clzsi2+0x34>
  40a274:	00803fc4 	movi	r2,255
  40a278:	11001e2e 	bgeu	r2,r4,40a2f4 <__clzsi2+0x88>
  40a27c:	00c00204 	movi	r3,8
  40a280:	20c8d83a 	srl	r4,r4,r3
  40a284:	00c010b4 	movhi	r3,66
  40a288:	18e64c04 	addi	r3,r3,-26320
  40a28c:	00800604 	movi	r2,24
  40a290:	1909883a 	add	r4,r3,r4
  40a294:	20c00003 	ldbu	r3,0(r4)
  40a298:	10c5c83a 	sub	r2,r2,r3
  40a29c:	f800283a 	ret
  40a2a0:	00804034 	movhi	r2,256
  40a2a4:	10bfffc4 	addi	r2,r2,-1
  40a2a8:	11000936 	bltu	r2,r4,40a2d0 <__clzsi2+0x64>
  40a2ac:	00800404 	movi	r2,16
  40a2b0:	1007883a 	mov	r3,r2
  40a2b4:	20c8d83a 	srl	r4,r4,r3
  40a2b8:	00c010b4 	movhi	r3,66
  40a2bc:	18e64c04 	addi	r3,r3,-26320
  40a2c0:	1909883a 	add	r4,r3,r4
  40a2c4:	20c00003 	ldbu	r3,0(r4)
  40a2c8:	10c5c83a 	sub	r2,r2,r3
  40a2cc:	f800283a 	ret
  40a2d0:	00c00604 	movi	r3,24
  40a2d4:	20c8d83a 	srl	r4,r4,r3
  40a2d8:	00c010b4 	movhi	r3,66
  40a2dc:	18e64c04 	addi	r3,r3,-26320
  40a2e0:	00800204 	movi	r2,8
  40a2e4:	1909883a 	add	r4,r3,r4
  40a2e8:	20c00003 	ldbu	r3,0(r4)
  40a2ec:	10c5c83a 	sub	r2,r2,r3
  40a2f0:	f800283a 	ret
  40a2f4:	0007883a 	mov	r3,zero
  40a2f8:	20c8d83a 	srl	r4,r4,r3
  40a2fc:	00c010b4 	movhi	r3,66
  40a300:	18e64c04 	addi	r3,r3,-26320
  40a304:	00800804 	movi	r2,32
  40a308:	1909883a 	add	r4,r3,r4
  40a30c:	20c00003 	ldbu	r3,0(r4)
  40a310:	10c5c83a 	sub	r2,r2,r3
  40a314:	f800283a 	ret

0040a318 <__pack_d>:
  40a318:	20800017 	ldw	r2,0(r4)
  40a31c:	defff804 	addi	sp,sp,-32
  40a320:	dcc00315 	stw	r19,12(sp)
  40a324:	dc800215 	stw	r18,8(sp)
  40a328:	dfc00715 	stw	ra,28(sp)
  40a32c:	dd800615 	stw	r22,24(sp)
  40a330:	dd400515 	stw	r21,20(sp)
  40a334:	dd000415 	stw	r20,16(sp)
  40a338:	dc400115 	stw	r17,4(sp)
  40a33c:	dc000015 	stw	r16,0(sp)
  40a340:	04800044 	movi	r18,1
  40a344:	24400317 	ldw	r17,12(r4)
  40a348:	24000417 	ldw	r16,16(r4)
  40a34c:	24c00117 	ldw	r19,4(r4)
  40a350:	9080422e 	bgeu	r18,r2,40a45c <__pack_d+0x144>
  40a354:	00c00104 	movi	r3,4
  40a358:	10c03c26 	beq	r2,r3,40a44c <__pack_d+0x134>
  40a35c:	00c00084 	movi	r3,2
  40a360:	10c01926 	beq	r2,r3,40a3c8 <__pack_d+0xb0>
  40a364:	8c04b03a 	or	r2,r17,r16
  40a368:	10001726 	beq	r2,zero,40a3c8 <__pack_d+0xb0>
  40a36c:	21000217 	ldw	r4,8(r4)
  40a370:	00bf0084 	movi	r2,-1022
  40a374:	20804016 	blt	r4,r2,40a478 <__pack_d+0x160>
  40a378:	0080ffc4 	movi	r2,1023
  40a37c:	11003316 	blt	r2,r4,40a44c <__pack_d+0x134>
  40a380:	88803fcc 	andi	r2,r17,255
  40a384:	00c02004 	movi	r3,128
  40a388:	10c02926 	beq	r2,r3,40a430 <__pack_d+0x118>
  40a38c:	88801fc4 	addi	r2,r17,127
  40a390:	1463803a 	cmpltu	r17,r2,r17
  40a394:	8c21883a 	add	r16,r17,r16
  40a398:	1023883a 	mov	r17,r2
  40a39c:	00880034 	movhi	r2,8192
  40a3a0:	10bfffc4 	addi	r2,r2,-1
  40a3a4:	14001c36 	bltu	r2,r16,40a418 <__pack_d+0x100>
  40a3a8:	2100ffc4 	addi	r4,r4,1023
  40a3ac:	8006963a 	slli	r3,r16,24
  40a3b0:	8804d23a 	srli	r2,r17,8
  40a3b4:	8020913a 	slli	r16,r16,4
  40a3b8:	2101ffcc 	andi	r4,r4,2047
  40a3bc:	1884b03a 	or	r2,r3,r2
  40a3c0:	8020d33a 	srli	r16,r16,12
  40a3c4:	00000306 	br	40a3d4 <__pack_d+0xbc>
  40a3c8:	0009883a 	mov	r4,zero
  40a3cc:	0005883a 	mov	r2,zero
  40a3d0:	0021883a 	mov	r16,zero
  40a3d4:	2008953a 	slli	r4,r4,20
  40a3d8:	982697fa 	slli	r19,r19,31
  40a3dc:	00c00434 	movhi	r3,16
  40a3e0:	18ffffc4 	addi	r3,r3,-1
  40a3e4:	80e0703a 	and	r16,r16,r3
  40a3e8:	8106b03a 	or	r3,r16,r4
  40a3ec:	1cc6b03a 	or	r3,r3,r19
  40a3f0:	dfc00717 	ldw	ra,28(sp)
  40a3f4:	dd800617 	ldw	r22,24(sp)
  40a3f8:	dd400517 	ldw	r21,20(sp)
  40a3fc:	dd000417 	ldw	r20,16(sp)
  40a400:	dcc00317 	ldw	r19,12(sp)
  40a404:	dc800217 	ldw	r18,8(sp)
  40a408:	dc400117 	ldw	r17,4(sp)
  40a40c:	dc000017 	ldw	r16,0(sp)
  40a410:	dec00804 	addi	sp,sp,32
  40a414:	f800283a 	ret
  40a418:	800697fa 	slli	r3,r16,31
  40a41c:	8804d07a 	srli	r2,r17,1
  40a420:	21010004 	addi	r4,r4,1024
  40a424:	8020d07a 	srli	r16,r16,1
  40a428:	18a2b03a 	or	r17,r3,r2
  40a42c:	003fdf06 	br	40a3ac <__pack_d+0x94>
  40a430:	88c0400c 	andi	r3,r17,256
  40a434:	183fd926 	beq	r3,zero,40a39c <__pack_d+0x84>
  40a438:	8885883a 	add	r2,r17,r2
  40a43c:	1463803a 	cmpltu	r17,r2,r17
  40a440:	8c21883a 	add	r16,r17,r16
  40a444:	1023883a 	mov	r17,r2
  40a448:	003fd406 	br	40a39c <__pack_d+0x84>
  40a44c:	0101ffc4 	movi	r4,2047
  40a450:	0005883a 	mov	r2,zero
  40a454:	0021883a 	mov	r16,zero
  40a458:	003fde06 	br	40a3d4 <__pack_d+0xbc>
  40a45c:	84000234 	orhi	r16,r16,8
  40a460:	00c00434 	movhi	r3,16
  40a464:	18ffffc4 	addi	r3,r3,-1
  40a468:	8805883a 	mov	r2,r17
  40a46c:	80e0703a 	and	r16,r16,r3
  40a470:	0101ffc4 	movi	r4,2047
  40a474:	003fd706 	br	40a3d4 <__pack_d+0xbc>
  40a478:	1129c83a 	sub	r20,r2,r4
  40a47c:	00800e04 	movi	r2,56
  40a480:	15002716 	blt	r2,r20,40a520 <__pack_d+0x208>
  40a484:	800b883a 	mov	r5,r16
  40a488:	a00d883a 	mov	r6,r20
  40a48c:	8809883a 	mov	r4,r17
  40a490:	040a7100 	call	40a710 <__lshrdi3>
  40a494:	9009883a 	mov	r4,r18
  40a498:	000b883a 	mov	r5,zero
  40a49c:	a00d883a 	mov	r6,r20
  40a4a0:	102d883a 	mov	r22,r2
  40a4a4:	182b883a 	mov	r21,r3
  40a4a8:	040a7540 	call	40a754 <__ashldi3>
  40a4ac:	1009003a 	cmpeq	r4,r2,zero
  40a4b0:	1907c83a 	sub	r3,r3,r4
  40a4b4:	10bfffc4 	addi	r2,r2,-1
  40a4b8:	1c20703a 	and	r16,r3,r16
  40a4bc:	1444703a 	and	r2,r2,r17
  40a4c0:	1404b03a 	or	r2,r2,r16
  40a4c4:	1004c03a 	cmpne	r2,r2,zero
  40a4c8:	1584b03a 	or	r2,r2,r22
  40a4cc:	11003fcc 	andi	r4,r2,255
  40a4d0:	01402004 	movi	r5,128
  40a4d4:	a807883a 	mov	r3,r21
  40a4d8:	2140131e 	bne	r4,r5,40a528 <__pack_d+0x210>
  40a4dc:	1140400c 	andi	r5,r2,256
  40a4e0:	28000426 	beq	r5,zero,40a4f4 <__pack_d+0x1dc>
  40a4e4:	1109883a 	add	r4,r2,r4
  40a4e8:	2085803a 	cmpltu	r2,r4,r2
  40a4ec:	1547883a 	add	r3,r2,r21
  40a4f0:	2005883a 	mov	r2,r4
  40a4f4:	1808963a 	slli	r4,r3,24
  40a4f8:	1004d23a 	srli	r2,r2,8
  40a4fc:	1820913a 	slli	r16,r3,4
  40a500:	01440034 	movhi	r5,4096
  40a504:	297fffc4 	addi	r5,r5,-1
  40a508:	2084b03a 	or	r2,r4,r2
  40a50c:	8020d33a 	srli	r16,r16,12
  40a510:	01000044 	movi	r4,1
  40a514:	28ffaf36 	bltu	r5,r3,40a3d4 <__pack_d+0xbc>
  40a518:	0009883a 	mov	r4,zero
  40a51c:	003fad06 	br	40a3d4 <__pack_d+0xbc>
  40a520:	0005883a 	mov	r2,zero
  40a524:	0007883a 	mov	r3,zero
  40a528:	11001fc4 	addi	r4,r2,127
  40a52c:	2085803a 	cmpltu	r2,r4,r2
  40a530:	10c7883a 	add	r3,r2,r3
  40a534:	2005883a 	mov	r2,r4
  40a538:	003fee06 	br	40a4f4 <__pack_d+0x1dc>

0040a53c <__unpack_d>:
  40a53c:	21800117 	ldw	r6,4(r4)
  40a540:	20c00017 	ldw	r3,0(r4)
  40a544:	3004d7fa 	srli	r2,r6,31
  40a548:	3008d53a 	srli	r4,r6,20
  40a54c:	28800115 	stw	r2,4(r5)
  40a550:	2101ffcc 	andi	r4,r4,2047
  40a554:	00800434 	movhi	r2,16
  40a558:	10bfffc4 	addi	r2,r2,-1
  40a55c:	3084703a 	and	r2,r6,r2
  40a560:	20001a1e 	bne	r4,zero,40a5cc <__unpack_d+0x90>
  40a564:	1888b03a 	or	r4,r3,r2
  40a568:	20002626 	beq	r4,zero,40a604 <__unpack_d+0xc8>
  40a56c:	1808d63a 	srli	r4,r3,24
  40a570:	1004923a 	slli	r2,r2,8
  40a574:	01bf0084 	movi	r6,-1022
  40a578:	29800215 	stw	r6,8(r5)
  40a57c:	2084b03a 	or	r2,r4,r2
  40a580:	010000c4 	movi	r4,3
  40a584:	29000015 	stw	r4,0(r5)
  40a588:	02040034 	movhi	r8,4096
  40a58c:	423fffc4 	addi	r8,r8,-1
  40a590:	1806923a 	slli	r3,r3,8
  40a594:	40801836 	bltu	r8,r2,40a5f8 <__unpack_d+0xbc>
  40a598:	013f0044 	movi	r4,-1023
  40a59c:	18cd883a 	add	r6,r3,r3
  40a5a0:	30c7803a 	cmpltu	r3,r6,r3
  40a5a4:	1085883a 	add	r2,r2,r2
  40a5a8:	1885883a 	add	r2,r3,r2
  40a5ac:	200f883a 	mov	r7,r4
  40a5b0:	3007883a 	mov	r3,r6
  40a5b4:	213fffc4 	addi	r4,r4,-1
  40a5b8:	40bff82e 	bgeu	r8,r2,40a59c <__unpack_d+0x60>
  40a5bc:	29c00215 	stw	r7,8(r5)
  40a5c0:	28c00315 	stw	r3,12(r5)
  40a5c4:	28800415 	stw	r2,16(r5)
  40a5c8:	f800283a 	ret
  40a5cc:	01c1ffc4 	movi	r7,2047
  40a5d0:	21c00f26 	beq	r4,r7,40a610 <__unpack_d+0xd4>
  40a5d4:	180cd63a 	srli	r6,r3,24
  40a5d8:	1004923a 	slli	r2,r2,8
  40a5dc:	213f0044 	addi	r4,r4,-1023
  40a5e0:	1806923a 	slli	r3,r3,8
  40a5e4:	3084b03a 	or	r2,r6,r2
  40a5e8:	29000215 	stw	r4,8(r5)
  40a5ec:	010000c4 	movi	r4,3
  40a5f0:	10840034 	orhi	r2,r2,4096
  40a5f4:	29000015 	stw	r4,0(r5)
  40a5f8:	28c00315 	stw	r3,12(r5)
  40a5fc:	28800415 	stw	r2,16(r5)
  40a600:	f800283a 	ret
  40a604:	00800084 	movi	r2,2
  40a608:	28800015 	stw	r2,0(r5)
  40a60c:	f800283a 	ret
  40a610:	1888b03a 	or	r4,r3,r2
  40a614:	20000526 	beq	r4,zero,40a62c <__unpack_d+0xf0>
  40a618:	3180022c 	andhi	r6,r6,8
  40a61c:	30000626 	beq	r6,zero,40a638 <__unpack_d+0xfc>
  40a620:	01000044 	movi	r4,1
  40a624:	29000015 	stw	r4,0(r5)
  40a628:	003ff306 	br	40a5f8 <__unpack_d+0xbc>
  40a62c:	00800104 	movi	r2,4
  40a630:	28800015 	stw	r2,0(r5)
  40a634:	f800283a 	ret
  40a638:	28000015 	stw	zero,0(r5)
  40a63c:	003fee06 	br	40a5f8 <__unpack_d+0xbc>

0040a640 <__fpcmp_parts_d>:
  40a640:	20c00017 	ldw	r3,0(r4)
  40a644:	00800044 	movi	r2,1
  40a648:	10c0142e 	bgeu	r2,r3,40a69c <__fpcmp_parts_d+0x5c>
  40a64c:	29800017 	ldw	r6,0(r5)
  40a650:	1180122e 	bgeu	r2,r6,40a69c <__fpcmp_parts_d+0x5c>
  40a654:	01c00104 	movi	r7,4
  40a658:	19c02826 	beq	r3,r7,40a6fc <__fpcmp_parts_d+0xbc>
  40a65c:	31c00926 	beq	r6,r7,40a684 <__fpcmp_parts_d+0x44>
  40a660:	01c00084 	movi	r7,2
  40a664:	19c00626 	beq	r3,r7,40a680 <__fpcmp_parts_d+0x40>
  40a668:	31c00a26 	beq	r6,r7,40a694 <__fpcmp_parts_d+0x54>
  40a66c:	20c00117 	ldw	r3,4(r4)
  40a670:	29800117 	ldw	r6,4(r5)
  40a674:	19800b26 	beq	r3,r6,40a6a4 <__fpcmp_parts_d+0x64>
  40a678:	1800041e 	bne	r3,zero,40a68c <__fpcmp_parts_d+0x4c>
  40a67c:	f800283a 	ret
  40a680:	30c01a26 	beq	r6,r3,40a6ec <__fpcmp_parts_d+0xac>
  40a684:	28800117 	ldw	r2,4(r5)
  40a688:	1000041e 	bne	r2,zero,40a69c <__fpcmp_parts_d+0x5c>
  40a68c:	00bfffc4 	movi	r2,-1
  40a690:	f800283a 	ret
  40a694:	20800117 	ldw	r2,4(r4)
  40a698:	103ffc1e 	bne	r2,zero,40a68c <__fpcmp_parts_d+0x4c>
  40a69c:	00800044 	movi	r2,1
  40a6a0:	f800283a 	ret
  40a6a4:	21c00217 	ldw	r7,8(r4)
  40a6a8:	29800217 	ldw	r6,8(r5)
  40a6ac:	31c0020e 	bge	r6,r7,40a6b8 <__fpcmp_parts_d+0x78>
  40a6b0:	183ff61e 	bne	r3,zero,40a68c <__fpcmp_parts_d+0x4c>
  40a6b4:	f800283a 	ret
  40a6b8:	39800a16 	blt	r7,r6,40a6e4 <__fpcmp_parts_d+0xa4>
  40a6bc:	20800417 	ldw	r2,16(r4)
  40a6c0:	29800417 	ldw	r6,16(r5)
  40a6c4:	21c00317 	ldw	r7,12(r4)
  40a6c8:	29000317 	ldw	r4,12(r5)
  40a6cc:	30800936 	bltu	r6,r2,40a6f4 <__fpcmp_parts_d+0xb4>
  40a6d0:	1180011e 	bne	r2,r6,40a6d8 <__fpcmp_parts_d+0x98>
  40a6d4:	21c00736 	bltu	r4,r7,40a6f4 <__fpcmp_parts_d+0xb4>
  40a6d8:	11800236 	bltu	r2,r6,40a6e4 <__fpcmp_parts_d+0xa4>
  40a6dc:	3080031e 	bne	r6,r2,40a6ec <__fpcmp_parts_d+0xac>
  40a6e0:	3900022e 	bgeu	r7,r4,40a6ec <__fpcmp_parts_d+0xac>
  40a6e4:	183fe926 	beq	r3,zero,40a68c <__fpcmp_parts_d+0x4c>
  40a6e8:	003fec06 	br	40a69c <__fpcmp_parts_d+0x5c>
  40a6ec:	0005883a 	mov	r2,zero
  40a6f0:	f800283a 	ret
  40a6f4:	183fe926 	beq	r3,zero,40a69c <__fpcmp_parts_d+0x5c>
  40a6f8:	003fe406 	br	40a68c <__fpcmp_parts_d+0x4c>
  40a6fc:	30ffe51e 	bne	r6,r3,40a694 <__fpcmp_parts_d+0x54>
  40a700:	28c00117 	ldw	r3,4(r5)
  40a704:	20800117 	ldw	r2,4(r4)
  40a708:	1885c83a 	sub	r2,r3,r2
  40a70c:	f800283a 	ret

0040a710 <__lshrdi3>:
  40a710:	2005883a 	mov	r2,r4
  40a714:	2807883a 	mov	r3,r5
  40a718:	30000826 	beq	r6,zero,40a73c <__lshrdi3+0x2c>
  40a71c:	01000804 	movi	r4,32
  40a720:	2189c83a 	sub	r4,r4,r6
  40a724:	0100060e 	bge	zero,r4,40a740 <__lshrdi3+0x30>
  40a728:	1184d83a 	srl	r2,r2,r6
  40a72c:	2908983a 	sll	r4,r5,r4
  40a730:	298cd83a 	srl	r6,r5,r6
  40a734:	2084b03a 	or	r2,r4,r2
  40a738:	3007883a 	mov	r3,r6
  40a73c:	f800283a 	ret
  40a740:	0105c83a 	sub	r2,zero,r4
  40a744:	000d883a 	mov	r6,zero
  40a748:	2884d83a 	srl	r2,r5,r2
  40a74c:	3007883a 	mov	r3,r6
  40a750:	003ffa06 	br	40a73c <__lshrdi3+0x2c>

0040a754 <__ashldi3>:
  40a754:	2005883a 	mov	r2,r4
  40a758:	2807883a 	mov	r3,r5
  40a75c:	30000826 	beq	r6,zero,40a780 <__ashldi3+0x2c>
  40a760:	01000804 	movi	r4,32
  40a764:	2189c83a 	sub	r4,r4,r6
  40a768:	0100060e 	bge	zero,r4,40a784 <__ashldi3+0x30>
  40a76c:	1108d83a 	srl	r4,r2,r4
  40a770:	2986983a 	sll	r3,r5,r6
  40a774:	118c983a 	sll	r6,r2,r6
  40a778:	20c6b03a 	or	r3,r4,r3
  40a77c:	3005883a 	mov	r2,r6
  40a780:	f800283a 	ret
  40a784:	0107c83a 	sub	r3,zero,r4
  40a788:	000d883a 	mov	r6,zero
  40a78c:	10c6983a 	sll	r3,r2,r3
  40a790:	3005883a 	mov	r2,r6
  40a794:	003ffa06 	br	40a780 <__ashldi3+0x2c>

0040a798 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  40a798:	defffe04 	addi	sp,sp,-8
  40a79c:	dfc00115 	stw	ra,4(sp)
  40a7a0:	df000015 	stw	fp,0(sp)
  40a7a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  40a7a8:	008010b4 	movhi	r2,66
  40a7ac:	10ae1304 	addi	r2,r2,-18356
  40a7b0:	10800017 	ldw	r2,0(r2)
  40a7b4:	10000526 	beq	r2,zero,40a7cc <alt_get_errno+0x34>
  40a7b8:	008010b4 	movhi	r2,66
  40a7bc:	10ae1304 	addi	r2,r2,-18356
  40a7c0:	10800017 	ldw	r2,0(r2)
  40a7c4:	103ee83a 	callr	r2
  40a7c8:	00000206 	br	40a7d4 <alt_get_errno+0x3c>
  40a7cc:	008010b4 	movhi	r2,66
  40a7d0:	10b58504 	addi	r2,r2,-10732
}
  40a7d4:	e037883a 	mov	sp,fp
  40a7d8:	dfc00117 	ldw	ra,4(sp)
  40a7dc:	df000017 	ldw	fp,0(sp)
  40a7e0:	dec00204 	addi	sp,sp,8
  40a7e4:	f800283a 	ret

0040a7e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  40a7e8:	defffb04 	addi	sp,sp,-20
  40a7ec:	dfc00415 	stw	ra,16(sp)
  40a7f0:	df000315 	stw	fp,12(sp)
  40a7f4:	df000304 	addi	fp,sp,12
  40a7f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  40a7fc:	e0bfff17 	ldw	r2,-4(fp)
  40a800:	10000716 	blt	r2,zero,40a820 <close+0x38>
  40a804:	e13fff17 	ldw	r4,-4(fp)
  40a808:	01400304 	movi	r5,12
  40a80c:	0400e700 	call	400e70 <__mulsi3>
  40a810:	00c010b4 	movhi	r3,66
  40a814:	18e90904 	addi	r3,r3,-23516
  40a818:	10c5883a 	add	r2,r2,r3
  40a81c:	00000106 	br	40a824 <close+0x3c>
  40a820:	0005883a 	mov	r2,zero
  40a824:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  40a828:	e0bffd17 	ldw	r2,-12(fp)
  40a82c:	10001826 	beq	r2,zero,40a890 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  40a830:	e0bffd17 	ldw	r2,-12(fp)
  40a834:	10800017 	ldw	r2,0(r2)
  40a838:	10800417 	ldw	r2,16(r2)
  40a83c:	10000626 	beq	r2,zero,40a858 <close+0x70>
  40a840:	e0bffd17 	ldw	r2,-12(fp)
  40a844:	10800017 	ldw	r2,0(r2)
  40a848:	10800417 	ldw	r2,16(r2)
  40a84c:	e13ffd17 	ldw	r4,-12(fp)
  40a850:	103ee83a 	callr	r2
  40a854:	00000106 	br	40a85c <close+0x74>
  40a858:	0005883a 	mov	r2,zero
  40a85c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  40a860:	e13fff17 	ldw	r4,-4(fp)
  40a864:	040b4540 	call	40b454 <alt_release_fd>
    if (rval < 0)
  40a868:	e0bffe17 	ldw	r2,-8(fp)
  40a86c:	1000060e 	bge	r2,zero,40a888 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  40a870:	040a7980 	call	40a798 <alt_get_errno>
  40a874:	e0fffe17 	ldw	r3,-8(fp)
  40a878:	00c7c83a 	sub	r3,zero,r3
  40a87c:	10c00015 	stw	r3,0(r2)
      return -1;
  40a880:	00bfffc4 	movi	r2,-1
  40a884:	00000606 	br	40a8a0 <close+0xb8>
    }
    return 0;
  40a888:	0005883a 	mov	r2,zero
  40a88c:	00000406 	br	40a8a0 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  40a890:	040a7980 	call	40a798 <alt_get_errno>
  40a894:	00c01444 	movi	r3,81
  40a898:	10c00015 	stw	r3,0(r2)
    return -1;
  40a89c:	00bfffc4 	movi	r2,-1
  }
}
  40a8a0:	e037883a 	mov	sp,fp
  40a8a4:	dfc00117 	ldw	ra,4(sp)
  40a8a8:	df000017 	ldw	fp,0(sp)
  40a8ac:	dec00204 	addi	sp,sp,8
  40a8b0:	f800283a 	ret

0040a8b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  40a8b4:	defffc04 	addi	sp,sp,-16
  40a8b8:	df000315 	stw	fp,12(sp)
  40a8bc:	df000304 	addi	fp,sp,12
  40a8c0:	e13ffd15 	stw	r4,-12(fp)
  40a8c4:	e17ffe15 	stw	r5,-8(fp)
  40a8c8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  40a8cc:	e0bfff17 	ldw	r2,-4(fp)
}
  40a8d0:	e037883a 	mov	sp,fp
  40a8d4:	df000017 	ldw	fp,0(sp)
  40a8d8:	dec00104 	addi	sp,sp,4
  40a8dc:	f800283a 	ret

0040a8e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  40a8e0:	defffe04 	addi	sp,sp,-8
  40a8e4:	dfc00115 	stw	ra,4(sp)
  40a8e8:	df000015 	stw	fp,0(sp)
  40a8ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  40a8f0:	008010b4 	movhi	r2,66
  40a8f4:	10ae1304 	addi	r2,r2,-18356
  40a8f8:	10800017 	ldw	r2,0(r2)
  40a8fc:	10000526 	beq	r2,zero,40a914 <alt_get_errno+0x34>
  40a900:	008010b4 	movhi	r2,66
  40a904:	10ae1304 	addi	r2,r2,-18356
  40a908:	10800017 	ldw	r2,0(r2)
  40a90c:	103ee83a 	callr	r2
  40a910:	00000206 	br	40a91c <alt_get_errno+0x3c>
  40a914:	008010b4 	movhi	r2,66
  40a918:	10b58504 	addi	r2,r2,-10732
}
  40a91c:	e037883a 	mov	sp,fp
  40a920:	dfc00117 	ldw	ra,4(sp)
  40a924:	df000017 	ldw	fp,0(sp)
  40a928:	dec00204 	addi	sp,sp,8
  40a92c:	f800283a 	ret

0040a930 <alt_dma_rxchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_rxchan alt_dma_rxchan_open (const char* name)
{
  40a930:	defffc04 	addi	sp,sp,-16
  40a934:	dfc00315 	stw	ra,12(sp)
  40a938:	df000215 	stw	fp,8(sp)
  40a93c:	df000204 	addi	fp,sp,8
  40a940:	e13fff15 	stw	r4,-4(fp)
  alt_dma_rxchan dev;

  dev = (alt_dma_rxchan) alt_find_dev (name, &alt_dma_rxchan_list);
  40a944:	e13fff17 	ldw	r4,-4(fp)
  40a948:	d1600c04 	addi	r5,gp,-32720
  40a94c:	040aa640 	call	40aa64 <alt_find_dev>
  40a950:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
  40a954:	e0bffe17 	ldw	r2,-8(fp)
  40a958:	1000031e 	bne	r2,zero,40a968 <alt_dma_rxchan_open+0x38>
  {
    ALT_ERRNO = ENODEV;
  40a95c:	040a8e00 	call	40a8e0 <alt_get_errno>
  40a960:	00c004c4 	movi	r3,19
  40a964:	10c00015 	stw	r3,0(r2)
  }

  return dev;
  40a968:	e0bffe17 	ldw	r2,-8(fp)
}
  40a96c:	e037883a 	mov	sp,fp
  40a970:	dfc00117 	ldw	ra,4(sp)
  40a974:	df000017 	ldw	fp,0(sp)
  40a978:	dec00204 	addi	sp,sp,8
  40a97c:	f800283a 	ret

0040a980 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  40a980:	defffe04 	addi	sp,sp,-8
  40a984:	dfc00115 	stw	ra,4(sp)
  40a988:	df000015 	stw	fp,0(sp)
  40a98c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  40a990:	008010b4 	movhi	r2,66
  40a994:	10ae1304 	addi	r2,r2,-18356
  40a998:	10800017 	ldw	r2,0(r2)
  40a99c:	10000526 	beq	r2,zero,40a9b4 <alt_get_errno+0x34>
  40a9a0:	008010b4 	movhi	r2,66
  40a9a4:	10ae1304 	addi	r2,r2,-18356
  40a9a8:	10800017 	ldw	r2,0(r2)
  40a9ac:	103ee83a 	callr	r2
  40a9b0:	00000206 	br	40a9bc <alt_get_errno+0x3c>
  40a9b4:	008010b4 	movhi	r2,66
  40a9b8:	10b58504 	addi	r2,r2,-10732
}
  40a9bc:	e037883a 	mov	sp,fp
  40a9c0:	dfc00117 	ldw	ra,4(sp)
  40a9c4:	df000017 	ldw	fp,0(sp)
  40a9c8:	dec00204 	addi	sp,sp,8
  40a9cc:	f800283a 	ret

0040a9d0 <alt_dma_txchan_open>:
 *
 * The return value will be NULL on failure, and non-NULL otherwise. 
 */

alt_dma_txchan alt_dma_txchan_open (const char* name)
{
  40a9d0:	defffc04 	addi	sp,sp,-16
  40a9d4:	dfc00315 	stw	ra,12(sp)
  40a9d8:	df000215 	stw	fp,8(sp)
  40a9dc:	df000204 	addi	fp,sp,8
  40a9e0:	e13fff15 	stw	r4,-4(fp)
  alt_dma_txchan dev;

  dev = (alt_dma_txchan) alt_find_dev (name, &alt_dma_txchan_list);
  40a9e4:	e13fff17 	ldw	r4,-4(fp)
  40a9e8:	d1600e04 	addi	r5,gp,-32712
  40a9ec:	040aa640 	call	40aa64 <alt_find_dev>
  40a9f0:	e0bffe15 	stw	r2,-8(fp)

  if (!dev)
  40a9f4:	e0bffe17 	ldw	r2,-8(fp)
  40a9f8:	1000031e 	bne	r2,zero,40aa08 <alt_dma_txchan_open+0x38>
  {
    ALT_ERRNO = ENODEV;
  40a9fc:	040a9800 	call	40a980 <alt_get_errno>
  40aa00:	00c004c4 	movi	r3,19
  40aa04:	10c00015 	stw	r3,0(r2)
  }

  return dev;
  40aa08:	e0bffe17 	ldw	r2,-8(fp)
}
  40aa0c:	e037883a 	mov	sp,fp
  40aa10:	dfc00117 	ldw	ra,4(sp)
  40aa14:	df000017 	ldw	fp,0(sp)
  40aa18:	dec00204 	addi	sp,sp,8
  40aa1c:	f800283a 	ret

0040aa20 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  40aa20:	defffc04 	addi	sp,sp,-16
  40aa24:	df000315 	stw	fp,12(sp)
  40aa28:	df000304 	addi	fp,sp,12
  40aa2c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  40aa30:	008010b4 	movhi	r2,66
  40aa34:	10b58f44 	addi	r2,r2,-10691
  40aa38:	10000005 	stb	zero,0(r2)
  40aa3c:	e0bfff17 	ldw	r2,-4(fp)
  40aa40:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
  40aa44:	e0bffd17 	ldw	r2,-12(fp)
  40aa48:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  40aa4c:	e0bffe17 	ldw	r2,-8(fp)
  40aa50:	10000226 	beq	r2,zero,40aa5c <_exit+0x3c>
    ALT_SIM_FAIL();
  40aa54:	002af070 	cmpltui	zero,zero,43969
  40aa58:	00000106 	br	40aa60 <_exit+0x40>
  } else {
    ALT_SIM_PASS();
  40aa5c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  40aa60:	003fff06 	br	40aa60 <_exit+0x40>

0040aa64 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  40aa64:	defffa04 	addi	sp,sp,-24
  40aa68:	dfc00515 	stw	ra,20(sp)
  40aa6c:	df000415 	stw	fp,16(sp)
  40aa70:	df000404 	addi	fp,sp,16
  40aa74:	e13ffe15 	stw	r4,-8(fp)
  40aa78:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  40aa7c:	e0bfff17 	ldw	r2,-4(fp)
  40aa80:	10800017 	ldw	r2,0(r2)
  40aa84:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  40aa88:	e13ffe17 	ldw	r4,-8(fp)
  40aa8c:	040115c0 	call	40115c <strlen>
  40aa90:	10800044 	addi	r2,r2,1
  40aa94:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  40aa98:	00000d06 	br	40aad0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  40aa9c:	e0bffc17 	ldw	r2,-16(fp)
  40aaa0:	10c00217 	ldw	r3,8(r2)
  40aaa4:	e0bffd17 	ldw	r2,-12(fp)
  40aaa8:	1809883a 	mov	r4,r3
  40aaac:	e17ffe17 	ldw	r5,-8(fp)
  40aab0:	100d883a 	mov	r6,r2
  40aab4:	04192a80 	call	4192a8 <memcmp>
  40aab8:	1000021e 	bne	r2,zero,40aac4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  40aabc:	e0bffc17 	ldw	r2,-16(fp)
  40aac0:	00000706 	br	40aae0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  40aac4:	e0bffc17 	ldw	r2,-16(fp)
  40aac8:	10800017 	ldw	r2,0(r2)
  40aacc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  40aad0:	e0fffc17 	ldw	r3,-16(fp)
  40aad4:	e0bfff17 	ldw	r2,-4(fp)
  40aad8:	18bff01e 	bne	r3,r2,40aa9c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  40aadc:	0005883a 	mov	r2,zero
}
  40aae0:	e037883a 	mov	sp,fp
  40aae4:	dfc00117 	ldw	ra,4(sp)
  40aae8:	df000017 	ldw	fp,0(sp)
  40aaec:	dec00204 	addi	sp,sp,8
  40aaf0:	f800283a 	ret

0040aaf4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  40aaf4:	defffe04 	addi	sp,sp,-8
  40aaf8:	dfc00115 	stw	ra,4(sp)
  40aafc:	df000015 	stw	fp,0(sp)
  40ab00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  40ab04:	008010b4 	movhi	r2,66
  40ab08:	10ae1304 	addi	r2,r2,-18356
  40ab0c:	10800017 	ldw	r2,0(r2)
  40ab10:	10000526 	beq	r2,zero,40ab28 <alt_get_errno+0x34>
  40ab14:	008010b4 	movhi	r2,66
  40ab18:	10ae1304 	addi	r2,r2,-18356
  40ab1c:	10800017 	ldw	r2,0(r2)
  40ab20:	103ee83a 	callr	r2
  40ab24:	00000206 	br	40ab30 <alt_get_errno+0x3c>
  40ab28:	008010b4 	movhi	r2,66
  40ab2c:	10b58504 	addi	r2,r2,-10732
}
  40ab30:	e037883a 	mov	sp,fp
  40ab34:	dfc00117 	ldw	ra,4(sp)
  40ab38:	df000017 	ldw	fp,0(sp)
  40ab3c:	dec00204 	addi	sp,sp,8
  40ab40:	f800283a 	ret

0040ab44 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  40ab44:	defffb04 	addi	sp,sp,-20
  40ab48:	dfc00415 	stw	ra,16(sp)
  40ab4c:	df000315 	stw	fp,12(sp)
  40ab50:	df000304 	addi	fp,sp,12
  40ab54:	e13ffe15 	stw	r4,-8(fp)
  40ab58:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  40ab5c:	e0bffe17 	ldw	r2,-8(fp)
  40ab60:	10000716 	blt	r2,zero,40ab80 <fstat+0x3c>
  40ab64:	e13ffe17 	ldw	r4,-8(fp)
  40ab68:	01400304 	movi	r5,12
  40ab6c:	0400e700 	call	400e70 <__mulsi3>
  40ab70:	00c010b4 	movhi	r3,66
  40ab74:	18e90904 	addi	r3,r3,-23516
  40ab78:	10c5883a 	add	r2,r2,r3
  40ab7c:	00000106 	br	40ab84 <fstat+0x40>
  40ab80:	0005883a 	mov	r2,zero
  40ab84:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  40ab88:	e0bffd17 	ldw	r2,-12(fp)
  40ab8c:	10001026 	beq	r2,zero,40abd0 <fstat+0x8c>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  40ab90:	e0bffd17 	ldw	r2,-12(fp)
  40ab94:	10800017 	ldw	r2,0(r2)
  40ab98:	10800817 	ldw	r2,32(r2)
  40ab9c:	10000726 	beq	r2,zero,40abbc <fstat+0x78>
    {
      return fd->dev->fstat(fd, st);
  40aba0:	e0bffd17 	ldw	r2,-12(fp)
  40aba4:	10800017 	ldw	r2,0(r2)
  40aba8:	10800817 	ldw	r2,32(r2)
  40abac:	e13ffd17 	ldw	r4,-12(fp)
  40abb0:	e17fff17 	ldw	r5,-4(fp)
  40abb4:	103ee83a 	callr	r2
  40abb8:	00000906 	br	40abe0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  40abbc:	e0bfff17 	ldw	r2,-4(fp)
  40abc0:	00c80004 	movi	r3,8192
  40abc4:	10c00115 	stw	r3,4(r2)
      return 0;
  40abc8:	0005883a 	mov	r2,zero
  40abcc:	00000406 	br	40abe0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  40abd0:	040aaf40 	call	40aaf4 <alt_get_errno>
  40abd4:	00c01444 	movi	r3,81
  40abd8:	10c00015 	stw	r3,0(r2)
    return -1;
  40abdc:	00bfffc4 	movi	r2,-1
  }
}
  40abe0:	e037883a 	mov	sp,fp
  40abe4:	dfc00117 	ldw	ra,4(sp)
  40abe8:	df000017 	ldw	fp,0(sp)
  40abec:	dec00204 	addi	sp,sp,8
  40abf0:	f800283a 	ret

0040abf4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  40abf4:	defff904 	addi	sp,sp,-28
  40abf8:	dfc00615 	stw	ra,24(sp)
  40abfc:	df000515 	stw	fp,20(sp)
  40ac00:	df000504 	addi	fp,sp,20
  40ac04:	e13ffc15 	stw	r4,-16(fp)
  40ac08:	e17ffd15 	stw	r5,-12(fp)
  40ac0c:	e1bffe15 	stw	r6,-8(fp)
  40ac10:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  40ac14:	e0800217 	ldw	r2,8(fp)
  40ac18:	d8800015 	stw	r2,0(sp)
  40ac1c:	e13ffc17 	ldw	r4,-16(fp)
  40ac20:	e17ffd17 	ldw	r5,-12(fp)
  40ac24:	e1bffe17 	ldw	r6,-8(fp)
  40ac28:	e1ffff17 	ldw	r7,-4(fp)
  40ac2c:	040ae240 	call	40ae24 <alt_iic_isr_register>
}  
  40ac30:	e037883a 	mov	sp,fp
  40ac34:	dfc00117 	ldw	ra,4(sp)
  40ac38:	df000017 	ldw	fp,0(sp)
  40ac3c:	dec00204 	addi	sp,sp,8
  40ac40:	f800283a 	ret

0040ac44 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  40ac44:	defff804 	addi	sp,sp,-32
  40ac48:	df000715 	stw	fp,28(sp)
  40ac4c:	df000704 	addi	fp,sp,28
  40ac50:	e13ffe15 	stw	r4,-8(fp)
  40ac54:	e17fff15 	stw	r5,-4(fp)
  40ac58:	e0bfff17 	ldw	r2,-4(fp)
  40ac5c:	e0bff915 	stw	r2,-28(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40ac60:	0005303a 	rdctl	r2,status
  40ac64:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40ac68:	e0fffa17 	ldw	r3,-24(fp)
  40ac6c:	00bfff84 	movi	r2,-2
  40ac70:	1884703a 	and	r2,r3,r2
  40ac74:	1001703a 	wrctl	status,r2
  
  return context;
  40ac78:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  40ac7c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active |= (1 << id);
  40ac80:	e0bff917 	ldw	r2,-28(fp)
  40ac84:	00c00044 	movi	r3,1
  40ac88:	1884983a 	sll	r2,r3,r2
  40ac8c:	1007883a 	mov	r3,r2
  40ac90:	008010b4 	movhi	r2,66
  40ac94:	10b58704 	addi	r2,r2,-10724
  40ac98:	10800017 	ldw	r2,0(r2)
  40ac9c:	1886b03a 	or	r3,r3,r2
  40aca0:	008010b4 	movhi	r2,66
  40aca4:	10b58704 	addi	r2,r2,-10724
  40aca8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  40acac:	008010b4 	movhi	r2,66
  40acb0:	10b58704 	addi	r2,r2,-10724
  40acb4:	10800017 	ldw	r2,0(r2)
  40acb8:	100170fa 	wrctl	ienable,r2
  40acbc:	e0bffb17 	ldw	r2,-20(fp)
  40acc0:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40acc4:	0005303a 	rdctl	r2,status
  40acc8:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40accc:	e0fffd17 	ldw	r3,-12(fp)
  40acd0:	00bfff84 	movi	r2,-2
  40acd4:	1884703a 	and	r2,r3,r2
  40acd8:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40acdc:	e0bffc17 	ldw	r2,-16(fp)
  40ace0:	1080004c 	andi	r2,r2,1
  40ace4:	e0fffd17 	ldw	r3,-12(fp)
  40ace8:	1884b03a 	or	r2,r3,r2
  40acec:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  40acf0:	e0bffd17 	ldw	r2,-12(fp)
  40acf4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  40acf8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  40acfc:	e037883a 	mov	sp,fp
  40ad00:	df000017 	ldw	fp,0(sp)
  40ad04:	dec00104 	addi	sp,sp,4
  40ad08:	f800283a 	ret

0040ad0c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  40ad0c:	defff804 	addi	sp,sp,-32
  40ad10:	df000715 	stw	fp,28(sp)
  40ad14:	df000704 	addi	fp,sp,28
  40ad18:	e13ffe15 	stw	r4,-8(fp)
  40ad1c:	e17fff15 	stw	r5,-4(fp)
  40ad20:	e0bfff17 	ldw	r2,-4(fp)
  40ad24:	e0bff915 	stw	r2,-28(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40ad28:	0005303a 	rdctl	r2,status
  40ad2c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40ad30:	e0fffa17 	ldw	r3,-24(fp)
  40ad34:	00bfff84 	movi	r2,-2
  40ad38:	1884703a 	and	r2,r3,r2
  40ad3c:	1001703a 	wrctl	status,r2
  
  return context;
  40ad40:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  40ad44:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  40ad48:	e0bff917 	ldw	r2,-28(fp)
  40ad4c:	00c00044 	movi	r3,1
  40ad50:	1884983a 	sll	r2,r3,r2
  40ad54:	0084303a 	nor	r2,zero,r2
  40ad58:	1007883a 	mov	r3,r2
  40ad5c:	008010b4 	movhi	r2,66
  40ad60:	10b58704 	addi	r2,r2,-10724
  40ad64:	10800017 	ldw	r2,0(r2)
  40ad68:	1886703a 	and	r3,r3,r2
  40ad6c:	008010b4 	movhi	r2,66
  40ad70:	10b58704 	addi	r2,r2,-10724
  40ad74:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  40ad78:	008010b4 	movhi	r2,66
  40ad7c:	10b58704 	addi	r2,r2,-10724
  40ad80:	10800017 	ldw	r2,0(r2)
  40ad84:	100170fa 	wrctl	ienable,r2
  40ad88:	e0bffb17 	ldw	r2,-20(fp)
  40ad8c:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40ad90:	0005303a 	rdctl	r2,status
  40ad94:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40ad98:	e0fffd17 	ldw	r3,-12(fp)
  40ad9c:	00bfff84 	movi	r2,-2
  40ada0:	1884703a 	and	r2,r3,r2
  40ada4:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40ada8:	e0bffc17 	ldw	r2,-16(fp)
  40adac:	1080004c 	andi	r2,r2,1
  40adb0:	e0fffd17 	ldw	r3,-12(fp)
  40adb4:	1884b03a 	or	r2,r3,r2
  40adb8:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  40adbc:	e0bffd17 	ldw	r2,-12(fp)
  40adc0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  40adc4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  40adc8:	e037883a 	mov	sp,fp
  40adcc:	df000017 	ldw	fp,0(sp)
  40add0:	dec00104 	addi	sp,sp,4
  40add4:	f800283a 	ret

0040add8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  40add8:	defffc04 	addi	sp,sp,-16
  40addc:	df000315 	stw	fp,12(sp)
  40ade0:	df000304 	addi	fp,sp,12
  40ade4:	e13ffe15 	stw	r4,-8(fp)
  40ade8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  40adec:	000530fa 	rdctl	r2,ienable
  40adf0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  40adf4:	e0bfff17 	ldw	r2,-4(fp)
  40adf8:	00c00044 	movi	r3,1
  40adfc:	1884983a 	sll	r2,r3,r2
  40ae00:	1007883a 	mov	r3,r2
  40ae04:	e0bffd17 	ldw	r2,-12(fp)
  40ae08:	1884703a 	and	r2,r3,r2
  40ae0c:	1004c03a 	cmpne	r2,r2,zero
  40ae10:	10803fcc 	andi	r2,r2,255
}
  40ae14:	e037883a 	mov	sp,fp
  40ae18:	df000017 	ldw	fp,0(sp)
  40ae1c:	dec00104 	addi	sp,sp,4
  40ae20:	f800283a 	ret

0040ae24 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  40ae24:	defff404 	addi	sp,sp,-48
  40ae28:	dfc00b15 	stw	ra,44(sp)
  40ae2c:	df000a15 	stw	fp,40(sp)
  40ae30:	df000a04 	addi	fp,sp,40
  40ae34:	e13ffc15 	stw	r4,-16(fp)
  40ae38:	e17ffd15 	stw	r5,-12(fp)
  40ae3c:	e1bffe15 	stw	r6,-8(fp)
  40ae40:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  40ae44:	00bffa84 	movi	r2,-22
  40ae48:	e0bff615 	stw	r2,-40(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  40ae4c:	e0bffd17 	ldw	r2,-12(fp)
  40ae50:	e0bff715 	stw	r2,-36(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  40ae54:	e0bff717 	ldw	r2,-36(fp)
  40ae58:	10800808 	cmpgei	r2,r2,32
  40ae5c:	1000321e 	bne	r2,zero,40af28 <alt_iic_isr_register+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40ae60:	0005303a 	rdctl	r2,status
  40ae64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40ae68:	e0fff917 	ldw	r3,-28(fp)
  40ae6c:	00bfff84 	movi	r2,-2
  40ae70:	1884703a 	and	r2,r3,r2
  40ae74:	1001703a 	wrctl	status,r2
  
  return context;
  40ae78:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  40ae7c:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  40ae80:	00c010b4 	movhi	r3,66
  40ae84:	18f5bb04 	addi	r3,r3,-10516
  40ae88:	e0bff717 	ldw	r2,-36(fp)
  40ae8c:	100490fa 	slli	r2,r2,3
  40ae90:	1885883a 	add	r2,r3,r2
  40ae94:	e0fffe17 	ldw	r3,-8(fp)
  40ae98:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  40ae9c:	00c010b4 	movhi	r3,66
  40aea0:	18f5bb04 	addi	r3,r3,-10516
  40aea4:	e0bff717 	ldw	r2,-36(fp)
  40aea8:	100490fa 	slli	r2,r2,3
  40aeac:	1885883a 	add	r2,r3,r2
  40aeb0:	10800104 	addi	r2,r2,4
  40aeb4:	e0ffff17 	ldw	r3,-4(fp)
  40aeb8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  40aebc:	e0bffe17 	ldw	r2,-8(fp)
  40aec0:	10000526 	beq	r2,zero,40aed8 <alt_iic_isr_register+0xb4>
  40aec4:	e0bff717 	ldw	r2,-36(fp)
  40aec8:	e13ffc17 	ldw	r4,-16(fp)
  40aecc:	100b883a 	mov	r5,r2
  40aed0:	040ac440 	call	40ac44 <alt_ic_irq_enable>
  40aed4:	00000406 	br	40aee8 <alt_iic_isr_register+0xc4>
  40aed8:	e0bff717 	ldw	r2,-36(fp)
  40aedc:	e13ffc17 	ldw	r4,-16(fp)
  40aee0:	100b883a 	mov	r5,r2
  40aee4:	040ad0c0 	call	40ad0c <alt_ic_irq_disable>
  40aee8:	e0bff615 	stw	r2,-40(fp)
  40aeec:	e0bff817 	ldw	r2,-32(fp)
  40aef0:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40aef4:	0005303a 	rdctl	r2,status
  40aef8:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40aefc:	e0fffb17 	ldw	r3,-20(fp)
  40af00:	00bfff84 	movi	r2,-2
  40af04:	1884703a 	and	r2,r3,r2
  40af08:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40af0c:	e0bffa17 	ldw	r2,-24(fp)
  40af10:	1080004c 	andi	r2,r2,1
  40af14:	e0fffb17 	ldw	r3,-20(fp)
  40af18:	1884b03a 	or	r2,r3,r2
  40af1c:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  40af20:	e0bffb17 	ldw	r2,-20(fp)
  40af24:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  40af28:	e0bff617 	ldw	r2,-40(fp)
}
  40af2c:	e037883a 	mov	sp,fp
  40af30:	dfc00117 	ldw	ra,4(sp)
  40af34:	df000017 	ldw	fp,0(sp)
  40af38:	dec00204 	addi	sp,sp,8
  40af3c:	f800283a 	ret

0040af40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  40af40:	defffe04 	addi	sp,sp,-8
  40af44:	dfc00115 	stw	ra,4(sp)
  40af48:	df000015 	stw	fp,0(sp)
  40af4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  40af50:	008010b4 	movhi	r2,66
  40af54:	10ae1304 	addi	r2,r2,-18356
  40af58:	10800017 	ldw	r2,0(r2)
  40af5c:	10000526 	beq	r2,zero,40af74 <alt_get_errno+0x34>
  40af60:	008010b4 	movhi	r2,66
  40af64:	10ae1304 	addi	r2,r2,-18356
  40af68:	10800017 	ldw	r2,0(r2)
  40af6c:	103ee83a 	callr	r2
  40af70:	00000206 	br	40af7c <alt_get_errno+0x3c>
  40af74:	008010b4 	movhi	r2,66
  40af78:	10b58504 	addi	r2,r2,-10732
}
  40af7c:	e037883a 	mov	sp,fp
  40af80:	dfc00117 	ldw	ra,4(sp)
  40af84:	df000017 	ldw	fp,0(sp)
  40af88:	dec00204 	addi	sp,sp,8
  40af8c:	f800283a 	ret

0040af90 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  40af90:	deffed04 	addi	sp,sp,-76
  40af94:	dfc01215 	stw	ra,72(sp)
  40af98:	df001115 	stw	fp,68(sp)
  40af9c:	df001104 	addi	fp,sp,68
  40afa0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  40afa4:	e0bfff17 	ldw	r2,-4(fp)
  40afa8:	10000716 	blt	r2,zero,40afc8 <isatty+0x38>
  40afac:	e13fff17 	ldw	r4,-4(fp)
  40afb0:	01400304 	movi	r5,12
  40afb4:	0400e700 	call	400e70 <__mulsi3>
  40afb8:	00c010b4 	movhi	r3,66
  40afbc:	18e90904 	addi	r3,r3,-23516
  40afc0:	10c5883a 	add	r2,r2,r3
  40afc4:	00000106 	br	40afcc <isatty+0x3c>
  40afc8:	0005883a 	mov	r2,zero
  40afcc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  40afd0:	e0bfef17 	ldw	r2,-68(fp)
  40afd4:	10000e26 	beq	r2,zero,40b010 <isatty+0x80>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  40afd8:	e0bfef17 	ldw	r2,-68(fp)
  40afdc:	10800017 	ldw	r2,0(r2)
  40afe0:	10800817 	ldw	r2,32(r2)
  40afe4:	1000021e 	bne	r2,zero,40aff0 <isatty+0x60>
    {
      return 1;
  40afe8:	00800044 	movi	r2,1
  40afec:	00000c06 	br	40b020 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  40aff0:	e0bff004 	addi	r2,fp,-64
  40aff4:	e13fff17 	ldw	r4,-4(fp)
  40aff8:	100b883a 	mov	r5,r2
  40affc:	040ab440 	call	40ab44 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  40b000:	e0bff117 	ldw	r2,-60(fp)
  40b004:	10880020 	cmpeqi	r2,r2,8192
  40b008:	10803fcc 	andi	r2,r2,255
  40b00c:	00000406 	br	40b020 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  40b010:	040af400 	call	40af40 <alt_get_errno>
  40b014:	00c01444 	movi	r3,81
  40b018:	10c00015 	stw	r3,0(r2)
    return 0;
  40b01c:	0005883a 	mov	r2,zero
  }
}
  40b020:	e037883a 	mov	sp,fp
  40b024:	dfc00117 	ldw	ra,4(sp)
  40b028:	df000017 	ldw	fp,0(sp)
  40b02c:	dec00204 	addi	sp,sp,8
  40b030:	f800283a 	ret

0040b034 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  40b034:	defffc04 	addi	sp,sp,-16
  40b038:	df000315 	stw	fp,12(sp)
  40b03c:	df000304 	addi	fp,sp,12
  40b040:	e13ffd15 	stw	r4,-12(fp)
  40b044:	e17ffe15 	stw	r5,-8(fp)
  40b048:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  40b04c:	e0fffe17 	ldw	r3,-8(fp)
  40b050:	e0bffd17 	ldw	r2,-12(fp)
  40b054:	18800e26 	beq	r3,r2,40b090 <alt_load_section+0x5c>
  {
    while( to != end )
  40b058:	00000a06 	br	40b084 <alt_load_section+0x50>
    {
      *to++ = *from++;
  40b05c:	e0bffd17 	ldw	r2,-12(fp)
  40b060:	10c00017 	ldw	r3,0(r2)
  40b064:	e0bffe17 	ldw	r2,-8(fp)
  40b068:	10c00015 	stw	r3,0(r2)
  40b06c:	e0bffe17 	ldw	r2,-8(fp)
  40b070:	10800104 	addi	r2,r2,4
  40b074:	e0bffe15 	stw	r2,-8(fp)
  40b078:	e0bffd17 	ldw	r2,-12(fp)
  40b07c:	10800104 	addi	r2,r2,4
  40b080:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  40b084:	e0fffe17 	ldw	r3,-8(fp)
  40b088:	e0bfff17 	ldw	r2,-4(fp)
  40b08c:	18bff31e 	bne	r3,r2,40b05c <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  40b090:	e037883a 	mov	sp,fp
  40b094:	df000017 	ldw	fp,0(sp)
  40b098:	dec00104 	addi	sp,sp,4
  40b09c:	f800283a 	ret

0040b0a0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  40b0a0:	defffe04 	addi	sp,sp,-8
  40b0a4:	dfc00115 	stw	ra,4(sp)
  40b0a8:	df000015 	stw	fp,0(sp)
  40b0ac:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  40b0b0:	010010b4 	movhi	r4,66
  40b0b4:	212e3904 	addi	r4,r4,-18204
  40b0b8:	014010b4 	movhi	r5,66
  40b0bc:	2966fa04 	addi	r5,r5,-25624
  40b0c0:	018010b4 	movhi	r6,66
  40b0c4:	31ae3904 	addi	r6,r6,-18204
  40b0c8:	040b0340 	call	40b034 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  40b0cc:	01001034 	movhi	r4,64
  40b0d0:	21000804 	addi	r4,r4,32
  40b0d4:	01401034 	movhi	r5,64
  40b0d8:	29400804 	addi	r5,r5,32
  40b0dc:	01801034 	movhi	r6,64
  40b0e0:	31806f04 	addi	r6,r6,444
  40b0e4:	040b0340 	call	40b034 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  40b0e8:	010010b4 	movhi	r4,66
  40b0ec:	21257504 	addi	r4,r4,-27180
  40b0f0:	014010b4 	movhi	r5,66
  40b0f4:	29657504 	addi	r5,r5,-27180
  40b0f8:	018010b4 	movhi	r6,66
  40b0fc:	31a6fa04 	addi	r6,r6,-25624
  40b100:	040b0340 	call	40b034 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  40b104:	04182c40 	call	4182c4 <alt_dcache_flush_all>
  alt_icache_flush_all();
  40b108:	041850c0 	call	41850c <alt_icache_flush_all>
}
  40b10c:	e037883a 	mov	sp,fp
  40b110:	dfc00117 	ldw	ra,4(sp)
  40b114:	df000017 	ldw	fp,0(sp)
  40b118:	dec00204 	addi	sp,sp,8
  40b11c:	f800283a 	ret

0040b120 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  40b120:	defffe04 	addi	sp,sp,-8
  40b124:	dfc00115 	stw	ra,4(sp)
  40b128:	df000015 	stw	fp,0(sp)
  40b12c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  40b130:	008010b4 	movhi	r2,66
  40b134:	10ae1304 	addi	r2,r2,-18356
  40b138:	10800017 	ldw	r2,0(r2)
  40b13c:	10000526 	beq	r2,zero,40b154 <alt_get_errno+0x34>
  40b140:	008010b4 	movhi	r2,66
  40b144:	10ae1304 	addi	r2,r2,-18356
  40b148:	10800017 	ldw	r2,0(r2)
  40b14c:	103ee83a 	callr	r2
  40b150:	00000206 	br	40b15c <alt_get_errno+0x3c>
  40b154:	008010b4 	movhi	r2,66
  40b158:	10b58504 	addi	r2,r2,-10732
}
  40b15c:	e037883a 	mov	sp,fp
  40b160:	dfc00117 	ldw	ra,4(sp)
  40b164:	df000017 	ldw	fp,0(sp)
  40b168:	dec00204 	addi	sp,sp,8
  40b16c:	f800283a 	ret

0040b170 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  40b170:	defff904 	addi	sp,sp,-28
  40b174:	dfc00615 	stw	ra,24(sp)
  40b178:	df000515 	stw	fp,20(sp)
  40b17c:	df000504 	addi	fp,sp,20
  40b180:	e13ffd15 	stw	r4,-12(fp)
  40b184:	e17ffe15 	stw	r5,-8(fp)
  40b188:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  40b18c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  40b190:	e0bffd17 	ldw	r2,-12(fp)
  40b194:	10000716 	blt	r2,zero,40b1b4 <lseek+0x44>
  40b198:	e13ffd17 	ldw	r4,-12(fp)
  40b19c:	01400304 	movi	r5,12
  40b1a0:	0400e700 	call	400e70 <__mulsi3>
  40b1a4:	00c010b4 	movhi	r3,66
  40b1a8:	18e90904 	addi	r3,r3,-23516
  40b1ac:	10c5883a 	add	r2,r2,r3
  40b1b0:	00000106 	br	40b1b8 <lseek+0x48>
  40b1b4:	0005883a 	mov	r2,zero
  40b1b8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  40b1bc:	e0bffc17 	ldw	r2,-16(fp)
  40b1c0:	10001026 	beq	r2,zero,40b204 <lseek+0x94>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  40b1c4:	e0bffc17 	ldw	r2,-16(fp)
  40b1c8:	10800017 	ldw	r2,0(r2)
  40b1cc:	10800717 	ldw	r2,28(r2)
  40b1d0:	10000926 	beq	r2,zero,40b1f8 <lseek+0x88>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  40b1d4:	e0bffc17 	ldw	r2,-16(fp)
  40b1d8:	10800017 	ldw	r2,0(r2)
  40b1dc:	10800717 	ldw	r2,28(r2)
  40b1e0:	e13ffc17 	ldw	r4,-16(fp)
  40b1e4:	e17ffe17 	ldw	r5,-8(fp)
  40b1e8:	e1bfff17 	ldw	r6,-4(fp)
  40b1ec:	103ee83a 	callr	r2
  40b1f0:	e0bffb15 	stw	r2,-20(fp)
  40b1f4:	00000506 	br	40b20c <lseek+0x9c>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  40b1f8:	00bfde84 	movi	r2,-134
  40b1fc:	e0bffb15 	stw	r2,-20(fp)
  40b200:	00000206 	br	40b20c <lseek+0x9c>
    }
  }
  else  
  {
    rc = -EBADFD;
  40b204:	00bfebc4 	movi	r2,-81
  40b208:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  40b20c:	e0bffb17 	ldw	r2,-20(fp)
  40b210:	1000060e 	bge	r2,zero,40b22c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  40b214:	040b1200 	call	40b120 <alt_get_errno>
  40b218:	e0fffb17 	ldw	r3,-20(fp)
  40b21c:	00c7c83a 	sub	r3,zero,r3
  40b220:	10c00015 	stw	r3,0(r2)
    rc = -1;
  40b224:	00bfffc4 	movi	r2,-1
  40b228:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  40b22c:	e0bffb17 	ldw	r2,-20(fp)
}
  40b230:	e037883a 	mov	sp,fp
  40b234:	dfc00117 	ldw	ra,4(sp)
  40b238:	df000017 	ldw	fp,0(sp)
  40b23c:	dec00204 	addi	sp,sp,8
  40b240:	f800283a 	ret

0040b244 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  40b244:	defffb04 	addi	sp,sp,-20
  40b248:	dfc00415 	stw	ra,16(sp)
  40b24c:	df000315 	stw	fp,12(sp)
  40b250:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  40b254:	0009883a 	mov	r4,zero
  40b258:	04156380 	call	415638 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  40b25c:	040c5cc0 	call	40c5cc <OSInit>
  40b260:	01000044 	movi	r4,1
  40b264:	04120100 	call	412010 <OSSemCreate>
  40b268:	00c010b4 	movhi	r3,66
  40b26c:	18f58c04 	addi	r3,r3,-10704
  40b270:	18800015 	stw	r2,0(r3)
  40b274:	01000044 	movi	r4,1
  40b278:	04120100 	call	412010 <OSSemCreate>
  40b27c:	00c010b4 	movhi	r3,66
  40b280:	18f58e04 	addi	r3,r3,-10696
  40b284:	18800015 	stw	r2,0(r3)
  40b288:	008010b4 	movhi	r2,66
  40b28c:	10b58604 	addi	r2,r2,-10728
  40b290:	e0bffe15 	stw	r2,-8(fp)
  40b294:	00800044 	movi	r2,1
  40b298:	e0bfff0d 	sth	r2,-4(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  40b29c:	e0bfff0b 	ldhu	r2,-4(fp)
  40b2a0:	1009883a 	mov	r4,r2
  40b2a4:	04120100 	call	412010 <OSSemCreate>
  40b2a8:	e0fffe17 	ldw	r3,-8(fp)
  40b2ac:	18800015 	stw	r2,0(r3)
  return *sem ? 0 : -1;
  40b2b0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  40b2b4:	041566c0 	call	41566c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  40b2b8:	010010b4 	movhi	r4,66
  40b2bc:	21268f04 	addi	r4,r4,-26052
  40b2c0:	014010b4 	movhi	r5,66
  40b2c4:	29668f04 	addi	r5,r5,-26052
  40b2c8:	018010b4 	movhi	r6,66
  40b2cc:	31a68f04 	addi	r6,r6,-26052
  40b2d0:	041861c0 	call	41861c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  40b2d4:	04183d00 	call	4183d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  40b2d8:	010010b4 	movhi	r4,66
  40b2dc:	21210b04 	addi	r4,r4,-31700
  40b2e0:	04192940 	call	419294 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  40b2e4:	d1278517 	ldw	r4,-25068(gp)
  40b2e8:	d0e78617 	ldw	r3,-25064(gp)
  40b2ec:	d0a78717 	ldw	r2,-25060(gp)
  40b2f0:	180b883a 	mov	r5,r3
  40b2f4:	100d883a 	mov	r6,r2
  40b2f8:	04008980 	call	400898 <main>
  40b2fc:	e0bffd15 	stw	r2,-12(fp)
  close(STDOUT_FILENO);
  40b300:	01000044 	movi	r4,1
  40b304:	040a7e80 	call	40a7e8 <close>
  exit (result);
  40b308:	e13ffd17 	ldw	r4,-12(fp)
  40b30c:	0400ee40 	call	400ee4 <exit>

0040b310 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  40b310:	defffe04 	addi	sp,sp,-8
  40b314:	dfc00115 	stw	ra,4(sp)
  40b318:	df000015 	stw	fp,0(sp)
  40b31c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  40b320:	008010b4 	movhi	r2,66
  40b324:	10ae1304 	addi	r2,r2,-18356
  40b328:	10800017 	ldw	r2,0(r2)
  40b32c:	10000526 	beq	r2,zero,40b344 <alt_get_errno+0x34>
  40b330:	008010b4 	movhi	r2,66
  40b334:	10ae1304 	addi	r2,r2,-18356
  40b338:	10800017 	ldw	r2,0(r2)
  40b33c:	103ee83a 	callr	r2
  40b340:	00000206 	br	40b34c <alt_get_errno+0x3c>
  40b344:	008010b4 	movhi	r2,66
  40b348:	10b58504 	addi	r2,r2,-10732
}
  40b34c:	e037883a 	mov	sp,fp
  40b350:	dfc00117 	ldw	ra,4(sp)
  40b354:	df000017 	ldw	fp,0(sp)
  40b358:	dec00204 	addi	sp,sp,8
  40b35c:	f800283a 	ret

0040b360 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  40b360:	defff904 	addi	sp,sp,-28
  40b364:	dfc00615 	stw	ra,24(sp)
  40b368:	df000515 	stw	fp,20(sp)
  40b36c:	df000504 	addi	fp,sp,20
  40b370:	e13ffd15 	stw	r4,-12(fp)
  40b374:	e17ffe15 	stw	r5,-8(fp)
  40b378:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  40b37c:	e0bffd17 	ldw	r2,-12(fp)
  40b380:	10000716 	blt	r2,zero,40b3a0 <read+0x40>
  40b384:	e13ffd17 	ldw	r4,-12(fp)
  40b388:	01400304 	movi	r5,12
  40b38c:	0400e700 	call	400e70 <__mulsi3>
  40b390:	00c010b4 	movhi	r3,66
  40b394:	18e90904 	addi	r3,r3,-23516
  40b398:	10c5883a 	add	r2,r2,r3
  40b39c:	00000106 	br	40b3a4 <read+0x44>
  40b3a0:	0005883a 	mov	r2,zero
  40b3a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  40b3a8:	e0bffb17 	ldw	r2,-20(fp)
  40b3ac:	10002026 	beq	r2,zero,40b430 <read+0xd0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  40b3b0:	e0bffb17 	ldw	r2,-20(fp)
  40b3b4:	10800217 	ldw	r2,8(r2)
  40b3b8:	108000cc 	andi	r2,r2,3
  40b3bc:	10800060 	cmpeqi	r2,r2,1
  40b3c0:	1000171e 	bne	r2,zero,40b420 <read+0xc0>
        (fd->dev->read))
  40b3c4:	e0bffb17 	ldw	r2,-20(fp)
  40b3c8:	10800017 	ldw	r2,0(r2)
  40b3cc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  40b3d0:	10001326 	beq	r2,zero,40b420 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  40b3d4:	e0bffb17 	ldw	r2,-20(fp)
  40b3d8:	10800017 	ldw	r2,0(r2)
  40b3dc:	10c00517 	ldw	r3,20(r2)
  40b3e0:	e0bfff17 	ldw	r2,-4(fp)
  40b3e4:	e13ffb17 	ldw	r4,-20(fp)
  40b3e8:	e17ffe17 	ldw	r5,-8(fp)
  40b3ec:	100d883a 	mov	r6,r2
  40b3f0:	183ee83a 	callr	r3
  40b3f4:	e0bffc15 	stw	r2,-16(fp)
  40b3f8:	e0bffc17 	ldw	r2,-16(fp)
  40b3fc:	1000060e 	bge	r2,zero,40b418 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  40b400:	040b3100 	call	40b310 <alt_get_errno>
  40b404:	e0fffc17 	ldw	r3,-16(fp)
  40b408:	00c7c83a 	sub	r3,zero,r3
  40b40c:	10c00015 	stw	r3,0(r2)
          return -1;
  40b410:	00bfffc4 	movi	r2,-1
  40b414:	00000a06 	br	40b440 <read+0xe0>
        }
        return rval;
  40b418:	e0bffc17 	ldw	r2,-16(fp)
  40b41c:	00000806 	br	40b440 <read+0xe0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  40b420:	040b3100 	call	40b310 <alt_get_errno>
  40b424:	00c00344 	movi	r3,13
  40b428:	10c00015 	stw	r3,0(r2)
  40b42c:	00000306 	br	40b43c <read+0xdc>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  40b430:	040b3100 	call	40b310 <alt_get_errno>
  40b434:	00c01444 	movi	r3,81
  40b438:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  40b43c:	00bfffc4 	movi	r2,-1
}
  40b440:	e037883a 	mov	sp,fp
  40b444:	dfc00117 	ldw	ra,4(sp)
  40b448:	df000017 	ldw	fp,0(sp)
  40b44c:	dec00204 	addi	sp,sp,8
  40b450:	f800283a 	ret

0040b454 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  40b454:	defffc04 	addi	sp,sp,-16
  40b458:	dfc00315 	stw	ra,12(sp)
  40b45c:	df000215 	stw	fp,8(sp)
  40b460:	dc000115 	stw	r16,4(sp)
  40b464:	df000104 	addi	fp,sp,4
  40b468:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  40b46c:	e0bfff17 	ldw	r2,-4(fp)
  40b470:	108000d0 	cmplti	r2,r2,3
  40b474:	1000111e 	bne	r2,zero,40b4bc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  40b478:	040010b4 	movhi	r16,66
  40b47c:	84290904 	addi	r16,r16,-23516
  40b480:	e0bfff17 	ldw	r2,-4(fp)
  40b484:	1009883a 	mov	r4,r2
  40b488:	01400304 	movi	r5,12
  40b48c:	0400e700 	call	400e70 <__mulsi3>
  40b490:	8085883a 	add	r2,r16,r2
  40b494:	10800204 	addi	r2,r2,8
  40b498:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  40b49c:	040010b4 	movhi	r16,66
  40b4a0:	84290904 	addi	r16,r16,-23516
  40b4a4:	e0bfff17 	ldw	r2,-4(fp)
  40b4a8:	1009883a 	mov	r4,r2
  40b4ac:	01400304 	movi	r5,12
  40b4b0:	0400e700 	call	400e70 <__mulsi3>
  40b4b4:	8085883a 	add	r2,r16,r2
  40b4b8:	10000015 	stw	zero,0(r2)
  }
}
  40b4bc:	e037883a 	mov	sp,fp
  40b4c0:	dfc00217 	ldw	ra,8(sp)
  40b4c4:	df000117 	ldw	fp,4(sp)
  40b4c8:	dc000017 	ldw	r16,0(sp)
  40b4cc:	dec00304 	addi	sp,sp,12
  40b4d0:	f800283a 	ret

0040b4d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  40b4d4:	defff704 	addi	sp,sp,-36
  40b4d8:	df000815 	stw	fp,32(sp)
  40b4dc:	df000804 	addi	fp,sp,32
  40b4e0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40b4e4:	0005303a 	rdctl	r2,status
  40b4e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40b4ec:	e0fffa17 	ldw	r3,-24(fp)
  40b4f0:	00bfff84 	movi	r2,-2
  40b4f4:	1884703a 	and	r2,r3,r2
  40b4f8:	1001703a 	wrctl	status,r2
  
  return context;
  40b4fc:	e0bffa17 	ldw	r2,-24(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  40b500:	e0bff815 	stw	r2,-32(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  40b504:	d0a01217 	ldw	r2,-32696(gp)
  40b508:	10c000c4 	addi	r3,r2,3
  40b50c:	00bfff04 	movi	r2,-4
  40b510:	1884703a 	and	r2,r3,r2
  40b514:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  40b518:	d0e01217 	ldw	r3,-32696(gp)
  40b51c:	e0bfff17 	ldw	r2,-4(fp)
  40b520:	1885883a 	add	r2,r3,r2
  40b524:	00c010f4 	movhi	r3,67
  40b528:	18c40004 	addi	r3,r3,4096
  40b52c:	1880112e 	bgeu	r3,r2,40b574 <sbrk+0xa0>
  40b530:	e0bff817 	ldw	r2,-32(fp)
  40b534:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40b538:	0005303a 	rdctl	r2,status
  40b53c:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40b540:	e0fffc17 	ldw	r3,-16(fp)
  40b544:	00bfff84 	movi	r2,-2
  40b548:	1884703a 	and	r2,r3,r2
  40b54c:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40b550:	e0bffb17 	ldw	r2,-20(fp)
  40b554:	1080004c 	andi	r2,r2,1
  40b558:	e0fffc17 	ldw	r3,-16(fp)
  40b55c:	1884b03a 	or	r2,r3,r2
  40b560:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  40b564:	e0bffc17 	ldw	r2,-16(fp)
  40b568:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  40b56c:	00bfffc4 	movi	r2,-1
  40b570:	00001606 	br	40b5cc <sbrk+0xf8>
  }
#endif

  prev_heap_end = heap_end; 
  40b574:	d0a01217 	ldw	r2,-32696(gp)
  40b578:	e0bff915 	stw	r2,-28(fp)
  heap_end += incr; 
  40b57c:	d0e01217 	ldw	r3,-32696(gp)
  40b580:	e0bfff17 	ldw	r2,-4(fp)
  40b584:	1885883a 	add	r2,r3,r2
  40b588:	d0a01215 	stw	r2,-32696(gp)
  40b58c:	e0bff817 	ldw	r2,-32(fp)
  40b590:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40b594:	0005303a 	rdctl	r2,status
  40b598:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40b59c:	e0fffe17 	ldw	r3,-8(fp)
  40b5a0:	00bfff84 	movi	r2,-2
  40b5a4:	1884703a 	and	r2,r3,r2
  40b5a8:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40b5ac:	e0bffd17 	ldw	r2,-12(fp)
  40b5b0:	1080004c 	andi	r2,r2,1
  40b5b4:	e0fffe17 	ldw	r3,-8(fp)
  40b5b8:	1884b03a 	or	r2,r3,r2
  40b5bc:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  40b5c0:	e0bffe17 	ldw	r2,-8(fp)
  40b5c4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  40b5c8:	e0bff917 	ldw	r2,-28(fp)
} 
  40b5cc:	e037883a 	mov	sp,fp
  40b5d0:	df000017 	ldw	fp,0(sp)
  40b5d4:	dec00104 	addi	sp,sp,4
  40b5d8:	f800283a 	ret

0040b5dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  40b5dc:	defffe04 	addi	sp,sp,-8
  40b5e0:	dfc00115 	stw	ra,4(sp)
  40b5e4:	df000015 	stw	fp,0(sp)
  40b5e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  40b5ec:	008010b4 	movhi	r2,66
  40b5f0:	10ae1304 	addi	r2,r2,-18356
  40b5f4:	10800017 	ldw	r2,0(r2)
  40b5f8:	10000526 	beq	r2,zero,40b610 <alt_get_errno+0x34>
  40b5fc:	008010b4 	movhi	r2,66
  40b600:	10ae1304 	addi	r2,r2,-18356
  40b604:	10800017 	ldw	r2,0(r2)
  40b608:	103ee83a 	callr	r2
  40b60c:	00000206 	br	40b618 <alt_get_errno+0x3c>
  40b610:	008010b4 	movhi	r2,66
  40b614:	10b58504 	addi	r2,r2,-10732
}
  40b618:	e037883a 	mov	sp,fp
  40b61c:	dfc00117 	ldw	ra,4(sp)
  40b620:	df000017 	ldw	fp,0(sp)
  40b624:	dec00204 	addi	sp,sp,8
  40b628:	f800283a 	ret

0040b62c <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  40b62c:	defffc04 	addi	sp,sp,-16
  40b630:	dfc00315 	stw	ra,12(sp)
  40b634:	df000215 	stw	fp,8(sp)
  40b638:	df000204 	addi	fp,sp,8
  40b63c:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  40b640:	008010b4 	movhi	r2,66
  40b644:	10b5a604 	addi	r2,r2,-10600
  40b648:	10800017 	ldw	r2,0(r2)
  clock_t ticks = alt_nticks(); 
  40b64c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  40b650:	008010b4 	movhi	r2,66
  40b654:	10b5a504 	addi	r2,r2,-10604
  40b658:	10800017 	ldw	r2,0(r2)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  40b65c:	1000051e 	bne	r2,zero,40b674 <times+0x48>
  {
    ALT_ERRNO = ENOSYS;
  40b660:	040b5dc0 	call	40b5dc <alt_get_errno>
  40b664:	00c01604 	movi	r3,88
  40b668:	10c00015 	stw	r3,0(r2)
    return 0;
  40b66c:	0005883a 	mov	r2,zero
  40b670:	00000a06 	br	40b69c <times+0x70>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  40b674:	e0bfff17 	ldw	r2,-4(fp)
  40b678:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
  40b67c:	e0bfff17 	ldw	r2,-4(fp)
  40b680:	e0fffe17 	ldw	r3,-8(fp)
  40b684:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
  40b688:	e0bfff17 	ldw	r2,-4(fp)
  40b68c:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
  40b690:	e0bfff17 	ldw	r2,-4(fp)
  40b694:	10000315 	stw	zero,12(r2)

  return ticks;
  40b698:	e0bffe17 	ldw	r2,-8(fp)
}
  40b69c:	e037883a 	mov	sp,fp
  40b6a0:	dfc00117 	ldw	ra,4(sp)
  40b6a4:	df000017 	ldw	fp,0(sp)
  40b6a8:	dec00204 	addi	sp,sp,8
  40b6ac:	f800283a 	ret

0040b6b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  40b6b0:	defffe04 	addi	sp,sp,-8
  40b6b4:	dfc00115 	stw	ra,4(sp)
  40b6b8:	df000015 	stw	fp,0(sp)
  40b6bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  40b6c0:	008010b4 	movhi	r2,66
  40b6c4:	10ae1304 	addi	r2,r2,-18356
  40b6c8:	10800017 	ldw	r2,0(r2)
  40b6cc:	10000526 	beq	r2,zero,40b6e4 <alt_get_errno+0x34>
  40b6d0:	008010b4 	movhi	r2,66
  40b6d4:	10ae1304 	addi	r2,r2,-18356
  40b6d8:	10800017 	ldw	r2,0(r2)
  40b6dc:	103ee83a 	callr	r2
  40b6e0:	00000206 	br	40b6ec <alt_get_errno+0x3c>
  40b6e4:	008010b4 	movhi	r2,66
  40b6e8:	10b58504 	addi	r2,r2,-10732
}
  40b6ec:	e037883a 	mov	sp,fp
  40b6f0:	dfc00117 	ldw	ra,4(sp)
  40b6f4:	df000017 	ldw	fp,0(sp)
  40b6f8:	dec00204 	addi	sp,sp,8
  40b6fc:	f800283a 	ret

0040b700 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  40b700:	defff904 	addi	sp,sp,-28
  40b704:	dfc00615 	stw	ra,24(sp)
  40b708:	df000515 	stw	fp,20(sp)
  40b70c:	df000504 	addi	fp,sp,20
  40b710:	e13ffd15 	stw	r4,-12(fp)
  40b714:	e17ffe15 	stw	r5,-8(fp)
  40b718:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  40b71c:	e0bffd17 	ldw	r2,-12(fp)
  40b720:	10000716 	blt	r2,zero,40b740 <write+0x40>
  40b724:	e13ffd17 	ldw	r4,-12(fp)
  40b728:	01400304 	movi	r5,12
  40b72c:	0400e700 	call	400e70 <__mulsi3>
  40b730:	00c010b4 	movhi	r3,66
  40b734:	18e90904 	addi	r3,r3,-23516
  40b738:	10c5883a 	add	r2,r2,r3
  40b73c:	00000106 	br	40b744 <write+0x44>
  40b740:	0005883a 	mov	r2,zero
  40b744:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  40b748:	e0bffb17 	ldw	r2,-20(fp)
  40b74c:	10001f26 	beq	r2,zero,40b7cc <write+0xcc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  40b750:	e0bffb17 	ldw	r2,-20(fp)
  40b754:	10800217 	ldw	r2,8(r2)
  40b758:	108000cc 	andi	r2,r2,3
  40b75c:	10001726 	beq	r2,zero,40b7bc <write+0xbc>
  40b760:	e0bffb17 	ldw	r2,-20(fp)
  40b764:	10800017 	ldw	r2,0(r2)
  40b768:	10800617 	ldw	r2,24(r2)
  40b76c:	10001326 	beq	r2,zero,40b7bc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  40b770:	e0bffb17 	ldw	r2,-20(fp)
  40b774:	10800017 	ldw	r2,0(r2)
  40b778:	10c00617 	ldw	r3,24(r2)
  40b77c:	e0bfff17 	ldw	r2,-4(fp)
  40b780:	e13ffb17 	ldw	r4,-20(fp)
  40b784:	e17ffe17 	ldw	r5,-8(fp)
  40b788:	100d883a 	mov	r6,r2
  40b78c:	183ee83a 	callr	r3
  40b790:	e0bffc15 	stw	r2,-16(fp)
  40b794:	e0bffc17 	ldw	r2,-16(fp)
  40b798:	1000060e 	bge	r2,zero,40b7b4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  40b79c:	040b6b00 	call	40b6b0 <alt_get_errno>
  40b7a0:	e0fffc17 	ldw	r3,-16(fp)
  40b7a4:	00c7c83a 	sub	r3,zero,r3
  40b7a8:	10c00015 	stw	r3,0(r2)
        return -1;
  40b7ac:	00bfffc4 	movi	r2,-1
  40b7b0:	00000a06 	br	40b7dc <write+0xdc>
      }
      return rval;
  40b7b4:	e0bffc17 	ldw	r2,-16(fp)
  40b7b8:	00000806 	br	40b7dc <write+0xdc>
    }
    else
    {
      ALT_ERRNO = EACCES;
  40b7bc:	040b6b00 	call	40b6b0 <alt_get_errno>
  40b7c0:	00c00344 	movi	r3,13
  40b7c4:	10c00015 	stw	r3,0(r2)
  40b7c8:	00000306 	br	40b7d8 <write+0xd8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  40b7cc:	040b6b00 	call	40b6b0 <alt_get_errno>
  40b7d0:	00c01444 	movi	r3,81
  40b7d4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  40b7d8:	00bfffc4 	movi	r2,-1
}
  40b7dc:	e037883a 	mov	sp,fp
  40b7e0:	dfc00117 	ldw	ra,4(sp)
  40b7e4:	df000017 	ldw	fp,0(sp)
  40b7e8:	dec00204 	addi	sp,sp,8
  40b7ec:	f800283a 	ret

0040b7f0 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  40b7f0:	deffdf04 	addi	sp,sp,-132
  40b7f4:	dfc02015 	stw	ra,128(sp)
  40b7f8:	df001f15 	stw	fp,124(sp)
  40b7fc:	df001f04 	addi	fp,sp,124
  40b800:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  40b804:	e0bfe204 	addi	r2,fp,-120
  40b808:	01003fc4 	movi	r4,255
  40b80c:	100b883a 	mov	r5,r2
  40b810:	0414b4c0 	call	414b4c <OSTaskQuery>
  40b814:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  40b818:	e0bffe83 	ldbu	r2,-6(fp)
  40b81c:	10803fcc 	andi	r2,r2,255
  40b820:	10001c1e 	bne	r2,zero,40b894 <__env_lock+0xa4>
    return;

  id = tcb.OSTCBPrio;
  40b824:	e0bfee83 	ldbu	r2,-70(fp)
  40b828:	10803fcc 	andi	r2,r2,255
  40b82c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  40b830:	d0e78917 	ldw	r3,-25052(gp)
  40b834:	e0bffd04 	addi	r2,fp,-12
  40b838:	1809883a 	mov	r4,r3
  40b83c:	100b883a 	mov	r5,r2
  40b840:	0412aac0 	call	412aac <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  40b844:	e0bffe43 	ldbu	r2,-7(fp)
  40b848:	10803fcc 	andi	r2,r2,255
  40b84c:	10000726 	beq	r2,zero,40b86c <__env_lock+0x7c>
  40b850:	d0a01317 	ldw	r2,-32692(gp)
  40b854:	e0ffe117 	ldw	r3,-124(fp)
  40b858:	1880041e 	bne	r3,r2,40b86c <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
  40b85c:	d0a78817 	ldw	r2,-25056(gp)
  40b860:	10800044 	addi	r2,r2,1
  40b864:	d0a78815 	stw	r2,-25056(gp)
  40b868:	00000a06 	br	40b894 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  40b86c:	d0e78917 	ldw	r3,-25052(gp)
  40b870:	e0bffe84 	addi	r2,fp,-6
  40b874:	1809883a 	mov	r4,r3
  40b878:	000b883a 	mov	r5,zero
  40b87c:	100d883a 	mov	r6,r2
  40b880:	041245c0 	call	41245c <OSSemPend>
    locks  = 1;
  40b884:	00800044 	movi	r2,1
  40b888:	d0a78815 	stw	r2,-25056(gp)
    lockid = id;
  40b88c:	e0bfe117 	ldw	r2,-124(fp)
  40b890:	d0a01315 	stw	r2,-32692(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  40b894:	e037883a 	mov	sp,fp
  40b898:	dfc00117 	ldw	ra,4(sp)
  40b89c:	df000017 	ldw	fp,0(sp)
  40b8a0:	dec00204 	addi	sp,sp,8
  40b8a4:	f800283a 	ret

0040b8a8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  40b8a8:	defffd04 	addi	sp,sp,-12
  40b8ac:	dfc00215 	stw	ra,8(sp)
  40b8b0:	df000115 	stw	fp,4(sp)
  40b8b4:	df000104 	addi	fp,sp,4
  40b8b8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  40b8bc:	d0a78817 	ldw	r2,-25056(gp)
  40b8c0:	10000b26 	beq	r2,zero,40b8f0 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  40b8c4:	d0a78817 	ldw	r2,-25056(gp)
  40b8c8:	10bfffc4 	addi	r2,r2,-1
  40b8cc:	d0a78815 	stw	r2,-25056(gp)
  40b8d0:	d0a78817 	ldw	r2,-25056(gp)
  40b8d4:	1000071e 	bne	r2,zero,40b8f4 <__env_unlock+0x4c>
  {
    lockid = -1;
  40b8d8:	00bfffc4 	movi	r2,-1
  40b8dc:	d0a01315 	stw	r2,-32692(gp)
    OSSemPost( alt_envsem );
  40b8e0:	d0a78917 	ldw	r2,-25052(gp)
  40b8e4:	1009883a 	mov	r4,r2
  40b8e8:	04129180 	call	412918 <OSSemPost>
  40b8ec:	00000106 	br	40b8f4 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
  40b8f0:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  40b8f4:	e037883a 	mov	sp,fp
  40b8f8:	dfc00117 	ldw	ra,4(sp)
  40b8fc:	df000017 	ldw	fp,0(sp)
  40b900:	dec00204 	addi	sp,sp,8
  40b904:	f800283a 	ret

0040b908 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  40b908:	deffd904 	addi	sp,sp,-156
  40b90c:	dfc02615 	stw	ra,152(sp)
  40b910:	df002515 	stw	fp,148(sp)
  40b914:	df002504 	addi	fp,sp,148
  40b918:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  40b91c:	e03fdb15 	stw	zero,-148(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  40b920:	008010b4 	movhi	r2,66
  40b924:	10b58f44 	addi	r2,r2,-10691
  40b928:	10800003 	ldbu	r2,0(r2)
  40b92c:	10803fcc 	andi	r2,r2,255
  40b930:	10800058 	cmpnei	r2,r2,1
  40b934:	10004a1e 	bne	r2,zero,40ba60 <__malloc_lock+0x158>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  40b938:	e0bfe204 	addi	r2,fp,-120
  40b93c:	01003fc4 	movi	r4,255
  40b940:	100b883a 	mov	r5,r2
  40b944:	0414b4c0 	call	414b4c <OSTaskQuery>
  40b948:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  40b94c:	e0bffe83 	ldbu	r2,-6(fp)
  40b950:	10803fcc 	andi	r2,r2,255
  40b954:	1000421e 	bne	r2,zero,40ba60 <__malloc_lock+0x158>
    return;

  id = tcb.OSTCBPrio;
  40b958:	e0bfee83 	ldbu	r2,-70(fp)
  40b95c:	10803fcc 	andi	r2,r2,255
  40b960:	e0bfdc15 	stw	r2,-144(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  40b964:	d0e78b17 	ldw	r3,-25044(gp)
  40b968:	e0bffd04 	addi	r2,fp,-12
  40b96c:	1809883a 	mov	r4,r3
  40b970:	100b883a 	mov	r5,r2
  40b974:	0412aac0 	call	412aac <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40b978:	0005303a 	rdctl	r2,status
  40b97c:	e0bfdd15 	stw	r2,-140(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40b980:	e0ffdd17 	ldw	r3,-140(fp)
  40b984:	00bfff84 	movi	r2,-2
  40b988:	1884703a 	and	r2,r3,r2
  40b98c:	1001703a 	wrctl	status,r2
  
  return context;
  40b990:	e0bfdd17 	ldw	r2,-140(fp)
  
  OS_ENTER_CRITICAL();
  40b994:	e0bfdb15 	stw	r2,-148(fp)

  if( !semdata.OSCnt && id == lockid ) 
  40b998:	e0bffd0b 	ldhu	r2,-12(fp)
  40b99c:	10bfffcc 	andi	r2,r2,65535
  40b9a0:	1000161e 	bne	r2,zero,40b9fc <__malloc_lock+0xf4>
  40b9a4:	d0a01417 	ldw	r2,-32688(gp)
  40b9a8:	e0ffdc17 	ldw	r3,-144(fp)
  40b9ac:	1880131e 	bne	r3,r2,40b9fc <__malloc_lock+0xf4>
  {
    /* we do; just count the recursion */
    locks++;
  40b9b0:	d0a78a17 	ldw	r2,-25048(gp)
  40b9b4:	10800044 	addi	r2,r2,1
  40b9b8:	d0a78a15 	stw	r2,-25048(gp)
  40b9bc:	e0bfdb17 	ldw	r2,-148(fp)
  40b9c0:	e0bfde15 	stw	r2,-136(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40b9c4:	0005303a 	rdctl	r2,status
  40b9c8:	e0bfdf15 	stw	r2,-132(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40b9cc:	e0ffdf17 	ldw	r3,-132(fp)
  40b9d0:	00bfff84 	movi	r2,-2
  40b9d4:	1884703a 	and	r2,r3,r2
  40b9d8:	e0bfdf15 	stw	r2,-132(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40b9dc:	e0bfde17 	ldw	r2,-136(fp)
  40b9e0:	1080004c 	andi	r2,r2,1
  40b9e4:	e0ffdf17 	ldw	r3,-132(fp)
  40b9e8:	1884b03a 	or	r2,r3,r2
  40b9ec:	e0bfdf15 	stw	r2,-132(fp)
  
  NIOS2_WRITE_STATUS (status);
  40b9f0:	e0bfdf17 	ldw	r2,-132(fp)
  40b9f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
  40b9f8:	00001906 	br	40ba60 <__malloc_lock+0x158>
  40b9fc:	e0bfdb17 	ldw	r2,-148(fp)
  40ba00:	e0bfe015 	stw	r2,-128(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40ba04:	0005303a 	rdctl	r2,status
  40ba08:	e0bfe115 	stw	r2,-124(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40ba0c:	e0ffe117 	ldw	r3,-124(fp)
  40ba10:	00bfff84 	movi	r2,-2
  40ba14:	1884703a 	and	r2,r3,r2
  40ba18:	e0bfe115 	stw	r2,-124(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40ba1c:	e0bfe017 	ldw	r2,-128(fp)
  40ba20:	1080004c 	andi	r2,r2,1
  40ba24:	e0ffe117 	ldw	r3,-124(fp)
  40ba28:	1884b03a 	or	r2,r3,r2
  40ba2c:	e0bfe115 	stw	r2,-124(fp)
  
  NIOS2_WRITE_STATUS (status);
  40ba30:	e0bfe117 	ldw	r2,-124(fp)
  40ba34:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  40ba38:	d0e78b17 	ldw	r3,-25044(gp)
  40ba3c:	e0bffe84 	addi	r2,fp,-6
  40ba40:	1809883a 	mov	r4,r3
  40ba44:	000b883a 	mov	r5,zero
  40ba48:	100d883a 	mov	r6,r2
  40ba4c:	041245c0 	call	41245c <OSSemPend>
    locks  = 1;
  40ba50:	00800044 	movi	r2,1
  40ba54:	d0a78a15 	stw	r2,-25048(gp)
    lockid = id;
  40ba58:	e0bfdc17 	ldw	r2,-144(fp)
  40ba5c:	d0a01415 	stw	r2,-32688(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  40ba60:	e037883a 	mov	sp,fp
  40ba64:	dfc00117 	ldw	ra,4(sp)
  40ba68:	df000017 	ldw	fp,0(sp)
  40ba6c:	dec00204 	addi	sp,sp,8
  40ba70:	f800283a 	ret

0040ba74 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  40ba74:	defff504 	addi	sp,sp,-44
  40ba78:	dfc00a15 	stw	ra,40(sp)
  40ba7c:	df000915 	stw	fp,36(sp)
  40ba80:	df000904 	addi	fp,sp,36
  40ba84:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  40ba88:	e03ff715 	stw	zero,-36(fp)
#endif 

  if (OSRunning != OS_TRUE)
  40ba8c:	008010b4 	movhi	r2,66
  40ba90:	10b58f44 	addi	r2,r2,-10691
  40ba94:	10800003 	ldbu	r2,0(r2)
  40ba98:	10803fcc 	andi	r2,r2,255
  40ba9c:	10800060 	cmpeqi	r2,r2,1
  40baa0:	10004426 	beq	r2,zero,40bbb4 <__malloc_unlock+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40baa4:	0005303a 	rdctl	r2,status
  40baa8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40baac:	e0fff817 	ldw	r3,-32(fp)
  40bab0:	00bfff84 	movi	r2,-2
  40bab4:	1884703a 	and	r2,r3,r2
  40bab8:	1001703a 	wrctl	status,r2
  
  return context;
  40babc:	e0bff817 	ldw	r2,-32(fp)
      return;

  OS_ENTER_CRITICAL();
  40bac0:	e0bff715 	stw	r2,-36(fp)
  if (locks == 0)
  40bac4:	d0a78a17 	ldw	r2,-25048(gp)
  40bac8:	1000101e 	bne	r2,zero,40bb0c <__malloc_unlock+0x98>
  40bacc:	e0bff717 	ldw	r2,-36(fp)
  40bad0:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40bad4:	0005303a 	rdctl	r2,status
  40bad8:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40badc:	e0fffa17 	ldw	r3,-24(fp)
  40bae0:	00bfff84 	movi	r2,-2
  40bae4:	1884703a 	and	r2,r3,r2
  40bae8:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40baec:	e0bff917 	ldw	r2,-28(fp)
  40baf0:	1080004c 	andi	r2,r2,1
  40baf4:	e0fffa17 	ldw	r3,-24(fp)
  40baf8:	1884b03a 	or	r2,r3,r2
  40bafc:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  40bb00:	e0bffa17 	ldw	r2,-24(fp)
  40bb04:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  40bb08:	00002b06 	br	40bbb8 <__malloc_unlock+0x144>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  40bb0c:	d0a78a17 	ldw	r2,-25048(gp)
  40bb10:	10bfffc4 	addi	r2,r2,-1
  40bb14:	d0a78a15 	stw	r2,-25048(gp)
  40bb18:	d0a78a17 	ldw	r2,-25048(gp)
  40bb1c:	1000151e 	bne	r2,zero,40bb74 <__malloc_unlock+0x100>
  {
    lockid = -1;
  40bb20:	00bfffc4 	movi	r2,-1
  40bb24:	d0a01415 	stw	r2,-32688(gp)
  40bb28:	e0bff717 	ldw	r2,-36(fp)
  40bb2c:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40bb30:	0005303a 	rdctl	r2,status
  40bb34:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40bb38:	e0fffc17 	ldw	r3,-16(fp)
  40bb3c:	00bfff84 	movi	r2,-2
  40bb40:	1884703a 	and	r2,r3,r2
  40bb44:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40bb48:	e0bffb17 	ldw	r2,-20(fp)
  40bb4c:	1080004c 	andi	r2,r2,1
  40bb50:	e0fffc17 	ldw	r3,-16(fp)
  40bb54:	1884b03a 	or	r2,r3,r2
  40bb58:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  40bb5c:	e0bffc17 	ldw	r2,-16(fp)
  40bb60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  40bb64:	d0a78b17 	ldw	r2,-25044(gp)
  40bb68:	1009883a 	mov	r4,r2
  40bb6c:	04129180 	call	412918 <OSSemPost>
  40bb70:	00001106 	br	40bbb8 <__malloc_unlock+0x144>
  40bb74:	e0bff717 	ldw	r2,-36(fp)
  40bb78:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40bb7c:	0005303a 	rdctl	r2,status
  40bb80:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40bb84:	e0fffe17 	ldw	r3,-8(fp)
  40bb88:	00bfff84 	movi	r2,-2
  40bb8c:	1884703a 	and	r2,r3,r2
  40bb90:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40bb94:	e0bffd17 	ldw	r2,-12(fp)
  40bb98:	1080004c 	andi	r2,r2,1
  40bb9c:	e0fffe17 	ldw	r3,-8(fp)
  40bba0:	1884b03a 	or	r2,r3,r2
  40bba4:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  40bba8:	e0bffe17 	ldw	r2,-8(fp)
  40bbac:	1001703a 	wrctl	status,r2
  40bbb0:	00000106 	br	40bbb8 <__malloc_unlock+0x144>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
  40bbb4:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  40bbb8:	e037883a 	mov	sp,fp
  40bbbc:	dfc00117 	ldw	ra,4(sp)
  40bbc0:	df000017 	ldw	fp,0(sp)
  40bbc4:	dec00204 	addi	sp,sp,8
  40bbc8:	f800283a 	ret

0040bbcc <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  40bbcc:	defff604 	addi	sp,sp,-40
  40bbd0:	dfc00915 	stw	ra,36(sp)
  40bbd4:	df000815 	stw	fp,32(sp)
  40bbd8:	df000804 	addi	fp,sp,32
  40bbdc:	e13ffd15 	stw	r4,-12(fp)
  40bbe0:	e17ffe15 	stw	r5,-8(fp)
  40bbe4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  40bbe8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  40bbec:	e0bfff17 	ldw	r2,-4(fp)
  40bbf0:	1000021e 	bne	r2,zero,40bbfc <OSEventNameGet+0x30>
        return (0);
  40bbf4:	0005883a 	mov	r2,zero
  40bbf8:	00004206 	br	40bd04 <OSEventNameGet+0x138>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  40bbfc:	e0bffd17 	ldw	r2,-12(fp)
  40bc00:	1000051e 	bne	r2,zero,40bc18 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  40bc04:	e0bfff17 	ldw	r2,-4(fp)
  40bc08:	00c00104 	movi	r3,4
  40bc0c:	10c00005 	stb	r3,0(r2)
        return (0);
  40bc10:	0005883a 	mov	r2,zero
  40bc14:	00003b06 	br	40bd04 <OSEventNameGet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  40bc18:	e0bffe17 	ldw	r2,-8(fp)
  40bc1c:	1000051e 	bne	r2,zero,40bc34 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  40bc20:	e0bfff17 	ldw	r2,-4(fp)
  40bc24:	00c00304 	movi	r3,12
  40bc28:	10c00005 	stb	r3,0(r2)
        return (0);
  40bc2c:	0005883a 	mov	r2,zero
  40bc30:	00003406 	br	40bd04 <OSEventNameGet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  40bc34:	d0a79a03 	ldbu	r2,-24984(gp)
  40bc38:	10803fcc 	andi	r2,r2,255
  40bc3c:	10000526 	beq	r2,zero,40bc54 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
  40bc40:	e0bfff17 	ldw	r2,-4(fp)
  40bc44:	00c00444 	movi	r3,17
  40bc48:	10c00005 	stb	r3,0(r2)
        return (0);
  40bc4c:	0005883a 	mov	r2,zero
  40bc50:	00002c06 	br	40bd04 <OSEventNameGet+0x138>
    }
    switch (pevent->OSEventType) {
  40bc54:	e0bffd17 	ldw	r2,-12(fp)
  40bc58:	10800003 	ldbu	r2,0(r2)
  40bc5c:	10803fcc 	andi	r2,r2,255
  40bc60:	10bfffc4 	addi	r2,r2,-1
  40bc64:	10800128 	cmpgeui	r2,r2,4
  40bc68:	1000221e 	bne	r2,zero,40bcf4 <OSEventNameGet+0x128>
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  40bc6c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40bc70:	0005303a 	rdctl	r2,status
  40bc74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40bc78:	e0fffa17 	ldw	r3,-24(fp)
  40bc7c:	00bfff84 	movi	r2,-2
  40bc80:	1884703a 	and	r2,r3,r2
  40bc84:	1001703a 	wrctl	status,r2
  
  return context;
  40bc88:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  40bc8c:	e0bff815 	stw	r2,-32(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  40bc90:	e0bffd17 	ldw	r2,-12(fp)
  40bc94:	10800384 	addi	r2,r2,14
  40bc98:	e13ffe17 	ldw	r4,-8(fp)
  40bc9c:	100b883a 	mov	r5,r2
  40bca0:	040d9cc0 	call	40d9cc <OS_StrCopy>
  40bca4:	e0bff905 	stb	r2,-28(fp)
  40bca8:	e0bff817 	ldw	r2,-32(fp)
  40bcac:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40bcb0:	0005303a 	rdctl	r2,status
  40bcb4:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40bcb8:	e0fffc17 	ldw	r3,-16(fp)
  40bcbc:	00bfff84 	movi	r2,-2
  40bcc0:	1884703a 	and	r2,r3,r2
  40bcc4:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40bcc8:	e0bffb17 	ldw	r2,-20(fp)
  40bccc:	1080004c 	andi	r2,r2,1
  40bcd0:	e0fffc17 	ldw	r3,-16(fp)
  40bcd4:	1884b03a 	or	r2,r3,r2
  40bcd8:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  40bcdc:	e0bffc17 	ldw	r2,-16(fp)
  40bce0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  40bce4:	e0bfff17 	ldw	r2,-4(fp)
  40bce8:	10000005 	stb	zero,0(r2)
    return (len);
  40bcec:	e0bff903 	ldbu	r2,-28(fp)
  40bcf0:	00000406 	br	40bd04 <OSEventNameGet+0x138>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  40bcf4:	e0bfff17 	ldw	r2,-4(fp)
  40bcf8:	00c00044 	movi	r3,1
  40bcfc:	10c00005 	stb	r3,0(r2)
             return (0);
  40bd00:	0005883a 	mov	r2,zero
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  40bd04:	e037883a 	mov	sp,fp
  40bd08:	dfc00117 	ldw	ra,4(sp)
  40bd0c:	df000017 	ldw	fp,0(sp)
  40bd10:	dec00204 	addi	sp,sp,8
  40bd14:	f800283a 	ret

0040bd18 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  40bd18:	defff404 	addi	sp,sp,-48
  40bd1c:	dfc00b15 	stw	ra,44(sp)
  40bd20:	df000a15 	stw	fp,40(sp)
  40bd24:	df000a04 	addi	fp,sp,40
  40bd28:	e13ffd15 	stw	r4,-12(fp)
  40bd2c:	e17ffe15 	stw	r5,-8(fp)
  40bd30:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  40bd34:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  40bd38:	e0bfff17 	ldw	r2,-4(fp)
  40bd3c:	10005726 	beq	r2,zero,40be9c <OSEventNameSet+0x184>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  40bd40:	e0bffd17 	ldw	r2,-12(fp)
  40bd44:	1000041e 	bne	r2,zero,40bd58 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  40bd48:	e0bfff17 	ldw	r2,-4(fp)
  40bd4c:	00c00104 	movi	r3,4
  40bd50:	10c00005 	stb	r3,0(r2)
        return;
  40bd54:	00005206 	br	40bea0 <OSEventNameSet+0x188>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  40bd58:	e0bffe17 	ldw	r2,-8(fp)
  40bd5c:	1000041e 	bne	r2,zero,40bd70 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  40bd60:	e0bfff17 	ldw	r2,-4(fp)
  40bd64:	00c00304 	movi	r3,12
  40bd68:	10c00005 	stb	r3,0(r2)
        return;
  40bd6c:	00004c06 	br	40bea0 <OSEventNameSet+0x188>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  40bd70:	d0a79a03 	ldbu	r2,-24984(gp)
  40bd74:	10803fcc 	andi	r2,r2,255
  40bd78:	10000426 	beq	r2,zero,40bd8c <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
  40bd7c:	e0bfff17 	ldw	r2,-4(fp)
  40bd80:	00c00484 	movi	r3,18
  40bd84:	10c00005 	stb	r3,0(r2)
        return;
  40bd88:	00004506 	br	40bea0 <OSEventNameSet+0x188>
    }
    switch (pevent->OSEventType) {
  40bd8c:	e0bffd17 	ldw	r2,-12(fp)
  40bd90:	10800003 	ldbu	r2,0(r2)
  40bd94:	10803fcc 	andi	r2,r2,255
  40bd98:	10bfffc4 	addi	r2,r2,-1
  40bd9c:	10800128 	cmpgeui	r2,r2,4
  40bda0:	1000101e 	bne	r2,zero,40bde4 <OSEventNameSet+0xcc>
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
  40bda4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40bda8:	0005303a 	rdctl	r2,status
  40bdac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40bdb0:	e0fff817 	ldw	r3,-32(fp)
  40bdb4:	00bfff84 	movi	r2,-2
  40bdb8:	1884703a 	and	r2,r3,r2
  40bdbc:	1001703a 	wrctl	status,r2
  
  return context;
  40bdc0:	e0bff817 	ldw	r2,-32(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  40bdc4:	e0bff615 	stw	r2,-40(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  40bdc8:	e13ffe17 	ldw	r4,-8(fp)
  40bdcc:	040da480 	call	40da48 <OS_StrLen>
  40bdd0:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  40bdd4:	e0bff703 	ldbu	r2,-36(fp)
  40bdd8:	10800830 	cmpltui	r2,r2,32
  40bddc:	1000181e 	bne	r2,zero,40be40 <OSEventNameSet+0x128>
  40bde0:	00000406 	br	40bdf4 <OSEventNameSet+0xdc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  40bde4:	e0bfff17 	ldw	r2,-4(fp)
  40bde8:	00c00044 	movi	r3,1
  40bdec:	10c00005 	stb	r3,0(r2)
             return;
  40bdf0:	00002b06 	br	40bea0 <OSEventNameSet+0x188>
  40bdf4:	e0bff617 	ldw	r2,-40(fp)
  40bdf8:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40bdfc:	0005303a 	rdctl	r2,status
  40be00:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40be04:	e0fffa17 	ldw	r3,-24(fp)
  40be08:	00bfff84 	movi	r2,-2
  40be0c:	1884703a 	and	r2,r3,r2
  40be10:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40be14:	e0bff917 	ldw	r2,-28(fp)
  40be18:	1080004c 	andi	r2,r2,1
  40be1c:	e0fffa17 	ldw	r3,-24(fp)
  40be20:	1884b03a 	or	r2,r3,r2
  40be24:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  40be28:	e0bffa17 	ldw	r2,-24(fp)
  40be2c:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  40be30:	e0bfff17 	ldw	r2,-4(fp)
  40be34:	00c002c4 	movi	r3,11
  40be38:	10c00005 	stb	r3,0(r2)
        return;
  40be3c:	00001806 	br	40bea0 <OSEventNameSet+0x188>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  40be40:	e0bffd17 	ldw	r2,-12(fp)
  40be44:	10800384 	addi	r2,r2,14
  40be48:	1009883a 	mov	r4,r2
  40be4c:	e17ffe17 	ldw	r5,-8(fp)
  40be50:	040d9cc0 	call	40d9cc <OS_StrCopy>
  40be54:	e0bff617 	ldw	r2,-40(fp)
  40be58:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40be5c:	0005303a 	rdctl	r2,status
  40be60:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40be64:	e0fffc17 	ldw	r3,-16(fp)
  40be68:	00bfff84 	movi	r2,-2
  40be6c:	1884703a 	and	r2,r3,r2
  40be70:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40be74:	e0bffb17 	ldw	r2,-20(fp)
  40be78:	1080004c 	andi	r2,r2,1
  40be7c:	e0fffc17 	ldw	r3,-16(fp)
  40be80:	1884b03a 	or	r2,r3,r2
  40be84:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  40be88:	e0bffc17 	ldw	r2,-16(fp)
  40be8c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  40be90:	e0bfff17 	ldw	r2,-4(fp)
  40be94:	10000005 	stb	zero,0(r2)
  40be98:	00000106 	br	40bea0 <OSEventNameSet+0x188>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  40be9c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  40bea0:	e037883a 	mov	sp,fp
  40bea4:	dfc00117 	ldw	ra,4(sp)
  40bea8:	df000017 	ldw	fp,0(sp)
  40beac:	dec00204 	addi	sp,sp,8
  40beb0:	f800283a 	ret

0040beb4 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  40beb4:	deffe804 	addi	sp,sp,-96
  40beb8:	dfc01715 	stw	ra,92(sp)
  40bebc:	df001615 	stw	fp,88(sp)
  40bec0:	df001604 	addi	fp,sp,88
  40bec4:	e13ffc15 	stw	r4,-16(fp)
  40bec8:	e17ffd15 	stw	r5,-12(fp)
  40becc:	e1bffe15 	stw	r6,-8(fp)
  40bed0:	3805883a 	mov	r2,r7
  40bed4:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  40bed8:	e03fee15 	stw	zero,-72(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  40bedc:	e0800217 	ldw	r2,8(fp)
  40bee0:	1000021e 	bne	r2,zero,40beec <OSEventPendMulti+0x38>
        return (0);
  40bee4:	0005883a 	mov	r2,zero
  40bee8:	0001b306 	br	40c5b8 <OSEventPendMulti+0x704>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  40beec:	e0bffc17 	ldw	r2,-16(fp)
  40bef0:	1000051e 	bne	r2,zero,40bf08 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
  40bef4:	e0800217 	ldw	r2,8(fp)
  40bef8:	00c00104 	movi	r3,4
  40befc:	10c00005 	stb	r3,0(r2)
        return (0);
  40bf00:	0005883a 	mov	r2,zero
  40bf04:	0001ac06 	br	40c5b8 <OSEventPendMulti+0x704>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  40bf08:	e0bffd17 	ldw	r2,-12(fp)
  40bf0c:	1000051e 	bne	r2,zero,40bf24 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
  40bf10:	e0800217 	ldw	r2,8(fp)
  40bf14:	00c00104 	movi	r3,4
  40bf18:	10c00005 	stb	r3,0(r2)
        return (0);
  40bf1c:	0005883a 	mov	r2,zero
  40bf20:	0001a506 	br	40c5b8 <OSEventPendMulti+0x704>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  40bf24:	e0bffe17 	ldw	r2,-8(fp)
  40bf28:	1000051e 	bne	r2,zero,40bf40 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
  40bf2c:	e0800217 	ldw	r2,8(fp)
  40bf30:	00c00104 	movi	r3,4
  40bf34:	10c00005 	stb	r3,0(r2)
        return (0);
  40bf38:	0005883a 	mov	r2,zero
  40bf3c:	00019e06 	br	40c5b8 <OSEventPendMulti+0x704>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  40bf40:	e0bffd17 	ldw	r2,-12(fp)
  40bf44:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  40bf48:	e0bffc17 	ldw	r2,-16(fp)
  40bf4c:	e0bfea15 	stw	r2,-88(fp)
    pevent      = *pevents;
  40bf50:	e0bfea17 	ldw	r2,-88(fp)
  40bf54:	10800017 	ldw	r2,0(r2)
  40bf58:	e0bfeb15 	stw	r2,-84(fp)
    while  (pevent != (OS_EVENT *)0) {
  40bf5c:	00001906 	br	40bfc4 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  40bf60:	e0bfeb17 	ldw	r2,-84(fp)
  40bf64:	10800003 	ldbu	r2,0(r2)
  40bf68:	10803fcc 	andi	r2,r2,255
  40bf6c:	10c000a0 	cmpeqi	r3,r2,2
  40bf70:	1800091e 	bne	r3,zero,40bf98 <OSEventPendMulti+0xe4>
  40bf74:	10c000e0 	cmpeqi	r3,r2,3
  40bf78:	1800091e 	bne	r3,zero,40bfa0 <OSEventPendMulti+0xec>
  40bf7c:	10800060 	cmpeqi	r2,r2,1
  40bf80:	1000091e 	bne	r2,zero,40bfa8 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  40bf84:	e0800217 	ldw	r2,8(fp)
  40bf88:	00c00044 	movi	r3,1
  40bf8c:	10c00005 	stb	r3,0(r2)
                 return (0);
  40bf90:	0005883a 	mov	r2,zero
  40bf94:	00018806 	br	40c5b8 <OSEventPendMulti+0x704>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
  40bf98:	0001883a 	nop
  40bf9c:	00000306 	br	40bfac <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
  40bfa0:	0001883a 	nop
  40bfa4:	00000106 	br	40bfac <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
  40bfa8:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
  40bfac:	e0bfea17 	ldw	r2,-88(fp)
  40bfb0:	10800104 	addi	r2,r2,4
  40bfb4:	e0bfea15 	stw	r2,-88(fp)
        pevent = *pevents;
  40bfb8:	e0bfea17 	ldw	r2,-88(fp)
  40bfbc:	10800017 	ldw	r2,0(r2)
  40bfc0:	e0bfeb15 	stw	r2,-84(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  40bfc4:	e0bfeb17 	ldw	r2,-84(fp)
  40bfc8:	103fe51e 	bne	r2,zero,40bf60 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  40bfcc:	d0a79a03 	ldbu	r2,-24984(gp)
  40bfd0:	10803fcc 	andi	r2,r2,255
  40bfd4:	10000526 	beq	r2,zero,40bfec <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  40bfd8:	e0800217 	ldw	r2,8(fp)
  40bfdc:	00c00084 	movi	r3,2
  40bfe0:	10c00005 	stb	r3,0(r2)
        return (0);
  40bfe4:	0005883a 	mov	r2,zero
  40bfe8:	00017306 	br	40c5b8 <OSEventPendMulti+0x704>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  40bfec:	d0a78c03 	ldbu	r2,-25040(gp)
  40bff0:	10803fcc 	andi	r2,r2,255
  40bff4:	10000526 	beq	r2,zero,40c00c <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  40bff8:	e0800217 	ldw	r2,8(fp)
  40bffc:	00c00344 	movi	r3,13
  40c000:	10c00005 	stb	r3,0(r2)
        return (0);
  40c004:	0005883a 	mov	r2,zero
  40c008:	00016b06 	br	40c5b8 <OSEventPendMulti+0x704>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40c00c:	0005303a 	rdctl	r2,status
  40c010:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40c014:	e0fff017 	ldw	r3,-64(fp)
  40c018:	00bfff84 	movi	r2,-2
  40c01c:	1884703a 	and	r2,r3,r2
  40c020:	1001703a 	wrctl	status,r2
  
  return context;
  40c024:	e0bff017 	ldw	r2,-64(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  40c028:	e0bfee15 	stw	r2,-72(fp)
    events_rdy     =  OS_FALSE;
  40c02c:	e03fec05 	stb	zero,-80(fp)
    events_rdy_nbr =  0;
  40c030:	e03fec8d 	sth	zero,-78(fp)
    events_stat    =  OS_STAT_RDY;
  40c034:	e03fed05 	stb	zero,-76(fp)
    pevents        =  pevents_pend;
  40c038:	e0bffc17 	ldw	r2,-16(fp)
  40c03c:	e0bfea15 	stw	r2,-88(fp)
    pevent         = *pevents;
  40c040:	e0bfea17 	ldw	r2,-88(fp)
  40c044:	10800017 	ldw	r2,0(r2)
  40c048:	e0bfeb15 	stw	r2,-84(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  40c04c:	00009206 	br	40c298 <OSEventPendMulti+0x3e4>
        switch (pevent->OSEventType) {
  40c050:	e0bfeb17 	ldw	r2,-84(fp)
  40c054:	10800003 	ldbu	r2,0(r2)
  40c058:	10803fcc 	andi	r2,r2,255
  40c05c:	10c000a0 	cmpeqi	r3,r2,2
  40c060:	1800401e 	bne	r3,zero,40c164 <OSEventPendMulti+0x2b0>
  40c064:	10c000e0 	cmpeqi	r3,r2,3
  40c068:	1800031e 	bne	r3,zero,40c078 <OSEventPendMulti+0x1c4>
  40c06c:	10800060 	cmpeqi	r2,r2,1
  40c070:	1000201e 	bne	r2,zero,40c0f4 <OSEventPendMulti+0x240>
  40c074:	00006c06 	br	40c228 <OSEventPendMulti+0x374>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  40c078:	e0bfeb17 	ldw	r2,-84(fp)
  40c07c:	1080020b 	ldhu	r2,8(r2)
  40c080:	10bfffcc 	andi	r2,r2,65535
  40c084:	10001726 	beq	r2,zero,40c0e4 <OSEventPendMulti+0x230>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  40c088:	e0bfeb17 	ldw	r2,-84(fp)
  40c08c:	1080020b 	ldhu	r2,8(r2)
  40c090:	10bfffc4 	addi	r2,r2,-1
  40c094:	1007883a 	mov	r3,r2
  40c098:	e0bfeb17 	ldw	r2,-84(fp)
  40c09c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  40c0a0:	e0bffd17 	ldw	r2,-12(fp)
  40c0a4:	e0ffeb17 	ldw	r3,-84(fp)
  40c0a8:	10c00015 	stw	r3,0(r2)
  40c0ac:	e0bffd17 	ldw	r2,-12(fp)
  40c0b0:	10800104 	addi	r2,r2,4
  40c0b4:	e0bffd15 	stw	r2,-12(fp)
                      events_rdy   =  OS_TRUE;
  40c0b8:	00800044 	movi	r2,1
  40c0bc:	e0bfec05 	stb	r2,-80(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  40c0c0:	e0bffe17 	ldw	r2,-8(fp)
  40c0c4:	10000015 	stw	zero,0(r2)
  40c0c8:	e0bffe17 	ldw	r2,-8(fp)
  40c0cc:	10800104 	addi	r2,r2,4
  40c0d0:	e0bffe15 	stw	r2,-8(fp)
                      events_rdy_nbr++;
  40c0d4:	e0bfec8b 	ldhu	r2,-78(fp)
  40c0d8:	10800044 	addi	r2,r2,1
  40c0dc:	e0bfec8d 	sth	r2,-78(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
  40c0e0:	00006706 	br	40c280 <OSEventPendMulti+0x3cc>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  40c0e4:	e0bfed03 	ldbu	r2,-76(fp)
  40c0e8:	10800054 	ori	r2,r2,1
  40c0ec:	e0bfed05 	stb	r2,-76(fp)
                 }
                 break;
  40c0f0:	00006306 	br	40c280 <OSEventPendMulti+0x3cc>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  40c0f4:	e0bfeb17 	ldw	r2,-84(fp)
  40c0f8:	10800117 	ldw	r2,4(r2)
  40c0fc:	10001526 	beq	r2,zero,40c154 <OSEventPendMulti+0x2a0>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  40c100:	e0bfeb17 	ldw	r2,-84(fp)
  40c104:	10c00117 	ldw	r3,4(r2)
  40c108:	e0bffe17 	ldw	r2,-8(fp)
  40c10c:	10c00015 	stw	r3,0(r2)
  40c110:	e0bffe17 	ldw	r2,-8(fp)
  40c114:	10800104 	addi	r2,r2,4
  40c118:	e0bffe15 	stw	r2,-8(fp)
                     pevent->OSEventPtr  = (void *)0;
  40c11c:	e0bfeb17 	ldw	r2,-84(fp)
  40c120:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  40c124:	e0bffd17 	ldw	r2,-12(fp)
  40c128:	e0ffeb17 	ldw	r3,-84(fp)
  40c12c:	10c00015 	stw	r3,0(r2)
  40c130:	e0bffd17 	ldw	r2,-12(fp)
  40c134:	10800104 	addi	r2,r2,4
  40c138:	e0bffd15 	stw	r2,-12(fp)
                      events_rdy         =  OS_TRUE;
  40c13c:	00800044 	movi	r2,1
  40c140:	e0bfec05 	stb	r2,-80(fp)
                      events_rdy_nbr++;
  40c144:	e0bfec8b 	ldhu	r2,-78(fp)
  40c148:	10800044 	addi	r2,r2,1
  40c14c:	e0bfec8d 	sth	r2,-78(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
  40c150:	00004b06 	br	40c280 <OSEventPendMulti+0x3cc>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  40c154:	e0bfed03 	ldbu	r2,-76(fp)
  40c158:	10800094 	ori	r2,r2,2
  40c15c:	e0bfed05 	stb	r2,-76(fp)
                 }
                 break;
  40c160:	00004706 	br	40c280 <OSEventPendMulti+0x3cc>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  40c164:	e0bfeb17 	ldw	r2,-84(fp)
  40c168:	10800117 	ldw	r2,4(r2)
  40c16c:	e0bfef15 	stw	r2,-68(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  40c170:	e0bfef17 	ldw	r2,-68(fp)
  40c174:	1080058b 	ldhu	r2,22(r2)
  40c178:	10bfffcc 	andi	r2,r2,65535
  40c17c:	10002626 	beq	r2,zero,40c218 <OSEventPendMulti+0x364>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  40c180:	e0bfef17 	ldw	r2,-68(fp)
  40c184:	10800417 	ldw	r2,16(r2)
  40c188:	11000017 	ldw	r4,0(r2)
  40c18c:	e0fffe17 	ldw	r3,-8(fp)
  40c190:	19000015 	stw	r4,0(r3)
  40c194:	e0fffe17 	ldw	r3,-8(fp)
  40c198:	18c00104 	addi	r3,r3,4
  40c19c:	e0fffe15 	stw	r3,-8(fp)
  40c1a0:	10c00104 	addi	r3,r2,4
  40c1a4:	e0bfef17 	ldw	r2,-68(fp)
  40c1a8:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  40c1ac:	e0bfef17 	ldw	r2,-68(fp)
  40c1b0:	10c00417 	ldw	r3,16(r2)
  40c1b4:	e0bfef17 	ldw	r2,-68(fp)
  40c1b8:	10800217 	ldw	r2,8(r2)
  40c1bc:	1880041e 	bne	r3,r2,40c1d0 <OSEventPendMulti+0x31c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  40c1c0:	e0bfef17 	ldw	r2,-68(fp)
  40c1c4:	10c00117 	ldw	r3,4(r2)
  40c1c8:	e0bfef17 	ldw	r2,-68(fp)
  40c1cc:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  40c1d0:	e0bfef17 	ldw	r2,-68(fp)
  40c1d4:	1080058b 	ldhu	r2,22(r2)
  40c1d8:	10bfffc4 	addi	r2,r2,-1
  40c1dc:	1007883a 	mov	r3,r2
  40c1e0:	e0bfef17 	ldw	r2,-68(fp)
  40c1e4:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  40c1e8:	e0bffd17 	ldw	r2,-12(fp)
  40c1ec:	e0ffeb17 	ldw	r3,-84(fp)
  40c1f0:	10c00015 	stw	r3,0(r2)
  40c1f4:	e0bffd17 	ldw	r2,-12(fp)
  40c1f8:	10800104 	addi	r2,r2,4
  40c1fc:	e0bffd15 	stw	r2,-12(fp)
                      events_rdy   = OS_TRUE;
  40c200:	00800044 	movi	r2,1
  40c204:	e0bfec05 	stb	r2,-80(fp)
                      events_rdy_nbr++;
  40c208:	e0bfec8b 	ldhu	r2,-78(fp)
  40c20c:	10800044 	addi	r2,r2,1
  40c210:	e0bfec8d 	sth	r2,-78(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
  40c214:	00001a06 	br	40c280 <OSEventPendMulti+0x3cc>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  40c218:	e0bfed03 	ldbu	r2,-76(fp)
  40c21c:	10800114 	ori	r2,r2,4
  40c220:	e0bfed05 	stb	r2,-76(fp)
                 }
                 break;
  40c224:	00001606 	br	40c280 <OSEventPendMulti+0x3cc>
  40c228:	e0bfee17 	ldw	r2,-72(fp)
  40c22c:	e0bff115 	stw	r2,-60(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40c230:	0005303a 	rdctl	r2,status
  40c234:	e0bff215 	stw	r2,-56(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40c238:	e0fff217 	ldw	r3,-56(fp)
  40c23c:	00bfff84 	movi	r2,-2
  40c240:	1884703a 	and	r2,r3,r2
  40c244:	e0bff215 	stw	r2,-56(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40c248:	e0bff117 	ldw	r2,-60(fp)
  40c24c:	1080004c 	andi	r2,r2,1
  40c250:	e0fff217 	ldw	r3,-56(fp)
  40c254:	1884b03a 	or	r2,r3,r2
  40c258:	e0bff215 	stw	r2,-56(fp)
  
  NIOS2_WRITE_STATUS (status);
  40c25c:	e0bff217 	ldw	r2,-56(fp)
  40c260:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  40c264:	e0bffd17 	ldw	r2,-12(fp)
  40c268:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  40c26c:	e0800217 	ldw	r2,8(fp)
  40c270:	00c00044 	movi	r3,1
  40c274:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
  40c278:	e0bfec8b 	ldhu	r2,-78(fp)
  40c27c:	0000ce06 	br	40c5b8 <OSEventPendMulti+0x704>
        }
        pevents++;
  40c280:	e0bfea17 	ldw	r2,-88(fp)
  40c284:	10800104 	addi	r2,r2,4
  40c288:	e0bfea15 	stw	r2,-88(fp)
        pevent = *pevents;
  40c28c:	e0bfea17 	ldw	r2,-88(fp)
  40c290:	10800017 	ldw	r2,0(r2)
  40c294:	e0bfeb15 	stw	r2,-84(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  40c298:	e0bfeb17 	ldw	r2,-84(fp)
  40c29c:	103f6c1e 	bne	r2,zero,40c050 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  40c2a0:	e0bfec03 	ldbu	r2,-80(fp)
  40c2a4:	10800058 	cmpnei	r2,r2,1
  40c2a8:	1000151e 	bne	r2,zero,40c300 <OSEventPendMulti+0x44c>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  40c2ac:	e0bffd17 	ldw	r2,-12(fp)
  40c2b0:	10000015 	stw	zero,0(r2)
  40c2b4:	e0bfee17 	ldw	r2,-72(fp)
  40c2b8:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40c2bc:	0005303a 	rdctl	r2,status
  40c2c0:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40c2c4:	e0fff417 	ldw	r3,-48(fp)
  40c2c8:	00bfff84 	movi	r2,-2
  40c2cc:	1884703a 	and	r2,r3,r2
  40c2d0:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40c2d4:	e0bff317 	ldw	r2,-52(fp)
  40c2d8:	1080004c 	andi	r2,r2,1
  40c2dc:	e0fff417 	ldw	r3,-48(fp)
  40c2e0:	1884b03a 	or	r2,r3,r2
  40c2e4:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
  40c2e8:	e0bff417 	ldw	r2,-48(fp)
  40c2ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  40c2f0:	e0800217 	ldw	r2,8(fp)
  40c2f4:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  40c2f8:	e0bfec8b 	ldhu	r2,-78(fp)
  40c2fc:	0000ae06 	br	40c5b8 <OSEventPendMulti+0x704>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  40c300:	d0a79b17 	ldw	r2,-24980(gp)
  40c304:	d0e79b17 	ldw	r3,-24980(gp)
  40c308:	19000c03 	ldbu	r4,48(r3)
  40c30c:	e0ffed03 	ldbu	r3,-76(fp)
  40c310:	20c6b03a 	or	r3,r4,r3
  40c314:	1809883a 	mov	r4,r3
  40c318:	00ffe004 	movi	r3,-128
  40c31c:	20c6b03a 	or	r3,r4,r3
  40c320:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  40c324:	d0a79b17 	ldw	r2,-24980(gp)
  40c328:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  40c32c:	d0a79b17 	ldw	r2,-24980(gp)
  40c330:	e0ffff0b 	ldhu	r3,-4(fp)
  40c334:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  40c338:	e13ffc17 	ldw	r4,-16(fp)
  40c33c:	040d0e80 	call	40d0e8 <OS_EventTaskWaitMulti>
  40c340:	e0bfee17 	ldw	r2,-72(fp)
  40c344:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40c348:	0005303a 	rdctl	r2,status
  40c34c:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40c350:	e0fff617 	ldw	r3,-40(fp)
  40c354:	00bfff84 	movi	r2,-2
  40c358:	1884703a 	and	r2,r3,r2
  40c35c:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40c360:	e0bff517 	ldw	r2,-44(fp)
  40c364:	1080004c 	andi	r2,r2,1
  40c368:	e0fff617 	ldw	r3,-40(fp)
  40c36c:	1884b03a 	or	r2,r3,r2
  40c370:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  40c374:	e0bff617 	ldw	r2,-40(fp)
  40c378:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  40c37c:	040d8640 	call	40d864 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40c380:	0005303a 	rdctl	r2,status
  40c384:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40c388:	e0fff717 	ldw	r3,-36(fp)
  40c38c:	00bfff84 	movi	r2,-2
  40c390:	1884703a 	and	r2,r3,r2
  40c394:	1001703a 	wrctl	status,r2
  
  return context;
  40c398:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  40c39c:	e0bfee15 	stw	r2,-72(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  40c3a0:	d0a79b17 	ldw	r2,-24980(gp)
  40c3a4:	10800c43 	ldbu	r2,49(r2)
  40c3a8:	10803fcc 	andi	r2,r2,255
  40c3ac:	10000226 	beq	r2,zero,40c3b8 <OSEventPendMulti+0x504>
  40c3b0:	108000a0 	cmpeqi	r2,r2,2
  40c3b4:	10001926 	beq	r2,zero,40c41c <OSEventPendMulti+0x568>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  40c3b8:	d0a79b17 	ldw	r2,-24980(gp)
  40c3bc:	10800717 	ldw	r2,28(r2)
  40c3c0:	e0bfeb15 	stw	r2,-84(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  40c3c4:	e0bfeb17 	ldw	r2,-84(fp)
  40c3c8:	10000c26 	beq	r2,zero,40c3fc <OSEventPendMulti+0x548>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  40c3cc:	e0bffd17 	ldw	r2,-12(fp)
  40c3d0:	e0ffeb17 	ldw	r3,-84(fp)
  40c3d4:	10c00015 	stw	r3,0(r2)
  40c3d8:	e0bffd17 	ldw	r2,-12(fp)
  40c3dc:	10800104 	addi	r2,r2,4
  40c3e0:	e0bffd15 	stw	r2,-12(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  40c3e4:	e0bffd17 	ldw	r2,-12(fp)
  40c3e8:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  40c3ec:	e0bfec8b 	ldhu	r2,-78(fp)
  40c3f0:	10800044 	addi	r2,r2,1
  40c3f4:	e0bfec8d 	sth	r2,-78(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
  40c3f8:	00000d06 	br	40c430 <OSEventPendMulti+0x57c>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  40c3fc:	d0a79b17 	ldw	r2,-24980(gp)
  40c400:	00c00044 	movi	r3,1
  40c404:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  40c408:	d0a79b17 	ldw	r2,-24980(gp)
  40c40c:	1009883a 	mov	r4,r2
  40c410:	e17ffc17 	ldw	r5,-16(fp)
  40c414:	040d2e00 	call	40d2e0 <OS_EventTaskRemoveMulti>
             }
			 break;
  40c418:	00000506 	br	40c430 <OSEventPendMulti+0x57c>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  40c41c:	d0a79b17 	ldw	r2,-24980(gp)
  40c420:	1009883a 	mov	r4,r2
  40c424:	e17ffc17 	ldw	r5,-16(fp)
  40c428:	040d2e00 	call	40d2e0 <OS_EventTaskRemoveMulti>
             break;
  40c42c:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
  40c430:	d0a79b17 	ldw	r2,-24980(gp)
  40c434:	10800c43 	ldbu	r2,49(r2)
  40c438:	10803fcc 	andi	r2,r2,255
  40c43c:	10000326 	beq	r2,zero,40c44c <OSEventPendMulti+0x598>
  40c440:	108000a0 	cmpeqi	r2,r2,2
  40c444:	1000301e 	bne	r2,zero,40c508 <OSEventPendMulti+0x654>
  40c448:	00003806 	br	40c52c <OSEventPendMulti+0x678>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  40c44c:	e0bfeb17 	ldw	r2,-84(fp)
  40c450:	10800003 	ldbu	r2,0(r2)
  40c454:	10803fcc 	andi	r2,r2,255
  40c458:	0080120e 	bge	zero,r2,40c4a4 <OSEventPendMulti+0x5f0>
  40c45c:	10c000d0 	cmplti	r3,r2,3
  40c460:	1800081e 	bne	r3,zero,40c484 <OSEventPendMulti+0x5d0>
  40c464:	108000e0 	cmpeqi	r2,r2,3
  40c468:	10000e26 	beq	r2,zero,40c4a4 <OSEventPendMulti+0x5f0>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  40c46c:	e0bffe17 	ldw	r2,-8(fp)
  40c470:	10000015 	stw	zero,0(r2)
  40c474:	e0bffe17 	ldw	r2,-8(fp)
  40c478:	10800104 	addi	r2,r2,4
  40c47c:	e0bffe15 	stw	r2,-8(fp)
                      break;
  40c480:	00001e06 	br	40c4fc <OSEventPendMulti+0x648>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  40c484:	d0a79b17 	ldw	r2,-24980(gp)
  40c488:	10c00917 	ldw	r3,36(r2)
  40c48c:	e0bffe17 	ldw	r2,-8(fp)
  40c490:	10c00015 	stw	r3,0(r2)
  40c494:	e0bffe17 	ldw	r2,-8(fp)
  40c498:	10800104 	addi	r2,r2,4
  40c49c:	e0bffe15 	stw	r2,-8(fp)
                      break;
  40c4a0:	00001606 	br	40c4fc <OSEventPendMulti+0x648>
  40c4a4:	e0bfee17 	ldw	r2,-72(fp)
  40c4a8:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40c4ac:	0005303a 	rdctl	r2,status
  40c4b0:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40c4b4:	e0fff917 	ldw	r3,-28(fp)
  40c4b8:	00bfff84 	movi	r2,-2
  40c4bc:	1884703a 	and	r2,r3,r2
  40c4c0:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40c4c4:	e0bff817 	ldw	r2,-32(fp)
  40c4c8:	1080004c 	andi	r2,r2,1
  40c4cc:	e0fff917 	ldw	r3,-28(fp)
  40c4d0:	1884b03a 	or	r2,r3,r2
  40c4d4:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  40c4d8:	e0bff917 	ldw	r2,-28(fp)
  40c4dc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  40c4e0:	e0bffd17 	ldw	r2,-12(fp)
  40c4e4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  40c4e8:	e0800217 	ldw	r2,8(fp)
  40c4ec:	00c00044 	movi	r3,1
  40c4f0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
  40c4f4:	e0bfec8b 	ldhu	r2,-78(fp)
  40c4f8:	00002f06 	br	40c5b8 <OSEventPendMulti+0x704>
             }
            *perr = OS_ERR_NONE;
  40c4fc:	e0800217 	ldw	r2,8(fp)
  40c500:	10000005 	stb	zero,0(r2)
             break;
  40c504:	00001206 	br	40c550 <OSEventPendMulti+0x69c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  40c508:	e0bffe17 	ldw	r2,-8(fp)
  40c50c:	10000015 	stw	zero,0(r2)
  40c510:	e0bffe17 	ldw	r2,-8(fp)
  40c514:	10800104 	addi	r2,r2,4
  40c518:	e0bffe15 	stw	r2,-8(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  40c51c:	e0800217 	ldw	r2,8(fp)
  40c520:	00c00384 	movi	r3,14
  40c524:	10c00005 	stb	r3,0(r2)
             break;
  40c528:	00000906 	br	40c550 <OSEventPendMulti+0x69c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  40c52c:	e0bffe17 	ldw	r2,-8(fp)
  40c530:	10000015 	stw	zero,0(r2)
  40c534:	e0bffe17 	ldw	r2,-8(fp)
  40c538:	10800104 	addi	r2,r2,4
  40c53c:	e0bffe15 	stw	r2,-8(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  40c540:	e0800217 	ldw	r2,8(fp)
  40c544:	00c00284 	movi	r3,10
  40c548:	10c00005 	stb	r3,0(r2)
             break;
  40c54c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  40c550:	d0a79b17 	ldw	r2,-24980(gp)
  40c554:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  40c558:	d0a79b17 	ldw	r2,-24980(gp)
  40c55c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  40c560:	d0a79b17 	ldw	r2,-24980(gp)
  40c564:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  40c568:	d0a79b17 	ldw	r2,-24980(gp)
  40c56c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  40c570:	d0a79b17 	ldw	r2,-24980(gp)
  40c574:	10000915 	stw	zero,36(r2)
  40c578:	e0bfee17 	ldw	r2,-72(fp)
  40c57c:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40c580:	0005303a 	rdctl	r2,status
  40c584:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40c588:	e0fffb17 	ldw	r3,-20(fp)
  40c58c:	00bfff84 	movi	r2,-2
  40c590:	1884703a 	and	r2,r3,r2
  40c594:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40c598:	e0bffa17 	ldw	r2,-24(fp)
  40c59c:	1080004c 	andi	r2,r2,1
  40c5a0:	e0fffb17 	ldw	r3,-20(fp)
  40c5a4:	1884b03a 	or	r2,r3,r2
  40c5a8:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  40c5ac:	e0bffb17 	ldw	r2,-20(fp)
  40c5b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  40c5b4:	e0bfec8b 	ldhu	r2,-78(fp)
}
  40c5b8:	e037883a 	mov	sp,fp
  40c5bc:	dfc00117 	ldw	ra,4(sp)
  40c5c0:	df000017 	ldw	fp,0(sp)
  40c5c4:	dec00204 	addi	sp,sp,8
  40c5c8:	f800283a 	ret

0040c5cc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  40c5cc:	defffe04 	addi	sp,sp,-8
  40c5d0:	dfc00115 	stw	ra,4(sp)
  40c5d4:	df000015 	stw	fp,0(sp)
  40c5d8:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  40c5dc:	0418f6c0 	call	418f6c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  40c5e0:	040d51c0 	call	40d51c <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  40c5e4:	040d5600 	call	40d560 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  40c5e8:	040d6c40 	call	40d6c4 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  40c5ec:	040d4400 	call	40d440 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  40c5f0:	040fd440 	call	40fd44 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  40c5f4:	04108180 	call	410818 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  40c5f8:	0411e880 	call	411e88 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  40c5fc:	040d5cc0 	call	40d5cc <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  40c600:	040d6480 	call	40d648 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  40c604:	0418f880 	call	418f88 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  40c608:	040e03c0 	call	40e03c <OSDebugInit>
#endif
}
  40c60c:	e037883a 	mov	sp,fp
  40c610:	dfc00117 	ldw	ra,4(sp)
  40c614:	df000017 	ldw	fp,0(sp)
  40c618:	dec00204 	addi	sp,sp,8
  40c61c:	f800283a 	ret

0040c620 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  40c620:	defffb04 	addi	sp,sp,-20
  40c624:	df000415 	stw	fp,16(sp)
  40c628:	df000404 	addi	fp,sp,16
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  40c62c:	e03ffc15 	stw	zero,-16(fp)
#endif

    if (OSRunning == OS_TRUE) {
  40c630:	d0a78c43 	ldbu	r2,-25039(gp)
  40c634:	10803fcc 	andi	r2,r2,255
  40c638:	10800058 	cmpnei	r2,r2,1
  40c63c:	10001e1e 	bne	r2,zero,40c6b8 <OSIntEnter+0x98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40c640:	0005303a 	rdctl	r2,status
  40c644:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40c648:	e0fffd17 	ldw	r3,-12(fp)
  40c64c:	00bfff84 	movi	r2,-2
  40c650:	1884703a 	and	r2,r3,r2
  40c654:	1001703a 	wrctl	status,r2
  
  return context;
  40c658:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
  40c65c:	e0bffc15 	stw	r2,-16(fp)
        if (OSIntNesting < 255u) {
  40c660:	d0a79a03 	ldbu	r2,-24984(gp)
  40c664:	10803fcc 	andi	r2,r2,255
  40c668:	10803fe0 	cmpeqi	r2,r2,255
  40c66c:	1000031e 	bne	r2,zero,40c67c <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  40c670:	d0a79a03 	ldbu	r2,-24984(gp)
  40c674:	10800044 	addi	r2,r2,1
  40c678:	d0a79a05 	stb	r2,-24984(gp)
  40c67c:	e0bffc17 	ldw	r2,-16(fp)
  40c680:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40c684:	0005303a 	rdctl	r2,status
  40c688:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40c68c:	e0ffff17 	ldw	r3,-4(fp)
  40c690:	00bfff84 	movi	r2,-2
  40c694:	1884703a 	and	r2,r3,r2
  40c698:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40c69c:	e0bffe17 	ldw	r2,-8(fp)
  40c6a0:	1080004c 	andi	r2,r2,1
  40c6a4:	e0ffff17 	ldw	r3,-4(fp)
  40c6a8:	1884b03a 	or	r2,r3,r2
  40c6ac:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  40c6b0:	e0bfff17 	ldw	r2,-4(fp)
  40c6b4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  40c6b8:	e037883a 	mov	sp,fp
  40c6bc:	df000017 	ldw	fp,0(sp)
  40c6c0:	dec00104 	addi	sp,sp,4
  40c6c4:	f800283a 	ret

0040c6c8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  40c6c8:	defffa04 	addi	sp,sp,-24
  40c6cc:	dfc00515 	stw	ra,20(sp)
  40c6d0:	df000415 	stw	fp,16(sp)
  40c6d4:	df000404 	addi	fp,sp,16
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  40c6d8:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSRunning == OS_TRUE) {
  40c6dc:	d0a78c43 	ldbu	r2,-25039(gp)
  40c6e0:	10803fcc 	andi	r2,r2,255
  40c6e4:	10800058 	cmpnei	r2,r2,1
  40c6e8:	10003a1e 	bne	r2,zero,40c7d4 <OSIntExit+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40c6ec:	0005303a 	rdctl	r2,status
  40c6f0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40c6f4:	e0fffd17 	ldw	r3,-12(fp)
  40c6f8:	00bfff84 	movi	r2,-2
  40c6fc:	1884703a 	and	r2,r3,r2
  40c700:	1001703a 	wrctl	status,r2
  
  return context;
  40c704:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
  40c708:	e0bffc15 	stw	r2,-16(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  40c70c:	d0a79a03 	ldbu	r2,-24984(gp)
  40c710:	10803fcc 	andi	r2,r2,255
  40c714:	10000326 	beq	r2,zero,40c724 <OSIntExit+0x5c>
            OSIntNesting--;
  40c718:	d0a79a03 	ldbu	r2,-24984(gp)
  40c71c:	10bfffc4 	addi	r2,r2,-1
  40c720:	d0a79a05 	stb	r2,-24984(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  40c724:	d0a79a03 	ldbu	r2,-24984(gp)
  40c728:	10803fcc 	andi	r2,r2,255
  40c72c:	10001a1e 	bne	r2,zero,40c798 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  40c730:	d0a78c03 	ldbu	r2,-25040(gp)
  40c734:	10803fcc 	andi	r2,r2,255
  40c738:	1000171e 	bne	r2,zero,40c798 <OSIntExit+0xd0>
                OS_SchedNew();
  40c73c:	040d95c0 	call	40d95c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  40c740:	d0e78e03 	ldbu	r3,-25032(gp)
  40c744:	d0a78e43 	ldbu	r2,-25031(gp)
  40c748:	18c03fcc 	andi	r3,r3,255
  40c74c:	10803fcc 	andi	r2,r2,255
  40c750:	18801126 	beq	r3,r2,40c798 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  40c754:	d0a78e03 	ldbu	r2,-25032(gp)
  40c758:	10803fcc 	andi	r2,r2,255
  40c75c:	00c010b4 	movhi	r3,66
  40c760:	18c26f04 	addi	r3,r3,2492
  40c764:	1085883a 	add	r2,r2,r2
  40c768:	1085883a 	add	r2,r2,r2
  40c76c:	1885883a 	add	r2,r3,r2
  40c770:	10800017 	ldw	r2,0(r2)
  40c774:	d0a79615 	stw	r2,-25000(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  40c778:	d0a79617 	ldw	r2,-25000(gp)
  40c77c:	10c00e17 	ldw	r3,56(r2)
  40c780:	18c00044 	addi	r3,r3,1
  40c784:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  40c788:	d0a79117 	ldw	r2,-25020(gp)
  40c78c:	10800044 	addi	r2,r2,1
  40c790:	d0a79115 	stw	r2,-25020(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  40c794:	0418b140 	call	418b14 <OSCtxSw>
  40c798:	e0bffc17 	ldw	r2,-16(fp)
  40c79c:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40c7a0:	0005303a 	rdctl	r2,status
  40c7a4:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40c7a8:	e0ffff17 	ldw	r3,-4(fp)
  40c7ac:	00bfff84 	movi	r2,-2
  40c7b0:	1884703a 	and	r2,r3,r2
  40c7b4:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40c7b8:	e0bffe17 	ldw	r2,-8(fp)
  40c7bc:	1080004c 	andi	r2,r2,1
  40c7c0:	e0ffff17 	ldw	r3,-4(fp)
  40c7c4:	1884b03a 	or	r2,r3,r2
  40c7c8:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  40c7cc:	e0bfff17 	ldw	r2,-4(fp)
  40c7d0:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  40c7d4:	e037883a 	mov	sp,fp
  40c7d8:	dfc00117 	ldw	ra,4(sp)
  40c7dc:	df000017 	ldw	fp,0(sp)
  40c7e0:	dec00204 	addi	sp,sp,8
  40c7e4:	f800283a 	ret

0040c7e8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  40c7e8:	defffb04 	addi	sp,sp,-20
  40c7ec:	df000415 	stw	fp,16(sp)
  40c7f0:	df000404 	addi	fp,sp,16
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  40c7f4:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  40c7f8:	d0a78c43 	ldbu	r2,-25039(gp)
  40c7fc:	10803fcc 	andi	r2,r2,255
  40c800:	10800058 	cmpnei	r2,r2,1
  40c804:	1000211e 	bne	r2,zero,40c88c <OSSchedLock+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40c808:	0005303a 	rdctl	r2,status
  40c80c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40c810:	e0fffd17 	ldw	r3,-12(fp)
  40c814:	00bfff84 	movi	r2,-2
  40c818:	1884703a 	and	r2,r3,r2
  40c81c:	1001703a 	wrctl	status,r2
  
  return context;
  40c820:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
  40c824:	e0bffc15 	stw	r2,-16(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  40c828:	d0a79a03 	ldbu	r2,-24984(gp)
  40c82c:	10803fcc 	andi	r2,r2,255
  40c830:	1000071e 	bne	r2,zero,40c850 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  40c834:	d0a78c03 	ldbu	r2,-25040(gp)
  40c838:	10803fcc 	andi	r2,r2,255
  40c83c:	10803fe0 	cmpeqi	r2,r2,255
  40c840:	1000031e 	bne	r2,zero,40c850 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  40c844:	d0a78c03 	ldbu	r2,-25040(gp)
  40c848:	10800044 	addi	r2,r2,1
  40c84c:	d0a78c05 	stb	r2,-25040(gp)
  40c850:	e0bffc17 	ldw	r2,-16(fp)
  40c854:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40c858:	0005303a 	rdctl	r2,status
  40c85c:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40c860:	e0ffff17 	ldw	r3,-4(fp)
  40c864:	00bfff84 	movi	r2,-2
  40c868:	1884703a 	and	r2,r3,r2
  40c86c:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40c870:	e0bffe17 	ldw	r2,-8(fp)
  40c874:	1080004c 	andi	r2,r2,1
  40c878:	e0ffff17 	ldw	r3,-4(fp)
  40c87c:	1884b03a 	or	r2,r3,r2
  40c880:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  40c884:	e0bfff17 	ldw	r2,-4(fp)
  40c888:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  40c88c:	e037883a 	mov	sp,fp
  40c890:	df000017 	ldw	fp,0(sp)
  40c894:	dec00104 	addi	sp,sp,4
  40c898:	f800283a 	ret

0040c89c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  40c89c:	defff404 	addi	sp,sp,-48
  40c8a0:	dfc00b15 	stw	ra,44(sp)
  40c8a4:	df000a15 	stw	fp,40(sp)
  40c8a8:	df000a04 	addi	fp,sp,40
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  40c8ac:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  40c8b0:	d0a78c43 	ldbu	r2,-25039(gp)
  40c8b4:	10803fcc 	andi	r2,r2,255
  40c8b8:	10800058 	cmpnei	r2,r2,1
  40c8bc:	1000541e 	bne	r2,zero,40ca10 <OSSchedUnlock+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40c8c0:	0005303a 	rdctl	r2,status
  40c8c4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40c8c8:	e0fff717 	ldw	r3,-36(fp)
  40c8cc:	00bfff84 	movi	r2,-2
  40c8d0:	1884703a 	and	r2,r3,r2
  40c8d4:	1001703a 	wrctl	status,r2
  
  return context;
  40c8d8:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  40c8dc:	e0bff615 	stw	r2,-40(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  40c8e0:	d0a78c03 	ldbu	r2,-25040(gp)
  40c8e4:	10803fcc 	andi	r2,r2,255
  40c8e8:	10003a26 	beq	r2,zero,40c9d4 <OSSchedUnlock+0x138>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  40c8ec:	d0a78c03 	ldbu	r2,-25040(gp)
  40c8f0:	10bfffc4 	addi	r2,r2,-1
  40c8f4:	d0a78c05 	stb	r2,-25040(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  40c8f8:	d0a78c03 	ldbu	r2,-25040(gp)
  40c8fc:	10803fcc 	andi	r2,r2,255
  40c900:	1000241e 	bne	r2,zero,40c994 <OSSchedUnlock+0xf8>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  40c904:	d0a79a03 	ldbu	r2,-24984(gp)
  40c908:	10803fcc 	andi	r2,r2,255
  40c90c:	1000111e 	bne	r2,zero,40c954 <OSSchedUnlock+0xb8>
  40c910:	e0bff617 	ldw	r2,-40(fp)
  40c914:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40c918:	0005303a 	rdctl	r2,status
  40c91c:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40c920:	e0fff917 	ldw	r3,-28(fp)
  40c924:	00bfff84 	movi	r2,-2
  40c928:	1884703a 	and	r2,r3,r2
  40c92c:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40c930:	e0bff817 	ldw	r2,-32(fp)
  40c934:	1080004c 	andi	r2,r2,1
  40c938:	e0fff917 	ldw	r3,-28(fp)
  40c93c:	1884b03a 	or	r2,r3,r2
  40c940:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  40c944:	e0bff917 	ldw	r2,-28(fp)
  40c948:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  40c94c:	040d8640 	call	40d864 <OS_Sched>
  40c950:	00002f06 	br	40ca10 <OSSchedUnlock+0x174>
  40c954:	e0bff617 	ldw	r2,-40(fp)
  40c958:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40c95c:	0005303a 	rdctl	r2,status
  40c960:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40c964:	e0fffb17 	ldw	r3,-20(fp)
  40c968:	00bfff84 	movi	r2,-2
  40c96c:	1884703a 	and	r2,r3,r2
  40c970:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40c974:	e0bffa17 	ldw	r2,-24(fp)
  40c978:	1080004c 	andi	r2,r2,1
  40c97c:	e0fffb17 	ldw	r3,-20(fp)
  40c980:	1884b03a 	or	r2,r3,r2
  40c984:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  40c988:	e0bffb17 	ldw	r2,-20(fp)
  40c98c:	1001703a 	wrctl	status,r2
  40c990:	00001f06 	br	40ca10 <OSSchedUnlock+0x174>
  40c994:	e0bff617 	ldw	r2,-40(fp)
  40c998:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40c99c:	0005303a 	rdctl	r2,status
  40c9a0:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40c9a4:	e0fffd17 	ldw	r3,-12(fp)
  40c9a8:	00bfff84 	movi	r2,-2
  40c9ac:	1884703a 	and	r2,r3,r2
  40c9b0:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40c9b4:	e0bffc17 	ldw	r2,-16(fp)
  40c9b8:	1080004c 	andi	r2,r2,1
  40c9bc:	e0fffd17 	ldw	r3,-12(fp)
  40c9c0:	1884b03a 	or	r2,r3,r2
  40c9c4:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  40c9c8:	e0bffd17 	ldw	r2,-12(fp)
  40c9cc:	1001703a 	wrctl	status,r2
  40c9d0:	00000f06 	br	40ca10 <OSSchedUnlock+0x174>
  40c9d4:	e0bff617 	ldw	r2,-40(fp)
  40c9d8:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40c9dc:	0005303a 	rdctl	r2,status
  40c9e0:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40c9e4:	e0ffff17 	ldw	r3,-4(fp)
  40c9e8:	00bfff84 	movi	r2,-2
  40c9ec:	1884703a 	and	r2,r3,r2
  40c9f0:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40c9f4:	e0bffe17 	ldw	r2,-8(fp)
  40c9f8:	1080004c 	andi	r2,r2,1
  40c9fc:	e0ffff17 	ldw	r3,-4(fp)
  40ca00:	1884b03a 	or	r2,r3,r2
  40ca04:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  40ca08:	e0bfff17 	ldw	r2,-4(fp)
  40ca0c:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  40ca10:	e037883a 	mov	sp,fp
  40ca14:	dfc00117 	ldw	ra,4(sp)
  40ca18:	df000017 	ldw	fp,0(sp)
  40ca1c:	dec00204 	addi	sp,sp,8
  40ca20:	f800283a 	ret

0040ca24 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  40ca24:	defffe04 	addi	sp,sp,-8
  40ca28:	dfc00115 	stw	ra,4(sp)
  40ca2c:	df000015 	stw	fp,0(sp)
  40ca30:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  40ca34:	d0a78c43 	ldbu	r2,-25039(gp)
  40ca38:	10803fcc 	andi	r2,r2,255
  40ca3c:	10000f1e 	bne	r2,zero,40ca7c <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  40ca40:	040d95c0 	call	40d95c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  40ca44:	d0a78e03 	ldbu	r2,-25032(gp)
  40ca48:	d0a78e45 	stb	r2,-25031(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  40ca4c:	d0a78e03 	ldbu	r2,-25032(gp)
  40ca50:	10803fcc 	andi	r2,r2,255
  40ca54:	00c010b4 	movhi	r3,66
  40ca58:	18c26f04 	addi	r3,r3,2492
  40ca5c:	1085883a 	add	r2,r2,r2
  40ca60:	1085883a 	add	r2,r2,r2
  40ca64:	1885883a 	add	r2,r3,r2
  40ca68:	10800017 	ldw	r2,0(r2)
  40ca6c:	d0a79615 	stw	r2,-25000(gp)
        OSTCBCur      = OSTCBHighRdy;
  40ca70:	d0a79617 	ldw	r2,-25000(gp)
  40ca74:	d0a79b15 	stw	r2,-24980(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  40ca78:	0418ba00 	call	418ba0 <OSStartHighRdy>
    }
}
  40ca7c:	e037883a 	mov	sp,fp
  40ca80:	dfc00117 	ldw	ra,4(sp)
  40ca84:	df000017 	ldw	fp,0(sp)
  40ca88:	dec00204 	addi	sp,sp,8
  40ca8c:	f800283a 	ret

0040ca90 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  40ca90:	defff704 	addi	sp,sp,-36
  40ca94:	dfc00815 	stw	ra,32(sp)
  40ca98:	df000715 	stw	fp,28(sp)
  40ca9c:	df000704 	addi	fp,sp,28
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  40caa0:	e03ff915 	stw	zero,-28(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  40caa4:	01000084 	movi	r4,2
  40caa8:	0414d6c0 	call	414d6c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40caac:	0005303a 	rdctl	r2,status
  40cab0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40cab4:	e0fffa17 	ldw	r3,-24(fp)
  40cab8:	00bfff84 	movi	r2,-2
  40cabc:	1884703a 	and	r2,r3,r2
  40cac0:	1001703a 	wrctl	status,r2
  
  return context;
  40cac4:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
  40cac8:	e0bff915 	stw	r2,-28(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  40cacc:	d0278d15 	stw	zero,-25036(gp)
  40cad0:	e0bff917 	ldw	r2,-28(fp)
  40cad4:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40cad8:	0005303a 	rdctl	r2,status
  40cadc:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40cae0:	e0fffc17 	ldw	r3,-16(fp)
  40cae4:	00bfff84 	movi	r2,-2
  40cae8:	1884703a 	and	r2,r3,r2
  40caec:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40caf0:	e0bffb17 	ldw	r2,-20(fp)
  40caf4:	1080004c 	andi	r2,r2,1
  40caf8:	e0fffc17 	ldw	r3,-16(fp)
  40cafc:	1884b03a 	or	r2,r3,r2
  40cb00:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  40cb04:	e0bffc17 	ldw	r2,-16(fp)
  40cb08:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  40cb0c:	01000284 	movi	r4,10
  40cb10:	0414d6c0 	call	414d6c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40cb14:	0005303a 	rdctl	r2,status
  40cb18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40cb1c:	e0fffd17 	ldw	r3,-12(fp)
  40cb20:	00bfff84 	movi	r2,-2
  40cb24:	1884703a 	and	r2,r3,r2
  40cb28:	1001703a 	wrctl	status,r2
  
  return context;
  40cb2c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
  40cb30:	e0bff915 	stw	r2,-28(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  40cb34:	d0a78d17 	ldw	r2,-25036(gp)
  40cb38:	d0a79215 	stw	r2,-25016(gp)
    OSStatRdy    = OS_TRUE;
  40cb3c:	00800044 	movi	r2,1
  40cb40:	d0a79e05 	stb	r2,-24968(gp)
  40cb44:	e0bff917 	ldw	r2,-28(fp)
  40cb48:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40cb4c:	0005303a 	rdctl	r2,status
  40cb50:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40cb54:	e0ffff17 	ldw	r3,-4(fp)
  40cb58:	00bfff84 	movi	r2,-2
  40cb5c:	1884703a 	and	r2,r3,r2
  40cb60:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40cb64:	e0bffe17 	ldw	r2,-8(fp)
  40cb68:	1080004c 	andi	r2,r2,1
  40cb6c:	e0ffff17 	ldw	r3,-4(fp)
  40cb70:	1884b03a 	or	r2,r3,r2
  40cb74:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  40cb78:	e0bfff17 	ldw	r2,-4(fp)
  40cb7c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  40cb80:	e037883a 	mov	sp,fp
  40cb84:	dfc00117 	ldw	ra,4(sp)
  40cb88:	df000017 	ldw	fp,0(sp)
  40cb8c:	dec00204 	addi	sp,sp,8
  40cb90:	f800283a 	ret

0040cb94 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  40cb94:	defff504 	addi	sp,sp,-44
  40cb98:	dfc00a15 	stw	ra,40(sp)
  40cb9c:	df000915 	stw	fp,36(sp)
  40cba0:	df000904 	addi	fp,sp,36
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  40cba4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  40cba8:	0418f500 	call	418f50 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40cbac:	0005303a 	rdctl	r2,status
  40cbb0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40cbb4:	e0fffa17 	ldw	r3,-24(fp)
  40cbb8:	00bfff84 	movi	r2,-2
  40cbbc:	1884703a 	and	r2,r3,r2
  40cbc0:	1001703a 	wrctl	status,r2
  
  return context;
  40cbc4:	e0bffa17 	ldw	r2,-24(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  40cbc8:	e0bff915 	stw	r2,-28(fp)
    OSTime++;
  40cbcc:	d0a79c17 	ldw	r2,-24976(gp)
  40cbd0:	10800044 	addi	r2,r2,1
  40cbd4:	d0a79c15 	stw	r2,-24976(gp)
  40cbd8:	e0bff917 	ldw	r2,-28(fp)
  40cbdc:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40cbe0:	0005303a 	rdctl	r2,status
  40cbe4:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40cbe8:	e0fffc17 	ldw	r3,-16(fp)
  40cbec:	00bfff84 	movi	r2,-2
  40cbf0:	1884703a 	and	r2,r3,r2
  40cbf4:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40cbf8:	e0bffb17 	ldw	r2,-20(fp)
  40cbfc:	1080004c 	andi	r2,r2,1
  40cc00:	e0fffc17 	ldw	r3,-16(fp)
  40cc04:	1884b03a 	or	r2,r3,r2
  40cc08:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  40cc0c:	e0bffc17 	ldw	r2,-16(fp)
  40cc10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  40cc14:	d0a78c43 	ldbu	r2,-25039(gp)
  40cc18:	10803fcc 	andi	r2,r2,255
  40cc1c:	10800058 	cmpnei	r2,r2,1
  40cc20:	1000751e 	bne	r2,zero,40cdf8 <OSTimeTick+0x264>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  40cc24:	d0a79003 	ldbu	r2,-25024(gp)
  40cc28:	10803fcc 	andi	r2,r2,255
  40cc2c:	10c00060 	cmpeqi	r3,r2,1
  40cc30:	1800061e 	bne	r3,zero,40cc4c <OSTimeTick+0xb8>
  40cc34:	10c000a0 	cmpeqi	r3,r2,2
  40cc38:	1800061e 	bne	r3,zero,40cc54 <OSTimeTick+0xc0>
  40cc3c:	10000a1e 	bne	r2,zero,40cc68 <OSTimeTick+0xd4>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  40cc40:	00800044 	movi	r2,1
  40cc44:	e0bff805 	stb	r2,-32(fp)
                 break;
  40cc48:	00000b06 	br	40cc78 <OSTimeTick+0xe4>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  40cc4c:	e03ff805 	stb	zero,-32(fp)
                 break;
  40cc50:	00000906 	br	40cc78 <OSTimeTick+0xe4>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  40cc54:	00800044 	movi	r2,1
  40cc58:	e0bff805 	stb	r2,-32(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  40cc5c:	00800044 	movi	r2,1
  40cc60:	d0a79005 	stb	r2,-25024(gp)
                 break;
  40cc64:	00000406 	br	40cc78 <OSTimeTick+0xe4>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  40cc68:	00800044 	movi	r2,1
  40cc6c:	e0bff805 	stb	r2,-32(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  40cc70:	d0279005 	stb	zero,-25024(gp)
                 break;
  40cc74:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  40cc78:	e0bff803 	ldbu	r2,-32(fp)
  40cc7c:	10005d26 	beq	r2,zero,40cdf4 <OSTimeTick+0x260>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  40cc80:	d0a78f17 	ldw	r2,-25028(gp)
  40cc84:	e0bff715 	stw	r2,-36(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  40cc88:	00005406 	br	40cddc <OSTimeTick+0x248>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40cc8c:	0005303a 	rdctl	r2,status
  40cc90:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40cc94:	e0fffd17 	ldw	r3,-12(fp)
  40cc98:	00bfff84 	movi	r2,-2
  40cc9c:	1884703a 	and	r2,r3,r2
  40cca0:	1001703a 	wrctl	status,r2
  
  return context;
  40cca4:	e0bffd17 	ldw	r2,-12(fp)
            OS_ENTER_CRITICAL();
  40cca8:	e0bff915 	stw	r2,-28(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  40ccac:	e0bff717 	ldw	r2,-36(fp)
  40ccb0:	10800b8b 	ldhu	r2,46(r2)
  40ccb4:	10bfffcc 	andi	r2,r2,65535
  40ccb8:	10003626 	beq	r2,zero,40cd94 <OSTimeTick+0x200>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  40ccbc:	e0bff717 	ldw	r2,-36(fp)
  40ccc0:	10800b8b 	ldhu	r2,46(r2)
  40ccc4:	10bfffc4 	addi	r2,r2,-1
  40ccc8:	1007883a 	mov	r3,r2
  40cccc:	e0bff717 	ldw	r2,-36(fp)
  40ccd0:	10c00b8d 	sth	r3,46(r2)
  40ccd4:	e0bff717 	ldw	r2,-36(fp)
  40ccd8:	10800b8b 	ldhu	r2,46(r2)
  40ccdc:	10bfffcc 	andi	r2,r2,65535
  40cce0:	10002c1e 	bne	r2,zero,40cd94 <OSTimeTick+0x200>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  40cce4:	e0bff717 	ldw	r2,-36(fp)
  40cce8:	10800c03 	ldbu	r2,48(r2)
  40ccec:	10803fcc 	andi	r2,r2,255
  40ccf0:	10800dcc 	andi	r2,r2,55
  40ccf4:	10000b26 	beq	r2,zero,40cd24 <OSTimeTick+0x190>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  40ccf8:	e0bff717 	ldw	r2,-36(fp)
  40ccfc:	10c00c03 	ldbu	r3,48(r2)
  40cd00:	00bff204 	movi	r2,-56
  40cd04:	1884703a 	and	r2,r3,r2
  40cd08:	1007883a 	mov	r3,r2
  40cd0c:	e0bff717 	ldw	r2,-36(fp)
  40cd10:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  40cd14:	e0bff717 	ldw	r2,-36(fp)
  40cd18:	00c00044 	movi	r3,1
  40cd1c:	10c00c45 	stb	r3,49(r2)
  40cd20:	00000206 	br	40cd2c <OSTimeTick+0x198>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  40cd24:	e0bff717 	ldw	r2,-36(fp)
  40cd28:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  40cd2c:	e0bff717 	ldw	r2,-36(fp)
  40cd30:	10800c03 	ldbu	r2,48(r2)
  40cd34:	10803fcc 	andi	r2,r2,255
  40cd38:	1080020c 	andi	r2,r2,8
  40cd3c:	1000151e 	bne	r2,zero,40cd94 <OSTimeTick+0x200>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  40cd40:	e0bff717 	ldw	r2,-36(fp)
  40cd44:	10c00d83 	ldbu	r3,54(r2)
  40cd48:	d0a79803 	ldbu	r2,-24992(gp)
  40cd4c:	1884b03a 	or	r2,r3,r2
  40cd50:	d0a79805 	stb	r2,-24992(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  40cd54:	e0bff717 	ldw	r2,-36(fp)
  40cd58:	10800d03 	ldbu	r2,52(r2)
  40cd5c:	11003fcc 	andi	r4,r2,255
  40cd60:	e0bff717 	ldw	r2,-36(fp)
  40cd64:	10800d03 	ldbu	r2,52(r2)
  40cd68:	10c03fcc 	andi	r3,r2,255
  40cd6c:	d0a79844 	addi	r2,gp,-24991
  40cd70:	1885883a 	add	r2,r3,r2
  40cd74:	10c00003 	ldbu	r3,0(r2)
  40cd78:	e0bff717 	ldw	r2,-36(fp)
  40cd7c:	10800d43 	ldbu	r2,53(r2)
  40cd80:	1884b03a 	or	r2,r3,r2
  40cd84:	1007883a 	mov	r3,r2
  40cd88:	d0a79844 	addi	r2,gp,-24991
  40cd8c:	2085883a 	add	r2,r4,r2
  40cd90:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  40cd94:	e0bff717 	ldw	r2,-36(fp)
  40cd98:	10800517 	ldw	r2,20(r2)
  40cd9c:	e0bff715 	stw	r2,-36(fp)
  40cda0:	e0bff917 	ldw	r2,-28(fp)
  40cda4:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40cda8:	0005303a 	rdctl	r2,status
  40cdac:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40cdb0:	e0ffff17 	ldw	r3,-4(fp)
  40cdb4:	00bfff84 	movi	r2,-2
  40cdb8:	1884703a 	and	r2,r3,r2
  40cdbc:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40cdc0:	e0bffe17 	ldw	r2,-8(fp)
  40cdc4:	1080004c 	andi	r2,r2,1
  40cdc8:	e0ffff17 	ldw	r3,-4(fp)
  40cdcc:	1884b03a 	or	r2,r3,r2
  40cdd0:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  40cdd4:	e0bfff17 	ldw	r2,-4(fp)
  40cdd8:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  40cddc:	e0bff717 	ldw	r2,-36(fp)
  40cde0:	10800c83 	ldbu	r2,50(r2)
  40cde4:	10803fcc 	andi	r2,r2,255
  40cde8:	10800518 	cmpnei	r2,r2,20
  40cdec:	103fa71e 	bne	r2,zero,40cc8c <OSTimeTick+0xf8>
  40cdf0:	00000106 	br	40cdf8 <OSTimeTick+0x264>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
  40cdf4:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  40cdf8:	e037883a 	mov	sp,fp
  40cdfc:	dfc00117 	ldw	ra,4(sp)
  40ce00:	df000017 	ldw	fp,0(sp)
  40ce04:	dec00204 	addi	sp,sp,8
  40ce08:	f800283a 	ret

0040ce0c <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  40ce0c:	deffff04 	addi	sp,sp,-4
  40ce10:	df000015 	stw	fp,0(sp)
  40ce14:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  40ce18:	00804784 	movi	r2,286
}
  40ce1c:	e037883a 	mov	sp,fp
  40ce20:	df000017 	ldw	fp,0(sp)
  40ce24:	dec00104 	addi	sp,sp,4
  40ce28:	f800283a 	ret

0040ce2c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  40ce2c:	deffff04 	addi	sp,sp,-4
  40ce30:	df000015 	stw	fp,0(sp)
  40ce34:	d839883a 	mov	fp,sp
}
  40ce38:	e037883a 	mov	sp,fp
  40ce3c:	df000017 	ldw	fp,0(sp)
  40ce40:	dec00104 	addi	sp,sp,4
  40ce44:	f800283a 	ret

0040ce48 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  40ce48:	defff804 	addi	sp,sp,-32
  40ce4c:	dfc00715 	stw	ra,28(sp)
  40ce50:	df000615 	stw	fp,24(sp)
  40ce54:	df000604 	addi	fp,sp,24
  40ce58:	e13ffc15 	stw	r4,-16(fp)
  40ce5c:	e17ffd15 	stw	r5,-12(fp)
  40ce60:	3007883a 	mov	r3,r6
  40ce64:	3805883a 	mov	r2,r7
  40ce68:	e0fffe05 	stb	r3,-8(fp)
  40ce6c:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  40ce70:	e0bffc17 	ldw	r2,-16(fp)
  40ce74:	10800283 	ldbu	r2,10(r2)
  40ce78:	10803fcc 	andi	r2,r2,255
  40ce7c:	00c010b4 	movhi	r3,66
  40ce80:	18e69604 	addi	r3,r3,-26024
  40ce84:	1885883a 	add	r2,r3,r2
  40ce88:	10800003 	ldbu	r2,0(r2)
  40ce8c:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  40ce90:	e0bffa03 	ldbu	r2,-24(fp)
  40ce94:	e0fffc17 	ldw	r3,-16(fp)
  40ce98:	1885883a 	add	r2,r3,r2
  40ce9c:	10800204 	addi	r2,r2,8
  40cea0:	108000c3 	ldbu	r2,3(r2)
  40cea4:	10803fcc 	andi	r2,r2,255
  40cea8:	00c010b4 	movhi	r3,66
  40ceac:	18e69604 	addi	r3,r3,-26024
  40ceb0:	1885883a 	add	r2,r3,r2
  40ceb4:	10800003 	ldbu	r2,0(r2)
  40ceb8:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  40cebc:	e0bffa03 	ldbu	r2,-24(fp)
  40cec0:	100490fa 	slli	r2,r2,3
  40cec4:	1007883a 	mov	r3,r2
  40cec8:	e0bffa43 	ldbu	r2,-23(fp)
  40cecc:	1885883a 	add	r2,r3,r2
  40ced0:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  40ced4:	e0bffa83 	ldbu	r2,-22(fp)
  40ced8:	00c010b4 	movhi	r3,66
  40cedc:	18c26f04 	addi	r3,r3,2492
  40cee0:	1085883a 	add	r2,r2,r2
  40cee4:	1085883a 	add	r2,r2,r2
  40cee8:	1885883a 	add	r2,r3,r2
  40ceec:	10800017 	ldw	r2,0(r2)
  40cef0:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  40cef4:	e0bffb17 	ldw	r2,-20(fp)
  40cef8:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  40cefc:	e0bffb17 	ldw	r2,-20(fp)
  40cf00:	e0fffd17 	ldw	r3,-12(fp)
  40cf04:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  40cf08:	e0bffb17 	ldw	r2,-20(fp)
  40cf0c:	10800c03 	ldbu	r2,48(r2)
  40cf10:	1007883a 	mov	r3,r2
  40cf14:	e0bffe03 	ldbu	r2,-8(fp)
  40cf18:	0084303a 	nor	r2,zero,r2
  40cf1c:	1884703a 	and	r2,r3,r2
  40cf20:	1007883a 	mov	r3,r2
  40cf24:	e0bffb17 	ldw	r2,-20(fp)
  40cf28:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  40cf2c:	e0bffb17 	ldw	r2,-20(fp)
  40cf30:	e0ffff03 	ldbu	r3,-4(fp)
  40cf34:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  40cf38:	e0bffb17 	ldw	r2,-20(fp)
  40cf3c:	10800c03 	ldbu	r2,48(r2)
  40cf40:	10803fcc 	andi	r2,r2,255
  40cf44:	1080020c 	andi	r2,r2,8
  40cf48:	1000111e 	bne	r2,zero,40cf90 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  40cf4c:	e0bffb17 	ldw	r2,-20(fp)
  40cf50:	10c00d83 	ldbu	r3,54(r2)
  40cf54:	d0a79803 	ldbu	r2,-24992(gp)
  40cf58:	1884b03a 	or	r2,r3,r2
  40cf5c:	d0a79805 	stb	r2,-24992(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  40cf60:	e13ffa03 	ldbu	r4,-24(fp)
  40cf64:	e0fffa03 	ldbu	r3,-24(fp)
  40cf68:	d0a79844 	addi	r2,gp,-24991
  40cf6c:	1885883a 	add	r2,r3,r2
  40cf70:	10c00003 	ldbu	r3,0(r2)
  40cf74:	e0bffb17 	ldw	r2,-20(fp)
  40cf78:	10800d43 	ldbu	r2,53(r2)
  40cf7c:	1884b03a 	or	r2,r3,r2
  40cf80:	1007883a 	mov	r3,r2
  40cf84:	d0a79844 	addi	r2,gp,-24991
  40cf88:	2085883a 	add	r2,r4,r2
  40cf8c:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  40cf90:	e13ffb17 	ldw	r4,-20(fp)
  40cf94:	e17ffc17 	ldw	r5,-16(fp)
  40cf98:	040d2300 	call	40d230 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  40cf9c:	e0bffb17 	ldw	r2,-20(fp)
  40cfa0:	10800817 	ldw	r2,32(r2)
  40cfa4:	10000826 	beq	r2,zero,40cfc8 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  40cfa8:	e0bffb17 	ldw	r2,-20(fp)
  40cfac:	10800817 	ldw	r2,32(r2)
  40cfb0:	e13ffb17 	ldw	r4,-20(fp)
  40cfb4:	100b883a 	mov	r5,r2
  40cfb8:	040d2e00 	call	40d2e0 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  40cfbc:	e0bffb17 	ldw	r2,-20(fp)
  40cfc0:	e0fffc17 	ldw	r3,-16(fp)
  40cfc4:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
  40cfc8:	e0bffa83 	ldbu	r2,-22(fp)
}
  40cfcc:	e037883a 	mov	sp,fp
  40cfd0:	dfc00117 	ldw	ra,4(sp)
  40cfd4:	df000017 	ldw	fp,0(sp)
  40cfd8:	dec00204 	addi	sp,sp,8
  40cfdc:	f800283a 	ret

0040cfe0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  40cfe0:	defffd04 	addi	sp,sp,-12
  40cfe4:	df000215 	stw	fp,8(sp)
  40cfe8:	df000204 	addi	fp,sp,8
  40cfec:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  40cff0:	d0a79b17 	ldw	r2,-24980(gp)
  40cff4:	e0ffff17 	ldw	r3,-4(fp)
  40cff8:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  40cffc:	d0a79b17 	ldw	r2,-24980(gp)
  40d000:	10800d03 	ldbu	r2,52(r2)
  40d004:	10803fcc 	andi	r2,r2,255
  40d008:	d0e79b17 	ldw	r3,-24980(gp)
  40d00c:	18c00d03 	ldbu	r3,52(r3)
  40d010:	18c03fcc 	andi	r3,r3,255
  40d014:	e13fff17 	ldw	r4,-4(fp)
  40d018:	20c7883a 	add	r3,r4,r3
  40d01c:	18c00204 	addi	r3,r3,8
  40d020:	190000c3 	ldbu	r4,3(r3)
  40d024:	d0e79b17 	ldw	r3,-24980(gp)
  40d028:	18c00d43 	ldbu	r3,53(r3)
  40d02c:	20c6b03a 	or	r3,r4,r3
  40d030:	e13fff17 	ldw	r4,-4(fp)
  40d034:	2085883a 	add	r2,r4,r2
  40d038:	10800204 	addi	r2,r2,8
  40d03c:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  40d040:	e0bfff17 	ldw	r2,-4(fp)
  40d044:	10c00283 	ldbu	r3,10(r2)
  40d048:	d0a79b17 	ldw	r2,-24980(gp)
  40d04c:	10800d83 	ldbu	r2,54(r2)
  40d050:	1884b03a 	or	r2,r3,r2
  40d054:	1007883a 	mov	r3,r2
  40d058:	e0bfff17 	ldw	r2,-4(fp)
  40d05c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  40d060:	d0a79b17 	ldw	r2,-24980(gp)
  40d064:	10800d03 	ldbu	r2,52(r2)
  40d068:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  40d06c:	e13ffe03 	ldbu	r4,-8(fp)
  40d070:	e0fffe03 	ldbu	r3,-8(fp)
  40d074:	d0a79844 	addi	r2,gp,-24991
  40d078:	1885883a 	add	r2,r3,r2
  40d07c:	10800003 	ldbu	r2,0(r2)
  40d080:	1007883a 	mov	r3,r2
  40d084:	d0a79b17 	ldw	r2,-24980(gp)
  40d088:	10800d43 	ldbu	r2,53(r2)
  40d08c:	0084303a 	nor	r2,zero,r2
  40d090:	1884703a 	and	r2,r3,r2
  40d094:	1007883a 	mov	r3,r2
  40d098:	d0a79844 	addi	r2,gp,-24991
  40d09c:	2085883a 	add	r2,r4,r2
  40d0a0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  40d0a4:	e0fffe03 	ldbu	r3,-8(fp)
  40d0a8:	d0a79844 	addi	r2,gp,-24991
  40d0ac:	1885883a 	add	r2,r3,r2
  40d0b0:	10800003 	ldbu	r2,0(r2)
  40d0b4:	10803fcc 	andi	r2,r2,255
  40d0b8:	1000071e 	bne	r2,zero,40d0d8 <OS_EventTaskWait+0xf8>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  40d0bc:	d0a79b17 	ldw	r2,-24980(gp)
  40d0c0:	10800d83 	ldbu	r2,54(r2)
  40d0c4:	0084303a 	nor	r2,zero,r2
  40d0c8:	1007883a 	mov	r3,r2
  40d0cc:	d0a79803 	ldbu	r2,-24992(gp)
  40d0d0:	1884703a 	and	r2,r3,r2
  40d0d4:	d0a79805 	stb	r2,-24992(gp)
    }
}
  40d0d8:	e037883a 	mov	sp,fp
  40d0dc:	df000017 	ldw	fp,0(sp)
  40d0e0:	dec00104 	addi	sp,sp,4
  40d0e4:	f800283a 	ret

0040d0e8 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  40d0e8:	defffb04 	addi	sp,sp,-20
  40d0ec:	df000415 	stw	fp,16(sp)
  40d0f0:	df000404 	addi	fp,sp,16
  40d0f4:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  40d0f8:	d0a79b17 	ldw	r2,-24980(gp)
  40d0fc:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  40d100:	d0a79b17 	ldw	r2,-24980(gp)
  40d104:	e0ffff17 	ldw	r3,-4(fp)
  40d108:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
  40d10c:	e0bfff17 	ldw	r2,-4(fp)
  40d110:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
  40d114:	e0bffc17 	ldw	r2,-16(fp)
  40d118:	10800017 	ldw	r2,0(r2)
  40d11c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  40d120:	00001f06 	br	40d1a0 <OS_EventTaskWaitMulti+0xb8>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  40d124:	d0a79b17 	ldw	r2,-24980(gp)
  40d128:	10800d03 	ldbu	r2,52(r2)
  40d12c:	10803fcc 	andi	r2,r2,255
  40d130:	d0e79b17 	ldw	r3,-24980(gp)
  40d134:	18c00d03 	ldbu	r3,52(r3)
  40d138:	18c03fcc 	andi	r3,r3,255
  40d13c:	e13ffd17 	ldw	r4,-12(fp)
  40d140:	20c7883a 	add	r3,r4,r3
  40d144:	18c00204 	addi	r3,r3,8
  40d148:	190000c3 	ldbu	r4,3(r3)
  40d14c:	d0e79b17 	ldw	r3,-24980(gp)
  40d150:	18c00d43 	ldbu	r3,53(r3)
  40d154:	20c6b03a 	or	r3,r4,r3
  40d158:	e13ffd17 	ldw	r4,-12(fp)
  40d15c:	2085883a 	add	r2,r4,r2
  40d160:	10800204 	addi	r2,r2,8
  40d164:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  40d168:	e0bffd17 	ldw	r2,-12(fp)
  40d16c:	10c00283 	ldbu	r3,10(r2)
  40d170:	d0a79b17 	ldw	r2,-24980(gp)
  40d174:	10800d83 	ldbu	r2,54(r2)
  40d178:	1884b03a 	or	r2,r3,r2
  40d17c:	1007883a 	mov	r3,r2
  40d180:	e0bffd17 	ldw	r2,-12(fp)
  40d184:	10c00285 	stb	r3,10(r2)
        pevents++;
  40d188:	e0bffc17 	ldw	r2,-16(fp)
  40d18c:	10800104 	addi	r2,r2,4
  40d190:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
  40d194:	e0bffc17 	ldw	r2,-16(fp)
  40d198:	10800017 	ldw	r2,0(r2)
  40d19c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  40d1a0:	e0bffd17 	ldw	r2,-12(fp)
  40d1a4:	103fdf1e 	bne	r2,zero,40d124 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  40d1a8:	d0a79b17 	ldw	r2,-24980(gp)
  40d1ac:	10800d03 	ldbu	r2,52(r2)
  40d1b0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  40d1b4:	e13ffe03 	ldbu	r4,-8(fp)
  40d1b8:	e0fffe03 	ldbu	r3,-8(fp)
  40d1bc:	d0a79844 	addi	r2,gp,-24991
  40d1c0:	1885883a 	add	r2,r3,r2
  40d1c4:	10800003 	ldbu	r2,0(r2)
  40d1c8:	1007883a 	mov	r3,r2
  40d1cc:	d0a79b17 	ldw	r2,-24980(gp)
  40d1d0:	10800d43 	ldbu	r2,53(r2)
  40d1d4:	0084303a 	nor	r2,zero,r2
  40d1d8:	1884703a 	and	r2,r3,r2
  40d1dc:	1007883a 	mov	r3,r2
  40d1e0:	d0a79844 	addi	r2,gp,-24991
  40d1e4:	2085883a 	add	r2,r4,r2
  40d1e8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  40d1ec:	e0fffe03 	ldbu	r3,-8(fp)
  40d1f0:	d0a79844 	addi	r2,gp,-24991
  40d1f4:	1885883a 	add	r2,r3,r2
  40d1f8:	10800003 	ldbu	r2,0(r2)
  40d1fc:	10803fcc 	andi	r2,r2,255
  40d200:	1000071e 	bne	r2,zero,40d220 <OS_EventTaskWaitMulti+0x138>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  40d204:	d0a79b17 	ldw	r2,-24980(gp)
  40d208:	10800d83 	ldbu	r2,54(r2)
  40d20c:	0084303a 	nor	r2,zero,r2
  40d210:	1007883a 	mov	r3,r2
  40d214:	d0a79803 	ldbu	r2,-24992(gp)
  40d218:	1884703a 	and	r2,r3,r2
  40d21c:	d0a79805 	stb	r2,-24992(gp)
    }
}
  40d220:	e037883a 	mov	sp,fp
  40d224:	df000017 	ldw	fp,0(sp)
  40d228:	dec00104 	addi	sp,sp,4
  40d22c:	f800283a 	ret

0040d230 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  40d230:	defffc04 	addi	sp,sp,-16
  40d234:	df000315 	stw	fp,12(sp)
  40d238:	df000304 	addi	fp,sp,12
  40d23c:	e13ffe15 	stw	r4,-8(fp)
  40d240:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  40d244:	e0bffe17 	ldw	r2,-8(fp)
  40d248:	10800d03 	ldbu	r2,52(r2)
  40d24c:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  40d250:	e0bffd03 	ldbu	r2,-12(fp)
  40d254:	e0fffd03 	ldbu	r3,-12(fp)
  40d258:	e13fff17 	ldw	r4,-4(fp)
  40d25c:	20c7883a 	add	r3,r4,r3
  40d260:	18c00204 	addi	r3,r3,8
  40d264:	18c000c3 	ldbu	r3,3(r3)
  40d268:	1809883a 	mov	r4,r3
  40d26c:	e0fffe17 	ldw	r3,-8(fp)
  40d270:	18c00d43 	ldbu	r3,53(r3)
  40d274:	00c6303a 	nor	r3,zero,r3
  40d278:	20c6703a 	and	r3,r4,r3
  40d27c:	e13fff17 	ldw	r4,-4(fp)
  40d280:	2085883a 	add	r2,r4,r2
  40d284:	10800204 	addi	r2,r2,8
  40d288:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  40d28c:	e0bffd03 	ldbu	r2,-12(fp)
  40d290:	e0ffff17 	ldw	r3,-4(fp)
  40d294:	1885883a 	add	r2,r3,r2
  40d298:	10800204 	addi	r2,r2,8
  40d29c:	108000c3 	ldbu	r2,3(r2)
  40d2a0:	10803fcc 	andi	r2,r2,255
  40d2a4:	10000a1e 	bne	r2,zero,40d2d0 <OS_EventTaskRemove+0xa0>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  40d2a8:	e0bfff17 	ldw	r2,-4(fp)
  40d2ac:	10800283 	ldbu	r2,10(r2)
  40d2b0:	1007883a 	mov	r3,r2
  40d2b4:	e0bffe17 	ldw	r2,-8(fp)
  40d2b8:	10800d83 	ldbu	r2,54(r2)
  40d2bc:	0084303a 	nor	r2,zero,r2
  40d2c0:	1884703a 	and	r2,r3,r2
  40d2c4:	1007883a 	mov	r3,r2
  40d2c8:	e0bfff17 	ldw	r2,-4(fp)
  40d2cc:	10c00285 	stb	r3,10(r2)
    }
}
  40d2d0:	e037883a 	mov	sp,fp
  40d2d4:	df000017 	ldw	fp,0(sp)
  40d2d8:	dec00104 	addi	sp,sp,4
  40d2dc:	f800283a 	ret

0040d2e0 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  40d2e0:	defffa04 	addi	sp,sp,-24
  40d2e4:	df000515 	stw	fp,20(sp)
  40d2e8:	df000504 	addi	fp,sp,20
  40d2ec:	e13ffe15 	stw	r4,-8(fp)
  40d2f0:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  40d2f4:	e0bffe17 	ldw	r2,-8(fp)
  40d2f8:	10800d03 	ldbu	r2,52(r2)
  40d2fc:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
  40d300:	e0bffe17 	ldw	r2,-8(fp)
  40d304:	10800d83 	ldbu	r2,54(r2)
  40d308:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
  40d30c:	e0bffe17 	ldw	r2,-8(fp)
  40d310:	10800d43 	ldbu	r2,53(r2)
  40d314:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
  40d318:	e0bfff17 	ldw	r2,-4(fp)
  40d31c:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
  40d320:	e0bffb17 	ldw	r2,-20(fp)
  40d324:	10800017 	ldw	r2,0(r2)
  40d328:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  40d32c:	00002406 	br	40d3c0 <OS_EventTaskRemoveMulti+0xe0>
        pevent->OSEventTbl[y]  &= ~bitx;
  40d330:	e0bffd03 	ldbu	r2,-12(fp)
  40d334:	e0fffd03 	ldbu	r3,-12(fp)
  40d338:	e13ffc17 	ldw	r4,-16(fp)
  40d33c:	20c7883a 	add	r3,r4,r3
  40d340:	18c00204 	addi	r3,r3,8
  40d344:	18c000c3 	ldbu	r3,3(r3)
  40d348:	1809883a 	mov	r4,r3
  40d34c:	e0fffd83 	ldbu	r3,-10(fp)
  40d350:	00c6303a 	nor	r3,zero,r3
  40d354:	20c6703a 	and	r3,r4,r3
  40d358:	e13ffc17 	ldw	r4,-16(fp)
  40d35c:	2085883a 	add	r2,r4,r2
  40d360:	10800204 	addi	r2,r2,8
  40d364:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  40d368:	e0bffd03 	ldbu	r2,-12(fp)
  40d36c:	e0fffc17 	ldw	r3,-16(fp)
  40d370:	1885883a 	add	r2,r3,r2
  40d374:	10800204 	addi	r2,r2,8
  40d378:	108000c3 	ldbu	r2,3(r2)
  40d37c:	10803fcc 	andi	r2,r2,255
  40d380:	1000091e 	bne	r2,zero,40d3a8 <OS_EventTaskRemoveMulti+0xc8>
            pevent->OSEventGrp &= ~bity;
  40d384:	e0bffc17 	ldw	r2,-16(fp)
  40d388:	10800283 	ldbu	r2,10(r2)
  40d38c:	1007883a 	mov	r3,r2
  40d390:	e0bffd43 	ldbu	r2,-11(fp)
  40d394:	0084303a 	nor	r2,zero,r2
  40d398:	1884703a 	and	r2,r3,r2
  40d39c:	1007883a 	mov	r3,r2
  40d3a0:	e0bffc17 	ldw	r2,-16(fp)
  40d3a4:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  40d3a8:	e0bffb17 	ldw	r2,-20(fp)
  40d3ac:	10800104 	addi	r2,r2,4
  40d3b0:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
  40d3b4:	e0bffb17 	ldw	r2,-20(fp)
  40d3b8:	10800017 	ldw	r2,0(r2)
  40d3bc:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  40d3c0:	e0bffc17 	ldw	r2,-16(fp)
  40d3c4:	103fda1e 	bne	r2,zero,40d330 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  40d3c8:	e037883a 	mov	sp,fp
  40d3cc:	df000017 	ldw	fp,0(sp)
  40d3d0:	dec00104 	addi	sp,sp,4
  40d3d4:	f800283a 	ret

0040d3d8 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  40d3d8:	defffc04 	addi	sp,sp,-16
  40d3dc:	df000315 	stw	fp,12(sp)
  40d3e0:	df000304 	addi	fp,sp,12
  40d3e4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  40d3e8:	e0bfff17 	ldw	r2,-4(fp)
  40d3ec:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  40d3f0:	e0bfff17 	ldw	r2,-4(fp)
  40d3f4:	108002c4 	addi	r2,r2,11
  40d3f8:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  40d3fc:	e03ffe05 	stb	zero,-8(fp)
  40d400:	00000806 	br	40d424 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  40d404:	e0bffd17 	ldw	r2,-12(fp)
  40d408:	10000005 	stb	zero,0(r2)
  40d40c:	e0bffd17 	ldw	r2,-12(fp)
  40d410:	10800044 	addi	r2,r2,1
  40d414:	e0bffd15 	stw	r2,-12(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  40d418:	e0bffe03 	ldbu	r2,-8(fp)
  40d41c:	10800044 	addi	r2,r2,1
  40d420:	e0bffe05 	stb	r2,-8(fp)
  40d424:	e0bffe03 	ldbu	r2,-8(fp)
  40d428:	108000f0 	cmpltui	r2,r2,3
  40d42c:	103ff51e 	bne	r2,zero,40d404 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  40d430:	e037883a 	mov	sp,fp
  40d434:	df000017 	ldw	fp,0(sp)
  40d438:	dec00104 	addi	sp,sp,4
  40d43c:	f800283a 	ret

0040d440 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  40d440:	defffb04 	addi	sp,sp,-20
  40d444:	dfc00415 	stw	ra,16(sp)
  40d448:	df000315 	stw	fp,12(sp)
  40d44c:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  40d450:	010010b4 	movhi	r4,66
  40d454:	213e5b04 	addi	r4,r4,-1684
  40d458:	0142d004 	movi	r5,2880
  40d45c:	040d7a40 	call	40d7a4 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  40d460:	008010b4 	movhi	r2,66
  40d464:	10be5b04 	addi	r2,r2,-1684
  40d468:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  40d46c:	008010b4 	movhi	r2,66
  40d470:	10be6704 	addi	r2,r2,-1636
  40d474:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  40d478:	e03ffd0d 	sth	zero,-12(fp)
  40d47c:	00001306 	br	40d4cc <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  40d480:	e0bffe17 	ldw	r2,-8(fp)
  40d484:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  40d488:	e0bffe17 	ldw	r2,-8(fp)
  40d48c:	e0ffff17 	ldw	r3,-4(fp)
  40d490:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  40d494:	e0bffe17 	ldw	r2,-8(fp)
  40d498:	00c00fc4 	movi	r3,63
  40d49c:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  40d4a0:	e0bffe17 	ldw	r2,-8(fp)
  40d4a4:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  40d4a8:	e0bffe17 	ldw	r2,-8(fp)
  40d4ac:	10800c04 	addi	r2,r2,48
  40d4b0:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  40d4b4:	e0bfff17 	ldw	r2,-4(fp)
  40d4b8:	10800c04 	addi	r2,r2,48
  40d4bc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  40d4c0:	e0bffd0b 	ldhu	r2,-12(fp)
  40d4c4:	10800044 	addi	r2,r2,1
  40d4c8:	e0bffd0d 	sth	r2,-12(fp)
  40d4cc:	e0bffd0b 	ldhu	r2,-12(fp)
  40d4d0:	10800ef0 	cmpltui	r2,r2,59
  40d4d4:	103fea1e 	bne	r2,zero,40d480 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  40d4d8:	e0bffe17 	ldw	r2,-8(fp)
  40d4dc:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  40d4e0:	e0bffe17 	ldw	r2,-8(fp)
  40d4e4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  40d4e8:	e0bffe17 	ldw	r2,-8(fp)
  40d4ec:	00c00fc4 	movi	r3,63
  40d4f0:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  40d4f4:	e0bffe17 	ldw	r2,-8(fp)
  40d4f8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  40d4fc:	008010b4 	movhi	r2,66
  40d500:	10be5b04 	addi	r2,r2,-1684
  40d504:	d0a79915 	stw	r2,-24988(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  40d508:	e037883a 	mov	sp,fp
  40d50c:	dfc00117 	ldw	ra,4(sp)
  40d510:	df000017 	ldw	fp,0(sp)
  40d514:	dec00204 	addi	sp,sp,8
  40d518:	f800283a 	ret

0040d51c <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  40d51c:	deffff04 	addi	sp,sp,-4
  40d520:	df000015 	stw	fp,0(sp)
  40d524:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  40d528:	d0279c15 	stw	zero,-24976(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  40d52c:	d0279a05 	stb	zero,-24984(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  40d530:	d0278c05 	stb	zero,-25040(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  40d534:	d0279445 	stb	zero,-25007(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  40d538:	d0278c45 	stb	zero,-25039(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  40d53c:	d0279115 	stw	zero,-25020(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  40d540:	d0278d15 	stw	zero,-25036(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  40d544:	d0279f15 	stw	zero,-24964(gp)
    OSIdleCtrMax  = 0L;
  40d548:	d0279215 	stw	zero,-25016(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  40d54c:	d0279e05 	stb	zero,-24968(gp)
#endif
}
  40d550:	e037883a 	mov	sp,fp
  40d554:	df000017 	ldw	fp,0(sp)
  40d558:	dec00104 	addi	sp,sp,4
  40d55c:	f800283a 	ret

0040d560 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  40d560:	defffd04 	addi	sp,sp,-12
  40d564:	df000215 	stw	fp,8(sp)
  40d568:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  40d56c:	d0279805 	stb	zero,-24992(gp)
    prdytbl       = &OSRdyTbl[0];
  40d570:	d0a79844 	addi	r2,gp,-24991
  40d574:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  40d578:	e03ffe05 	stb	zero,-8(fp)
  40d57c:	00000806 	br	40d5a0 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  40d580:	e0bfff17 	ldw	r2,-4(fp)
  40d584:	10000005 	stb	zero,0(r2)
  40d588:	e0bfff17 	ldw	r2,-4(fp)
  40d58c:	10800044 	addi	r2,r2,1
  40d590:	e0bfff15 	stw	r2,-4(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  40d594:	e0bffe03 	ldbu	r2,-8(fp)
  40d598:	10800044 	addi	r2,r2,1
  40d59c:	e0bffe05 	stb	r2,-8(fp)
  40d5a0:	e0bffe03 	ldbu	r2,-8(fp)
  40d5a4:	108000f0 	cmpltui	r2,r2,3
  40d5a8:	103ff51e 	bne	r2,zero,40d580 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  40d5ac:	d0278e45 	stb	zero,-25031(gp)
    OSPrioHighRdy = 0;
  40d5b0:	d0278e05 	stb	zero,-25032(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  40d5b4:	d0279615 	stw	zero,-25000(gp)
    OSTCBCur      = (OS_TCB *)0;
  40d5b8:	d0279b15 	stw	zero,-24980(gp)
}
  40d5bc:	e037883a 	mov	sp,fp
  40d5c0:	df000017 	ldw	fp,0(sp)
  40d5c4:	dec00104 	addi	sp,sp,4
  40d5c8:	f800283a 	ret

0040d5cc <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  40d5cc:	defff804 	addi	sp,sp,-32
  40d5d0:	dfc00715 	stw	ra,28(sp)
  40d5d4:	df000615 	stw	fp,24(sp)
  40d5d8:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  40d5dc:	00bfffd4 	movui	r2,65535
  40d5e0:	d8800015 	stw	r2,0(sp)
  40d5e4:	008010b4 	movhi	r2,66
  40d5e8:	10bc5b04 	addi	r2,r2,-3732
  40d5ec:	d8800115 	stw	r2,4(sp)
  40d5f0:	00808004 	movi	r2,512
  40d5f4:	d8800215 	stw	r2,8(sp)
  40d5f8:	d8000315 	stw	zero,12(sp)
  40d5fc:	008000c4 	movi	r2,3
  40d600:	d8800415 	stw	r2,16(sp)
  40d604:	01001074 	movhi	r4,65
  40d608:	2136a704 	addi	r4,r4,-9572
  40d60c:	000b883a 	mov	r5,zero
  40d610:	018010b4 	movhi	r6,66
  40d614:	31be5a04 	addi	r6,r6,-1688
  40d618:	01c00504 	movi	r7,20
  40d61c:	04135600 	call	413560 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  40d620:	01000504 	movi	r4,20
  40d624:	014010b4 	movhi	r5,66
  40d628:	2966d604 	addi	r5,r5,-25768
  40d62c:	e1bfff04 	addi	r6,fp,-4
  40d630:	04140c40 	call	4140c4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  40d634:	e037883a 	mov	sp,fp
  40d638:	dfc00117 	ldw	ra,4(sp)
  40d63c:	df000017 	ldw	fp,0(sp)
  40d640:	dec00204 	addi	sp,sp,8
  40d644:	f800283a 	ret

0040d648 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  40d648:	defff804 	addi	sp,sp,-32
  40d64c:	dfc00715 	stw	ra,28(sp)
  40d650:	df000615 	stw	fp,24(sp)
  40d654:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  40d658:	00bfff94 	movui	r2,65534
  40d65c:	d8800015 	stw	r2,0(sp)
  40d660:	008010b4 	movhi	r2,66
  40d664:	10b9e304 	addi	r2,r2,-6260
  40d668:	d8800115 	stw	r2,4(sp)
  40d66c:	00808004 	movi	r2,512
  40d670:	d8800215 	stw	r2,8(sp)
  40d674:	d8000315 	stw	zero,12(sp)
  40d678:	008000c4 	movi	r2,3
  40d67c:	d8800415 	stw	r2,16(sp)
  40d680:	01001074 	movhi	r4,65
  40d684:	2136c904 	addi	r4,r4,-9436
  40d688:	000b883a 	mov	r5,zero
  40d68c:	018010b4 	movhi	r6,66
  40d690:	31bbe204 	addi	r6,r6,-4216
  40d694:	01c004c4 	movi	r7,19
  40d698:	04135600 	call	413560 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  40d69c:	010004c4 	movi	r4,19
  40d6a0:	014010b4 	movhi	r5,66
  40d6a4:	2966da04 	addi	r5,r5,-25752
  40d6a8:	e1bfff04 	addi	r6,fp,-4
  40d6ac:	04140c40 	call	4140c4 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  40d6b0:	e037883a 	mov	sp,fp
  40d6b4:	dfc00117 	ldw	ra,4(sp)
  40d6b8:	df000017 	ldw	fp,0(sp)
  40d6bc:	dec00204 	addi	sp,sp,8
  40d6c0:	f800283a 	ret

0040d6c4 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  40d6c4:	defffb04 	addi	sp,sp,-20
  40d6c8:	dfc00415 	stw	ra,16(sp)
  40d6cc:	df000315 	stw	fp,12(sp)
  40d6d0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  40d6d4:	010010b4 	movhi	r4,66
  40d6d8:	21012b04 	addi	r4,r4,1196
  40d6dc:	01414404 	movi	r5,1296
  40d6e0:	040d7a40 	call	40d7a4 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  40d6e4:	010010b4 	movhi	r4,66
  40d6e8:	21026f04 	addi	r4,r4,2492
  40d6ec:	01401504 	movi	r5,84
  40d6f0:	040d7a40 	call	40d7a4 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  40d6f4:	008010b4 	movhi	r2,66
  40d6f8:	10812b04 	addi	r2,r2,1196
  40d6fc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  40d700:	008010b4 	movhi	r2,66
  40d704:	10814604 	addi	r2,r2,1304
  40d708:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  40d70c:	e03ffd05 	stb	zero,-12(fp)
  40d710:	00001106 	br	40d758 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  40d714:	e0bffe17 	ldw	r2,-8(fp)
  40d718:	e0ffff17 	ldw	r3,-4(fp)
  40d71c:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  40d720:	e0bffe17 	ldw	r2,-8(fp)
  40d724:	00c00fc4 	movi	r3,63
  40d728:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  40d72c:	e0bffe17 	ldw	r2,-8(fp)
  40d730:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  40d734:	e0bffe17 	ldw	r2,-8(fp)
  40d738:	10801b04 	addi	r2,r2,108
  40d73c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  40d740:	e0bfff17 	ldw	r2,-4(fp)
  40d744:	10801b04 	addi	r2,r2,108
  40d748:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  40d74c:	e0bffd03 	ldbu	r2,-12(fp)
  40d750:	10800044 	addi	r2,r2,1
  40d754:	e0bffd05 	stb	r2,-12(fp)
  40d758:	e0bffd03 	ldbu	r2,-12(fp)
  40d75c:	108002f0 	cmpltui	r2,r2,11
  40d760:	103fec1e 	bne	r2,zero,40d714 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  40d764:	e0bffe17 	ldw	r2,-8(fp)
  40d768:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  40d76c:	e0bffe17 	ldw	r2,-8(fp)
  40d770:	00c00fc4 	movi	r3,63
  40d774:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  40d778:	e0bffe17 	ldw	r2,-8(fp)
  40d77c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  40d780:	d0278f15 	stw	zero,-25028(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  40d784:	008010b4 	movhi	r2,66
  40d788:	10812b04 	addi	r2,r2,1196
  40d78c:	d0a79315 	stw	r2,-25012(gp)
}
  40d790:	e037883a 	mov	sp,fp
  40d794:	dfc00117 	ldw	ra,4(sp)
  40d798:	df000017 	ldw	fp,0(sp)
  40d79c:	dec00204 	addi	sp,sp,8
  40d7a0:	f800283a 	ret

0040d7a4 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  40d7a4:	defffd04 	addi	sp,sp,-12
  40d7a8:	df000215 	stw	fp,8(sp)
  40d7ac:	df000204 	addi	fp,sp,8
  40d7b0:	e13ffe15 	stw	r4,-8(fp)
  40d7b4:	2805883a 	mov	r2,r5
  40d7b8:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  40d7bc:	00000806 	br	40d7e0 <OS_MemClr+0x3c>
        *pdest++ = (INT8U)0;
  40d7c0:	e0bffe17 	ldw	r2,-8(fp)
  40d7c4:	10000005 	stb	zero,0(r2)
  40d7c8:	e0bffe17 	ldw	r2,-8(fp)
  40d7cc:	10800044 	addi	r2,r2,1
  40d7d0:	e0bffe15 	stw	r2,-8(fp)
        size--;
  40d7d4:	e0bfff0b 	ldhu	r2,-4(fp)
  40d7d8:	10bfffc4 	addi	r2,r2,-1
  40d7dc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  40d7e0:	e0bfff0b 	ldhu	r2,-4(fp)
  40d7e4:	103ff61e 	bne	r2,zero,40d7c0 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  40d7e8:	e037883a 	mov	sp,fp
  40d7ec:	df000017 	ldw	fp,0(sp)
  40d7f0:	dec00104 	addi	sp,sp,4
  40d7f4:	f800283a 	ret

0040d7f8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  40d7f8:	defffc04 	addi	sp,sp,-16
  40d7fc:	df000315 	stw	fp,12(sp)
  40d800:	df000304 	addi	fp,sp,12
  40d804:	e13ffd15 	stw	r4,-12(fp)
  40d808:	e17ffe15 	stw	r5,-8(fp)
  40d80c:	3005883a 	mov	r2,r6
  40d810:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
  40d814:	00000d06 	br	40d84c <OS_MemCopy+0x54>
        *pdest++ = *psrc++;
  40d818:	e0bffe17 	ldw	r2,-8(fp)
  40d81c:	10c00003 	ldbu	r3,0(r2)
  40d820:	e0bffd17 	ldw	r2,-12(fp)
  40d824:	10c00005 	stb	r3,0(r2)
  40d828:	e0bffd17 	ldw	r2,-12(fp)
  40d82c:	10800044 	addi	r2,r2,1
  40d830:	e0bffd15 	stw	r2,-12(fp)
  40d834:	e0bffe17 	ldw	r2,-8(fp)
  40d838:	10800044 	addi	r2,r2,1
  40d83c:	e0bffe15 	stw	r2,-8(fp)
        size--;
  40d840:	e0bfff0b 	ldhu	r2,-4(fp)
  40d844:	10bfffc4 	addi	r2,r2,-1
  40d848:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  40d84c:	e0bfff0b 	ldhu	r2,-4(fp)
  40d850:	103ff11e 	bne	r2,zero,40d818 <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
  40d854:	e037883a 	mov	sp,fp
  40d858:	df000017 	ldw	fp,0(sp)
  40d85c:	dec00104 	addi	sp,sp,4
  40d860:	f800283a 	ret

0040d864 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  40d864:	defffa04 	addi	sp,sp,-24
  40d868:	dfc00515 	stw	ra,20(sp)
  40d86c:	df000415 	stw	fp,16(sp)
  40d870:	df000404 	addi	fp,sp,16
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  40d874:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40d878:	0005303a 	rdctl	r2,status
  40d87c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40d880:	e0fffd17 	ldw	r3,-12(fp)
  40d884:	00bfff84 	movi	r2,-2
  40d888:	1884703a 	and	r2,r3,r2
  40d88c:	1001703a 	wrctl	status,r2
  
  return context;
  40d890:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  40d894:	e0bffc15 	stw	r2,-16(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  40d898:	d0a79a03 	ldbu	r2,-24984(gp)
  40d89c:	10803fcc 	andi	r2,r2,255
  40d8a0:	10001a1e 	bne	r2,zero,40d90c <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  40d8a4:	d0a78c03 	ldbu	r2,-25040(gp)
  40d8a8:	10803fcc 	andi	r2,r2,255
  40d8ac:	1000171e 	bne	r2,zero,40d90c <OS_Sched+0xa8>
            OS_SchedNew();
  40d8b0:	040d95c0 	call	40d95c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  40d8b4:	d0e78e03 	ldbu	r3,-25032(gp)
  40d8b8:	d0a78e43 	ldbu	r2,-25031(gp)
  40d8bc:	18c03fcc 	andi	r3,r3,255
  40d8c0:	10803fcc 	andi	r2,r2,255
  40d8c4:	18801126 	beq	r3,r2,40d90c <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  40d8c8:	d0a78e03 	ldbu	r2,-25032(gp)
  40d8cc:	10803fcc 	andi	r2,r2,255
  40d8d0:	00c010b4 	movhi	r3,66
  40d8d4:	18c26f04 	addi	r3,r3,2492
  40d8d8:	1085883a 	add	r2,r2,r2
  40d8dc:	1085883a 	add	r2,r2,r2
  40d8e0:	1885883a 	add	r2,r3,r2
  40d8e4:	10800017 	ldw	r2,0(r2)
  40d8e8:	d0a79615 	stw	r2,-25000(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  40d8ec:	d0a79617 	ldw	r2,-25000(gp)
  40d8f0:	10c00e17 	ldw	r3,56(r2)
  40d8f4:	18c00044 	addi	r3,r3,1
  40d8f8:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  40d8fc:	d0a79117 	ldw	r2,-25020(gp)
  40d900:	10800044 	addi	r2,r2,1
  40d904:	d0a79115 	stw	r2,-25020(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  40d908:	0418b140 	call	418b14 <OSCtxSw>
  40d90c:	e0bffc17 	ldw	r2,-16(fp)
  40d910:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40d914:	0005303a 	rdctl	r2,status
  40d918:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40d91c:	e0ffff17 	ldw	r3,-4(fp)
  40d920:	00bfff84 	movi	r2,-2
  40d924:	1884703a 	and	r2,r3,r2
  40d928:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40d92c:	e0bffe17 	ldw	r2,-8(fp)
  40d930:	1080004c 	andi	r2,r2,1
  40d934:	e0ffff17 	ldw	r3,-4(fp)
  40d938:	1884b03a 	or	r2,r3,r2
  40d93c:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  40d940:	e0bfff17 	ldw	r2,-4(fp)
  40d944:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  40d948:	e037883a 	mov	sp,fp
  40d94c:	dfc00117 	ldw	ra,4(sp)
  40d950:	df000017 	ldw	fp,0(sp)
  40d954:	dec00204 	addi	sp,sp,8
  40d958:	f800283a 	ret

0040d95c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  40d95c:	defffe04 	addi	sp,sp,-8
  40d960:	df000115 	stw	fp,4(sp)
  40d964:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  40d968:	d0a79803 	ldbu	r2,-24992(gp)
  40d96c:	10803fcc 	andi	r2,r2,255
  40d970:	00c010b4 	movhi	r3,66
  40d974:	18e69604 	addi	r3,r3,-26024
  40d978:	1885883a 	add	r2,r3,r2
  40d97c:	10800003 	ldbu	r2,0(r2)
  40d980:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  40d984:	e0bfff03 	ldbu	r2,-4(fp)
  40d988:	100490fa 	slli	r2,r2,3
  40d98c:	1007883a 	mov	r3,r2
  40d990:	e13fff03 	ldbu	r4,-4(fp)
  40d994:	d0a79844 	addi	r2,gp,-24991
  40d998:	2085883a 	add	r2,r4,r2
  40d99c:	10800003 	ldbu	r2,0(r2)
  40d9a0:	10803fcc 	andi	r2,r2,255
  40d9a4:	010010b4 	movhi	r4,66
  40d9a8:	21269604 	addi	r4,r4,-26024
  40d9ac:	2085883a 	add	r2,r4,r2
  40d9b0:	10800003 	ldbu	r2,0(r2)
  40d9b4:	1885883a 	add	r2,r3,r2
  40d9b8:	d0a78e05 	stb	r2,-25032(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  40d9bc:	e037883a 	mov	sp,fp
  40d9c0:	df000017 	ldw	fp,0(sp)
  40d9c4:	dec00104 	addi	sp,sp,4
  40d9c8:	f800283a 	ret

0040d9cc <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  40d9cc:	defffc04 	addi	sp,sp,-16
  40d9d0:	df000315 	stw	fp,12(sp)
  40d9d4:	df000304 	addi	fp,sp,12
  40d9d8:	e13ffe15 	stw	r4,-8(fp)
  40d9dc:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  40d9e0:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  40d9e4:	00000d06 	br	40da1c <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  40d9e8:	e0bfff17 	ldw	r2,-4(fp)
  40d9ec:	10c00003 	ldbu	r3,0(r2)
  40d9f0:	e0bffe17 	ldw	r2,-8(fp)
  40d9f4:	10c00005 	stb	r3,0(r2)
  40d9f8:	e0bffe17 	ldw	r2,-8(fp)
  40d9fc:	10800044 	addi	r2,r2,1
  40da00:	e0bffe15 	stw	r2,-8(fp)
  40da04:	e0bfff17 	ldw	r2,-4(fp)
  40da08:	10800044 	addi	r2,r2,1
  40da0c:	e0bfff15 	stw	r2,-4(fp)
        len++;
  40da10:	e0bffd03 	ldbu	r2,-12(fp)
  40da14:	10800044 	addi	r2,r2,1
  40da18:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  40da1c:	e0bfff17 	ldw	r2,-4(fp)
  40da20:	10800003 	ldbu	r2,0(r2)
  40da24:	10803fcc 	andi	r2,r2,255
  40da28:	103fef1e 	bne	r2,zero,40d9e8 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  40da2c:	e0bffe17 	ldw	r2,-8(fp)
  40da30:	10000005 	stb	zero,0(r2)
    return (len);
  40da34:	e0bffd03 	ldbu	r2,-12(fp)
}
  40da38:	e037883a 	mov	sp,fp
  40da3c:	df000017 	ldw	fp,0(sp)
  40da40:	dec00104 	addi	sp,sp,4
  40da44:	f800283a 	ret

0040da48 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  40da48:	defffd04 	addi	sp,sp,-12
  40da4c:	df000215 	stw	fp,8(sp)
  40da50:	df000204 	addi	fp,sp,8
  40da54:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  40da58:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  40da5c:	00000606 	br	40da78 <OS_StrLen+0x30>
        psrc++;
  40da60:	e0bfff17 	ldw	r2,-4(fp)
  40da64:	10800044 	addi	r2,r2,1
  40da68:	e0bfff15 	stw	r2,-4(fp)
        len++;
  40da6c:	e0bffe03 	ldbu	r2,-8(fp)
  40da70:	10800044 	addi	r2,r2,1
  40da74:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  40da78:	e0bfff17 	ldw	r2,-4(fp)
  40da7c:	10800003 	ldbu	r2,0(r2)
  40da80:	10803fcc 	andi	r2,r2,255
  40da84:	103ff61e 	bne	r2,zero,40da60 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  40da88:	e0bffe03 	ldbu	r2,-8(fp)
}
  40da8c:	e037883a 	mov	sp,fp
  40da90:	df000017 	ldw	fp,0(sp)
  40da94:	dec00104 	addi	sp,sp,4
  40da98:	f800283a 	ret

0040da9c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  40da9c:	defff904 	addi	sp,sp,-28
  40daa0:	dfc00615 	stw	ra,24(sp)
  40daa4:	df000515 	stw	fp,20(sp)
  40daa8:	df000504 	addi	fp,sp,20
  40daac:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  40dab0:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40dab4:	0005303a 	rdctl	r2,status
  40dab8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40dabc:	e0fffc17 	ldw	r3,-16(fp)
  40dac0:	00bfff84 	movi	r2,-2
  40dac4:	1884703a 	and	r2,r3,r2
  40dac8:	1001703a 	wrctl	status,r2
  
  return context;
  40dacc:	e0bffc17 	ldw	r2,-16(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  40dad0:	e0bffb15 	stw	r2,-20(fp)
        OSIdleCtr++;
  40dad4:	d0a78d17 	ldw	r2,-25036(gp)
  40dad8:	10800044 	addi	r2,r2,1
  40dadc:	d0a78d15 	stw	r2,-25036(gp)
  40dae0:	e0bffb17 	ldw	r2,-20(fp)
  40dae4:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40dae8:	0005303a 	rdctl	r2,status
  40daec:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40daf0:	e0fffe17 	ldw	r3,-8(fp)
  40daf4:	00bfff84 	movi	r2,-2
  40daf8:	1884703a 	and	r2,r3,r2
  40dafc:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40db00:	e0bffd17 	ldw	r2,-12(fp)
  40db04:	1080004c 	andi	r2,r2,1
  40db08:	e0fffe17 	ldw	r3,-8(fp)
  40db0c:	1884b03a 	or	r2,r3,r2
  40db10:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  40db14:	e0bffe17 	ldw	r2,-8(fp)
  40db18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  40db1c:	0418fa40 	call	418fa4 <OSTaskIdleHook>
    }
  40db20:	003fe406 	br	40dab4 <OS_TaskIdle+0x18>

0040db24 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  40db24:	defff904 	addi	sp,sp,-28
  40db28:	dfc00615 	stw	ra,24(sp)
  40db2c:	df000515 	stw	fp,20(sp)
  40db30:	df000504 	addi	fp,sp,20
  40db34:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  40db38:	e03ffb15 	stw	zero,-20(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  40db3c:	00000206 	br	40db48 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  40db40:	01000504 	movi	r4,20
  40db44:	0414d6c0 	call	414d6c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  40db48:	d0a79e03 	ldbu	r2,-24968(gp)
  40db4c:	10803fcc 	andi	r2,r2,255
  40db50:	103ffb26 	beq	r2,zero,40db40 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  40db54:	d0a79217 	ldw	r2,-25016(gp)
  40db58:	1009883a 	mov	r4,r2
  40db5c:	01401904 	movi	r5,100
  40db60:	040a14c0 	call	40a14c <__udivsi3>
  40db64:	d0a79215 	stw	r2,-25016(gp)
    if (OSIdleCtrMax == 0L) {
  40db68:	d0a79217 	ldw	r2,-25016(gp)
  40db6c:	1000031e 	bne	r2,zero,40db7c <OS_TaskStat+0x58>
        OSCPUUsage = 0;
  40db70:	d0279405 	stb	zero,-25008(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  40db74:	01003fc4 	movi	r4,255
  40db78:	04148b80 	call	4148b8 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40db7c:	0005303a 	rdctl	r2,status
  40db80:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40db84:	e0fffc17 	ldw	r3,-16(fp)
  40db88:	00bfff84 	movi	r2,-2
  40db8c:	1884703a 	and	r2,r3,r2
  40db90:	1001703a 	wrctl	status,r2
  
  return context;
  40db94:	e0bffc17 	ldw	r2,-16(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  40db98:	e0bffb15 	stw	r2,-20(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  40db9c:	d0a78d17 	ldw	r2,-25036(gp)
  40dba0:	d0a79f15 	stw	r2,-24964(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  40dba4:	d0278d15 	stw	zero,-25036(gp)
  40dba8:	e0bffb17 	ldw	r2,-20(fp)
  40dbac:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40dbb0:	0005303a 	rdctl	r2,status
  40dbb4:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40dbb8:	e0fffe17 	ldw	r3,-8(fp)
  40dbbc:	00bfff84 	movi	r2,-2
  40dbc0:	1884703a 	and	r2,r3,r2
  40dbc4:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40dbc8:	e0bffd17 	ldw	r2,-12(fp)
  40dbcc:	1080004c 	andi	r2,r2,1
  40dbd0:	e0fffe17 	ldw	r3,-8(fp)
  40dbd4:	1884b03a 	or	r2,r3,r2
  40dbd8:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  40dbdc:	e0bffe17 	ldw	r2,-8(fp)
  40dbe0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  40dbe4:	d0e79f17 	ldw	r3,-24964(gp)
  40dbe8:	d0a79217 	ldw	r2,-25016(gp)
  40dbec:	1809883a 	mov	r4,r3
  40dbf0:	100b883a 	mov	r5,r2
  40dbf4:	040a14c0 	call	40a14c <__udivsi3>
  40dbf8:	00c01904 	movi	r3,100
  40dbfc:	1885c83a 	sub	r2,r3,r2
  40dc00:	d0a79405 	stb	r2,-25008(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  40dc04:	0418f340 	call	418f34 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  40dc08:	040dc180 	call	40dc18 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  40dc0c:	01000284 	movi	r4,10
  40dc10:	0414d6c0 	call	414d6c <OSTimeDly>
    }
  40dc14:	003fd906 	br	40db7c <OS_TaskStat+0x58>

0040dc18 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  40dc18:	defffa04 	addi	sp,sp,-24
  40dc1c:	dfc00515 	stw	ra,20(sp)
  40dc20:	df000415 	stw	fp,16(sp)
  40dc24:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  40dc28:	e03ffc05 	stb	zero,-16(fp)
  40dc2c:	00002406 	br	40dcc0 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  40dc30:	e0fffc03 	ldbu	r3,-16(fp)
  40dc34:	e0bffe04 	addi	r2,fp,-8
  40dc38:	1809883a 	mov	r4,r3
  40dc3c:	100b883a 	mov	r5,r2
  40dc40:	04146340 	call	414634 <OSTaskStkChk>
  40dc44:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  40dc48:	e0bffc43 	ldbu	r2,-15(fp)
  40dc4c:	1000191e 	bne	r2,zero,40dcb4 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  40dc50:	e0bffc03 	ldbu	r2,-16(fp)
  40dc54:	00c010b4 	movhi	r3,66
  40dc58:	18c26f04 	addi	r3,r3,2492
  40dc5c:	1085883a 	add	r2,r2,r2
  40dc60:	1085883a 	add	r2,r2,r2
  40dc64:	1885883a 	add	r2,r3,r2
  40dc68:	10800017 	ldw	r2,0(r2)
  40dc6c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  40dc70:	e0bffd17 	ldw	r2,-12(fp)
  40dc74:	10000f26 	beq	r2,zero,40dcb4 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  40dc78:	e0bffd17 	ldw	r2,-12(fp)
  40dc7c:	10800060 	cmpeqi	r2,r2,1
  40dc80:	10000c1e 	bne	r2,zero,40dcb4 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  40dc84:	e0bffd17 	ldw	r2,-12(fp)
  40dc88:	10c00217 	ldw	r3,8(r2)
  40dc8c:	e0bffd17 	ldw	r2,-12(fp)
  40dc90:	10800317 	ldw	r2,12(r2)
  40dc94:	1085883a 	add	r2,r2,r2
  40dc98:	1085883a 	add	r2,r2,r2
  40dc9c:	1887883a 	add	r3,r3,r2
  40dca0:	e0bffd17 	ldw	r2,-12(fp)
  40dca4:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  40dca8:	e0ffff17 	ldw	r3,-4(fp)
  40dcac:	e0bffd17 	ldw	r2,-12(fp)
  40dcb0:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  40dcb4:	e0bffc03 	ldbu	r2,-16(fp)
  40dcb8:	10800044 	addi	r2,r2,1
  40dcbc:	e0bffc05 	stb	r2,-16(fp)
  40dcc0:	e0bffc03 	ldbu	r2,-16(fp)
  40dcc4:	10800570 	cmpltui	r2,r2,21
  40dcc8:	103fd91e 	bne	r2,zero,40dc30 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  40dccc:	e037883a 	mov	sp,fp
  40dcd0:	dfc00117 	ldw	ra,4(sp)
  40dcd4:	df000017 	ldw	fp,0(sp)
  40dcd8:	dec00204 	addi	sp,sp,8
  40dcdc:	f800283a 	ret

0040dce0 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  40dce0:	deffef04 	addi	sp,sp,-68
  40dce4:	dfc01015 	stw	ra,64(sp)
  40dce8:	df000f15 	stw	fp,60(sp)
  40dcec:	df000f04 	addi	fp,sp,60
  40dcf0:	2007883a 	mov	r3,r4
  40dcf4:	e17ffc15 	stw	r5,-16(fp)
  40dcf8:	e1bffd15 	stw	r6,-12(fp)
  40dcfc:	3805883a 	mov	r2,r7
  40dd00:	e1000417 	ldw	r4,16(fp)
  40dd04:	e0fffb05 	stb	r3,-20(fp)
  40dd08:	e0bffe0d 	sth	r2,-8(fp)
  40dd0c:	e13fff0d 	sth	r4,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  40dd10:	e03ff115 	stw	zero,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40dd14:	0005303a 	rdctl	r2,status
  40dd18:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40dd1c:	e0fff317 	ldw	r3,-52(fp)
  40dd20:	00bfff84 	movi	r2,-2
  40dd24:	1884703a 	and	r2,r3,r2
  40dd28:	1001703a 	wrctl	status,r2
  
  return context;
  40dd2c:	e0bff317 	ldw	r2,-52(fp)
#endif



    OS_ENTER_CRITICAL();
  40dd30:	e0bff115 	stw	r2,-60(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  40dd34:	d0a79317 	ldw	r2,-25012(gp)
  40dd38:	e0bff215 	stw	r2,-56(fp)
    if (ptcb != (OS_TCB *)0) {
  40dd3c:	e0bff217 	ldw	r2,-56(fp)
  40dd40:	1000a926 	beq	r2,zero,40dfe8 <OS_TCBInit+0x308>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  40dd44:	e0bff217 	ldw	r2,-56(fp)
  40dd48:	10800517 	ldw	r2,20(r2)
  40dd4c:	d0a79315 	stw	r2,-25012(gp)
  40dd50:	e0bff117 	ldw	r2,-60(fp)
  40dd54:	e0bff415 	stw	r2,-48(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40dd58:	0005303a 	rdctl	r2,status
  40dd5c:	e0bff515 	stw	r2,-44(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40dd60:	e0fff517 	ldw	r3,-44(fp)
  40dd64:	00bfff84 	movi	r2,-2
  40dd68:	1884703a 	and	r2,r3,r2
  40dd6c:	e0bff515 	stw	r2,-44(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40dd70:	e0bff417 	ldw	r2,-48(fp)
  40dd74:	1080004c 	andi	r2,r2,1
  40dd78:	e0fff517 	ldw	r3,-44(fp)
  40dd7c:	1884b03a 	or	r2,r3,r2
  40dd80:	e0bff515 	stw	r2,-44(fp)
  
  NIOS2_WRITE_STATUS (status);
  40dd84:	e0bff517 	ldw	r2,-44(fp)
  40dd88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  40dd8c:	e0bff217 	ldw	r2,-56(fp)
  40dd90:	e0fffc17 	ldw	r3,-16(fp)
  40dd94:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  40dd98:	e0bff217 	ldw	r2,-56(fp)
  40dd9c:	e0fffb03 	ldbu	r3,-20(fp)
  40dda0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  40dda4:	e0bff217 	ldw	r2,-56(fp)
  40dda8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  40ddac:	e0bff217 	ldw	r2,-56(fp)
  40ddb0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  40ddb4:	e0bff217 	ldw	r2,-56(fp)
  40ddb8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  40ddbc:	e0bff217 	ldw	r2,-56(fp)
  40ddc0:	e0c00317 	ldw	r3,12(fp)
  40ddc4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  40ddc8:	e0bff217 	ldw	r2,-56(fp)
  40ddcc:	e0c00217 	ldw	r3,8(fp)
  40ddd0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  40ddd4:	e0bff217 	ldw	r2,-56(fp)
  40ddd8:	e0fffd17 	ldw	r3,-12(fp)
  40dddc:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  40dde0:	e0bff217 	ldw	r2,-56(fp)
  40dde4:	e0ffff0b 	ldhu	r3,-4(fp)
  40dde8:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  40ddec:	e0bff217 	ldw	r2,-56(fp)
  40ddf0:	e0fffe0b 	ldhu	r3,-8(fp)
  40ddf4:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  40ddf8:	e0bff217 	ldw	r2,-56(fp)
  40ddfc:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  40de00:	e0bffb03 	ldbu	r2,-20(fp)
  40de04:	1004d0fa 	srli	r2,r2,3
  40de08:	1007883a 	mov	r3,r2
  40de0c:	e0bff217 	ldw	r2,-56(fp)
  40de10:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  40de14:	e0bffb03 	ldbu	r2,-20(fp)
  40de18:	108001cc 	andi	r2,r2,7
  40de1c:	1007883a 	mov	r3,r2
  40de20:	e0bff217 	ldw	r2,-56(fp)
  40de24:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  40de28:	e0bff217 	ldw	r2,-56(fp)
  40de2c:	10800d03 	ldbu	r2,52(r2)
  40de30:	10803fcc 	andi	r2,r2,255
  40de34:	00c00044 	movi	r3,1
  40de38:	1884983a 	sll	r2,r3,r2
  40de3c:	1007883a 	mov	r3,r2
  40de40:	e0bff217 	ldw	r2,-56(fp)
  40de44:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  40de48:	e0bff217 	ldw	r2,-56(fp)
  40de4c:	10800cc3 	ldbu	r2,51(r2)
  40de50:	10803fcc 	andi	r2,r2,255
  40de54:	00c00044 	movi	r3,1
  40de58:	1884983a 	sll	r2,r3,r2
  40de5c:	1007883a 	mov	r3,r2
  40de60:	e0bff217 	ldw	r2,-56(fp)
  40de64:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  40de68:	e0bff217 	ldw	r2,-56(fp)
  40de6c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  40de70:	e0bff217 	ldw	r2,-56(fp)
  40de74:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  40de78:	e0bff217 	ldw	r2,-56(fp)
  40de7c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  40de80:	e0bff217 	ldw	r2,-56(fp)
  40de84:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  40de88:	e0bff217 	ldw	r2,-56(fp)
  40de8c:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  40de90:	e0bff217 	ldw	r2,-56(fp)
  40de94:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  40de98:	e0bff217 	ldw	r2,-56(fp)
  40de9c:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  40dea0:	e0bff217 	ldw	r2,-56(fp)
  40dea4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  40dea8:	e0bff217 	ldw	r2,-56(fp)
  40deac:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  40deb0:	e0bff217 	ldw	r2,-56(fp)
  40deb4:	00c00fc4 	movi	r3,63
  40deb8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  40debc:	e0bff217 	ldw	r2,-56(fp)
  40dec0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  40dec4:	e13ff217 	ldw	r4,-56(fp)
  40dec8:	0418fc00 	call	418fc0 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  40decc:	e13ff217 	ldw	r4,-56(fp)
  40ded0:	0418ed80 	call	418ed8 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40ded4:	0005303a 	rdctl	r2,status
  40ded8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40dedc:	e0fff617 	ldw	r3,-40(fp)
  40dee0:	00bfff84 	movi	r2,-2
  40dee4:	1884703a 	and	r2,r3,r2
  40dee8:	1001703a 	wrctl	status,r2
  
  return context;
  40deec:	e0bff617 	ldw	r2,-40(fp)

        OS_ENTER_CRITICAL();
  40def0:	e0bff115 	stw	r2,-60(fp)
        OSTCBPrioTbl[prio] = ptcb;
  40def4:	e0bffb03 	ldbu	r2,-20(fp)
  40def8:	00c010b4 	movhi	r3,66
  40defc:	18c26f04 	addi	r3,r3,2492
  40df00:	1085883a 	add	r2,r2,r2
  40df04:	1085883a 	add	r2,r2,r2
  40df08:	1885883a 	add	r2,r3,r2
  40df0c:	e0fff217 	ldw	r3,-56(fp)
  40df10:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  40df14:	d0e78f17 	ldw	r3,-25028(gp)
  40df18:	e0bff217 	ldw	r2,-56(fp)
  40df1c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  40df20:	e0bff217 	ldw	r2,-56(fp)
  40df24:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  40df28:	d0a78f17 	ldw	r2,-25028(gp)
  40df2c:	10000326 	beq	r2,zero,40df3c <OS_TCBInit+0x25c>
            OSTCBList->OSTCBPrev = ptcb;
  40df30:	d0a78f17 	ldw	r2,-25028(gp)
  40df34:	e0fff217 	ldw	r3,-56(fp)
  40df38:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
  40df3c:	e0bff217 	ldw	r2,-56(fp)
  40df40:	d0a78f15 	stw	r2,-25028(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  40df44:	e0bff217 	ldw	r2,-56(fp)
  40df48:	10c00d83 	ldbu	r3,54(r2)
  40df4c:	d0a79803 	ldbu	r2,-24992(gp)
  40df50:	1884b03a 	or	r2,r3,r2
  40df54:	d0a79805 	stb	r2,-24992(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  40df58:	e0bff217 	ldw	r2,-56(fp)
  40df5c:	10800d03 	ldbu	r2,52(r2)
  40df60:	11003fcc 	andi	r4,r2,255
  40df64:	e0bff217 	ldw	r2,-56(fp)
  40df68:	10800d03 	ldbu	r2,52(r2)
  40df6c:	10c03fcc 	andi	r3,r2,255
  40df70:	d0a79844 	addi	r2,gp,-24991
  40df74:	1885883a 	add	r2,r3,r2
  40df78:	10c00003 	ldbu	r3,0(r2)
  40df7c:	e0bff217 	ldw	r2,-56(fp)
  40df80:	10800d43 	ldbu	r2,53(r2)
  40df84:	1884b03a 	or	r2,r3,r2
  40df88:	1007883a 	mov	r3,r2
  40df8c:	d0a79844 	addi	r2,gp,-24991
  40df90:	2085883a 	add	r2,r4,r2
  40df94:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  40df98:	d0a79443 	ldbu	r2,-25007(gp)
  40df9c:	10800044 	addi	r2,r2,1
  40dfa0:	d0a79445 	stb	r2,-25007(gp)
  40dfa4:	e0bff117 	ldw	r2,-60(fp)
  40dfa8:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40dfac:	0005303a 	rdctl	r2,status
  40dfb0:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40dfb4:	e0fff817 	ldw	r3,-32(fp)
  40dfb8:	00bfff84 	movi	r2,-2
  40dfbc:	1884703a 	and	r2,r3,r2
  40dfc0:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40dfc4:	e0bff717 	ldw	r2,-36(fp)
  40dfc8:	1080004c 	andi	r2,r2,1
  40dfcc:	e0fff817 	ldw	r3,-32(fp)
  40dfd0:	1884b03a 	or	r2,r3,r2
  40dfd4:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  40dfd8:	e0bff817 	ldw	r2,-32(fp)
  40dfdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  40dfe0:	0005883a 	mov	r2,zero
  40dfe4:	00001006 	br	40e028 <OS_TCBInit+0x348>
  40dfe8:	e0bff117 	ldw	r2,-60(fp)
  40dfec:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40dff0:	0005303a 	rdctl	r2,status
  40dff4:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40dff8:	e0fffa17 	ldw	r3,-24(fp)
  40dffc:	00bfff84 	movi	r2,-2
  40e000:	1884703a 	and	r2,r3,r2
  40e004:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40e008:	e0bff917 	ldw	r2,-28(fp)
  40e00c:	1080004c 	andi	r2,r2,1
  40e010:	e0fffa17 	ldw	r3,-24(fp)
  40e014:	1884b03a 	or	r2,r3,r2
  40e018:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  40e01c:	e0bffa17 	ldw	r2,-24(fp)
  40e020:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  40e024:	00801084 	movi	r2,66
}
  40e028:	e037883a 	mov	sp,fp
  40e02c:	dfc00117 	ldw	ra,4(sp)
  40e030:	df000017 	ldw	fp,0(sp)
  40e034:	dec00204 	addi	sp,sp,8
  40e038:	f800283a 	ret

0040e03c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  40e03c:	defffe04 	addi	sp,sp,-8
  40e040:	df000115 	stw	fp,4(sp)
  40e044:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  40e048:	d0a01504 	addi	r2,gp,-32684
  40e04c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  40e050:	d0a01604 	addi	r2,gp,-32680
  40e054:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  40e058:	d0a01784 	addi	r2,gp,-32674
  40e05c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  40e060:	d0a01804 	addi	r2,gp,-32672
  40e064:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  40e068:	d0a01704 	addi	r2,gp,-32676
  40e06c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  40e070:	d0a01884 	addi	r2,gp,-32670
  40e074:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  40e078:	d0a01904 	addi	r2,gp,-32668
  40e07c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  40e080:	d0a01984 	addi	r2,gp,-32666
  40e084:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  40e088:	d0a01a04 	addi	r2,gp,-32664
  40e08c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  40e090:	d0a01a84 	addi	r2,gp,-32662
  40e094:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  40e098:	d0a01b04 	addi	r2,gp,-32660
  40e09c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  40e0a0:	d0a01b84 	addi	r2,gp,-32658
  40e0a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  40e0a8:	d0a01c04 	addi	r2,gp,-32656
  40e0ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  40e0b0:	d0a01c84 	addi	r2,gp,-32654
  40e0b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  40e0b8:	d0a01d04 	addi	r2,gp,-32652
  40e0bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  40e0c0:	d0a01d84 	addi	r2,gp,-32650
  40e0c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  40e0c8:	d0a01e04 	addi	r2,gp,-32648
  40e0cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  40e0d0:	d0a01e84 	addi	r2,gp,-32646
  40e0d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  40e0d8:	d0a01f04 	addi	r2,gp,-32644
  40e0dc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  40e0e0:	d0a01f84 	addi	r2,gp,-32642
  40e0e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  40e0e8:	d0a02004 	addi	r2,gp,-32640
  40e0ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  40e0f0:	d0a02084 	addi	r2,gp,-32638
  40e0f4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  40e0f8:	d0a02104 	addi	r2,gp,-32636
  40e0fc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  40e100:	d0a02184 	addi	r2,gp,-32634
  40e104:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  40e108:	d0a02204 	addi	r2,gp,-32632
  40e10c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  40e110:	d0a02284 	addi	r2,gp,-32630
  40e114:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  40e118:	d0a02304 	addi	r2,gp,-32628
  40e11c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  40e120:	d0a02384 	addi	r2,gp,-32626
  40e124:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  40e128:	d0a02404 	addi	r2,gp,-32624
  40e12c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  40e130:	d0a02484 	addi	r2,gp,-32622
  40e134:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  40e138:	d0a02504 	addi	r2,gp,-32620
  40e13c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  40e140:	d0a02584 	addi	r2,gp,-32618
  40e144:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  40e148:	d0a02604 	addi	r2,gp,-32616
  40e14c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  40e150:	d0a02684 	addi	r2,gp,-32614
  40e154:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  40e158:	d0a02704 	addi	r2,gp,-32612
  40e15c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  40e160:	d0a02784 	addi	r2,gp,-32610
  40e164:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  40e168:	d0a02804 	addi	r2,gp,-32608
  40e16c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  40e170:	d0a02884 	addi	r2,gp,-32606
  40e174:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  40e178:	d0a02904 	addi	r2,gp,-32604
  40e17c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  40e180:	d0a02984 	addi	r2,gp,-32602
  40e184:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  40e188:	d0a02a04 	addi	r2,gp,-32600
  40e18c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  40e190:	d0a02a84 	addi	r2,gp,-32598
  40e194:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  40e198:	d0a02b04 	addi	r2,gp,-32596
  40e19c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  40e1a0:	d0a02b84 	addi	r2,gp,-32594
  40e1a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  40e1a8:	d0a02c04 	addi	r2,gp,-32592
  40e1ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  40e1b0:	d0a03104 	addi	r2,gp,-32572
  40e1b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  40e1b8:	e037883a 	mov	sp,fp
  40e1bc:	df000017 	ldw	fp,0(sp)
  40e1c0:	dec00104 	addi	sp,sp,4
  40e1c4:	f800283a 	ret

0040e1c8 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  40e1c8:	deffed04 	addi	sp,sp,-76
  40e1cc:	df001215 	stw	fp,72(sp)
  40e1d0:	df001204 	addi	fp,sp,72
  40e1d4:	e13ffc15 	stw	r4,-16(fp)
  40e1d8:	2807883a 	mov	r3,r5
  40e1dc:	3005883a 	mov	r2,r6
  40e1e0:	e1ffff15 	stw	r7,-4(fp)
  40e1e4:	e0fffd0d 	sth	r3,-12(fp)
  40e1e8:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  40e1ec:	e03fef15 	stw	zero,-68(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  40e1f0:	e0bfff17 	ldw	r2,-4(fp)
  40e1f4:	1000021e 	bne	r2,zero,40e200 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
  40e1f8:	0005883a 	mov	r2,zero
  40e1fc:	0000e706 	br	40e59c <OSFlagAccept+0x3d4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  40e200:	e0bffc17 	ldw	r2,-16(fp)
  40e204:	1000051e 	bne	r2,zero,40e21c <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  40e208:	e0bfff17 	ldw	r2,-4(fp)
  40e20c:	00c01b84 	movi	r3,110
  40e210:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  40e214:	0005883a 	mov	r2,zero
  40e218:	0000e006 	br	40e59c <OSFlagAccept+0x3d4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  40e21c:	e0bffc17 	ldw	r2,-16(fp)
  40e220:	10800003 	ldbu	r2,0(r2)
  40e224:	10803fcc 	andi	r2,r2,255
  40e228:	10800160 	cmpeqi	r2,r2,5
  40e22c:	1000051e 	bne	r2,zero,40e244 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  40e230:	e0bfff17 	ldw	r2,-4(fp)
  40e234:	00c00044 	movi	r3,1
  40e238:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  40e23c:	0005883a 	mov	r2,zero
  40e240:	0000d606 	br	40e59c <OSFlagAccept+0x3d4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  40e244:	e0fffe03 	ldbu	r3,-8(fp)
  40e248:	00bfe004 	movi	r2,-128
  40e24c:	1884703a 	and	r2,r3,r2
  40e250:	e0bff005 	stb	r2,-64(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  40e254:	e0bff003 	ldbu	r2,-64(fp)
  40e258:	10000626 	beq	r2,zero,40e274 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
  40e25c:	e0bffe03 	ldbu	r2,-8(fp)
  40e260:	10801fcc 	andi	r2,r2,127
  40e264:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  40e268:	00800044 	movi	r2,1
  40e26c:	e0bfee85 	stb	r2,-70(fp)
  40e270:	00000106 	br	40e278 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
  40e274:	e03fee85 	stb	zero,-70(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  40e278:	e0bfff17 	ldw	r2,-4(fp)
  40e27c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40e280:	0005303a 	rdctl	r2,status
  40e284:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40e288:	e0fff117 	ldw	r3,-60(fp)
  40e28c:	00bfff84 	movi	r2,-2
  40e290:	1884703a 	and	r2,r3,r2
  40e294:	1001703a 	wrctl	status,r2
  
  return context;
  40e298:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
  40e29c:	e0bfef15 	stw	r2,-68(fp)
    switch (wait_type) {
  40e2a0:	e0bffe03 	ldbu	r2,-8(fp)
  40e2a4:	10c00060 	cmpeqi	r3,r2,1
  40e2a8:	1800801e 	bne	r3,zero,40e4ac <OSFlagAccept+0x2e4>
  40e2ac:	10c00088 	cmpgei	r3,r2,2
  40e2b0:	1800021e 	bne	r3,zero,40e2bc <OSFlagAccept+0xf4>
  40e2b4:	10005526 	beq	r2,zero,40e40c <OSFlagAccept+0x244>
  40e2b8:	0000a306 	br	40e548 <OSFlagAccept+0x380>
  40e2bc:	10c000a0 	cmpeqi	r3,r2,2
  40e2c0:	1800031e 	bne	r3,zero,40e2d0 <OSFlagAccept+0x108>
  40e2c4:	108000e0 	cmpeqi	r2,r2,3
  40e2c8:	1000291e 	bne	r2,zero,40e370 <OSFlagAccept+0x1a8>
  40e2cc:	00009e06 	br	40e548 <OSFlagAccept+0x380>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  40e2d0:	e0bffc17 	ldw	r2,-16(fp)
  40e2d4:	10c0020b 	ldhu	r3,8(r2)
  40e2d8:	e0bffd0b 	ldhu	r2,-12(fp)
  40e2dc:	1884703a 	and	r2,r3,r2
  40e2e0:	e0bfee0d 	sth	r2,-72(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  40e2e4:	e0ffee0b 	ldhu	r3,-72(fp)
  40e2e8:	e0bffd0b 	ldhu	r2,-12(fp)
  40e2ec:	18800d1e 	bne	r3,r2,40e324 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  40e2f0:	e0bfee83 	ldbu	r2,-70(fp)
  40e2f4:	10800058 	cmpnei	r2,r2,1
  40e2f8:	10000d1e 	bne	r2,zero,40e330 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  40e2fc:	e0bffc17 	ldw	r2,-16(fp)
  40e300:	1080020b 	ldhu	r2,8(r2)
  40e304:	1007883a 	mov	r3,r2
  40e308:	e0bfee0b 	ldhu	r2,-72(fp)
  40e30c:	0084303a 	nor	r2,zero,r2
  40e310:	1884703a 	and	r2,r3,r2
  40e314:	1007883a 	mov	r3,r2
  40e318:	e0bffc17 	ldw	r2,-16(fp)
  40e31c:	10c0020d 	sth	r3,8(r2)
  40e320:	00000306 	br	40e330 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  40e324:	e0bfff17 	ldw	r2,-4(fp)
  40e328:	00c01c04 	movi	r3,112
  40e32c:	10c00005 	stb	r3,0(r2)
  40e330:	e0bfef17 	ldw	r2,-68(fp)
  40e334:	e0bff215 	stw	r2,-56(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40e338:	0005303a 	rdctl	r2,status
  40e33c:	e0bff315 	stw	r2,-52(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40e340:	e0fff317 	ldw	r3,-52(fp)
  40e344:	00bfff84 	movi	r2,-2
  40e348:	1884703a 	and	r2,r3,r2
  40e34c:	e0bff315 	stw	r2,-52(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40e350:	e0bff217 	ldw	r2,-56(fp)
  40e354:	1080004c 	andi	r2,r2,1
  40e358:	e0fff317 	ldw	r3,-52(fp)
  40e35c:	1884b03a 	or	r2,r3,r2
  40e360:	e0bff315 	stw	r2,-52(fp)
  
  NIOS2_WRITE_STATUS (status);
  40e364:	e0bff317 	ldw	r2,-52(fp)
  40e368:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  40e36c:	00008a06 	br	40e598 <OSFlagAccept+0x3d0>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  40e370:	e0bffc17 	ldw	r2,-16(fp)
  40e374:	10c0020b 	ldhu	r3,8(r2)
  40e378:	e0bffd0b 	ldhu	r2,-12(fp)
  40e37c:	1884703a 	and	r2,r3,r2
  40e380:	e0bfee0d 	sth	r2,-72(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  40e384:	e0bfee0b 	ldhu	r2,-72(fp)
  40e388:	10000d26 	beq	r2,zero,40e3c0 <OSFlagAccept+0x1f8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  40e38c:	e0bfee83 	ldbu	r2,-70(fp)
  40e390:	10800058 	cmpnei	r2,r2,1
  40e394:	10000d1e 	bne	r2,zero,40e3cc <OSFlagAccept+0x204>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  40e398:	e0bffc17 	ldw	r2,-16(fp)
  40e39c:	1080020b 	ldhu	r2,8(r2)
  40e3a0:	1007883a 	mov	r3,r2
  40e3a4:	e0bfee0b 	ldhu	r2,-72(fp)
  40e3a8:	0084303a 	nor	r2,zero,r2
  40e3ac:	1884703a 	and	r2,r3,r2
  40e3b0:	1007883a 	mov	r3,r2
  40e3b4:	e0bffc17 	ldw	r2,-16(fp)
  40e3b8:	10c0020d 	sth	r3,8(r2)
  40e3bc:	00000306 	br	40e3cc <OSFlagAccept+0x204>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  40e3c0:	e0bfff17 	ldw	r2,-4(fp)
  40e3c4:	00c01c04 	movi	r3,112
  40e3c8:	10c00005 	stb	r3,0(r2)
  40e3cc:	e0bfef17 	ldw	r2,-68(fp)
  40e3d0:	e0bff415 	stw	r2,-48(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40e3d4:	0005303a 	rdctl	r2,status
  40e3d8:	e0bff515 	stw	r2,-44(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40e3dc:	e0fff517 	ldw	r3,-44(fp)
  40e3e0:	00bfff84 	movi	r2,-2
  40e3e4:	1884703a 	and	r2,r3,r2
  40e3e8:	e0bff515 	stw	r2,-44(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40e3ec:	e0bff417 	ldw	r2,-48(fp)
  40e3f0:	1080004c 	andi	r2,r2,1
  40e3f4:	e0fff517 	ldw	r3,-44(fp)
  40e3f8:	1884b03a 	or	r2,r3,r2
  40e3fc:	e0bff515 	stw	r2,-44(fp)
  
  NIOS2_WRITE_STATUS (status);
  40e400:	e0bff517 	ldw	r2,-44(fp)
  40e404:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  40e408:	00006306 	br	40e598 <OSFlagAccept+0x3d0>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  40e40c:	e0bffc17 	ldw	r2,-16(fp)
  40e410:	1080020b 	ldhu	r2,8(r2)
  40e414:	0084303a 	nor	r2,zero,r2
  40e418:	1007883a 	mov	r3,r2
  40e41c:	e0bffd0b 	ldhu	r2,-12(fp)
  40e420:	1884703a 	and	r2,r3,r2
  40e424:	e0bfee0d 	sth	r2,-72(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  40e428:	e0ffee0b 	ldhu	r3,-72(fp)
  40e42c:	e0bffd0b 	ldhu	r2,-12(fp)
  40e430:	18800b1e 	bne	r3,r2,40e460 <OSFlagAccept+0x298>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  40e434:	e0bfee83 	ldbu	r2,-70(fp)
  40e438:	10800058 	cmpnei	r2,r2,1
  40e43c:	10000b1e 	bne	r2,zero,40e46c <OSFlagAccept+0x2a4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  40e440:	e0bffc17 	ldw	r2,-16(fp)
  40e444:	10c0020b 	ldhu	r3,8(r2)
  40e448:	e0bfee0b 	ldhu	r2,-72(fp)
  40e44c:	1884b03a 	or	r2,r3,r2
  40e450:	1007883a 	mov	r3,r2
  40e454:	e0bffc17 	ldw	r2,-16(fp)
  40e458:	10c0020d 	sth	r3,8(r2)
  40e45c:	00000306 	br	40e46c <OSFlagAccept+0x2a4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  40e460:	e0bfff17 	ldw	r2,-4(fp)
  40e464:	00c01c04 	movi	r3,112
  40e468:	10c00005 	stb	r3,0(r2)
  40e46c:	e0bfef17 	ldw	r2,-68(fp)
  40e470:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40e474:	0005303a 	rdctl	r2,status
  40e478:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40e47c:	e0fff717 	ldw	r3,-36(fp)
  40e480:	00bfff84 	movi	r2,-2
  40e484:	1884703a 	and	r2,r3,r2
  40e488:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40e48c:	e0bff617 	ldw	r2,-40(fp)
  40e490:	1080004c 	andi	r2,r2,1
  40e494:	e0fff717 	ldw	r3,-36(fp)
  40e498:	1884b03a 	or	r2,r3,r2
  40e49c:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  40e4a0:	e0bff717 	ldw	r2,-36(fp)
  40e4a4:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  40e4a8:	00003b06 	br	40e598 <OSFlagAccept+0x3d0>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  40e4ac:	e0bffc17 	ldw	r2,-16(fp)
  40e4b0:	1080020b 	ldhu	r2,8(r2)
  40e4b4:	0084303a 	nor	r2,zero,r2
  40e4b8:	1007883a 	mov	r3,r2
  40e4bc:	e0bffd0b 	ldhu	r2,-12(fp)
  40e4c0:	1884703a 	and	r2,r3,r2
  40e4c4:	e0bfee0d 	sth	r2,-72(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  40e4c8:	e0bfee0b 	ldhu	r2,-72(fp)
  40e4cc:	10000b26 	beq	r2,zero,40e4fc <OSFlagAccept+0x334>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  40e4d0:	e0bfee83 	ldbu	r2,-70(fp)
  40e4d4:	10800058 	cmpnei	r2,r2,1
  40e4d8:	10000b1e 	bne	r2,zero,40e508 <OSFlagAccept+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  40e4dc:	e0bffc17 	ldw	r2,-16(fp)
  40e4e0:	10c0020b 	ldhu	r3,8(r2)
  40e4e4:	e0bfee0b 	ldhu	r2,-72(fp)
  40e4e8:	1884b03a 	or	r2,r3,r2
  40e4ec:	1007883a 	mov	r3,r2
  40e4f0:	e0bffc17 	ldw	r2,-16(fp)
  40e4f4:	10c0020d 	sth	r3,8(r2)
  40e4f8:	00000306 	br	40e508 <OSFlagAccept+0x340>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  40e4fc:	e0bfff17 	ldw	r2,-4(fp)
  40e500:	00c01c04 	movi	r3,112
  40e504:	10c00005 	stb	r3,0(r2)
  40e508:	e0bfef17 	ldw	r2,-68(fp)
  40e50c:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40e510:	0005303a 	rdctl	r2,status
  40e514:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40e518:	e0fff917 	ldw	r3,-28(fp)
  40e51c:	00bfff84 	movi	r2,-2
  40e520:	1884703a 	and	r2,r3,r2
  40e524:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40e528:	e0bff817 	ldw	r2,-32(fp)
  40e52c:	1080004c 	andi	r2,r2,1
  40e530:	e0fff917 	ldw	r3,-28(fp)
  40e534:	1884b03a 	or	r2,r3,r2
  40e538:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  40e53c:	e0bff917 	ldw	r2,-28(fp)
  40e540:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  40e544:	00001406 	br	40e598 <OSFlagAccept+0x3d0>
  40e548:	e0bfef17 	ldw	r2,-68(fp)
  40e54c:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40e550:	0005303a 	rdctl	r2,status
  40e554:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40e558:	e0fffb17 	ldw	r3,-20(fp)
  40e55c:	00bfff84 	movi	r2,-2
  40e560:	1884703a 	and	r2,r3,r2
  40e564:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40e568:	e0bffa17 	ldw	r2,-24(fp)
  40e56c:	1080004c 	andi	r2,r2,1
  40e570:	e0fffb17 	ldw	r3,-20(fp)
  40e574:	1884b03a 	or	r2,r3,r2
  40e578:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  40e57c:	e0bffb17 	ldw	r2,-20(fp)
  40e580:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  40e584:	e03fee0d 	sth	zero,-72(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  40e588:	e0bfff17 	ldw	r2,-4(fp)
  40e58c:	00c01bc4 	movi	r3,111
  40e590:	10c00005 	stb	r3,0(r2)
             break;
  40e594:	0001883a 	nop
    }
    return (flags_rdy);
  40e598:	e0bfee0b 	ldhu	r2,-72(fp)
}
  40e59c:	e037883a 	mov	sp,fp
  40e5a0:	df000017 	ldw	fp,0(sp)
  40e5a4:	dec00104 	addi	sp,sp,4
  40e5a8:	f800283a 	ret

0040e5ac <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  40e5ac:	defff604 	addi	sp,sp,-40
  40e5b0:	df000915 	stw	fp,36(sp)
  40e5b4:	df000904 	addi	fp,sp,36
  40e5b8:	2005883a 	mov	r2,r4
  40e5bc:	e17fff15 	stw	r5,-4(fp)
  40e5c0:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  40e5c4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  40e5c8:	e0bfff17 	ldw	r2,-4(fp)
  40e5cc:	1000021e 	bne	r2,zero,40e5d8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  40e5d0:	0005883a 	mov	r2,zero
  40e5d4:	00005106 	br	40e71c <OSFlagCreate+0x170>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  40e5d8:	008010b4 	movhi	r2,66
  40e5dc:	10b59d04 	addi	r2,r2,-10636
  40e5e0:	10800003 	ldbu	r2,0(r2)
  40e5e4:	10803fcc 	andi	r2,r2,255
  40e5e8:	10000526 	beq	r2,zero,40e600 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  40e5ec:	e0bfff17 	ldw	r2,-4(fp)
  40e5f0:	00c00404 	movi	r3,16
  40e5f4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
  40e5f8:	0005883a 	mov	r2,zero
  40e5fc:	00004706 	br	40e71c <OSFlagCreate+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40e600:	0005303a 	rdctl	r2,status
  40e604:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40e608:	e0fff917 	ldw	r3,-28(fp)
  40e60c:	00bfff84 	movi	r2,-2
  40e610:	1884703a 	and	r2,r3,r2
  40e614:	1001703a 	wrctl	status,r2
  
  return context;
  40e618:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  40e61c:	e0bff715 	stw	r2,-36(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  40e620:	008010b4 	movhi	r2,66
  40e624:	10b5a004 	addi	r2,r2,-10624
  40e628:	10800017 	ldw	r2,0(r2)
  40e62c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  40e630:	e0bff817 	ldw	r2,-32(fp)
  40e634:	10002626 	beq	r2,zero,40e6d0 <OSFlagCreate+0x124>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  40e638:	008010b4 	movhi	r2,66
  40e63c:	10b5a004 	addi	r2,r2,-10624
  40e640:	10800017 	ldw	r2,0(r2)
  40e644:	10c00117 	ldw	r3,4(r2)
  40e648:	008010b4 	movhi	r2,66
  40e64c:	10b5a004 	addi	r2,r2,-10624
  40e650:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  40e654:	e0bff817 	ldw	r2,-32(fp)
  40e658:	00c00144 	movi	r3,5
  40e65c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  40e660:	e0bff817 	ldw	r2,-32(fp)
  40e664:	e0fffe0b 	ldhu	r3,-8(fp)
  40e668:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  40e66c:	e0bff817 	ldw	r2,-32(fp)
  40e670:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  40e674:	e0bff817 	ldw	r2,-32(fp)
  40e678:	00c00fc4 	movi	r3,63
  40e67c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  40e680:	e0bff817 	ldw	r2,-32(fp)
  40e684:	100002c5 	stb	zero,11(r2)
  40e688:	e0bff717 	ldw	r2,-36(fp)
  40e68c:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40e690:	0005303a 	rdctl	r2,status
  40e694:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40e698:	e0fffb17 	ldw	r3,-20(fp)
  40e69c:	00bfff84 	movi	r2,-2
  40e6a0:	1884703a 	and	r2,r3,r2
  40e6a4:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40e6a8:	e0bffa17 	ldw	r2,-24(fp)
  40e6ac:	1080004c 	andi	r2,r2,1
  40e6b0:	e0fffb17 	ldw	r3,-20(fp)
  40e6b4:	1884b03a 	or	r2,r3,r2
  40e6b8:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  40e6bc:	e0bffb17 	ldw	r2,-20(fp)
  40e6c0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  40e6c4:	e0bfff17 	ldw	r2,-4(fp)
  40e6c8:	10000005 	stb	zero,0(r2)
  40e6cc:	00001206 	br	40e718 <OSFlagCreate+0x16c>
  40e6d0:	e0bff717 	ldw	r2,-36(fp)
  40e6d4:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40e6d8:	0005303a 	rdctl	r2,status
  40e6dc:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40e6e0:	e0fffd17 	ldw	r3,-12(fp)
  40e6e4:	00bfff84 	movi	r2,-2
  40e6e8:	1884703a 	and	r2,r3,r2
  40e6ec:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40e6f0:	e0bffc17 	ldw	r2,-16(fp)
  40e6f4:	1080004c 	andi	r2,r2,1
  40e6f8:	e0fffd17 	ldw	r3,-12(fp)
  40e6fc:	1884b03a 	or	r2,r3,r2
  40e700:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  40e704:	e0bffd17 	ldw	r2,-12(fp)
  40e708:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  40e70c:	e0bfff17 	ldw	r2,-4(fp)
  40e710:	00c01c84 	movi	r3,114
  40e714:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  40e718:	e0bff817 	ldw	r2,-32(fp)
}
  40e71c:	e037883a 	mov	sp,fp
  40e720:	df000017 	ldw	fp,0(sp)
  40e724:	dec00104 	addi	sp,sp,4
  40e728:	f800283a 	ret

0040e72c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  40e72c:	deffee04 	addi	sp,sp,-72
  40e730:	dfc01115 	stw	ra,68(sp)
  40e734:	df001015 	stw	fp,64(sp)
  40e738:	df001004 	addi	fp,sp,64
  40e73c:	e13ffd15 	stw	r4,-12(fp)
  40e740:	2805883a 	mov	r2,r5
  40e744:	e1bfff15 	stw	r6,-4(fp)
  40e748:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  40e74c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  40e750:	e0bfff17 	ldw	r2,-4(fp)
  40e754:	1000021e 	bne	r2,zero,40e760 <OSFlagDel+0x34>
        return (pgrp);
  40e758:	e0bffd17 	ldw	r2,-12(fp)
  40e75c:	0000b606 	br	40ea38 <OSFlagDel+0x30c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  40e760:	e0bffd17 	ldw	r2,-12(fp)
  40e764:	1000051e 	bne	r2,zero,40e77c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  40e768:	e0bfff17 	ldw	r2,-4(fp)
  40e76c:	00c01b84 	movi	r3,110
  40e770:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  40e774:	e0bffd17 	ldw	r2,-12(fp)
  40e778:	0000af06 	br	40ea38 <OSFlagDel+0x30c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  40e77c:	008010b4 	movhi	r2,66
  40e780:	10b59d04 	addi	r2,r2,-10636
  40e784:	10800003 	ldbu	r2,0(r2)
  40e788:	10803fcc 	andi	r2,r2,255
  40e78c:	10000526 	beq	r2,zero,40e7a4 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  40e790:	e0bfff17 	ldw	r2,-4(fp)
  40e794:	00c003c4 	movi	r3,15
  40e798:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  40e79c:	e0bffd17 	ldw	r2,-12(fp)
  40e7a0:	0000a506 	br	40ea38 <OSFlagDel+0x30c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  40e7a4:	e0bffd17 	ldw	r2,-12(fp)
  40e7a8:	10800003 	ldbu	r2,0(r2)
  40e7ac:	10803fcc 	andi	r2,r2,255
  40e7b0:	10800160 	cmpeqi	r2,r2,5
  40e7b4:	1000051e 	bne	r2,zero,40e7cc <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
  40e7b8:	e0bfff17 	ldw	r2,-4(fp)
  40e7bc:	00c00044 	movi	r3,1
  40e7c0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
  40e7c4:	e0bffd17 	ldw	r2,-12(fp)
  40e7c8:	00009b06 	br	40ea38 <OSFlagDel+0x30c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40e7cc:	0005303a 	rdctl	r2,status
  40e7d0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40e7d4:	e0fff417 	ldw	r3,-48(fp)
  40e7d8:	00bfff84 	movi	r2,-2
  40e7dc:	1884703a 	and	r2,r3,r2
  40e7e0:	1001703a 	wrctl	status,r2
  
  return context;
  40e7e4:	e0bff417 	ldw	r2,-48(fp)
    }
    OS_ENTER_CRITICAL();
  40e7e8:	e0bff315 	stw	r2,-52(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  40e7ec:	e0bffd17 	ldw	r2,-12(fp)
  40e7f0:	10800117 	ldw	r2,4(r2)
  40e7f4:	10000326 	beq	r2,zero,40e804 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  40e7f8:	00800044 	movi	r2,1
  40e7fc:	e0bff005 	stb	r2,-64(fp)
  40e800:	00000106 	br	40e808 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  40e804:	e03ff005 	stb	zero,-64(fp)
    }
    switch (opt) {
  40e808:	e0bffe03 	ldbu	r2,-8(fp)
  40e80c:	10000326 	beq	r2,zero,40e81c <OSFlagDel+0xf0>
  40e810:	10800060 	cmpeqi	r2,r2,1
  40e814:	10003d1e 	bne	r2,zero,40e90c <OSFlagDel+0x1e0>
  40e818:	00007106 	br	40e9e0 <OSFlagDel+0x2b4>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  40e81c:	e0bff003 	ldbu	r2,-64(fp)
  40e820:	1000251e 	bne	r2,zero,40e8b8 <OSFlagDel+0x18c>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  40e824:	e0bffd17 	ldw	r2,-12(fp)
  40e828:	00c00fc4 	movi	r3,63
  40e82c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  40e830:	e0bffd17 	ldw	r2,-12(fp)
  40e834:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  40e838:	e0bffd17 	ldw	r2,-12(fp)
  40e83c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  40e840:	008010b4 	movhi	r2,66
  40e844:	10b5a004 	addi	r2,r2,-10624
  40e848:	10c00017 	ldw	r3,0(r2)
  40e84c:	e0bffd17 	ldw	r2,-12(fp)
  40e850:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  40e854:	e0bffd17 	ldw	r2,-12(fp)
  40e858:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  40e85c:	008010b4 	movhi	r2,66
  40e860:	10b5a004 	addi	r2,r2,-10624
  40e864:	e0fffd17 	ldw	r3,-12(fp)
  40e868:	10c00015 	stw	r3,0(r2)
  40e86c:	e0bff317 	ldw	r2,-52(fp)
  40e870:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40e874:	0005303a 	rdctl	r2,status
  40e878:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40e87c:	e0fff617 	ldw	r3,-40(fp)
  40e880:	00bfff84 	movi	r2,-2
  40e884:	1884703a 	and	r2,r3,r2
  40e888:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40e88c:	e0bff517 	ldw	r2,-44(fp)
  40e890:	1080004c 	andi	r2,r2,1
  40e894:	e0fff617 	ldw	r3,-40(fp)
  40e898:	1884b03a 	or	r2,r3,r2
  40e89c:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  40e8a0:	e0bff617 	ldw	r2,-40(fp)
  40e8a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  40e8a8:	e0bfff17 	ldw	r2,-4(fp)
  40e8ac:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  40e8b0:	e03ff215 	stw	zero,-56(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
  40e8b4:	00005f06 	br	40ea34 <OSFlagDel+0x308>
  40e8b8:	e0bff317 	ldw	r2,-52(fp)
  40e8bc:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40e8c0:	0005303a 	rdctl	r2,status
  40e8c4:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40e8c8:	e0fff817 	ldw	r3,-32(fp)
  40e8cc:	00bfff84 	movi	r2,-2
  40e8d0:	1884703a 	and	r2,r3,r2
  40e8d4:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40e8d8:	e0bff717 	ldw	r2,-36(fp)
  40e8dc:	1080004c 	andi	r2,r2,1
  40e8e0:	e0fff817 	ldw	r3,-32(fp)
  40e8e4:	1884b03a 	or	r2,r3,r2
  40e8e8:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  40e8ec:	e0bff817 	ldw	r2,-32(fp)
  40e8f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  40e8f4:	e0bfff17 	ldw	r2,-4(fp)
  40e8f8:	00c01244 	movi	r3,73
  40e8fc:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
  40e900:	e0bffd17 	ldw	r2,-12(fp)
  40e904:	e0bff215 	stw	r2,-56(fp)
             }
             break;
  40e908:	00004a06 	br	40ea34 <OSFlagDel+0x308>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  40e90c:	e0bffd17 	ldw	r2,-12(fp)
  40e910:	10800117 	ldw	r2,4(r2)
  40e914:	e0bff115 	stw	r2,-60(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  40e918:	00000606 	br	40e934 <OSFlagDel+0x208>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  40e91c:	e13ff117 	ldw	r4,-60(fp)
  40e920:	000b883a 	mov	r5,zero
  40e924:	040fe280 	call	40fe28 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  40e928:	e0bff117 	ldw	r2,-60(fp)
  40e92c:	10800017 	ldw	r2,0(r2)
  40e930:	e0bff115 	stw	r2,-60(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  40e934:	e0bff117 	ldw	r2,-60(fp)
  40e938:	103ff81e 	bne	r2,zero,40e91c <OSFlagDel+0x1f0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  40e93c:	e0bffd17 	ldw	r2,-12(fp)
  40e940:	00c00fc4 	movi	r3,63
  40e944:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  40e948:	e0bffd17 	ldw	r2,-12(fp)
  40e94c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  40e950:	e0bffd17 	ldw	r2,-12(fp)
  40e954:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  40e958:	008010b4 	movhi	r2,66
  40e95c:	10b5a004 	addi	r2,r2,-10624
  40e960:	10c00017 	ldw	r3,0(r2)
  40e964:	e0bffd17 	ldw	r2,-12(fp)
  40e968:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  40e96c:	e0bffd17 	ldw	r2,-12(fp)
  40e970:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  40e974:	008010b4 	movhi	r2,66
  40e978:	10b5a004 	addi	r2,r2,-10624
  40e97c:	e0fffd17 	ldw	r3,-12(fp)
  40e980:	10c00015 	stw	r3,0(r2)
  40e984:	e0bff317 	ldw	r2,-52(fp)
  40e988:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40e98c:	0005303a 	rdctl	r2,status
  40e990:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40e994:	e0fffa17 	ldw	r3,-24(fp)
  40e998:	00bfff84 	movi	r2,-2
  40e99c:	1884703a 	and	r2,r3,r2
  40e9a0:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40e9a4:	e0bff917 	ldw	r2,-28(fp)
  40e9a8:	1080004c 	andi	r2,r2,1
  40e9ac:	e0fffa17 	ldw	r3,-24(fp)
  40e9b0:	1884b03a 	or	r2,r3,r2
  40e9b4:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  40e9b8:	e0bffa17 	ldw	r2,-24(fp)
  40e9bc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  40e9c0:	e0bff003 	ldbu	r2,-64(fp)
  40e9c4:	10800058 	cmpnei	r2,r2,1
  40e9c8:	1000011e 	bne	r2,zero,40e9d0 <OSFlagDel+0x2a4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  40e9cc:	040d8640 	call	40d864 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  40e9d0:	e0bfff17 	ldw	r2,-4(fp)
  40e9d4:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  40e9d8:	e03ff215 	stw	zero,-56(fp)
             break;
  40e9dc:	00001506 	br	40ea34 <OSFlagDel+0x308>
  40e9e0:	e0bff317 	ldw	r2,-52(fp)
  40e9e4:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40e9e8:	0005303a 	rdctl	r2,status
  40e9ec:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40e9f0:	e0fffc17 	ldw	r3,-16(fp)
  40e9f4:	00bfff84 	movi	r2,-2
  40e9f8:	1884703a 	and	r2,r3,r2
  40e9fc:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40ea00:	e0bffb17 	ldw	r2,-20(fp)
  40ea04:	1080004c 	andi	r2,r2,1
  40ea08:	e0fffc17 	ldw	r3,-16(fp)
  40ea0c:	1884b03a 	or	r2,r3,r2
  40ea10:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  40ea14:	e0bffc17 	ldw	r2,-16(fp)
  40ea18:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  40ea1c:	e0bfff17 	ldw	r2,-4(fp)
  40ea20:	00c001c4 	movi	r3,7
  40ea24:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
  40ea28:	e0bffd17 	ldw	r2,-12(fp)
  40ea2c:	e0bff215 	stw	r2,-56(fp)
             break;
  40ea30:	0001883a 	nop
    }
    return (pgrp_return);
  40ea34:	e0bff217 	ldw	r2,-56(fp)
}
  40ea38:	e037883a 	mov	sp,fp
  40ea3c:	dfc00117 	ldw	ra,4(sp)
  40ea40:	df000017 	ldw	fp,0(sp)
  40ea44:	dec00204 	addi	sp,sp,8
  40ea48:	f800283a 	ret

0040ea4c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  40ea4c:	defff404 	addi	sp,sp,-48
  40ea50:	dfc00b15 	stw	ra,44(sp)
  40ea54:	df000a15 	stw	fp,40(sp)
  40ea58:	df000a04 	addi	fp,sp,40
  40ea5c:	e13ffd15 	stw	r4,-12(fp)
  40ea60:	e17ffe15 	stw	r5,-8(fp)
  40ea64:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  40ea68:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  40ea6c:	e0bfff17 	ldw	r2,-4(fp)
  40ea70:	1000021e 	bne	r2,zero,40ea7c <OSFlagNameGet+0x30>
        return (0);
  40ea74:	0005883a 	mov	r2,zero
  40ea78:	00005106 	br	40ebc0 <OSFlagNameGet+0x174>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  40ea7c:	e0bffd17 	ldw	r2,-12(fp)
  40ea80:	1000051e 	bne	r2,zero,40ea98 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  40ea84:	e0bfff17 	ldw	r2,-4(fp)
  40ea88:	00c01b84 	movi	r3,110
  40ea8c:	10c00005 	stb	r3,0(r2)
        return (0);
  40ea90:	0005883a 	mov	r2,zero
  40ea94:	00004a06 	br	40ebc0 <OSFlagNameGet+0x174>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  40ea98:	e0bffe17 	ldw	r2,-8(fp)
  40ea9c:	1000051e 	bne	r2,zero,40eab4 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  40eaa0:	e0bfff17 	ldw	r2,-4(fp)
  40eaa4:	00c00304 	movi	r3,12
  40eaa8:	10c00005 	stb	r3,0(r2)
        return (0);
  40eaac:	0005883a 	mov	r2,zero
  40eab0:	00004306 	br	40ebc0 <OSFlagNameGet+0x174>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  40eab4:	008010b4 	movhi	r2,66
  40eab8:	10b59d04 	addi	r2,r2,-10636
  40eabc:	10800003 	ldbu	r2,0(r2)
  40eac0:	10803fcc 	andi	r2,r2,255
  40eac4:	10000526 	beq	r2,zero,40eadc <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
  40eac8:	e0bfff17 	ldw	r2,-4(fp)
  40eacc:	00c00444 	movi	r3,17
  40ead0:	10c00005 	stb	r3,0(r2)
        return (0);
  40ead4:	0005883a 	mov	r2,zero
  40ead8:	00003906 	br	40ebc0 <OSFlagNameGet+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40eadc:	0005303a 	rdctl	r2,status
  40eae0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40eae4:	e0fff817 	ldw	r3,-32(fp)
  40eae8:	00bfff84 	movi	r2,-2
  40eaec:	1884703a 	and	r2,r3,r2
  40eaf0:	1001703a 	wrctl	status,r2
  
  return context;
  40eaf4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  40eaf8:	e0bff615 	stw	r2,-40(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  40eafc:	e0bffd17 	ldw	r2,-12(fp)
  40eb00:	10800003 	ldbu	r2,0(r2)
  40eb04:	10803fcc 	andi	r2,r2,255
  40eb08:	10800160 	cmpeqi	r2,r2,5
  40eb0c:	1000141e 	bne	r2,zero,40eb60 <OSFlagNameGet+0x114>
  40eb10:	e0bff617 	ldw	r2,-40(fp)
  40eb14:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40eb18:	0005303a 	rdctl	r2,status
  40eb1c:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40eb20:	e0fffa17 	ldw	r3,-24(fp)
  40eb24:	00bfff84 	movi	r2,-2
  40eb28:	1884703a 	and	r2,r3,r2
  40eb2c:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40eb30:	e0bff917 	ldw	r2,-28(fp)
  40eb34:	1080004c 	andi	r2,r2,1
  40eb38:	e0fffa17 	ldw	r3,-24(fp)
  40eb3c:	1884b03a 	or	r2,r3,r2
  40eb40:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  40eb44:	e0bffa17 	ldw	r2,-24(fp)
  40eb48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  40eb4c:	e0bfff17 	ldw	r2,-4(fp)
  40eb50:	00c00044 	movi	r3,1
  40eb54:	10c00005 	stb	r3,0(r2)
        return (0);
  40eb58:	0005883a 	mov	r2,zero
  40eb5c:	00001806 	br	40ebc0 <OSFlagNameGet+0x174>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  40eb60:	e0bffd17 	ldw	r2,-12(fp)
  40eb64:	10800284 	addi	r2,r2,10
  40eb68:	e13ffe17 	ldw	r4,-8(fp)
  40eb6c:	100b883a 	mov	r5,r2
  40eb70:	040d9cc0 	call	40d9cc <OS_StrCopy>
  40eb74:	e0bff705 	stb	r2,-36(fp)
  40eb78:	e0bff617 	ldw	r2,-40(fp)
  40eb7c:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40eb80:	0005303a 	rdctl	r2,status
  40eb84:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40eb88:	e0fffc17 	ldw	r3,-16(fp)
  40eb8c:	00bfff84 	movi	r2,-2
  40eb90:	1884703a 	and	r2,r3,r2
  40eb94:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40eb98:	e0bffb17 	ldw	r2,-20(fp)
  40eb9c:	1080004c 	andi	r2,r2,1
  40eba0:	e0fffc17 	ldw	r3,-16(fp)
  40eba4:	1884b03a 	or	r2,r3,r2
  40eba8:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  40ebac:	e0bffc17 	ldw	r2,-16(fp)
  40ebb0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  40ebb4:	e0bfff17 	ldw	r2,-4(fp)
  40ebb8:	10000005 	stb	zero,0(r2)
    return (len);
  40ebbc:	e0bff703 	ldbu	r2,-36(fp)
}
  40ebc0:	e037883a 	mov	sp,fp
  40ebc4:	dfc00117 	ldw	ra,4(sp)
  40ebc8:	df000017 	ldw	fp,0(sp)
  40ebcc:	dec00204 	addi	sp,sp,8
  40ebd0:	f800283a 	ret

0040ebd4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  40ebd4:	defff204 	addi	sp,sp,-56
  40ebd8:	dfc00d15 	stw	ra,52(sp)
  40ebdc:	df000c15 	stw	fp,48(sp)
  40ebe0:	df000c04 	addi	fp,sp,48
  40ebe4:	e13ffd15 	stw	r4,-12(fp)
  40ebe8:	e17ffe15 	stw	r5,-8(fp)
  40ebec:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  40ebf0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  40ebf4:	e0bfff17 	ldw	r2,-4(fp)
  40ebf8:	10006626 	beq	r2,zero,40ed94 <OSFlagNameSet+0x1c0>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  40ebfc:	e0bffd17 	ldw	r2,-12(fp)
  40ec00:	1000041e 	bne	r2,zero,40ec14 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  40ec04:	e0bfff17 	ldw	r2,-4(fp)
  40ec08:	00c01b84 	movi	r3,110
  40ec0c:	10c00005 	stb	r3,0(r2)
        return;
  40ec10:	00006106 	br	40ed98 <OSFlagNameSet+0x1c4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  40ec14:	e0bffe17 	ldw	r2,-8(fp)
  40ec18:	1000041e 	bne	r2,zero,40ec2c <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  40ec1c:	e0bfff17 	ldw	r2,-4(fp)
  40ec20:	00c00304 	movi	r3,12
  40ec24:	10c00005 	stb	r3,0(r2)
        return;
  40ec28:	00005b06 	br	40ed98 <OSFlagNameSet+0x1c4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  40ec2c:	008010b4 	movhi	r2,66
  40ec30:	10b59d04 	addi	r2,r2,-10636
  40ec34:	10800003 	ldbu	r2,0(r2)
  40ec38:	10803fcc 	andi	r2,r2,255
  40ec3c:	10000426 	beq	r2,zero,40ec50 <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
  40ec40:	e0bfff17 	ldw	r2,-4(fp)
  40ec44:	00c00484 	movi	r3,18
  40ec48:	10c00005 	stb	r3,0(r2)
        return;
  40ec4c:	00005206 	br	40ed98 <OSFlagNameSet+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40ec50:	0005303a 	rdctl	r2,status
  40ec54:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40ec58:	e0fff617 	ldw	r3,-40(fp)
  40ec5c:	00bfff84 	movi	r2,-2
  40ec60:	1884703a 	and	r2,r3,r2
  40ec64:	1001703a 	wrctl	status,r2
  
  return context;
  40ec68:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  40ec6c:	e0bff415 	stw	r2,-48(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  40ec70:	e0bffd17 	ldw	r2,-12(fp)
  40ec74:	10800003 	ldbu	r2,0(r2)
  40ec78:	10803fcc 	andi	r2,r2,255
  40ec7c:	10800160 	cmpeqi	r2,r2,5
  40ec80:	1000131e 	bne	r2,zero,40ecd0 <OSFlagNameSet+0xfc>
  40ec84:	e0bff417 	ldw	r2,-48(fp)
  40ec88:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40ec8c:	0005303a 	rdctl	r2,status
  40ec90:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40ec94:	e0fff817 	ldw	r3,-32(fp)
  40ec98:	00bfff84 	movi	r2,-2
  40ec9c:	1884703a 	and	r2,r3,r2
  40eca0:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40eca4:	e0bff717 	ldw	r2,-36(fp)
  40eca8:	1080004c 	andi	r2,r2,1
  40ecac:	e0fff817 	ldw	r3,-32(fp)
  40ecb0:	1884b03a 	or	r2,r3,r2
  40ecb4:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  40ecb8:	e0bff817 	ldw	r2,-32(fp)
  40ecbc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  40ecc0:	e0bfff17 	ldw	r2,-4(fp)
  40ecc4:	00c00044 	movi	r3,1
  40ecc8:	10c00005 	stb	r3,0(r2)
        return;
  40eccc:	00003206 	br	40ed98 <OSFlagNameSet+0x1c4>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  40ecd0:	e13ffe17 	ldw	r4,-8(fp)
  40ecd4:	040da480 	call	40da48 <OS_StrLen>
  40ecd8:	e0bff505 	stb	r2,-44(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  40ecdc:	e0bff503 	ldbu	r2,-44(fp)
  40ece0:	10800830 	cmpltui	r2,r2,32
  40ece4:	1000131e 	bne	r2,zero,40ed34 <OSFlagNameSet+0x160>
  40ece8:	e0bff417 	ldw	r2,-48(fp)
  40ecec:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40ecf0:	0005303a 	rdctl	r2,status
  40ecf4:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40ecf8:	e0fffa17 	ldw	r3,-24(fp)
  40ecfc:	00bfff84 	movi	r2,-2
  40ed00:	1884703a 	and	r2,r3,r2
  40ed04:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40ed08:	e0bff917 	ldw	r2,-28(fp)
  40ed0c:	1080004c 	andi	r2,r2,1
  40ed10:	e0fffa17 	ldw	r3,-24(fp)
  40ed14:	1884b03a 	or	r2,r3,r2
  40ed18:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  40ed1c:	e0bffa17 	ldw	r2,-24(fp)
  40ed20:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  40ed24:	e0bfff17 	ldw	r2,-4(fp)
  40ed28:	00c01cc4 	movi	r3,115
  40ed2c:	10c00005 	stb	r3,0(r2)
        return;
  40ed30:	00001906 	br	40ed98 <OSFlagNameSet+0x1c4>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  40ed34:	e0bffd17 	ldw	r2,-12(fp)
  40ed38:	10800284 	addi	r2,r2,10
  40ed3c:	1009883a 	mov	r4,r2
  40ed40:	e17ffe17 	ldw	r5,-8(fp)
  40ed44:	040d9cc0 	call	40d9cc <OS_StrCopy>
  40ed48:	e0bff417 	ldw	r2,-48(fp)
  40ed4c:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40ed50:	0005303a 	rdctl	r2,status
  40ed54:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40ed58:	e0fffc17 	ldw	r3,-16(fp)
  40ed5c:	00bfff84 	movi	r2,-2
  40ed60:	1884703a 	and	r2,r3,r2
  40ed64:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40ed68:	e0bffb17 	ldw	r2,-20(fp)
  40ed6c:	1080004c 	andi	r2,r2,1
  40ed70:	e0fffc17 	ldw	r3,-16(fp)
  40ed74:	1884b03a 	or	r2,r3,r2
  40ed78:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  40ed7c:	e0bffc17 	ldw	r2,-16(fp)
  40ed80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  40ed84:	e0bfff17 	ldw	r2,-4(fp)
  40ed88:	10000005 	stb	zero,0(r2)
    return;
  40ed8c:	0001883a 	nop
  40ed90:	00000106 	br	40ed98 <OSFlagNameSet+0x1c4>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  40ed94:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
  40ed98:	e037883a 	mov	sp,fp
  40ed9c:	dfc00117 	ldw	ra,4(sp)
  40eda0:	df000017 	ldw	fp,0(sp)
  40eda4:	dec00204 	addi	sp,sp,8
  40eda8:	f800283a 	ret

0040edac <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  40edac:	deffd604 	addi	sp,sp,-168
  40edb0:	dfc02915 	stw	ra,164(sp)
  40edb4:	df002815 	stw	fp,160(sp)
  40edb8:	df002804 	addi	fp,sp,160
  40edbc:	e13ffc15 	stw	r4,-16(fp)
  40edc0:	2809883a 	mov	r4,r5
  40edc4:	3007883a 	mov	r3,r6
  40edc8:	3805883a 	mov	r2,r7
  40edcc:	e13ffd0d 	sth	r4,-12(fp)
  40edd0:	e0fffe05 	stb	r3,-8(fp)
  40edd4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  40edd8:	e03fda15 	stw	zero,-152(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  40eddc:	e0800217 	ldw	r2,8(fp)
  40ede0:	1000021e 	bne	r2,zero,40edec <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
  40ede4:	0005883a 	mov	r2,zero
  40ede8:	0001ef06 	br	40f5a8 <OSFlagPend+0x7fc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  40edec:	e0bffc17 	ldw	r2,-16(fp)
  40edf0:	1000051e 	bne	r2,zero,40ee08 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  40edf4:	e0800217 	ldw	r2,8(fp)
  40edf8:	00c01b84 	movi	r3,110
  40edfc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  40ee00:	0005883a 	mov	r2,zero
  40ee04:	0001e806 	br	40f5a8 <OSFlagPend+0x7fc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  40ee08:	008010b4 	movhi	r2,66
  40ee0c:	10b59d04 	addi	r2,r2,-10636
  40ee10:	10800003 	ldbu	r2,0(r2)
  40ee14:	10803fcc 	andi	r2,r2,255
  40ee18:	10000526 	beq	r2,zero,40ee30 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  40ee1c:	e0800217 	ldw	r2,8(fp)
  40ee20:	00c00084 	movi	r3,2
  40ee24:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  40ee28:	0005883a 	mov	r2,zero
  40ee2c:	0001de06 	br	40f5a8 <OSFlagPend+0x7fc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  40ee30:	008010b4 	movhi	r2,66
  40ee34:	10b58f04 	addi	r2,r2,-10692
  40ee38:	10800003 	ldbu	r2,0(r2)
  40ee3c:	10803fcc 	andi	r2,r2,255
  40ee40:	10000526 	beq	r2,zero,40ee58 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  40ee44:	e0800217 	ldw	r2,8(fp)
  40ee48:	00c00344 	movi	r3,13
  40ee4c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  40ee50:	0005883a 	mov	r2,zero
  40ee54:	0001d406 	br	40f5a8 <OSFlagPend+0x7fc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  40ee58:	e0bffc17 	ldw	r2,-16(fp)
  40ee5c:	10800003 	ldbu	r2,0(r2)
  40ee60:	10803fcc 	andi	r2,r2,255
  40ee64:	10800160 	cmpeqi	r2,r2,5
  40ee68:	1000051e 	bne	r2,zero,40ee80 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
  40ee6c:	e0800217 	ldw	r2,8(fp)
  40ee70:	00c00044 	movi	r3,1
  40ee74:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  40ee78:	0005883a 	mov	r2,zero
  40ee7c:	0001ca06 	br	40f5a8 <OSFlagPend+0x7fc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  40ee80:	e0fffe03 	ldbu	r3,-8(fp)
  40ee84:	00bfe004 	movi	r2,-128
  40ee88:	1884703a 	and	r2,r3,r2
  40ee8c:	e0bfdb05 	stb	r2,-148(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  40ee90:	e0bfdb03 	ldbu	r2,-148(fp)
  40ee94:	10000626 	beq	r2,zero,40eeb0 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  40ee98:	e0bffe03 	ldbu	r2,-8(fp)
  40ee9c:	10801fcc 	andi	r2,r2,127
  40eea0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
  40eea4:	00800044 	movi	r2,1
  40eea8:	e0bfd905 	stb	r2,-156(fp)
  40eeac:	00000106 	br	40eeb4 <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
  40eeb0:	e03fd905 	stb	zero,-156(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40eeb4:	0005303a 	rdctl	r2,status
  40eeb8:	e0bfdd15 	stw	r2,-140(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40eebc:	e0ffdd17 	ldw	r3,-140(fp)
  40eec0:	00bfff84 	movi	r2,-2
  40eec4:	1884703a 	and	r2,r3,r2
  40eec8:	1001703a 	wrctl	status,r2
  
  return context;
  40eecc:	e0bfdd17 	ldw	r2,-140(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  40eed0:	e0bfda15 	stw	r2,-152(fp)
    switch (wait_type) {
  40eed4:	e0bffe03 	ldbu	r2,-8(fp)
  40eed8:	10c00060 	cmpeqi	r3,r2,1
  40eedc:	1800d71e 	bne	r3,zero,40f23c <OSFlagPend+0x490>
  40eee0:	10c00088 	cmpgei	r3,r2,2
  40eee4:	1800021e 	bne	r3,zero,40eef0 <OSFlagPend+0x144>
  40eee8:	10008f26 	beq	r2,zero,40f128 <OSFlagPend+0x37c>
  40eeec:	00011706 	br	40f34c <OSFlagPend+0x5a0>
  40eef0:	10c000a0 	cmpeqi	r3,r2,2
  40eef4:	1800031e 	bne	r3,zero,40ef04 <OSFlagPend+0x158>
  40eef8:	108000e0 	cmpeqi	r2,r2,3
  40eefc:	1000461e 	bne	r2,zero,40f018 <OSFlagPend+0x26c>
  40ef00:	00011206 	br	40f34c <OSFlagPend+0x5a0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  40ef04:	e0bffc17 	ldw	r2,-16(fp)
  40ef08:	10c0020b 	ldhu	r3,8(r2)
  40ef0c:	e0bffd0b 	ldhu	r2,-12(fp)
  40ef10:	1884703a 	and	r2,r3,r2
  40ef14:	e0bfdb8d 	sth	r2,-146(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  40ef18:	e0ffdb8b 	ldhu	r3,-146(fp)
  40ef1c:	e0bffd0b 	ldhu	r2,-12(fp)
  40ef20:	1880241e 	bne	r3,r2,40efb4 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  40ef24:	e0bfd903 	ldbu	r2,-156(fp)
  40ef28:	10800058 	cmpnei	r2,r2,1
  40ef2c:	1000091e 	bne	r2,zero,40ef54 <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  40ef30:	e0bffc17 	ldw	r2,-16(fp)
  40ef34:	1080020b 	ldhu	r2,8(r2)
  40ef38:	1007883a 	mov	r3,r2
  40ef3c:	e0bfdb8b 	ldhu	r2,-146(fp)
  40ef40:	0084303a 	nor	r2,zero,r2
  40ef44:	1884703a 	and	r2,r3,r2
  40ef48:	1007883a 	mov	r3,r2
  40ef4c:	e0bffc17 	ldw	r2,-16(fp)
  40ef50:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  40ef54:	008010b4 	movhi	r2,66
  40ef58:	10b59e04 	addi	r2,r2,-10632
  40ef5c:	10800017 	ldw	r2,0(r2)
  40ef60:	e0ffdb8b 	ldhu	r3,-146(fp)
  40ef64:	10c00b0d 	sth	r3,44(r2)
  40ef68:	e0bfda17 	ldw	r2,-152(fp)
  40ef6c:	e0bfde15 	stw	r2,-136(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40ef70:	0005303a 	rdctl	r2,status
  40ef74:	e0bfdf15 	stw	r2,-132(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40ef78:	e0ffdf17 	ldw	r3,-132(fp)
  40ef7c:	00bfff84 	movi	r2,-2
  40ef80:	1884703a 	and	r2,r3,r2
  40ef84:	e0bfdf15 	stw	r2,-132(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40ef88:	e0bfde17 	ldw	r2,-136(fp)
  40ef8c:	1080004c 	andi	r2,r2,1
  40ef90:	e0ffdf17 	ldw	r3,-132(fp)
  40ef94:	1884b03a 	or	r2,r3,r2
  40ef98:	e0bfdf15 	stw	r2,-132(fp)
  
  NIOS2_WRITE_STATUS (status);
  40ef9c:	e0bfdf17 	ldw	r2,-132(fp)
  40efa0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  40efa4:	e0800217 	ldw	r2,8(fp)
  40efa8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  40efac:	e0bfdb8b 	ldhu	r2,-146(fp)
  40efb0:	00017d06 	br	40f5a8 <OSFlagPend+0x7fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  40efb4:	e0fffd0b 	ldhu	r3,-12(fp)
  40efb8:	e0bffe03 	ldbu	r2,-8(fp)
  40efbc:	e13fff0b 	ldhu	r4,-4(fp)
  40efc0:	e17ff704 	addi	r5,fp,-36
  40efc4:	d9000015 	stw	r4,0(sp)
  40efc8:	e13ffc17 	ldw	r4,-16(fp)
  40efcc:	180d883a 	mov	r6,r3
  40efd0:	100f883a 	mov	r7,r2
  40efd4:	040fb840 	call	40fb84 <OS_FlagBlock>
  40efd8:	e0bfda17 	ldw	r2,-152(fp)
  40efdc:	e0bfe015 	stw	r2,-128(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40efe0:	0005303a 	rdctl	r2,status
  40efe4:	e0bfe115 	stw	r2,-124(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40efe8:	e0ffe117 	ldw	r3,-124(fp)
  40efec:	00bfff84 	movi	r2,-2
  40eff0:	1884703a 	and	r2,r3,r2
  40eff4:	e0bfe115 	stw	r2,-124(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40eff8:	e0bfe017 	ldw	r2,-128(fp)
  40effc:	1080004c 	andi	r2,r2,1
  40f000:	e0ffe117 	ldw	r3,-124(fp)
  40f004:	1884b03a 	or	r2,r3,r2
  40f008:	e0bfe115 	stw	r2,-124(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f00c:	e0bfe117 	ldw	r2,-124(fp)
  40f010:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  40f014:	0000e206 	br	40f3a0 <OSFlagPend+0x5f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  40f018:	e0bffc17 	ldw	r2,-16(fp)
  40f01c:	10c0020b 	ldhu	r3,8(r2)
  40f020:	e0bffd0b 	ldhu	r2,-12(fp)
  40f024:	1884703a 	and	r2,r3,r2
  40f028:	e0bfdb8d 	sth	r2,-146(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  40f02c:	e0bfdb8b 	ldhu	r2,-146(fp)
  40f030:	10002426 	beq	r2,zero,40f0c4 <OSFlagPend+0x318>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  40f034:	e0bfd903 	ldbu	r2,-156(fp)
  40f038:	10800058 	cmpnei	r2,r2,1
  40f03c:	1000091e 	bne	r2,zero,40f064 <OSFlagPend+0x2b8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  40f040:	e0bffc17 	ldw	r2,-16(fp)
  40f044:	1080020b 	ldhu	r2,8(r2)
  40f048:	1007883a 	mov	r3,r2
  40f04c:	e0bfdb8b 	ldhu	r2,-146(fp)
  40f050:	0084303a 	nor	r2,zero,r2
  40f054:	1884703a 	and	r2,r3,r2
  40f058:	1007883a 	mov	r3,r2
  40f05c:	e0bffc17 	ldw	r2,-16(fp)
  40f060:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  40f064:	008010b4 	movhi	r2,66
  40f068:	10b59e04 	addi	r2,r2,-10632
  40f06c:	10800017 	ldw	r2,0(r2)
  40f070:	e0ffdb8b 	ldhu	r3,-146(fp)
  40f074:	10c00b0d 	sth	r3,44(r2)
  40f078:	e0bfda17 	ldw	r2,-152(fp)
  40f07c:	e0bfe215 	stw	r2,-120(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40f080:	0005303a 	rdctl	r2,status
  40f084:	e0bfe315 	stw	r2,-116(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40f088:	e0ffe317 	ldw	r3,-116(fp)
  40f08c:	00bfff84 	movi	r2,-2
  40f090:	1884703a 	and	r2,r3,r2
  40f094:	e0bfe315 	stw	r2,-116(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40f098:	e0bfe217 	ldw	r2,-120(fp)
  40f09c:	1080004c 	andi	r2,r2,1
  40f0a0:	e0ffe317 	ldw	r3,-116(fp)
  40f0a4:	1884b03a 	or	r2,r3,r2
  40f0a8:	e0bfe315 	stw	r2,-116(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f0ac:	e0bfe317 	ldw	r2,-116(fp)
  40f0b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  40f0b4:	e0800217 	ldw	r2,8(fp)
  40f0b8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  40f0bc:	e0bfdb8b 	ldhu	r2,-146(fp)
  40f0c0:	00013906 	br	40f5a8 <OSFlagPend+0x7fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  40f0c4:	e0fffd0b 	ldhu	r3,-12(fp)
  40f0c8:	e0bffe03 	ldbu	r2,-8(fp)
  40f0cc:	e13fff0b 	ldhu	r4,-4(fp)
  40f0d0:	e17ff704 	addi	r5,fp,-36
  40f0d4:	d9000015 	stw	r4,0(sp)
  40f0d8:	e13ffc17 	ldw	r4,-16(fp)
  40f0dc:	180d883a 	mov	r6,r3
  40f0e0:	100f883a 	mov	r7,r2
  40f0e4:	040fb840 	call	40fb84 <OS_FlagBlock>
  40f0e8:	e0bfda17 	ldw	r2,-152(fp)
  40f0ec:	e0bfe415 	stw	r2,-112(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40f0f0:	0005303a 	rdctl	r2,status
  40f0f4:	e0bfe515 	stw	r2,-108(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40f0f8:	e0ffe517 	ldw	r3,-108(fp)
  40f0fc:	00bfff84 	movi	r2,-2
  40f100:	1884703a 	and	r2,r3,r2
  40f104:	e0bfe515 	stw	r2,-108(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40f108:	e0bfe417 	ldw	r2,-112(fp)
  40f10c:	1080004c 	andi	r2,r2,1
  40f110:	e0ffe517 	ldw	r3,-108(fp)
  40f114:	1884b03a 	or	r2,r3,r2
  40f118:	e0bfe515 	stw	r2,-108(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f11c:	e0bfe517 	ldw	r2,-108(fp)
  40f120:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  40f124:	00009e06 	br	40f3a0 <OSFlagPend+0x5f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  40f128:	e0bffc17 	ldw	r2,-16(fp)
  40f12c:	1080020b 	ldhu	r2,8(r2)
  40f130:	0084303a 	nor	r2,zero,r2
  40f134:	1007883a 	mov	r3,r2
  40f138:	e0bffd0b 	ldhu	r2,-12(fp)
  40f13c:	1884703a 	and	r2,r3,r2
  40f140:	e0bfdb8d 	sth	r2,-146(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  40f144:	e0ffdb8b 	ldhu	r3,-146(fp)
  40f148:	e0bffd0b 	ldhu	r2,-12(fp)
  40f14c:	1880221e 	bne	r3,r2,40f1d8 <OSFlagPend+0x42c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  40f150:	e0bfd903 	ldbu	r2,-156(fp)
  40f154:	10800058 	cmpnei	r2,r2,1
  40f158:	1000071e 	bne	r2,zero,40f178 <OSFlagPend+0x3cc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  40f15c:	e0bffc17 	ldw	r2,-16(fp)
  40f160:	10c0020b 	ldhu	r3,8(r2)
  40f164:	e0bfdb8b 	ldhu	r2,-146(fp)
  40f168:	1884b03a 	or	r2,r3,r2
  40f16c:	1007883a 	mov	r3,r2
  40f170:	e0bffc17 	ldw	r2,-16(fp)
  40f174:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  40f178:	008010b4 	movhi	r2,66
  40f17c:	10b59e04 	addi	r2,r2,-10632
  40f180:	10800017 	ldw	r2,0(r2)
  40f184:	e0ffdb8b 	ldhu	r3,-146(fp)
  40f188:	10c00b0d 	sth	r3,44(r2)
  40f18c:	e0bfda17 	ldw	r2,-152(fp)
  40f190:	e0bfe615 	stw	r2,-104(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40f194:	0005303a 	rdctl	r2,status
  40f198:	e0bfe715 	stw	r2,-100(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40f19c:	e0ffe717 	ldw	r3,-100(fp)
  40f1a0:	00bfff84 	movi	r2,-2
  40f1a4:	1884703a 	and	r2,r3,r2
  40f1a8:	e0bfe715 	stw	r2,-100(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40f1ac:	e0bfe617 	ldw	r2,-104(fp)
  40f1b0:	1080004c 	andi	r2,r2,1
  40f1b4:	e0ffe717 	ldw	r3,-100(fp)
  40f1b8:	1884b03a 	or	r2,r3,r2
  40f1bc:	e0bfe715 	stw	r2,-100(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f1c0:	e0bfe717 	ldw	r2,-100(fp)
  40f1c4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  40f1c8:	e0800217 	ldw	r2,8(fp)
  40f1cc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  40f1d0:	e0bfdb8b 	ldhu	r2,-146(fp)
  40f1d4:	0000f406 	br	40f5a8 <OSFlagPend+0x7fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  40f1d8:	e0fffd0b 	ldhu	r3,-12(fp)
  40f1dc:	e0bffe03 	ldbu	r2,-8(fp)
  40f1e0:	e13fff0b 	ldhu	r4,-4(fp)
  40f1e4:	e17ff704 	addi	r5,fp,-36
  40f1e8:	d9000015 	stw	r4,0(sp)
  40f1ec:	e13ffc17 	ldw	r4,-16(fp)
  40f1f0:	180d883a 	mov	r6,r3
  40f1f4:	100f883a 	mov	r7,r2
  40f1f8:	040fb840 	call	40fb84 <OS_FlagBlock>
  40f1fc:	e0bfda17 	ldw	r2,-152(fp)
  40f200:	e0bfe815 	stw	r2,-96(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40f204:	0005303a 	rdctl	r2,status
  40f208:	e0bfe915 	stw	r2,-92(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40f20c:	e0ffe917 	ldw	r3,-92(fp)
  40f210:	00bfff84 	movi	r2,-2
  40f214:	1884703a 	and	r2,r3,r2
  40f218:	e0bfe915 	stw	r2,-92(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40f21c:	e0bfe817 	ldw	r2,-96(fp)
  40f220:	1080004c 	andi	r2,r2,1
  40f224:	e0ffe917 	ldw	r3,-92(fp)
  40f228:	1884b03a 	or	r2,r3,r2
  40f22c:	e0bfe915 	stw	r2,-92(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f230:	e0bfe917 	ldw	r2,-92(fp)
  40f234:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  40f238:	00005906 	br	40f3a0 <OSFlagPend+0x5f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  40f23c:	e0bffc17 	ldw	r2,-16(fp)
  40f240:	1080020b 	ldhu	r2,8(r2)
  40f244:	0084303a 	nor	r2,zero,r2
  40f248:	1007883a 	mov	r3,r2
  40f24c:	e0bffd0b 	ldhu	r2,-12(fp)
  40f250:	1884703a 	and	r2,r3,r2
  40f254:	e0bfdb8d 	sth	r2,-146(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  40f258:	e0bfdb8b 	ldhu	r2,-146(fp)
  40f25c:	10002226 	beq	r2,zero,40f2e8 <OSFlagPend+0x53c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  40f260:	e0bfd903 	ldbu	r2,-156(fp)
  40f264:	10800058 	cmpnei	r2,r2,1
  40f268:	1000071e 	bne	r2,zero,40f288 <OSFlagPend+0x4dc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  40f26c:	e0bffc17 	ldw	r2,-16(fp)
  40f270:	10c0020b 	ldhu	r3,8(r2)
  40f274:	e0bfdb8b 	ldhu	r2,-146(fp)
  40f278:	1884b03a 	or	r2,r3,r2
  40f27c:	1007883a 	mov	r3,r2
  40f280:	e0bffc17 	ldw	r2,-16(fp)
  40f284:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  40f288:	008010b4 	movhi	r2,66
  40f28c:	10b59e04 	addi	r2,r2,-10632
  40f290:	10800017 	ldw	r2,0(r2)
  40f294:	e0ffdb8b 	ldhu	r3,-146(fp)
  40f298:	10c00b0d 	sth	r3,44(r2)
  40f29c:	e0bfda17 	ldw	r2,-152(fp)
  40f2a0:	e0bfea15 	stw	r2,-88(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40f2a4:	0005303a 	rdctl	r2,status
  40f2a8:	e0bfeb15 	stw	r2,-84(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40f2ac:	e0ffeb17 	ldw	r3,-84(fp)
  40f2b0:	00bfff84 	movi	r2,-2
  40f2b4:	1884703a 	and	r2,r3,r2
  40f2b8:	e0bfeb15 	stw	r2,-84(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40f2bc:	e0bfea17 	ldw	r2,-88(fp)
  40f2c0:	1080004c 	andi	r2,r2,1
  40f2c4:	e0ffeb17 	ldw	r3,-84(fp)
  40f2c8:	1884b03a 	or	r2,r3,r2
  40f2cc:	e0bfeb15 	stw	r2,-84(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f2d0:	e0bfeb17 	ldw	r2,-84(fp)
  40f2d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  40f2d8:	e0800217 	ldw	r2,8(fp)
  40f2dc:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  40f2e0:	e0bfdb8b 	ldhu	r2,-146(fp)
  40f2e4:	0000b006 	br	40f5a8 <OSFlagPend+0x7fc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  40f2e8:	e0fffd0b 	ldhu	r3,-12(fp)
  40f2ec:	e0bffe03 	ldbu	r2,-8(fp)
  40f2f0:	e13fff0b 	ldhu	r4,-4(fp)
  40f2f4:	e17ff704 	addi	r5,fp,-36
  40f2f8:	d9000015 	stw	r4,0(sp)
  40f2fc:	e13ffc17 	ldw	r4,-16(fp)
  40f300:	180d883a 	mov	r6,r3
  40f304:	100f883a 	mov	r7,r2
  40f308:	040fb840 	call	40fb84 <OS_FlagBlock>
  40f30c:	e0bfda17 	ldw	r2,-152(fp)
  40f310:	e0bfec15 	stw	r2,-80(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40f314:	0005303a 	rdctl	r2,status
  40f318:	e0bfed15 	stw	r2,-76(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40f31c:	e0ffed17 	ldw	r3,-76(fp)
  40f320:	00bfff84 	movi	r2,-2
  40f324:	1884703a 	and	r2,r3,r2
  40f328:	e0bfed15 	stw	r2,-76(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40f32c:	e0bfec17 	ldw	r2,-80(fp)
  40f330:	1080004c 	andi	r2,r2,1
  40f334:	e0ffed17 	ldw	r3,-76(fp)
  40f338:	1884b03a 	or	r2,r3,r2
  40f33c:	e0bfed15 	stw	r2,-76(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f340:	e0bfed17 	ldw	r2,-76(fp)
  40f344:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  40f348:	00001506 	br	40f3a0 <OSFlagPend+0x5f4>
  40f34c:	e0bfda17 	ldw	r2,-152(fp)
  40f350:	e0bfee15 	stw	r2,-72(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40f354:	0005303a 	rdctl	r2,status
  40f358:	e0bfef15 	stw	r2,-68(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40f35c:	e0ffef17 	ldw	r3,-68(fp)
  40f360:	00bfff84 	movi	r2,-2
  40f364:	1884703a 	and	r2,r3,r2
  40f368:	e0bfef15 	stw	r2,-68(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40f36c:	e0bfee17 	ldw	r2,-72(fp)
  40f370:	1080004c 	andi	r2,r2,1
  40f374:	e0ffef17 	ldw	r3,-68(fp)
  40f378:	1884b03a 	or	r2,r3,r2
  40f37c:	e0bfef15 	stw	r2,-68(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f380:	e0bfef17 	ldw	r2,-68(fp)
  40f384:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  40f388:	e03fdb8d 	sth	zero,-146(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  40f38c:	e0800217 	ldw	r2,8(fp)
  40f390:	00c01bc4 	movi	r3,111
  40f394:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
  40f398:	e0bfdb8b 	ldhu	r2,-146(fp)
  40f39c:	00008206 	br	40f5a8 <OSFlagPend+0x7fc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  40f3a0:	040d8640 	call	40d864 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40f3a4:	0005303a 	rdctl	r2,status
  40f3a8:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40f3ac:	e0fff017 	ldw	r3,-64(fp)
  40f3b0:	00bfff84 	movi	r2,-2
  40f3b4:	1884703a 	and	r2,r3,r2
  40f3b8:	1001703a 	wrctl	status,r2
  
  return context;
  40f3bc:	e0bff017 	ldw	r2,-64(fp)
    OS_ENTER_CRITICAL();
  40f3c0:	e0bfda15 	stw	r2,-152(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  40f3c4:	008010b4 	movhi	r2,66
  40f3c8:	10b59e04 	addi	r2,r2,-10632
  40f3cc:	10800017 	ldw	r2,0(r2)
  40f3d0:	10800c43 	ldbu	r2,49(r2)
  40f3d4:	10803fcc 	andi	r2,r2,255
  40f3d8:	10002d26 	beq	r2,zero,40f490 <OSFlagPend+0x6e4>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  40f3dc:	008010b4 	movhi	r2,66
  40f3e0:	10b59e04 	addi	r2,r2,-10632
  40f3e4:	10800017 	ldw	r2,0(r2)
  40f3e8:	10800c43 	ldbu	r2,49(r2)
  40f3ec:	e0bfdc05 	stb	r2,-144(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  40f3f0:	008010b4 	movhi	r2,66
  40f3f4:	10b59e04 	addi	r2,r2,-10632
  40f3f8:	10800017 	ldw	r2,0(r2)
  40f3fc:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  40f400:	e0bff704 	addi	r2,fp,-36
  40f404:	1009883a 	mov	r4,r2
  40f408:	040ff340 	call	40ff34 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  40f40c:	008010b4 	movhi	r2,66
  40f410:	10b59e04 	addi	r2,r2,-10632
  40f414:	10800017 	ldw	r2,0(r2)
  40f418:	10000c05 	stb	zero,48(r2)
  40f41c:	e0bfda17 	ldw	r2,-152(fp)
  40f420:	e0bff115 	stw	r2,-60(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40f424:	0005303a 	rdctl	r2,status
  40f428:	e0bff215 	stw	r2,-56(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40f42c:	e0fff217 	ldw	r3,-56(fp)
  40f430:	00bfff84 	movi	r2,-2
  40f434:	1884703a 	and	r2,r3,r2
  40f438:	e0bff215 	stw	r2,-56(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40f43c:	e0bff117 	ldw	r2,-60(fp)
  40f440:	1080004c 	andi	r2,r2,1
  40f444:	e0fff217 	ldw	r3,-56(fp)
  40f448:	1884b03a 	or	r2,r3,r2
  40f44c:	e0bff215 	stw	r2,-56(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f450:	e0bff217 	ldw	r2,-56(fp)
  40f454:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  40f458:	e03fdb8d 	sth	zero,-146(fp)
        switch (pend_stat) {
  40f45c:	e0bfdc03 	ldbu	r2,-144(fp)
  40f460:	108000a0 	cmpeqi	r2,r2,2
  40f464:	10000426 	beq	r2,zero,40f478 <OSFlagPend+0x6cc>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  40f468:	e0800217 	ldw	r2,8(fp)
  40f46c:	00c00384 	movi	r3,14
  40f470:	10c00005 	stb	r3,0(r2)
                 break;
  40f474:	00000406 	br	40f488 <OSFlagPend+0x6dc>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  40f478:	e0800217 	ldw	r2,8(fp)
  40f47c:	00c00284 	movi	r3,10
  40f480:	10c00005 	stb	r3,0(r2)
                 break;
  40f484:	0001883a 	nop
        }
        return (flags_rdy);
  40f488:	e0bfdb8b 	ldhu	r2,-146(fp)
  40f48c:	00004606 	br	40f5a8 <OSFlagPend+0x7fc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  40f490:	008010b4 	movhi	r2,66
  40f494:	10b59e04 	addi	r2,r2,-10632
  40f498:	10800017 	ldw	r2,0(r2)
  40f49c:	10800b0b 	ldhu	r2,44(r2)
  40f4a0:	e0bfdb8d 	sth	r2,-146(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  40f4a4:	e0bfd903 	ldbu	r2,-156(fp)
  40f4a8:	10800058 	cmpnei	r2,r2,1
  40f4ac:	10002c1e 	bne	r2,zero,40f560 <OSFlagPend+0x7b4>
        switch (wait_type) {
  40f4b0:	e0bffe03 	ldbu	r2,-8(fp)
  40f4b4:	10001616 	blt	r2,zero,40f510 <OSFlagPend+0x764>
  40f4b8:	10c00090 	cmplti	r3,r2,2
  40f4bc:	18000c1e 	bne	r3,zero,40f4f0 <OSFlagPend+0x744>
  40f4c0:	10800108 	cmpgei	r2,r2,4
  40f4c4:	1000121e 	bne	r2,zero,40f510 <OSFlagPend+0x764>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  40f4c8:	e0bffc17 	ldw	r2,-16(fp)
  40f4cc:	1080020b 	ldhu	r2,8(r2)
  40f4d0:	1007883a 	mov	r3,r2
  40f4d4:	e0bfdb8b 	ldhu	r2,-146(fp)
  40f4d8:	0084303a 	nor	r2,zero,r2
  40f4dc:	1884703a 	and	r2,r3,r2
  40f4e0:	1007883a 	mov	r3,r2
  40f4e4:	e0bffc17 	ldw	r2,-16(fp)
  40f4e8:	10c0020d 	sth	r3,8(r2)
                 break;
  40f4ec:	00001c06 	br	40f560 <OSFlagPend+0x7b4>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  40f4f0:	e0bffc17 	ldw	r2,-16(fp)
  40f4f4:	10c0020b 	ldhu	r3,8(r2)
  40f4f8:	e0bfdb8b 	ldhu	r2,-146(fp)
  40f4fc:	1884b03a 	or	r2,r3,r2
  40f500:	1007883a 	mov	r3,r2
  40f504:	e0bffc17 	ldw	r2,-16(fp)
  40f508:	10c0020d 	sth	r3,8(r2)
                 break;
  40f50c:	00001406 	br	40f560 <OSFlagPend+0x7b4>
  40f510:	e0bfda17 	ldw	r2,-152(fp)
  40f514:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40f518:	0005303a 	rdctl	r2,status
  40f51c:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40f520:	e0fff417 	ldw	r3,-48(fp)
  40f524:	00bfff84 	movi	r2,-2
  40f528:	1884703a 	and	r2,r3,r2
  40f52c:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40f530:	e0bff317 	ldw	r2,-52(fp)
  40f534:	1080004c 	andi	r2,r2,1
  40f538:	e0fff417 	ldw	r3,-48(fp)
  40f53c:	1884b03a 	or	r2,r3,r2
  40f540:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f544:	e0bff417 	ldw	r2,-48(fp)
  40f548:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  40f54c:	e0800217 	ldw	r2,8(fp)
  40f550:	00c01bc4 	movi	r3,111
  40f554:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  40f558:	0005883a 	mov	r2,zero
  40f55c:	00001206 	br	40f5a8 <OSFlagPend+0x7fc>
  40f560:	e0bfda17 	ldw	r2,-152(fp)
  40f564:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40f568:	0005303a 	rdctl	r2,status
  40f56c:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40f570:	e0fff617 	ldw	r3,-40(fp)
  40f574:	00bfff84 	movi	r2,-2
  40f578:	1884703a 	and	r2,r3,r2
  40f57c:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40f580:	e0bff517 	ldw	r2,-44(fp)
  40f584:	1080004c 	andi	r2,r2,1
  40f588:	e0fff617 	ldw	r3,-40(fp)
  40f58c:	1884b03a 	or	r2,r3,r2
  40f590:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f594:	e0bff617 	ldw	r2,-40(fp)
  40f598:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  40f59c:	e0800217 	ldw	r2,8(fp)
  40f5a0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  40f5a4:	e0bfdb8b 	ldhu	r2,-146(fp)
}
  40f5a8:	e037883a 	mov	sp,fp
  40f5ac:	dfc00117 	ldw	ra,4(sp)
  40f5b0:	df000017 	ldw	fp,0(sp)
  40f5b4:	dec00204 	addi	sp,sp,8
  40f5b8:	f800283a 	ret

0040f5bc <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  40f5bc:	defffa04 	addi	sp,sp,-24
  40f5c0:	df000515 	stw	fp,20(sp)
  40f5c4:	df000504 	addi	fp,sp,20
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  40f5c8:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40f5cc:	0005303a 	rdctl	r2,status
  40f5d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40f5d4:	e0fffd17 	ldw	r3,-12(fp)
  40f5d8:	00bfff84 	movi	r2,-2
  40f5dc:	1884703a 	and	r2,r3,r2
  40f5e0:	1001703a 	wrctl	status,r2
  
  return context;
  40f5e4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  40f5e8:	e0bffb15 	stw	r2,-20(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  40f5ec:	008010b4 	movhi	r2,66
  40f5f0:	10b59e04 	addi	r2,r2,-10632
  40f5f4:	10800017 	ldw	r2,0(r2)
  40f5f8:	10800b0b 	ldhu	r2,44(r2)
  40f5fc:	e0bffc0d 	sth	r2,-16(fp)
  40f600:	e0bffb17 	ldw	r2,-20(fp)
  40f604:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40f608:	0005303a 	rdctl	r2,status
  40f60c:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40f610:	e0ffff17 	ldw	r3,-4(fp)
  40f614:	00bfff84 	movi	r2,-2
  40f618:	1884703a 	and	r2,r3,r2
  40f61c:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40f620:	e0bffe17 	ldw	r2,-8(fp)
  40f624:	1080004c 	andi	r2,r2,1
  40f628:	e0ffff17 	ldw	r3,-4(fp)
  40f62c:	1884b03a 	or	r2,r3,r2
  40f630:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f634:	e0bfff17 	ldw	r2,-4(fp)
  40f638:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  40f63c:	e0bffc0b 	ldhu	r2,-16(fp)
}
  40f640:	e037883a 	mov	sp,fp
  40f644:	df000017 	ldw	fp,0(sp)
  40f648:	dec00104 	addi	sp,sp,4
  40f64c:	f800283a 	ret

0040f650 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  40f650:	deffeb04 	addi	sp,sp,-84
  40f654:	dfc01415 	stw	ra,80(sp)
  40f658:	df001315 	stw	fp,76(sp)
  40f65c:	df001304 	addi	fp,sp,76
  40f660:	e13ffc15 	stw	r4,-16(fp)
  40f664:	2807883a 	mov	r3,r5
  40f668:	3005883a 	mov	r2,r6
  40f66c:	e1ffff15 	stw	r7,-4(fp)
  40f670:	e0fffd0d 	sth	r3,-12(fp)
  40f674:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  40f678:	e03fef15 	stw	zero,-68(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  40f67c:	e0bfff17 	ldw	r2,-4(fp)
  40f680:	1000021e 	bne	r2,zero,40f68c <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
  40f684:	0005883a 	mov	r2,zero
  40f688:	0000fd06 	br	40fa80 <OSFlagPost+0x430>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  40f68c:	e0bffc17 	ldw	r2,-16(fp)
  40f690:	1000051e 	bne	r2,zero,40f6a8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  40f694:	e0bfff17 	ldw	r2,-4(fp)
  40f698:	00c01b84 	movi	r3,110
  40f69c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  40f6a0:	0005883a 	mov	r2,zero
  40f6a4:	0000f606 	br	40fa80 <OSFlagPost+0x430>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  40f6a8:	e0bffc17 	ldw	r2,-16(fp)
  40f6ac:	10800003 	ldbu	r2,0(r2)
  40f6b0:	10803fcc 	andi	r2,r2,255
  40f6b4:	10800160 	cmpeqi	r2,r2,5
  40f6b8:	1000051e 	bne	r2,zero,40f6d0 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  40f6bc:	e0bfff17 	ldw	r2,-4(fp)
  40f6c0:	00c00044 	movi	r3,1
  40f6c4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  40f6c8:	0005883a 	mov	r2,zero
  40f6cc:	0000ec06 	br	40fa80 <OSFlagPost+0x430>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40f6d0:	0005303a 	rdctl	r2,status
  40f6d4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40f6d8:	e0fff217 	ldw	r3,-56(fp)
  40f6dc:	00bfff84 	movi	r2,-2
  40f6e0:	1884703a 	and	r2,r3,r2
  40f6e4:	1001703a 	wrctl	status,r2
  
  return context;
  40f6e8:	e0bff217 	ldw	r2,-56(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  40f6ec:	e0bfef15 	stw	r2,-68(fp)
    switch (opt) {
  40f6f0:	e0bffe03 	ldbu	r2,-8(fp)
  40f6f4:	10000326 	beq	r2,zero,40f704 <OSFlagPost+0xb4>
  40f6f8:	10800060 	cmpeqi	r2,r2,1
  40f6fc:	10000b1e 	bne	r2,zero,40f72c <OSFlagPost+0xdc>
  40f700:	00001206 	br	40f74c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  40f704:	e0bffc17 	ldw	r2,-16(fp)
  40f708:	1080020b 	ldhu	r2,8(r2)
  40f70c:	1007883a 	mov	r3,r2
  40f710:	e0bffd0b 	ldhu	r2,-12(fp)
  40f714:	0084303a 	nor	r2,zero,r2
  40f718:	1884703a 	and	r2,r3,r2
  40f71c:	1007883a 	mov	r3,r2
  40f720:	e0bffc17 	ldw	r2,-16(fp)
  40f724:	10c0020d 	sth	r3,8(r2)
             break;
  40f728:	00001c06 	br	40f79c <OSFlagPost+0x14c>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  40f72c:	e0bffc17 	ldw	r2,-16(fp)
  40f730:	10c0020b 	ldhu	r3,8(r2)
  40f734:	e0bffd0b 	ldhu	r2,-12(fp)
  40f738:	1884b03a 	or	r2,r3,r2
  40f73c:	1007883a 	mov	r3,r2
  40f740:	e0bffc17 	ldw	r2,-16(fp)
  40f744:	10c0020d 	sth	r3,8(r2)
             break;
  40f748:	00001406 	br	40f79c <OSFlagPost+0x14c>
  40f74c:	e0bfef17 	ldw	r2,-68(fp)
  40f750:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40f754:	0005303a 	rdctl	r2,status
  40f758:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40f75c:	e0fff417 	ldw	r3,-48(fp)
  40f760:	00bfff84 	movi	r2,-2
  40f764:	1884703a 	and	r2,r3,r2
  40f768:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40f76c:	e0bff317 	ldw	r2,-52(fp)
  40f770:	1080004c 	andi	r2,r2,1
  40f774:	e0fff417 	ldw	r3,-48(fp)
  40f778:	1884b03a 	or	r2,r3,r2
  40f77c:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f780:	e0bff417 	ldw	r2,-48(fp)
  40f784:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  40f788:	e0bfff17 	ldw	r2,-4(fp)
  40f78c:	00c01c44 	movi	r3,113
  40f790:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
  40f794:	0005883a 	mov	r2,zero
  40f798:	0000b906 	br	40fa80 <OSFlagPost+0x430>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  40f79c:	e03fee05 	stb	zero,-72(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  40f7a0:	e0bffc17 	ldw	r2,-16(fp)
  40f7a4:	10800117 	ldw	r2,4(r2)
  40f7a8:	e0bfed15 	stw	r2,-76(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  40f7ac:	00008206 	br	40f9b8 <OSFlagPost+0x368>
        switch (pnode->OSFlagNodeWaitType) {
  40f7b0:	e0bfed17 	ldw	r2,-76(fp)
  40f7b4:	10800483 	ldbu	r2,18(r2)
  40f7b8:	10803fcc 	andi	r2,r2,255
  40f7bc:	10c00060 	cmpeqi	r3,r2,1
  40f7c0:	18004a1e 	bne	r3,zero,40f8ec <OSFlagPost+0x29c>
  40f7c4:	10c00088 	cmpgei	r3,r2,2
  40f7c8:	1800021e 	bne	r3,zero,40f7d4 <OSFlagPost+0x184>
  40f7cc:	10002f26 	beq	r2,zero,40f88c <OSFlagPost+0x23c>
  40f7d0:	00005b06 	br	40f940 <OSFlagPost+0x2f0>
  40f7d4:	10c000a0 	cmpeqi	r3,r2,2
  40f7d8:	1800031e 	bne	r3,zero,40f7e8 <OSFlagPost+0x198>
  40f7dc:	108000e0 	cmpeqi	r2,r2,3
  40f7e0:	1000171e 	bne	r2,zero,40f840 <OSFlagPost+0x1f0>
  40f7e4:	00005606 	br	40f940 <OSFlagPost+0x2f0>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  40f7e8:	e0bffc17 	ldw	r2,-16(fp)
  40f7ec:	10c0020b 	ldhu	r3,8(r2)
  40f7f0:	e0bfed17 	ldw	r2,-76(fp)
  40f7f4:	1080040b 	ldhu	r2,16(r2)
  40f7f8:	1884703a 	and	r2,r3,r2
  40f7fc:	e0bff00d 	sth	r2,-64(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  40f800:	e0bfed17 	ldw	r2,-76(fp)
  40f804:	1080040b 	ldhu	r2,16(r2)
  40f808:	10ffffcc 	andi	r3,r2,65535
  40f80c:	e0bff00b 	ldhu	r2,-64(fp)
  40f810:	18805f1e 	bne	r3,r2,40f990 <OSFlagPost+0x340>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  40f814:	e0bff00b 	ldhu	r2,-64(fp)
  40f818:	e13fed17 	ldw	r4,-76(fp)
  40f81c:	100b883a 	mov	r5,r2
  40f820:	040fe280 	call	40fe28 <OS_FlagTaskRdy>
  40f824:	e0bff085 	stb	r2,-62(fp)
                     if (rdy == OS_TRUE) {
  40f828:	e0bff083 	ldbu	r2,-62(fp)
  40f82c:	10800058 	cmpnei	r2,r2,1
  40f830:	1000571e 	bne	r2,zero,40f990 <OSFlagPost+0x340>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  40f834:	00800044 	movi	r2,1
  40f838:	e0bfee05 	stb	r2,-72(fp)
                     }
                 }
                 break;
  40f83c:	00005406 	br	40f990 <OSFlagPost+0x340>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  40f840:	e0bffc17 	ldw	r2,-16(fp)
  40f844:	10c0020b 	ldhu	r3,8(r2)
  40f848:	e0bfed17 	ldw	r2,-76(fp)
  40f84c:	1080040b 	ldhu	r2,16(r2)
  40f850:	1884703a 	and	r2,r3,r2
  40f854:	e0bff00d 	sth	r2,-64(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  40f858:	e0bff00b 	ldhu	r2,-64(fp)
  40f85c:	10004e26 	beq	r2,zero,40f998 <OSFlagPost+0x348>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  40f860:	e0bff00b 	ldhu	r2,-64(fp)
  40f864:	e13fed17 	ldw	r4,-76(fp)
  40f868:	100b883a 	mov	r5,r2
  40f86c:	040fe280 	call	40fe28 <OS_FlagTaskRdy>
  40f870:	e0bff085 	stb	r2,-62(fp)
                     if (rdy == OS_TRUE) {
  40f874:	e0bff083 	ldbu	r2,-62(fp)
  40f878:	10800058 	cmpnei	r2,r2,1
  40f87c:	1000461e 	bne	r2,zero,40f998 <OSFlagPost+0x348>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  40f880:	00800044 	movi	r2,1
  40f884:	e0bfee05 	stb	r2,-72(fp)
                     }
                 }
                 break;
  40f888:	00004306 	br	40f998 <OSFlagPost+0x348>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  40f88c:	e0bffc17 	ldw	r2,-16(fp)
  40f890:	1080020b 	ldhu	r2,8(r2)
  40f894:	0084303a 	nor	r2,zero,r2
  40f898:	1007883a 	mov	r3,r2
  40f89c:	e0bfed17 	ldw	r2,-76(fp)
  40f8a0:	1080040b 	ldhu	r2,16(r2)
  40f8a4:	1884703a 	and	r2,r3,r2
  40f8a8:	e0bff00d 	sth	r2,-64(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  40f8ac:	e0bfed17 	ldw	r2,-76(fp)
  40f8b0:	1080040b 	ldhu	r2,16(r2)
  40f8b4:	10ffffcc 	andi	r3,r2,65535
  40f8b8:	e0bff00b 	ldhu	r2,-64(fp)
  40f8bc:	1880381e 	bne	r3,r2,40f9a0 <OSFlagPost+0x350>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  40f8c0:	e0bff00b 	ldhu	r2,-64(fp)
  40f8c4:	e13fed17 	ldw	r4,-76(fp)
  40f8c8:	100b883a 	mov	r5,r2
  40f8cc:	040fe280 	call	40fe28 <OS_FlagTaskRdy>
  40f8d0:	e0bff085 	stb	r2,-62(fp)
                     if (rdy == OS_TRUE) {
  40f8d4:	e0bff083 	ldbu	r2,-62(fp)
  40f8d8:	10800058 	cmpnei	r2,r2,1
  40f8dc:	1000301e 	bne	r2,zero,40f9a0 <OSFlagPost+0x350>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  40f8e0:	00800044 	movi	r2,1
  40f8e4:	e0bfee05 	stb	r2,-72(fp)
                     }
                 }
                 break;
  40f8e8:	00002d06 	br	40f9a0 <OSFlagPost+0x350>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  40f8ec:	e0bffc17 	ldw	r2,-16(fp)
  40f8f0:	1080020b 	ldhu	r2,8(r2)
  40f8f4:	0084303a 	nor	r2,zero,r2
  40f8f8:	1007883a 	mov	r3,r2
  40f8fc:	e0bfed17 	ldw	r2,-76(fp)
  40f900:	1080040b 	ldhu	r2,16(r2)
  40f904:	1884703a 	and	r2,r3,r2
  40f908:	e0bff00d 	sth	r2,-64(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  40f90c:	e0bff00b 	ldhu	r2,-64(fp)
  40f910:	10002526 	beq	r2,zero,40f9a8 <OSFlagPost+0x358>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  40f914:	e0bff00b 	ldhu	r2,-64(fp)
  40f918:	e13fed17 	ldw	r4,-76(fp)
  40f91c:	100b883a 	mov	r5,r2
  40f920:	040fe280 	call	40fe28 <OS_FlagTaskRdy>
  40f924:	e0bff085 	stb	r2,-62(fp)
                     if (rdy == OS_TRUE) {
  40f928:	e0bff083 	ldbu	r2,-62(fp)
  40f92c:	10800058 	cmpnei	r2,r2,1
  40f930:	10001d1e 	bne	r2,zero,40f9a8 <OSFlagPost+0x358>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  40f934:	00800044 	movi	r2,1
  40f938:	e0bfee05 	stb	r2,-72(fp)
                     }
                 }
                 break;
  40f93c:	00001a06 	br	40f9a8 <OSFlagPost+0x358>
  40f940:	e0bfef17 	ldw	r2,-68(fp)
  40f944:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40f948:	0005303a 	rdctl	r2,status
  40f94c:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40f950:	e0fff617 	ldw	r3,-40(fp)
  40f954:	00bfff84 	movi	r2,-2
  40f958:	1884703a 	and	r2,r3,r2
  40f95c:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40f960:	e0bff517 	ldw	r2,-44(fp)
  40f964:	1080004c 	andi	r2,r2,1
  40f968:	e0fff617 	ldw	r3,-40(fp)
  40f96c:	1884b03a 	or	r2,r3,r2
  40f970:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f974:	e0bff617 	ldw	r2,-40(fp)
  40f978:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  40f97c:	e0bfff17 	ldw	r2,-4(fp)
  40f980:	00c01bc4 	movi	r3,111
  40f984:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
  40f988:	0005883a 	mov	r2,zero
  40f98c:	00003c06 	br	40fa80 <OSFlagPost+0x430>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  40f990:	0001883a 	nop
  40f994:	00000506 	br	40f9ac <OSFlagPost+0x35c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  40f998:	0001883a 	nop
  40f99c:	00000306 	br	40f9ac <OSFlagPost+0x35c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  40f9a0:	0001883a 	nop
  40f9a4:	00000106 	br	40f9ac <OSFlagPost+0x35c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
  40f9a8:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  40f9ac:	e0bfed17 	ldw	r2,-76(fp)
  40f9b0:	10800017 	ldw	r2,0(r2)
  40f9b4:	e0bfed15 	stw	r2,-76(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  40f9b8:	e0bfed17 	ldw	r2,-76(fp)
  40f9bc:	103f7c1e 	bne	r2,zero,40f7b0 <OSFlagPost+0x160>
  40f9c0:	e0bfef17 	ldw	r2,-68(fp)
  40f9c4:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40f9c8:	0005303a 	rdctl	r2,status
  40f9cc:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40f9d0:	e0fff817 	ldw	r3,-32(fp)
  40f9d4:	00bfff84 	movi	r2,-2
  40f9d8:	1884703a 	and	r2,r3,r2
  40f9dc:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40f9e0:	e0bff717 	ldw	r2,-36(fp)
  40f9e4:	1080004c 	andi	r2,r2,1
  40f9e8:	e0fff817 	ldw	r3,-32(fp)
  40f9ec:	1884b03a 	or	r2,r3,r2
  40f9f0:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  40f9f4:	e0bff817 	ldw	r2,-32(fp)
  40f9f8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  40f9fc:	e0bfee03 	ldbu	r2,-72(fp)
  40fa00:	10800058 	cmpnei	r2,r2,1
  40fa04:	1000011e 	bne	r2,zero,40fa0c <OSFlagPost+0x3bc>
        OS_Sched();
  40fa08:	040d8640 	call	40d864 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40fa0c:	0005303a 	rdctl	r2,status
  40fa10:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40fa14:	e0fff917 	ldw	r3,-28(fp)
  40fa18:	00bfff84 	movi	r2,-2
  40fa1c:	1884703a 	and	r2,r3,r2
  40fa20:	1001703a 	wrctl	status,r2
  
  return context;
  40fa24:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  40fa28:	e0bfef15 	stw	r2,-68(fp)
    flags_cur = pgrp->OSFlagFlags;
  40fa2c:	e0bffc17 	ldw	r2,-16(fp)
  40fa30:	1080020b 	ldhu	r2,8(r2)
  40fa34:	e0bff10d 	sth	r2,-60(fp)
  40fa38:	e0bfef17 	ldw	r2,-68(fp)
  40fa3c:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40fa40:	0005303a 	rdctl	r2,status
  40fa44:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40fa48:	e0fffb17 	ldw	r3,-20(fp)
  40fa4c:	00bfff84 	movi	r2,-2
  40fa50:	1884703a 	and	r2,r3,r2
  40fa54:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40fa58:	e0bffa17 	ldw	r2,-24(fp)
  40fa5c:	1080004c 	andi	r2,r2,1
  40fa60:	e0fffb17 	ldw	r3,-20(fp)
  40fa64:	1884b03a 	or	r2,r3,r2
  40fa68:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  40fa6c:	e0bffb17 	ldw	r2,-20(fp)
  40fa70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  40fa74:	e0bfff17 	ldw	r2,-4(fp)
  40fa78:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  40fa7c:	e0bff10b 	ldhu	r2,-60(fp)
}
  40fa80:	e037883a 	mov	sp,fp
  40fa84:	dfc00117 	ldw	ra,4(sp)
  40fa88:	df000017 	ldw	fp,0(sp)
  40fa8c:	dec00204 	addi	sp,sp,8
  40fa90:	f800283a 	ret

0040fa94 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  40fa94:	defff804 	addi	sp,sp,-32
  40fa98:	df000715 	stw	fp,28(sp)
  40fa9c:	df000704 	addi	fp,sp,28
  40faa0:	e13ffe15 	stw	r4,-8(fp)
  40faa4:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  40faa8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  40faac:	e0bfff17 	ldw	r2,-4(fp)
  40fab0:	1000021e 	bne	r2,zero,40fabc <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
  40fab4:	0005883a 	mov	r2,zero
  40fab8:	00002e06 	br	40fb74 <OSFlagQuery+0xe0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  40fabc:	e0bffe17 	ldw	r2,-8(fp)
  40fac0:	1000051e 	bne	r2,zero,40fad8 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  40fac4:	e0bfff17 	ldw	r2,-4(fp)
  40fac8:	00c01b84 	movi	r3,110
  40facc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  40fad0:	0005883a 	mov	r2,zero
  40fad4:	00002706 	br	40fb74 <OSFlagQuery+0xe0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  40fad8:	e0bffe17 	ldw	r2,-8(fp)
  40fadc:	10800003 	ldbu	r2,0(r2)
  40fae0:	10803fcc 	andi	r2,r2,255
  40fae4:	10800160 	cmpeqi	r2,r2,5
  40fae8:	1000051e 	bne	r2,zero,40fb00 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  40faec:	e0bfff17 	ldw	r2,-4(fp)
  40faf0:	00c00044 	movi	r3,1
  40faf4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
  40faf8:	0005883a 	mov	r2,zero
  40fafc:	00001d06 	br	40fb74 <OSFlagQuery+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  40fb00:	0005303a 	rdctl	r2,status
  40fb04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  40fb08:	e0fffb17 	ldw	r3,-20(fp)
  40fb0c:	00bfff84 	movi	r2,-2
  40fb10:	1884703a 	and	r2,r3,r2
  40fb14:	1001703a 	wrctl	status,r2
  
  return context;
  40fb18:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  40fb1c:	e0bff915 	stw	r2,-28(fp)
    flags = pgrp->OSFlagFlags;
  40fb20:	e0bffe17 	ldw	r2,-8(fp)
  40fb24:	1080020b 	ldhu	r2,8(r2)
  40fb28:	e0bffa0d 	sth	r2,-24(fp)
  40fb2c:	e0bff917 	ldw	r2,-28(fp)
  40fb30:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  40fb34:	0005303a 	rdctl	r2,status
  40fb38:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  40fb3c:	e0fffd17 	ldw	r3,-12(fp)
  40fb40:	00bfff84 	movi	r2,-2
  40fb44:	1884703a 	and	r2,r3,r2
  40fb48:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  40fb4c:	e0bffc17 	ldw	r2,-16(fp)
  40fb50:	1080004c 	andi	r2,r2,1
  40fb54:	e0fffd17 	ldw	r3,-12(fp)
  40fb58:	1884b03a 	or	r2,r3,r2
  40fb5c:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  40fb60:	e0bffd17 	ldw	r2,-12(fp)
  40fb64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  40fb68:	e0bfff17 	ldw	r2,-4(fp)
  40fb6c:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  40fb70:	e0bffa0b 	ldhu	r2,-24(fp)
}
  40fb74:	e037883a 	mov	sp,fp
  40fb78:	df000017 	ldw	fp,0(sp)
  40fb7c:	dec00104 	addi	sp,sp,4
  40fb80:	f800283a 	ret

0040fb84 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  40fb84:	defff804 	addi	sp,sp,-32
  40fb88:	df000715 	stw	fp,28(sp)
  40fb8c:	df000704 	addi	fp,sp,28
  40fb90:	e13ffb15 	stw	r4,-20(fp)
  40fb94:	e17ffc15 	stw	r5,-16(fp)
  40fb98:	3007883a 	mov	r3,r6
  40fb9c:	3805883a 	mov	r2,r7
  40fba0:	e1000117 	ldw	r4,4(fp)
  40fba4:	e0fffd0d 	sth	r3,-12(fp)
  40fba8:	e0bffe05 	stb	r2,-8(fp)
  40fbac:	e13fff0d 	sth	r4,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  40fbb0:	008010b4 	movhi	r2,66
  40fbb4:	10b59e04 	addi	r2,r2,-10632
  40fbb8:	10800017 	ldw	r2,0(r2)
  40fbbc:	00c010b4 	movhi	r3,66
  40fbc0:	18f59e04 	addi	r3,r3,-10632
  40fbc4:	18c00017 	ldw	r3,0(r3)
  40fbc8:	18c00c03 	ldbu	r3,48(r3)
  40fbcc:	18c00814 	ori	r3,r3,32
  40fbd0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  40fbd4:	008010b4 	movhi	r2,66
  40fbd8:	10b59e04 	addi	r2,r2,-10632
  40fbdc:	10800017 	ldw	r2,0(r2)
  40fbe0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  40fbe4:	008010b4 	movhi	r2,66
  40fbe8:	10b59e04 	addi	r2,r2,-10632
  40fbec:	10800017 	ldw	r2,0(r2)
  40fbf0:	e0ffff0b 	ldhu	r3,-4(fp)
  40fbf4:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  40fbf8:	008010b4 	movhi	r2,66
  40fbfc:	10b59e04 	addi	r2,r2,-10632
  40fc00:	10800017 	ldw	r2,0(r2)
  40fc04:	e0fffc17 	ldw	r3,-16(fp)
  40fc08:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  40fc0c:	e0bffc17 	ldw	r2,-16(fp)
  40fc10:	e0fffd0b 	ldhu	r3,-12(fp)
  40fc14:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  40fc18:	e0bffc17 	ldw	r2,-16(fp)
  40fc1c:	e0fffe03 	ldbu	r3,-8(fp)
  40fc20:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  40fc24:	008010b4 	movhi	r2,66
  40fc28:	10b59e04 	addi	r2,r2,-10632
  40fc2c:	10c00017 	ldw	r3,0(r2)
  40fc30:	e0bffc17 	ldw	r2,-16(fp)
  40fc34:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  40fc38:	e0bffb17 	ldw	r2,-20(fp)
  40fc3c:	10c00117 	ldw	r3,4(r2)
  40fc40:	e0bffc17 	ldw	r2,-16(fp)
  40fc44:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  40fc48:	e0bffc17 	ldw	r2,-16(fp)
  40fc4c:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  40fc50:	e0bffc17 	ldw	r2,-16(fp)
  40fc54:	e0fffb17 	ldw	r3,-20(fp)
  40fc58:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  40fc5c:	e0bffb17 	ldw	r2,-20(fp)
  40fc60:	10800117 	ldw	r2,4(r2)
  40fc64:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  40fc68:	e0bff917 	ldw	r2,-28(fp)
  40fc6c:	10000326 	beq	r2,zero,40fc7c <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  40fc70:	e0bff917 	ldw	r2,-28(fp)
  40fc74:	e0fffc17 	ldw	r3,-16(fp)
  40fc78:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  40fc7c:	e0bffb17 	ldw	r2,-20(fp)
  40fc80:	e0fffc17 	ldw	r3,-16(fp)
  40fc84:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  40fc88:	008010b4 	movhi	r2,66
  40fc8c:	10b59e04 	addi	r2,r2,-10632
  40fc90:	10800017 	ldw	r2,0(r2)
  40fc94:	10800d03 	ldbu	r2,52(r2)
  40fc98:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  40fc9c:	e0bffa03 	ldbu	r2,-24(fp)
  40fca0:	e0fffa03 	ldbu	r3,-24(fp)
  40fca4:	010010b4 	movhi	r4,66
  40fca8:	21359b44 	addi	r4,r4,-10643
  40fcac:	20c7883a 	add	r3,r4,r3
  40fcb0:	18c00003 	ldbu	r3,0(r3)
  40fcb4:	1809883a 	mov	r4,r3
  40fcb8:	00c010b4 	movhi	r3,66
  40fcbc:	18f59e04 	addi	r3,r3,-10632
  40fcc0:	18c00017 	ldw	r3,0(r3)
  40fcc4:	18c00d43 	ldbu	r3,53(r3)
  40fcc8:	00c6303a 	nor	r3,zero,r3
  40fccc:	20c6703a 	and	r3,r4,r3
  40fcd0:	010010b4 	movhi	r4,66
  40fcd4:	21359b44 	addi	r4,r4,-10643
  40fcd8:	2085883a 	add	r2,r4,r2
  40fcdc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  40fce0:	e0bffa03 	ldbu	r2,-24(fp)
  40fce4:	00c010b4 	movhi	r3,66
  40fce8:	18f59b44 	addi	r3,r3,-10643
  40fcec:	1885883a 	add	r2,r3,r2
  40fcf0:	10800003 	ldbu	r2,0(r2)
  40fcf4:	10803fcc 	andi	r2,r2,255
  40fcf8:	10000e1e 	bne	r2,zero,40fd34 <OS_FlagBlock+0x1b0>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  40fcfc:	008010b4 	movhi	r2,66
  40fd00:	10b59e04 	addi	r2,r2,-10632
  40fd04:	10800017 	ldw	r2,0(r2)
  40fd08:	10800d83 	ldbu	r2,54(r2)
  40fd0c:	0084303a 	nor	r2,zero,r2
  40fd10:	1007883a 	mov	r3,r2
  40fd14:	008010b4 	movhi	r2,66
  40fd18:	10b59b04 	addi	r2,r2,-10644
  40fd1c:	10800003 	ldbu	r2,0(r2)
  40fd20:	1884703a 	and	r2,r3,r2
  40fd24:	1007883a 	mov	r3,r2
  40fd28:	008010b4 	movhi	r2,66
  40fd2c:	10b59b04 	addi	r2,r2,-10644
  40fd30:	10c00005 	stb	r3,0(r2)
    }
}
  40fd34:	e037883a 	mov	sp,fp
  40fd38:	df000017 	ldw	fp,0(sp)
  40fd3c:	dec00104 	addi	sp,sp,4
  40fd40:	f800283a 	ret

0040fd44 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  40fd44:	defffb04 	addi	sp,sp,-20
  40fd48:	dfc00415 	stw	ra,16(sp)
  40fd4c:	df000315 	stw	fp,12(sp)
  40fd50:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  40fd54:	010010b4 	movhi	r4,66
  40fd58:	2135fb04 	addi	r4,r4,-10260
  40fd5c:	0140dc04 	movi	r5,880
  40fd60:	040d7a40 	call	40d7a4 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  40fd64:	008010b4 	movhi	r2,66
  40fd68:	10b5fb04 	addi	r2,r2,-10260
  40fd6c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  40fd70:	008010b4 	movhi	r2,66
  40fd74:	10b60604 	addi	r2,r2,-10216
  40fd78:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  40fd7c:	e03ffd0d 	sth	zero,-12(fp)
  40fd80:	00001306 	br	40fdd0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  40fd84:	e0bffe17 	ldw	r2,-8(fp)
  40fd88:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  40fd8c:	e0bffe17 	ldw	r2,-8(fp)
  40fd90:	e0ffff17 	ldw	r3,-4(fp)
  40fd94:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  40fd98:	e0bffe17 	ldw	r2,-8(fp)
  40fd9c:	00c00fc4 	movi	r3,63
  40fda0:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  40fda4:	e0bffe17 	ldw	r2,-8(fp)
  40fda8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  40fdac:	e0bffe17 	ldw	r2,-8(fp)
  40fdb0:	10800b04 	addi	r2,r2,44
  40fdb4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  40fdb8:	e0bfff17 	ldw	r2,-4(fp)
  40fdbc:	10800b04 	addi	r2,r2,44
  40fdc0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  40fdc4:	e0bffd0b 	ldhu	r2,-12(fp)
  40fdc8:	10800044 	addi	r2,r2,1
  40fdcc:	e0bffd0d 	sth	r2,-12(fp)
  40fdd0:	e0bffd0b 	ldhu	r2,-12(fp)
  40fdd4:	108004f0 	cmpltui	r2,r2,19
  40fdd8:	103fea1e 	bne	r2,zero,40fd84 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  40fddc:	e0bffe17 	ldw	r2,-8(fp)
  40fde0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  40fde4:	e0bffe17 	ldw	r2,-8(fp)
  40fde8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  40fdec:	e0bffe17 	ldw	r2,-8(fp)
  40fdf0:	00c00fc4 	movi	r3,63
  40fdf4:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  40fdf8:	e0bffe17 	ldw	r2,-8(fp)
  40fdfc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  40fe00:	008010b4 	movhi	r2,66
  40fe04:	10b5a004 	addi	r2,r2,-10624
  40fe08:	00c010b4 	movhi	r3,66
  40fe0c:	18f5fb04 	addi	r3,r3,-10260
  40fe10:	10c00015 	stw	r3,0(r2)
#endif
}
  40fe14:	e037883a 	mov	sp,fp
  40fe18:	dfc00117 	ldw	ra,4(sp)
  40fe1c:	df000017 	ldw	fp,0(sp)
  40fe20:	dec00204 	addi	sp,sp,8
  40fe24:	f800283a 	ret

0040fe28 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  40fe28:	defffa04 	addi	sp,sp,-24
  40fe2c:	dfc00515 	stw	ra,20(sp)
  40fe30:	df000415 	stw	fp,16(sp)
  40fe34:	df000404 	addi	fp,sp,16
  40fe38:	e13ffe15 	stw	r4,-8(fp)
  40fe3c:	2805883a 	mov	r2,r5
  40fe40:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  40fe44:	e0bffe17 	ldw	r2,-8(fp)
  40fe48:	10800217 	ldw	r2,8(r2)
  40fe4c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  40fe50:	e0bffd17 	ldw	r2,-12(fp)
  40fe54:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  40fe58:	e0bffd17 	ldw	r2,-12(fp)
  40fe5c:	e0ffff0b 	ldhu	r3,-4(fp)
  40fe60:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  40fe64:	e0bffd17 	ldw	r2,-12(fp)
  40fe68:	10c00c03 	ldbu	r3,48(r2)
  40fe6c:	00bff7c4 	movi	r2,-33
  40fe70:	1884703a 	and	r2,r3,r2
  40fe74:	1007883a 	mov	r3,r2
  40fe78:	e0bffd17 	ldw	r2,-12(fp)
  40fe7c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  40fe80:	e0bffd17 	ldw	r2,-12(fp)
  40fe84:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  40fe88:	e0bffd17 	ldw	r2,-12(fp)
  40fe8c:	10800c03 	ldbu	r2,48(r2)
  40fe90:	10803fcc 	andi	r2,r2,255
  40fe94:	10001e1e 	bne	r2,zero,40ff10 <OS_FlagTaskRdy+0xe8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  40fe98:	e0bffd17 	ldw	r2,-12(fp)
  40fe9c:	10c00d83 	ldbu	r3,54(r2)
  40fea0:	008010b4 	movhi	r2,66
  40fea4:	10b59b04 	addi	r2,r2,-10644
  40fea8:	10800003 	ldbu	r2,0(r2)
  40feac:	1884b03a 	or	r2,r3,r2
  40feb0:	1007883a 	mov	r3,r2
  40feb4:	008010b4 	movhi	r2,66
  40feb8:	10b59b04 	addi	r2,r2,-10644
  40febc:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  40fec0:	e0bffd17 	ldw	r2,-12(fp)
  40fec4:	10800d03 	ldbu	r2,52(r2)
  40fec8:	10803fcc 	andi	r2,r2,255
  40fecc:	e0fffd17 	ldw	r3,-12(fp)
  40fed0:	18c00d03 	ldbu	r3,52(r3)
  40fed4:	18c03fcc 	andi	r3,r3,255
  40fed8:	010010b4 	movhi	r4,66
  40fedc:	21359b44 	addi	r4,r4,-10643
  40fee0:	20c7883a 	add	r3,r4,r3
  40fee4:	19000003 	ldbu	r4,0(r3)
  40fee8:	e0fffd17 	ldw	r3,-12(fp)
  40feec:	18c00d43 	ldbu	r3,53(r3)
  40fef0:	20c6b03a 	or	r3,r4,r3
  40fef4:	010010b4 	movhi	r4,66
  40fef8:	21359b44 	addi	r4,r4,-10643
  40fefc:	2085883a 	add	r2,r4,r2
  40ff00:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  40ff04:	00800044 	movi	r2,1
  40ff08:	e0bffc05 	stb	r2,-16(fp)
  40ff0c:	00000106 	br	40ff14 <OS_FlagTaskRdy+0xec>
    } else {
        sched                   = OS_FALSE;
  40ff10:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  40ff14:	e13ffe17 	ldw	r4,-8(fp)
  40ff18:	040ff340 	call	40ff34 <OS_FlagUnlink>
    return (sched);
  40ff1c:	e0bffc03 	ldbu	r2,-16(fp)
}
  40ff20:	e037883a 	mov	sp,fp
  40ff24:	dfc00117 	ldw	ra,4(sp)
  40ff28:	df000017 	ldw	fp,0(sp)
  40ff2c:	dec00204 	addi	sp,sp,8
  40ff30:	f800283a 	ret

0040ff34 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  40ff34:	defffa04 	addi	sp,sp,-24
  40ff38:	df000515 	stw	fp,20(sp)
  40ff3c:	df000504 	addi	fp,sp,20
  40ff40:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  40ff44:	e0bfff17 	ldw	r2,-4(fp)
  40ff48:	10800117 	ldw	r2,4(r2)
  40ff4c:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  40ff50:	e0bfff17 	ldw	r2,-4(fp)
  40ff54:	10800017 	ldw	r2,0(r2)
  40ff58:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  40ff5c:	e0bffb17 	ldw	r2,-20(fp)
  40ff60:	10000b1e 	bne	r2,zero,40ff90 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  40ff64:	e0bfff17 	ldw	r2,-4(fp)
  40ff68:	10800317 	ldw	r2,12(r2)
  40ff6c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  40ff70:	e0bffd17 	ldw	r2,-12(fp)
  40ff74:	e0fffc17 	ldw	r3,-16(fp)
  40ff78:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  40ff7c:	e0bffc17 	ldw	r2,-16(fp)
  40ff80:	10000b26 	beq	r2,zero,40ffb0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  40ff84:	e0bffc17 	ldw	r2,-16(fp)
  40ff88:	10000115 	stw	zero,4(r2)
  40ff8c:	00000806 	br	40ffb0 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  40ff90:	e0bffb17 	ldw	r2,-20(fp)
  40ff94:	e0fffc17 	ldw	r3,-16(fp)
  40ff98:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  40ff9c:	e0bffc17 	ldw	r2,-16(fp)
  40ffa0:	10000326 	beq	r2,zero,40ffb0 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  40ffa4:	e0bffc17 	ldw	r2,-16(fp)
  40ffa8:	e0fffb17 	ldw	r3,-20(fp)
  40ffac:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  40ffb0:	e0bfff17 	ldw	r2,-4(fp)
  40ffb4:	10800217 	ldw	r2,8(r2)
  40ffb8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  40ffbc:	e0bffe17 	ldw	r2,-8(fp)
  40ffc0:	10000a15 	stw	zero,40(r2)
#endif
}
  40ffc4:	e037883a 	mov	sp,fp
  40ffc8:	df000017 	ldw	fp,0(sp)
  40ffcc:	dec00104 	addi	sp,sp,4
  40ffd0:	f800283a 	ret

0040ffd4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  40ffd4:	defff304 	addi	sp,sp,-52
  40ffd8:	df000c15 	stw	fp,48(sp)
  40ffdc:	df000c04 	addi	fp,sp,48
  40ffe0:	e13ffc15 	stw	r4,-16(fp)
  40ffe4:	e17ffd15 	stw	r5,-12(fp)
  40ffe8:	e1bffe15 	stw	r6,-8(fp)
  40ffec:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  40fff0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  40fff4:	e0bfff17 	ldw	r2,-4(fp)
  40fff8:	1000021e 	bne	r2,zero,410004 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
  40fffc:	0005883a 	mov	r2,zero
  410000:	00007806 	br	4101e4 <OSMemCreate+0x210>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  410004:	e0bffc17 	ldw	r2,-16(fp)
  410008:	1000051e 	bne	r2,zero,410020 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  41000c:	e0bfff17 	ldw	r2,-4(fp)
  410010:	00c01884 	movi	r3,98
  410014:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  410018:	0005883a 	mov	r2,zero
  41001c:	00007106 	br	4101e4 <OSMemCreate+0x210>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  410020:	e0bffc17 	ldw	r2,-16(fp)
  410024:	108000cc 	andi	r2,r2,3
  410028:	10000526 	beq	r2,zero,410040 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  41002c:	e0bfff17 	ldw	r2,-4(fp)
  410030:	00c01884 	movi	r3,98
  410034:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  410038:	0005883a 	mov	r2,zero
  41003c:	00006906 	br	4101e4 <OSMemCreate+0x210>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  410040:	e0bffd17 	ldw	r2,-12(fp)
  410044:	108000a8 	cmpgeui	r2,r2,2
  410048:	1000051e 	bne	r2,zero,410060 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  41004c:	e0bfff17 	ldw	r2,-4(fp)
  410050:	00c016c4 	movi	r3,91
  410054:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  410058:	0005883a 	mov	r2,zero
  41005c:	00006106 	br	4101e4 <OSMemCreate+0x210>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  410060:	e0bffe17 	ldw	r2,-8(fp)
  410064:	10800128 	cmpgeui	r2,r2,4
  410068:	1000051e 	bne	r2,zero,410080 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  41006c:	e0bfff17 	ldw	r2,-4(fp)
  410070:	00c01704 	movi	r3,92
  410074:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  410078:	0005883a 	mov	r2,zero
  41007c:	00005906 	br	4101e4 <OSMemCreate+0x210>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  410080:	0005303a 	rdctl	r2,status
  410084:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  410088:	e0fff917 	ldw	r3,-28(fp)
  41008c:	00bfff84 	movi	r2,-2
  410090:	1884703a 	and	r2,r3,r2
  410094:	1001703a 	wrctl	status,r2
  
  return context;
  410098:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  41009c:	e0bff715 	stw	r2,-36(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  4100a0:	008010b4 	movhi	r2,66
  4100a4:	10b59804 	addi	r2,r2,-10656
  4100a8:	10800017 	ldw	r2,0(r2)
  4100ac:	e0bff815 	stw	r2,-32(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  4100b0:	008010b4 	movhi	r2,66
  4100b4:	10b59804 	addi	r2,r2,-10656
  4100b8:	10800017 	ldw	r2,0(r2)
  4100bc:	10000726 	beq	r2,zero,4100dc <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  4100c0:	008010b4 	movhi	r2,66
  4100c4:	10b59804 	addi	r2,r2,-10656
  4100c8:	10800017 	ldw	r2,0(r2)
  4100cc:	10c00117 	ldw	r3,4(r2)
  4100d0:	008010b4 	movhi	r2,66
  4100d4:	10b59804 	addi	r2,r2,-10656
  4100d8:	10c00015 	stw	r3,0(r2)
  4100dc:	e0bff717 	ldw	r2,-36(fp)
  4100e0:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4100e4:	0005303a 	rdctl	r2,status
  4100e8:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4100ec:	e0fffb17 	ldw	r3,-20(fp)
  4100f0:	00bfff84 	movi	r2,-2
  4100f4:	1884703a 	and	r2,r3,r2
  4100f8:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4100fc:	e0bffa17 	ldw	r2,-24(fp)
  410100:	1080004c 	andi	r2,r2,1
  410104:	e0fffb17 	ldw	r3,-20(fp)
  410108:	1884b03a 	or	r2,r3,r2
  41010c:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  410110:	e0bffb17 	ldw	r2,-20(fp)
  410114:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  410118:	e0bff817 	ldw	r2,-32(fp)
  41011c:	1000051e 	bne	r2,zero,410134 <OSMemCreate+0x160>
        *perr = OS_ERR_MEM_INVALID_PART;
  410120:	e0bfff17 	ldw	r2,-4(fp)
  410124:	00c01684 	movi	r3,90
  410128:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
  41012c:	0005883a 	mov	r2,zero
  410130:	00002c06 	br	4101e4 <OSMemCreate+0x210>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  410134:	e0bffc17 	ldw	r2,-16(fp)
  410138:	e0bff515 	stw	r2,-44(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  41013c:	e0fffc17 	ldw	r3,-16(fp)
  410140:	e0bffe17 	ldw	r2,-8(fp)
  410144:	1885883a 	add	r2,r3,r2
  410148:	e0bff415 	stw	r2,-48(fp)
    for (i = 0; i < (nblks - 1); i++) {
  41014c:	e03ff615 	stw	zero,-40(fp)
  410150:	00000c06 	br	410184 <OSMemCreate+0x1b0>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  410154:	e0bff517 	ldw	r2,-44(fp)
  410158:	e0fff417 	ldw	r3,-48(fp)
  41015c:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  410160:	e0bff417 	ldw	r2,-48(fp)
  410164:	e0bff515 	stw	r2,-44(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  410168:	e0fff417 	ldw	r3,-48(fp)
  41016c:	e0bffe17 	ldw	r2,-8(fp)
  410170:	1885883a 	add	r2,r3,r2
  410174:	e0bff415 	stw	r2,-48(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  410178:	e0bff617 	ldw	r2,-40(fp)
  41017c:	10800044 	addi	r2,r2,1
  410180:	e0bff615 	stw	r2,-40(fp)
  410184:	e0bffd17 	ldw	r2,-12(fp)
  410188:	10bfffc4 	addi	r2,r2,-1
  41018c:	e0fff617 	ldw	r3,-40(fp)
  410190:	18bff036 	bltu	r3,r2,410154 <OSMemCreate+0x180>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  410194:	e0bff517 	ldw	r2,-44(fp)
  410198:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  41019c:	e0bff817 	ldw	r2,-32(fp)
  4101a0:	e0fffc17 	ldw	r3,-16(fp)
  4101a4:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  4101a8:	e0bff817 	ldw	r2,-32(fp)
  4101ac:	e0fffc17 	ldw	r3,-16(fp)
  4101b0:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  4101b4:	e0bff817 	ldw	r2,-32(fp)
  4101b8:	e0fffd17 	ldw	r3,-12(fp)
  4101bc:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
  4101c0:	e0bff817 	ldw	r2,-32(fp)
  4101c4:	e0fffd17 	ldw	r3,-12(fp)
  4101c8:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  4101cc:	e0bff817 	ldw	r2,-32(fp)
  4101d0:	e0fffe17 	ldw	r3,-8(fp)
  4101d4:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
  4101d8:	e0bfff17 	ldw	r2,-4(fp)
  4101dc:	10000005 	stb	zero,0(r2)
    return (pmem);
  4101e0:	e0bff817 	ldw	r2,-32(fp)
}
  4101e4:	e037883a 	mov	sp,fp
  4101e8:	df000017 	ldw	fp,0(sp)
  4101ec:	dec00104 	addi	sp,sp,4
  4101f0:	f800283a 	ret

004101f4 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  4101f4:	defff604 	addi	sp,sp,-40
  4101f8:	df000915 	stw	fp,36(sp)
  4101fc:	df000904 	addi	fp,sp,36
  410200:	e13ffe15 	stw	r4,-8(fp)
  410204:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  410208:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  41020c:	e0bfff17 	ldw	r2,-4(fp)
  410210:	1000021e 	bne	r2,zero,41021c <OSMemGet+0x28>
        return ((void *)0);
  410214:	0005883a 	mov	r2,zero
  410218:	00004406 	br	41032c <OSMemGet+0x138>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  41021c:	e0bffe17 	ldw	r2,-8(fp)
  410220:	1000051e 	bne	r2,zero,410238 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  410224:	e0bfff17 	ldw	r2,-4(fp)
  410228:	00c01804 	movi	r3,96
  41022c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  410230:	0005883a 	mov	r2,zero
  410234:	00003d06 	br	41032c <OSMemGet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  410238:	0005303a 	rdctl	r2,status
  41023c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  410240:	e0fff917 	ldw	r3,-28(fp)
  410244:	00bfff84 	movi	r2,-2
  410248:	1884703a 	and	r2,r3,r2
  41024c:	1001703a 	wrctl	status,r2
  
  return context;
  410250:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  410254:	e0bff715 	stw	r2,-36(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  410258:	e0bffe17 	ldw	r2,-8(fp)
  41025c:	10800417 	ldw	r2,16(r2)
  410260:	10001f26 	beq	r2,zero,4102e0 <OSMemGet+0xec>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  410264:	e0bffe17 	ldw	r2,-8(fp)
  410268:	10800117 	ldw	r2,4(r2)
  41026c:	e0bff815 	stw	r2,-32(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  410270:	e0bff817 	ldw	r2,-32(fp)
  410274:	10c00017 	ldw	r3,0(r2)
  410278:	e0bffe17 	ldw	r2,-8(fp)
  41027c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  410280:	e0bffe17 	ldw	r2,-8(fp)
  410284:	10800417 	ldw	r2,16(r2)
  410288:	10ffffc4 	addi	r3,r2,-1
  41028c:	e0bffe17 	ldw	r2,-8(fp)
  410290:	10c00415 	stw	r3,16(r2)
  410294:	e0bff717 	ldw	r2,-36(fp)
  410298:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41029c:	0005303a 	rdctl	r2,status
  4102a0:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4102a4:	e0fffb17 	ldw	r3,-20(fp)
  4102a8:	00bfff84 	movi	r2,-2
  4102ac:	1884703a 	and	r2,r3,r2
  4102b0:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4102b4:	e0bffa17 	ldw	r2,-24(fp)
  4102b8:	1080004c 	andi	r2,r2,1
  4102bc:	e0fffb17 	ldw	r3,-20(fp)
  4102c0:	1884b03a 	or	r2,r3,r2
  4102c4:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  4102c8:	e0bffb17 	ldw	r2,-20(fp)
  4102cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  4102d0:	e0bfff17 	ldw	r2,-4(fp)
  4102d4:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  4102d8:	e0bff817 	ldw	r2,-32(fp)
  4102dc:	00001306 	br	41032c <OSMemGet+0x138>
  4102e0:	e0bff717 	ldw	r2,-36(fp)
  4102e4:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4102e8:	0005303a 	rdctl	r2,status
  4102ec:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4102f0:	e0fffd17 	ldw	r3,-12(fp)
  4102f4:	00bfff84 	movi	r2,-2
  4102f8:	1884703a 	and	r2,r3,r2
  4102fc:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  410300:	e0bffc17 	ldw	r2,-16(fp)
  410304:	1080004c 	andi	r2,r2,1
  410308:	e0fffd17 	ldw	r3,-12(fp)
  41030c:	1884b03a 	or	r2,r3,r2
  410310:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  410314:	e0bffd17 	ldw	r2,-12(fp)
  410318:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  41031c:	e0bfff17 	ldw	r2,-4(fp)
  410320:	00c01744 	movi	r3,93
  410324:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  410328:	0005883a 	mov	r2,zero
}
  41032c:	e037883a 	mov	sp,fp
  410330:	df000017 	ldw	fp,0(sp)
  410334:	dec00104 	addi	sp,sp,4
  410338:	f800283a 	ret

0041033c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  41033c:	defff604 	addi	sp,sp,-40
  410340:	dfc00915 	stw	ra,36(sp)
  410344:	df000815 	stw	fp,32(sp)
  410348:	df000804 	addi	fp,sp,32
  41034c:	e13ffd15 	stw	r4,-12(fp)
  410350:	e17ffe15 	stw	r5,-8(fp)
  410354:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  410358:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  41035c:	e0bfff17 	ldw	r2,-4(fp)
  410360:	1000021e 	bne	r2,zero,41036c <OSMemNameGet+0x30>
        return (0);
  410364:	0005883a 	mov	r2,zero
  410368:	00003806 	br	41044c <OSMemNameGet+0x110>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  41036c:	e0bffd17 	ldw	r2,-12(fp)
  410370:	1000051e 	bne	r2,zero,410388 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  410374:	e0bfff17 	ldw	r2,-4(fp)
  410378:	00c01804 	movi	r3,96
  41037c:	10c00005 	stb	r3,0(r2)
        return (0);
  410380:	0005883a 	mov	r2,zero
  410384:	00003106 	br	41044c <OSMemNameGet+0x110>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  410388:	e0bffe17 	ldw	r2,-8(fp)
  41038c:	1000051e 	bne	r2,zero,4103a4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
  410390:	e0bfff17 	ldw	r2,-4(fp)
  410394:	00c00304 	movi	r3,12
  410398:	10c00005 	stb	r3,0(r2)
        return (0);
  41039c:	0005883a 	mov	r2,zero
  4103a0:	00002a06 	br	41044c <OSMemNameGet+0x110>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  4103a4:	008010b4 	movhi	r2,66
  4103a8:	10b59d04 	addi	r2,r2,-10636
  4103ac:	10800003 	ldbu	r2,0(r2)
  4103b0:	10803fcc 	andi	r2,r2,255
  4103b4:	10000526 	beq	r2,zero,4103cc <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
  4103b8:	e0bfff17 	ldw	r2,-4(fp)
  4103bc:	00c00444 	movi	r3,17
  4103c0:	10c00005 	stb	r3,0(r2)
        return (0);
  4103c4:	0005883a 	mov	r2,zero
  4103c8:	00002006 	br	41044c <OSMemNameGet+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4103cc:	0005303a 	rdctl	r2,status
  4103d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4103d4:	e0fffa17 	ldw	r3,-24(fp)
  4103d8:	00bfff84 	movi	r2,-2
  4103dc:	1884703a 	and	r2,r3,r2
  4103e0:	1001703a 	wrctl	status,r2
  
  return context;
  4103e4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  4103e8:	e0bff815 	stw	r2,-32(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  4103ec:	e0bffd17 	ldw	r2,-12(fp)
  4103f0:	10800504 	addi	r2,r2,20
  4103f4:	e13ffe17 	ldw	r4,-8(fp)
  4103f8:	100b883a 	mov	r5,r2
  4103fc:	040d9cc0 	call	40d9cc <OS_StrCopy>
  410400:	e0bff905 	stb	r2,-28(fp)
  410404:	e0bff817 	ldw	r2,-32(fp)
  410408:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41040c:	0005303a 	rdctl	r2,status
  410410:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  410414:	e0fffc17 	ldw	r3,-16(fp)
  410418:	00bfff84 	movi	r2,-2
  41041c:	1884703a 	and	r2,r3,r2
  410420:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  410424:	e0bffb17 	ldw	r2,-20(fp)
  410428:	1080004c 	andi	r2,r2,1
  41042c:	e0fffc17 	ldw	r3,-16(fp)
  410430:	1884b03a 	or	r2,r3,r2
  410434:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  410438:	e0bffc17 	ldw	r2,-16(fp)
  41043c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  410440:	e0bfff17 	ldw	r2,-4(fp)
  410444:	10000005 	stb	zero,0(r2)
    return (len);
  410448:	e0bff903 	ldbu	r2,-28(fp)
}
  41044c:	e037883a 	mov	sp,fp
  410450:	dfc00117 	ldw	ra,4(sp)
  410454:	df000017 	ldw	fp,0(sp)
  410458:	dec00204 	addi	sp,sp,8
  41045c:	f800283a 	ret

00410460 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  410460:	defff404 	addi	sp,sp,-48
  410464:	dfc00b15 	stw	ra,44(sp)
  410468:	df000a15 	stw	fp,40(sp)
  41046c:	df000a04 	addi	fp,sp,40
  410470:	e13ffd15 	stw	r4,-12(fp)
  410474:	e17ffe15 	stw	r5,-8(fp)
  410478:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  41047c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  410480:	e0bfff17 	ldw	r2,-4(fp)
  410484:	10004d26 	beq	r2,zero,4105bc <OSMemNameSet+0x15c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  410488:	e0bffd17 	ldw	r2,-12(fp)
  41048c:	1000041e 	bne	r2,zero,4104a0 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  410490:	e0bfff17 	ldw	r2,-4(fp)
  410494:	00c01804 	movi	r3,96
  410498:	10c00005 	stb	r3,0(r2)
        return;
  41049c:	00004806 	br	4105c0 <OSMemNameSet+0x160>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  4104a0:	e0bffe17 	ldw	r2,-8(fp)
  4104a4:	1000041e 	bne	r2,zero,4104b8 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
  4104a8:	e0bfff17 	ldw	r2,-4(fp)
  4104ac:	00c00304 	movi	r3,12
  4104b0:	10c00005 	stb	r3,0(r2)
        return;
  4104b4:	00004206 	br	4105c0 <OSMemNameSet+0x160>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  4104b8:	008010b4 	movhi	r2,66
  4104bc:	10b59d04 	addi	r2,r2,-10636
  4104c0:	10800003 	ldbu	r2,0(r2)
  4104c4:	10803fcc 	andi	r2,r2,255
  4104c8:	10000426 	beq	r2,zero,4104dc <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
  4104cc:	e0bfff17 	ldw	r2,-4(fp)
  4104d0:	00c00484 	movi	r3,18
  4104d4:	10c00005 	stb	r3,0(r2)
        return;
  4104d8:	00003906 	br	4105c0 <OSMemNameSet+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4104dc:	0005303a 	rdctl	r2,status
  4104e0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4104e4:	e0fff817 	ldw	r3,-32(fp)
  4104e8:	00bfff84 	movi	r2,-2
  4104ec:	1884703a 	and	r2,r3,r2
  4104f0:	1001703a 	wrctl	status,r2
  
  return context;
  4104f4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  4104f8:	e0bff615 	stw	r2,-40(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  4104fc:	e13ffe17 	ldw	r4,-8(fp)
  410500:	040da480 	call	40da48 <OS_StrLen>
  410504:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  410508:	e0bff703 	ldbu	r2,-36(fp)
  41050c:	10800830 	cmpltui	r2,r2,32
  410510:	1000131e 	bne	r2,zero,410560 <OSMemNameSet+0x100>
  410514:	e0bff617 	ldw	r2,-40(fp)
  410518:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41051c:	0005303a 	rdctl	r2,status
  410520:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  410524:	e0fffa17 	ldw	r3,-24(fp)
  410528:	00bfff84 	movi	r2,-2
  41052c:	1884703a 	and	r2,r3,r2
  410530:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  410534:	e0bff917 	ldw	r2,-28(fp)
  410538:	1080004c 	andi	r2,r2,1
  41053c:	e0fffa17 	ldw	r3,-24(fp)
  410540:	1884b03a 	or	r2,r3,r2
  410544:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  410548:	e0bffa17 	ldw	r2,-24(fp)
  41054c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  410550:	e0bfff17 	ldw	r2,-4(fp)
  410554:	00c018c4 	movi	r3,99
  410558:	10c00005 	stb	r3,0(r2)
        return;
  41055c:	00001806 	br	4105c0 <OSMemNameSet+0x160>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  410560:	e0bffd17 	ldw	r2,-12(fp)
  410564:	10800504 	addi	r2,r2,20
  410568:	1009883a 	mov	r4,r2
  41056c:	e17ffe17 	ldw	r5,-8(fp)
  410570:	040d9cc0 	call	40d9cc <OS_StrCopy>
  410574:	e0bff617 	ldw	r2,-40(fp)
  410578:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41057c:	0005303a 	rdctl	r2,status
  410580:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  410584:	e0fffc17 	ldw	r3,-16(fp)
  410588:	00bfff84 	movi	r2,-2
  41058c:	1884703a 	and	r2,r3,r2
  410590:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  410594:	e0bffb17 	ldw	r2,-20(fp)
  410598:	1080004c 	andi	r2,r2,1
  41059c:	e0fffc17 	ldw	r3,-16(fp)
  4105a0:	1884b03a 	or	r2,r3,r2
  4105a4:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  4105a8:	e0bffc17 	ldw	r2,-16(fp)
  4105ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  4105b0:	e0bfff17 	ldw	r2,-4(fp)
  4105b4:	10000005 	stb	zero,0(r2)
  4105b8:	00000106 	br	4105c0 <OSMemNameSet+0x160>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
  4105bc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  4105c0:	e037883a 	mov	sp,fp
  4105c4:	dfc00117 	ldw	ra,4(sp)
  4105c8:	df000017 	ldw	fp,0(sp)
  4105cc:	dec00204 	addi	sp,sp,8
  4105d0:	f800283a 	ret

004105d4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  4105d4:	defff704 	addi	sp,sp,-36
  4105d8:	df000815 	stw	fp,32(sp)
  4105dc:	df000804 	addi	fp,sp,32
  4105e0:	e13ffe15 	stw	r4,-8(fp)
  4105e4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  4105e8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  4105ec:	e0bffe17 	ldw	r2,-8(fp)
  4105f0:	1000021e 	bne	r2,zero,4105fc <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  4105f4:	00801804 	movi	r2,96
  4105f8:	00003e06 	br	4106f4 <OSMemPut+0x120>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  4105fc:	e0bfff17 	ldw	r2,-4(fp)
  410600:	1000021e 	bne	r2,zero,41060c <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
  410604:	008017c4 	movi	r2,95
  410608:	00003a06 	br	4106f4 <OSMemPut+0x120>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  41060c:	0005303a 	rdctl	r2,status
  410610:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  410614:	e0fff917 	ldw	r3,-28(fp)
  410618:	00bfff84 	movi	r2,-2
  41061c:	1884703a 	and	r2,r3,r2
  410620:	1001703a 	wrctl	status,r2
  
  return context;
  410624:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  410628:	e0bff815 	stw	r2,-32(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  41062c:	e0bffe17 	ldw	r2,-8(fp)
  410630:	10c00417 	ldw	r3,16(r2)
  410634:	e0bffe17 	ldw	r2,-8(fp)
  410638:	10800317 	ldw	r2,12(r2)
  41063c:	18801136 	bltu	r3,r2,410684 <OSMemPut+0xb0>
  410640:	e0bff817 	ldw	r2,-32(fp)
  410644:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  410648:	0005303a 	rdctl	r2,status
  41064c:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  410650:	e0fffb17 	ldw	r3,-20(fp)
  410654:	00bfff84 	movi	r2,-2
  410658:	1884703a 	and	r2,r3,r2
  41065c:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  410660:	e0bffa17 	ldw	r2,-24(fp)
  410664:	1080004c 	andi	r2,r2,1
  410668:	e0fffb17 	ldw	r3,-20(fp)
  41066c:	1884b03a 	or	r2,r3,r2
  410670:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  410674:	e0bffb17 	ldw	r2,-20(fp)
  410678:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  41067c:	00801784 	movi	r2,94
  410680:	00001c06 	br	4106f4 <OSMemPut+0x120>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  410684:	e0bffe17 	ldw	r2,-8(fp)
  410688:	10c00117 	ldw	r3,4(r2)
  41068c:	e0bfff17 	ldw	r2,-4(fp)
  410690:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
  410694:	e0bffe17 	ldw	r2,-8(fp)
  410698:	e0ffff17 	ldw	r3,-4(fp)
  41069c:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  4106a0:	e0bffe17 	ldw	r2,-8(fp)
  4106a4:	10800417 	ldw	r2,16(r2)
  4106a8:	10c00044 	addi	r3,r2,1
  4106ac:	e0bffe17 	ldw	r2,-8(fp)
  4106b0:	10c00415 	stw	r3,16(r2)
  4106b4:	e0bff817 	ldw	r2,-32(fp)
  4106b8:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4106bc:	0005303a 	rdctl	r2,status
  4106c0:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4106c4:	e0fffd17 	ldw	r3,-12(fp)
  4106c8:	00bfff84 	movi	r2,-2
  4106cc:	1884703a 	and	r2,r3,r2
  4106d0:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4106d4:	e0bffc17 	ldw	r2,-16(fp)
  4106d8:	1080004c 	andi	r2,r2,1
  4106dc:	e0fffd17 	ldw	r3,-12(fp)
  4106e0:	1884b03a 	or	r2,r3,r2
  4106e4:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  4106e8:	e0bffd17 	ldw	r2,-12(fp)
  4106ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  4106f0:	0005883a 	mov	r2,zero
}
  4106f4:	e037883a 	mov	sp,fp
  4106f8:	df000017 	ldw	fp,0(sp)
  4106fc:	dec00104 	addi	sp,sp,4
  410700:	f800283a 	ret

00410704 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  410704:	defff904 	addi	sp,sp,-28
  410708:	df000615 	stw	fp,24(sp)
  41070c:	df000604 	addi	fp,sp,24
  410710:	e13ffe15 	stw	r4,-8(fp)
  410714:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  410718:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  41071c:	e0bffe17 	ldw	r2,-8(fp)
  410720:	1000021e 	bne	r2,zero,41072c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
  410724:	00801804 	movi	r2,96
  410728:	00003706 	br	410808 <OSMemQuery+0x104>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  41072c:	e0bfff17 	ldw	r2,-4(fp)
  410730:	1000021e 	bne	r2,zero,41073c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
  410734:	00801844 	movi	r2,97
  410738:	00003306 	br	410808 <OSMemQuery+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  41073c:	0005303a 	rdctl	r2,status
  410740:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  410744:	e0fffb17 	ldw	r3,-20(fp)
  410748:	00bfff84 	movi	r2,-2
  41074c:	1884703a 	and	r2,r3,r2
  410750:	1001703a 	wrctl	status,r2
  
  return context;
  410754:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  410758:	e0bffa15 	stw	r2,-24(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  41075c:	e0bffe17 	ldw	r2,-8(fp)
  410760:	10c00017 	ldw	r3,0(r2)
  410764:	e0bfff17 	ldw	r2,-4(fp)
  410768:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  41076c:	e0bffe17 	ldw	r2,-8(fp)
  410770:	10c00117 	ldw	r3,4(r2)
  410774:	e0bfff17 	ldw	r2,-4(fp)
  410778:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  41077c:	e0bffe17 	ldw	r2,-8(fp)
  410780:	10c00217 	ldw	r3,8(r2)
  410784:	e0bfff17 	ldw	r2,-4(fp)
  410788:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  41078c:	e0bffe17 	ldw	r2,-8(fp)
  410790:	10c00317 	ldw	r3,12(r2)
  410794:	e0bfff17 	ldw	r2,-4(fp)
  410798:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  41079c:	e0bffe17 	ldw	r2,-8(fp)
  4107a0:	10c00417 	ldw	r3,16(r2)
  4107a4:	e0bfff17 	ldw	r2,-4(fp)
  4107a8:	10c00415 	stw	r3,16(r2)
  4107ac:	e0bffa17 	ldw	r2,-24(fp)
  4107b0:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4107b4:	0005303a 	rdctl	r2,status
  4107b8:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4107bc:	e0fffd17 	ldw	r3,-12(fp)
  4107c0:	00bfff84 	movi	r2,-2
  4107c4:	1884703a 	and	r2,r3,r2
  4107c8:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4107cc:	e0bffc17 	ldw	r2,-16(fp)
  4107d0:	1080004c 	andi	r2,r2,1
  4107d4:	e0fffd17 	ldw	r3,-12(fp)
  4107d8:	1884b03a 	or	r2,r3,r2
  4107dc:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  4107e0:	e0bffd17 	ldw	r2,-12(fp)
  4107e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  4107e8:	e0bfff17 	ldw	r2,-4(fp)
  4107ec:	10c00317 	ldw	r3,12(r2)
  4107f0:	e0bfff17 	ldw	r2,-4(fp)
  4107f4:	10800417 	ldw	r2,16(r2)
  4107f8:	1887c83a 	sub	r3,r3,r2
  4107fc:	e0bfff17 	ldw	r2,-4(fp)
  410800:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  410804:	0005883a 	mov	r2,zero
}
  410808:	e037883a 	mov	sp,fp
  41080c:	df000017 	ldw	fp,0(sp)
  410810:	dec00104 	addi	sp,sp,4
  410814:	f800283a 	ret

00410818 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  410818:	defffc04 	addi	sp,sp,-16
  41081c:	dfc00315 	stw	ra,12(sp)
  410820:	df000215 	stw	fp,8(sp)
  410824:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  410828:	010010b4 	movhi	r4,66
  41082c:	2136d704 	addi	r4,r4,-9380
  410830:	01430c04 	movi	r5,3120
  410834:	040d7a40 	call	40d7a4 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  410838:	008010b4 	movhi	r2,66
  41083c:	10b6d704 	addi	r2,r2,-9380
  410840:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  410844:	e03fff0d 	sth	zero,-4(fp)
  410848:	00001506 	br	4108a0 <OS_MemInit+0x88>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  41084c:	e0bfff0b 	ldhu	r2,-4(fp)
  410850:	10800044 	addi	r2,r2,1
  410854:	1009883a 	mov	r4,r2
  410858:	01400d04 	movi	r5,52
  41085c:	0400e700 	call	400e70 <__mulsi3>
  410860:	00c010b4 	movhi	r3,66
  410864:	18f6d704 	addi	r3,r3,-9380
  410868:	10c7883a 	add	r3,r2,r3
  41086c:	e0bffe17 	ldw	r2,-8(fp)
  410870:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  410874:	e0bffe17 	ldw	r2,-8(fp)
  410878:	00c00fc4 	movi	r3,63
  41087c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  410880:	e0bffe17 	ldw	r2,-8(fp)
  410884:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  410888:	e0bffe17 	ldw	r2,-8(fp)
  41088c:	10800d04 	addi	r2,r2,52
  410890:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  410894:	e0bfff0b 	ldhu	r2,-4(fp)
  410898:	10800044 	addi	r2,r2,1
  41089c:	e0bfff0d 	sth	r2,-4(fp)
  4108a0:	e0bfff0b 	ldhu	r2,-4(fp)
  4108a4:	10800ef0 	cmpltui	r2,r2,59
  4108a8:	103fe81e 	bne	r2,zero,41084c <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  4108ac:	e0bffe17 	ldw	r2,-8(fp)
  4108b0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  4108b4:	e0bffe17 	ldw	r2,-8(fp)
  4108b8:	00c00fc4 	movi	r3,63
  4108bc:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  4108c0:	e0bffe17 	ldw	r2,-8(fp)
  4108c4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  4108c8:	008010b4 	movhi	r2,66
  4108cc:	10b59804 	addi	r2,r2,-10656
  4108d0:	00c010b4 	movhi	r3,66
  4108d4:	18f6d704 	addi	r3,r3,-9380
  4108d8:	10c00015 	stw	r3,0(r2)
#endif
}
  4108dc:	e037883a 	mov	sp,fp
  4108e0:	dfc00117 	ldw	ra,4(sp)
  4108e4:	df000017 	ldw	fp,0(sp)
  4108e8:	dec00204 	addi	sp,sp,8
  4108ec:	f800283a 	ret

004108f0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  4108f0:	defff704 	addi	sp,sp,-36
  4108f4:	df000815 	stw	fp,32(sp)
  4108f8:	df000804 	addi	fp,sp,32
  4108fc:	e13ffe15 	stw	r4,-8(fp)
  410900:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  410904:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  410908:	e0bfff17 	ldw	r2,-4(fp)
  41090c:	1000021e 	bne	r2,zero,410918 <OSQAccept+0x28>
        return ((void *)0);
  410910:	0005883a 	mov	r2,zero
  410914:	00004d06 	br	410a4c <OSQAccept+0x15c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  410918:	e0bffe17 	ldw	r2,-8(fp)
  41091c:	1000051e 	bne	r2,zero,410934 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  410920:	e0bfff17 	ldw	r2,-4(fp)
  410924:	00c00104 	movi	r3,4
  410928:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  41092c:	0005883a 	mov	r2,zero
  410930:	00004606 	br	410a4c <OSQAccept+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  410934:	e0bffe17 	ldw	r2,-8(fp)
  410938:	10800003 	ldbu	r2,0(r2)
  41093c:	10803fcc 	andi	r2,r2,255
  410940:	108000a0 	cmpeqi	r2,r2,2
  410944:	1000051e 	bne	r2,zero,41095c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  410948:	e0bfff17 	ldw	r2,-4(fp)
  41094c:	00c00044 	movi	r3,1
  410950:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  410954:	0005883a 	mov	r2,zero
  410958:	00003c06 	br	410a4c <OSQAccept+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  41095c:	0005303a 	rdctl	r2,status
  410960:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  410964:	e0fffb17 	ldw	r3,-20(fp)
  410968:	00bfff84 	movi	r2,-2
  41096c:	1884703a 	and	r2,r3,r2
  410970:	1001703a 	wrctl	status,r2
  
  return context;
  410974:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  410978:	e0bff915 	stw	r2,-28(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  41097c:	e0bffe17 	ldw	r2,-8(fp)
  410980:	10800117 	ldw	r2,4(r2)
  410984:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  410988:	e0bffa17 	ldw	r2,-24(fp)
  41098c:	1080058b 	ldhu	r2,22(r2)
  410990:	10bfffcc 	andi	r2,r2,65535
  410994:	10001926 	beq	r2,zero,4109fc <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  410998:	e0bffa17 	ldw	r2,-24(fp)
  41099c:	10800417 	ldw	r2,16(r2)
  4109a0:	10c00017 	ldw	r3,0(r2)
  4109a4:	e0fff815 	stw	r3,-32(fp)
  4109a8:	10c00104 	addi	r3,r2,4
  4109ac:	e0bffa17 	ldw	r2,-24(fp)
  4109b0:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  4109b4:	e0bffa17 	ldw	r2,-24(fp)
  4109b8:	1080058b 	ldhu	r2,22(r2)
  4109bc:	10bfffc4 	addi	r2,r2,-1
  4109c0:	1007883a 	mov	r3,r2
  4109c4:	e0bffa17 	ldw	r2,-24(fp)
  4109c8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  4109cc:	e0bffa17 	ldw	r2,-24(fp)
  4109d0:	10c00417 	ldw	r3,16(r2)
  4109d4:	e0bffa17 	ldw	r2,-24(fp)
  4109d8:	10800217 	ldw	r2,8(r2)
  4109dc:	1880041e 	bne	r3,r2,4109f0 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
  4109e0:	e0bffa17 	ldw	r2,-24(fp)
  4109e4:	10c00117 	ldw	r3,4(r2)
  4109e8:	e0bffa17 	ldw	r2,-24(fp)
  4109ec:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  4109f0:	e0bfff17 	ldw	r2,-4(fp)
  4109f4:	10000005 	stb	zero,0(r2)
  4109f8:	00000406 	br	410a0c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  4109fc:	e0bfff17 	ldw	r2,-4(fp)
  410a00:	00c007c4 	movi	r3,31
  410a04:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  410a08:	e03ff815 	stw	zero,-32(fp)
  410a0c:	e0bff917 	ldw	r2,-28(fp)
  410a10:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  410a14:	0005303a 	rdctl	r2,status
  410a18:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  410a1c:	e0fffd17 	ldw	r3,-12(fp)
  410a20:	00bfff84 	movi	r2,-2
  410a24:	1884703a 	and	r2,r3,r2
  410a28:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  410a2c:	e0bffc17 	ldw	r2,-16(fp)
  410a30:	1080004c 	andi	r2,r2,1
  410a34:	e0fffd17 	ldw	r3,-12(fp)
  410a38:	1884b03a 	or	r2,r3,r2
  410a3c:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  410a40:	e0bffd17 	ldw	r2,-12(fp)
  410a44:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  410a48:	e0bff817 	ldw	r2,-32(fp)
}
  410a4c:	e037883a 	mov	sp,fp
  410a50:	df000017 	ldw	fp,0(sp)
  410a54:	dec00104 	addi	sp,sp,4
  410a58:	f800283a 	ret

00410a5c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  410a5c:	defff104 	addi	sp,sp,-60
  410a60:	dfc00e15 	stw	ra,56(sp)
  410a64:	df000d15 	stw	fp,52(sp)
  410a68:	df000d04 	addi	fp,sp,52
  410a6c:	e13ffe15 	stw	r4,-8(fp)
  410a70:	2805883a 	mov	r2,r5
  410a74:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  410a78:	e03ff415 	stw	zero,-48(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  410a7c:	008010b4 	movhi	r2,66
  410a80:	10b59d04 	addi	r2,r2,-10636
  410a84:	10800003 	ldbu	r2,0(r2)
  410a88:	10803fcc 	andi	r2,r2,255
  410a8c:	10000226 	beq	r2,zero,410a98 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  410a90:	0005883a 	mov	r2,zero
  410a94:	00008b06 	br	410cc4 <OSQCreate+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  410a98:	0005303a 	rdctl	r2,status
  410a9c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  410aa0:	e0fff617 	ldw	r3,-40(fp)
  410aa4:	00bfff84 	movi	r2,-2
  410aa8:	1884703a 	and	r2,r3,r2
  410aac:	1001703a 	wrctl	status,r2
  
  return context;
  410ab0:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  410ab4:	e0bff415 	stw	r2,-48(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  410ab8:	008010b4 	movhi	r2,66
  410abc:	10b59c04 	addi	r2,r2,-10640
  410ac0:	10800017 	ldw	r2,0(r2)
  410ac4:	e0bff315 	stw	r2,-52(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  410ac8:	008010b4 	movhi	r2,66
  410acc:	10b59c04 	addi	r2,r2,-10640
  410ad0:	10800017 	ldw	r2,0(r2)
  410ad4:	10000726 	beq	r2,zero,410af4 <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  410ad8:	008010b4 	movhi	r2,66
  410adc:	10b59c04 	addi	r2,r2,-10640
  410ae0:	10800017 	ldw	r2,0(r2)
  410ae4:	10c00117 	ldw	r3,4(r2)
  410ae8:	008010b4 	movhi	r2,66
  410aec:	10b59c04 	addi	r2,r2,-10640
  410af0:	10c00015 	stw	r3,0(r2)
  410af4:	e0bff417 	ldw	r2,-48(fp)
  410af8:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  410afc:	0005303a 	rdctl	r2,status
  410b00:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  410b04:	e0fff817 	ldw	r3,-32(fp)
  410b08:	00bfff84 	movi	r2,-2
  410b0c:	1884703a 	and	r2,r3,r2
  410b10:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  410b14:	e0bff717 	ldw	r2,-36(fp)
  410b18:	1080004c 	andi	r2,r2,1
  410b1c:	e0fff817 	ldw	r3,-32(fp)
  410b20:	1884b03a 	or	r2,r3,r2
  410b24:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  410b28:	e0bff817 	ldw	r2,-32(fp)
  410b2c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  410b30:	e0bff317 	ldw	r2,-52(fp)
  410b34:	10006226 	beq	r2,zero,410cc0 <OSQCreate+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  410b38:	0005303a 	rdctl	r2,status
  410b3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  410b40:	e0fff917 	ldw	r3,-28(fp)
  410b44:	00bfff84 	movi	r2,-2
  410b48:	1884703a 	and	r2,r3,r2
  410b4c:	1001703a 	wrctl	status,r2
  
  return context;
  410b50:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
  410b54:	e0bff415 	stw	r2,-48(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  410b58:	008010b4 	movhi	r2,66
  410b5c:	10b59a04 	addi	r2,r2,-10648
  410b60:	10800017 	ldw	r2,0(r2)
  410b64:	e0bff515 	stw	r2,-44(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  410b68:	e0bff517 	ldw	r2,-44(fp)
  410b6c:	10003b26 	beq	r2,zero,410c5c <OSQCreate+0x200>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  410b70:	008010b4 	movhi	r2,66
  410b74:	10b59a04 	addi	r2,r2,-10648
  410b78:	10800017 	ldw	r2,0(r2)
  410b7c:	10c00017 	ldw	r3,0(r2)
  410b80:	008010b4 	movhi	r2,66
  410b84:	10b59a04 	addi	r2,r2,-10648
  410b88:	10c00015 	stw	r3,0(r2)
  410b8c:	e0bff417 	ldw	r2,-48(fp)
  410b90:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  410b94:	0005303a 	rdctl	r2,status
  410b98:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  410b9c:	e0fffb17 	ldw	r3,-20(fp)
  410ba0:	00bfff84 	movi	r2,-2
  410ba4:	1884703a 	and	r2,r3,r2
  410ba8:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  410bac:	e0bffa17 	ldw	r2,-24(fp)
  410bb0:	1080004c 	andi	r2,r2,1
  410bb4:	e0fffb17 	ldw	r3,-20(fp)
  410bb8:	1884b03a 	or	r2,r3,r2
  410bbc:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  410bc0:	e0bffb17 	ldw	r2,-20(fp)
  410bc4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  410bc8:	e0bff517 	ldw	r2,-44(fp)
  410bcc:	e0fffe17 	ldw	r3,-8(fp)
  410bd0:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
  410bd4:	e0bfff0b 	ldhu	r2,-4(fp)
  410bd8:	1085883a 	add	r2,r2,r2
  410bdc:	1085883a 	add	r2,r2,r2
  410be0:	e0fffe17 	ldw	r3,-8(fp)
  410be4:	1887883a 	add	r3,r3,r2
  410be8:	e0bff517 	ldw	r2,-44(fp)
  410bec:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  410bf0:	e0bff517 	ldw	r2,-44(fp)
  410bf4:	e0fffe17 	ldw	r3,-8(fp)
  410bf8:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
  410bfc:	e0bff517 	ldw	r2,-44(fp)
  410c00:	e0fffe17 	ldw	r3,-8(fp)
  410c04:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
  410c08:	e0bff517 	ldw	r2,-44(fp)
  410c0c:	e0ffff0b 	ldhu	r3,-4(fp)
  410c10:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
  410c14:	e0bff517 	ldw	r2,-44(fp)
  410c18:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  410c1c:	e0bff317 	ldw	r2,-52(fp)
  410c20:	00c00084 	movi	r3,2
  410c24:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
  410c28:	e0bff317 	ldw	r2,-52(fp)
  410c2c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  410c30:	e0bff317 	ldw	r2,-52(fp)
  410c34:	e0fff517 	ldw	r3,-44(fp)
  410c38:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  410c3c:	e0bff317 	ldw	r2,-52(fp)
  410c40:	00c00fc4 	movi	r3,63
  410c44:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  410c48:	e0bff317 	ldw	r2,-52(fp)
  410c4c:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  410c50:	e13ff317 	ldw	r4,-52(fp)
  410c54:	040d3d80 	call	40d3d8 <OS_EventWaitListInit>
  410c58:	00001906 	br	410cc0 <OSQCreate+0x264>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  410c5c:	008010b4 	movhi	r2,66
  410c60:	10b59c04 	addi	r2,r2,-10640
  410c64:	10c00017 	ldw	r3,0(r2)
  410c68:	e0bff317 	ldw	r2,-52(fp)
  410c6c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  410c70:	008010b4 	movhi	r2,66
  410c74:	10b59c04 	addi	r2,r2,-10640
  410c78:	e0fff317 	ldw	r3,-52(fp)
  410c7c:	10c00015 	stw	r3,0(r2)
  410c80:	e0bff417 	ldw	r2,-48(fp)
  410c84:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  410c88:	0005303a 	rdctl	r2,status
  410c8c:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  410c90:	e0fffd17 	ldw	r3,-12(fp)
  410c94:	00bfff84 	movi	r2,-2
  410c98:	1884703a 	and	r2,r3,r2
  410c9c:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  410ca0:	e0bffc17 	ldw	r2,-16(fp)
  410ca4:	1080004c 	andi	r2,r2,1
  410ca8:	e0fffd17 	ldw	r3,-12(fp)
  410cac:	1884b03a 	or	r2,r3,r2
  410cb0:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  410cb4:	e0bffd17 	ldw	r2,-12(fp)
  410cb8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  410cbc:	e03ff315 	stw	zero,-52(fp)
        }
    }
    return (pevent);
  410cc0:	e0bff317 	ldw	r2,-52(fp)
}
  410cc4:	e037883a 	mov	sp,fp
  410cc8:	dfc00117 	ldw	ra,4(sp)
  410ccc:	df000017 	ldw	fp,0(sp)
  410cd0:	dec00204 	addi	sp,sp,8
  410cd4:	f800283a 	ret

00410cd8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  410cd8:	deffee04 	addi	sp,sp,-72
  410cdc:	dfc01115 	stw	ra,68(sp)
  410ce0:	df001015 	stw	fp,64(sp)
  410ce4:	df001004 	addi	fp,sp,64
  410ce8:	e13ffd15 	stw	r4,-12(fp)
  410cec:	2805883a 	mov	r2,r5
  410cf0:	e1bfff15 	stw	r6,-4(fp)
  410cf4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  410cf8:	e03ff215 	stw	zero,-56(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  410cfc:	e0bfff17 	ldw	r2,-4(fp)
  410d00:	1000021e 	bne	r2,zero,410d0c <OSQDel+0x34>
        return (pevent);
  410d04:	e0bffd17 	ldw	r2,-12(fp)
  410d08:	0000ce06 	br	411044 <OSQDel+0x36c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  410d0c:	e0bffd17 	ldw	r2,-12(fp)
  410d10:	1000051e 	bne	r2,zero,410d28 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  410d14:	e0bfff17 	ldw	r2,-4(fp)
  410d18:	00c00104 	movi	r3,4
  410d1c:	10c00005 	stb	r3,0(r2)
        return (pevent);
  410d20:	e0bffd17 	ldw	r2,-12(fp)
  410d24:	0000c706 	br	411044 <OSQDel+0x36c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  410d28:	e0bffd17 	ldw	r2,-12(fp)
  410d2c:	10800003 	ldbu	r2,0(r2)
  410d30:	10803fcc 	andi	r2,r2,255
  410d34:	108000a0 	cmpeqi	r2,r2,2
  410d38:	1000051e 	bne	r2,zero,410d50 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  410d3c:	e0bfff17 	ldw	r2,-4(fp)
  410d40:	00c00044 	movi	r3,1
  410d44:	10c00005 	stb	r3,0(r2)
        return (pevent);
  410d48:	e0bffd17 	ldw	r2,-12(fp)
  410d4c:	0000bd06 	br	411044 <OSQDel+0x36c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  410d50:	008010b4 	movhi	r2,66
  410d54:	10b59d04 	addi	r2,r2,-10636
  410d58:	10800003 	ldbu	r2,0(r2)
  410d5c:	10803fcc 	andi	r2,r2,255
  410d60:	10000526 	beq	r2,zero,410d78 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  410d64:	e0bfff17 	ldw	r2,-4(fp)
  410d68:	00c003c4 	movi	r3,15
  410d6c:	10c00005 	stb	r3,0(r2)
        return (pevent);
  410d70:	e0bffd17 	ldw	r2,-12(fp)
  410d74:	0000b306 	br	411044 <OSQDel+0x36c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  410d78:	0005303a 	rdctl	r2,status
  410d7c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  410d80:	e0fff417 	ldw	r3,-48(fp)
  410d84:	00bfff84 	movi	r2,-2
  410d88:	1884703a 	and	r2,r3,r2
  410d8c:	1001703a 	wrctl	status,r2
  
  return context;
  410d90:	e0bff417 	ldw	r2,-48(fp)
    }
    OS_ENTER_CRITICAL();
  410d94:	e0bff215 	stw	r2,-56(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  410d98:	e0bffd17 	ldw	r2,-12(fp)
  410d9c:	10800283 	ldbu	r2,10(r2)
  410da0:	10803fcc 	andi	r2,r2,255
  410da4:	10000326 	beq	r2,zero,410db4 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  410da8:	00800044 	movi	r2,1
  410dac:	e0bff005 	stb	r2,-64(fp)
  410db0:	00000106 	br	410db8 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  410db4:	e03ff005 	stb	zero,-64(fp)
    }
    switch (opt) {
  410db8:	e0bffe03 	ldbu	r2,-8(fp)
  410dbc:	10000326 	beq	r2,zero,410dcc <OSQDel+0xf4>
  410dc0:	10800060 	cmpeqi	r2,r2,1
  410dc4:	10004f1e 	bne	r2,zero,410f04 <OSQDel+0x22c>
  410dc8:	00008806 	br	410fec <OSQDel+0x314>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  410dcc:	e0bff003 	ldbu	r2,-64(fp)
  410dd0:	1000311e 	bne	r2,zero,410e98 <OSQDel+0x1c0>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  410dd4:	e0bffd17 	ldw	r2,-12(fp)
  410dd8:	00c00fc4 	movi	r3,63
  410ddc:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  410de0:	e0bffd17 	ldw	r2,-12(fp)
  410de4:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  410de8:	e0bffd17 	ldw	r2,-12(fp)
  410dec:	10800117 	ldw	r2,4(r2)
  410df0:	e0bff315 	stw	r2,-52(fp)
                 pq->OSQPtr             = OSQFreeList;
  410df4:	008010b4 	movhi	r2,66
  410df8:	10b59a04 	addi	r2,r2,-10648
  410dfc:	10c00017 	ldw	r3,0(r2)
  410e00:	e0bff317 	ldw	r2,-52(fp)
  410e04:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  410e08:	008010b4 	movhi	r2,66
  410e0c:	10b59a04 	addi	r2,r2,-10648
  410e10:	e0fff317 	ldw	r3,-52(fp)
  410e14:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  410e18:	e0bffd17 	ldw	r2,-12(fp)
  410e1c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  410e20:	008010b4 	movhi	r2,66
  410e24:	10b59c04 	addi	r2,r2,-10640
  410e28:	10c00017 	ldw	r3,0(r2)
  410e2c:	e0bffd17 	ldw	r2,-12(fp)
  410e30:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  410e34:	e0bffd17 	ldw	r2,-12(fp)
  410e38:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  410e3c:	008010b4 	movhi	r2,66
  410e40:	10b59c04 	addi	r2,r2,-10640
  410e44:	e0fffd17 	ldw	r3,-12(fp)
  410e48:	10c00015 	stw	r3,0(r2)
  410e4c:	e0bff217 	ldw	r2,-56(fp)
  410e50:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  410e54:	0005303a 	rdctl	r2,status
  410e58:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  410e5c:	e0fff617 	ldw	r3,-40(fp)
  410e60:	00bfff84 	movi	r2,-2
  410e64:	1884703a 	and	r2,r3,r2
  410e68:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  410e6c:	e0bff517 	ldw	r2,-44(fp)
  410e70:	1080004c 	andi	r2,r2,1
  410e74:	e0fff617 	ldw	r3,-40(fp)
  410e78:	1884b03a 	or	r2,r3,r2
  410e7c:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  410e80:	e0bff617 	ldw	r2,-40(fp)
  410e84:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  410e88:	e0bfff17 	ldw	r2,-4(fp)
  410e8c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  410e90:	e03ff115 	stw	zero,-60(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  410e94:	00006a06 	br	411040 <OSQDel+0x368>
  410e98:	e0bff217 	ldw	r2,-56(fp)
  410e9c:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  410ea0:	0005303a 	rdctl	r2,status
  410ea4:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  410ea8:	e0fff817 	ldw	r3,-32(fp)
  410eac:	00bfff84 	movi	r2,-2
  410eb0:	1884703a 	and	r2,r3,r2
  410eb4:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  410eb8:	e0bff717 	ldw	r2,-36(fp)
  410ebc:	1080004c 	andi	r2,r2,1
  410ec0:	e0fff817 	ldw	r3,-32(fp)
  410ec4:	1884b03a 	or	r2,r3,r2
  410ec8:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  410ecc:	e0bff817 	ldw	r2,-32(fp)
  410ed0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  410ed4:	e0bfff17 	ldw	r2,-4(fp)
  410ed8:	00c01244 	movi	r3,73
  410edc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  410ee0:	e0bffd17 	ldw	r2,-12(fp)
  410ee4:	e0bff115 	stw	r2,-60(fp)
             }
             break;
  410ee8:	00005506 	br	411040 <OSQDel+0x368>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  410eec:	e13ffd17 	ldw	r4,-12(fp)
  410ef0:	000b883a 	mov	r5,zero
  410ef4:	01800104 	movi	r6,4
  410ef8:	000f883a 	mov	r7,zero
  410efc:	040ce480 	call	40ce48 <OS_EventTaskRdy>
  410f00:	00000106 	br	410f08 <OSQDel+0x230>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  410f04:	0001883a 	nop
  410f08:	e0bffd17 	ldw	r2,-12(fp)
  410f0c:	10800283 	ldbu	r2,10(r2)
  410f10:	10803fcc 	andi	r2,r2,255
  410f14:	103ff51e 	bne	r2,zero,410eec <OSQDel+0x214>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  410f18:	e0bffd17 	ldw	r2,-12(fp)
  410f1c:	00c00fc4 	movi	r3,63
  410f20:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  410f24:	e0bffd17 	ldw	r2,-12(fp)
  410f28:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  410f2c:	e0bffd17 	ldw	r2,-12(fp)
  410f30:	10800117 	ldw	r2,4(r2)
  410f34:	e0bff315 	stw	r2,-52(fp)
             pq->OSQPtr             = OSQFreeList;
  410f38:	008010b4 	movhi	r2,66
  410f3c:	10b59a04 	addi	r2,r2,-10648
  410f40:	10c00017 	ldw	r3,0(r2)
  410f44:	e0bff317 	ldw	r2,-52(fp)
  410f48:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  410f4c:	008010b4 	movhi	r2,66
  410f50:	10b59a04 	addi	r2,r2,-10648
  410f54:	e0fff317 	ldw	r3,-52(fp)
  410f58:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  410f5c:	e0bffd17 	ldw	r2,-12(fp)
  410f60:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  410f64:	008010b4 	movhi	r2,66
  410f68:	10b59c04 	addi	r2,r2,-10640
  410f6c:	10c00017 	ldw	r3,0(r2)
  410f70:	e0bffd17 	ldw	r2,-12(fp)
  410f74:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  410f78:	e0bffd17 	ldw	r2,-12(fp)
  410f7c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  410f80:	008010b4 	movhi	r2,66
  410f84:	10b59c04 	addi	r2,r2,-10640
  410f88:	e0fffd17 	ldw	r3,-12(fp)
  410f8c:	10c00015 	stw	r3,0(r2)
  410f90:	e0bff217 	ldw	r2,-56(fp)
  410f94:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  410f98:	0005303a 	rdctl	r2,status
  410f9c:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  410fa0:	e0fffa17 	ldw	r3,-24(fp)
  410fa4:	00bfff84 	movi	r2,-2
  410fa8:	1884703a 	and	r2,r3,r2
  410fac:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  410fb0:	e0bff917 	ldw	r2,-28(fp)
  410fb4:	1080004c 	andi	r2,r2,1
  410fb8:	e0fffa17 	ldw	r3,-24(fp)
  410fbc:	1884b03a 	or	r2,r3,r2
  410fc0:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  410fc4:	e0bffa17 	ldw	r2,-24(fp)
  410fc8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  410fcc:	e0bff003 	ldbu	r2,-64(fp)
  410fd0:	10800058 	cmpnei	r2,r2,1
  410fd4:	1000011e 	bne	r2,zero,410fdc <OSQDel+0x304>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  410fd8:	040d8640 	call	40d864 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  410fdc:	e0bfff17 	ldw	r2,-4(fp)
  410fe0:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  410fe4:	e03ff115 	stw	zero,-60(fp)
             break;
  410fe8:	00001506 	br	411040 <OSQDel+0x368>
  410fec:	e0bff217 	ldw	r2,-56(fp)
  410ff0:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  410ff4:	0005303a 	rdctl	r2,status
  410ff8:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  410ffc:	e0fffc17 	ldw	r3,-16(fp)
  411000:	00bfff84 	movi	r2,-2
  411004:	1884703a 	and	r2,r3,r2
  411008:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  41100c:	e0bffb17 	ldw	r2,-20(fp)
  411010:	1080004c 	andi	r2,r2,1
  411014:	e0fffc17 	ldw	r3,-16(fp)
  411018:	1884b03a 	or	r2,r3,r2
  41101c:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  411020:	e0bffc17 	ldw	r2,-16(fp)
  411024:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  411028:	e0bfff17 	ldw	r2,-4(fp)
  41102c:	00c001c4 	movi	r3,7
  411030:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  411034:	e0bffd17 	ldw	r2,-12(fp)
  411038:	e0bff115 	stw	r2,-60(fp)
             break;
  41103c:	0001883a 	nop
    }
    return (pevent_return);
  411040:	e0bff117 	ldw	r2,-60(fp)
}
  411044:	e037883a 	mov	sp,fp
  411048:	dfc00117 	ldw	ra,4(sp)
  41104c:	df000017 	ldw	fp,0(sp)
  411050:	dec00204 	addi	sp,sp,8
  411054:	f800283a 	ret

00411058 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  411058:	defff904 	addi	sp,sp,-28
  41105c:	df000615 	stw	fp,24(sp)
  411060:	df000604 	addi	fp,sp,24
  411064:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  411068:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  41106c:	e0bfff17 	ldw	r2,-4(fp)
  411070:	1000021e 	bne	r2,zero,41107c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
  411074:	00800104 	movi	r2,4
  411078:	00002c06 	br	41112c <OSQFlush+0xd4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  41107c:	e0bfff17 	ldw	r2,-4(fp)
  411080:	10800003 	ldbu	r2,0(r2)
  411084:	10803fcc 	andi	r2,r2,255
  411088:	108000a0 	cmpeqi	r2,r2,2
  41108c:	1000021e 	bne	r2,zero,411098 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
  411090:	00800044 	movi	r2,1
  411094:	00002506 	br	41112c <OSQFlush+0xd4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  411098:	0005303a 	rdctl	r2,status
  41109c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4110a0:	e0fffc17 	ldw	r3,-16(fp)
  4110a4:	00bfff84 	movi	r2,-2
  4110a8:	1884703a 	and	r2,r3,r2
  4110ac:	1001703a 	wrctl	status,r2
  
  return context;
  4110b0:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  4110b4:	e0bffa15 	stw	r2,-24(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  4110b8:	e0bfff17 	ldw	r2,-4(fp)
  4110bc:	10800117 	ldw	r2,4(r2)
  4110c0:	e0bffb15 	stw	r2,-20(fp)
    pq->OSQIn      = pq->OSQStart;
  4110c4:	e0bffb17 	ldw	r2,-20(fp)
  4110c8:	10c00117 	ldw	r3,4(r2)
  4110cc:	e0bffb17 	ldw	r2,-20(fp)
  4110d0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  4110d4:	e0bffb17 	ldw	r2,-20(fp)
  4110d8:	10c00117 	ldw	r3,4(r2)
  4110dc:	e0bffb17 	ldw	r2,-20(fp)
  4110e0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  4110e4:	e0bffb17 	ldw	r2,-20(fp)
  4110e8:	1000058d 	sth	zero,22(r2)
  4110ec:	e0bffa17 	ldw	r2,-24(fp)
  4110f0:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4110f4:	0005303a 	rdctl	r2,status
  4110f8:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4110fc:	e0fffe17 	ldw	r3,-8(fp)
  411100:	00bfff84 	movi	r2,-2
  411104:	1884703a 	and	r2,r3,r2
  411108:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  41110c:	e0bffd17 	ldw	r2,-12(fp)
  411110:	1080004c 	andi	r2,r2,1
  411114:	e0fffe17 	ldw	r3,-8(fp)
  411118:	1884b03a 	or	r2,r3,r2
  41111c:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  411120:	e0bffe17 	ldw	r2,-8(fp)
  411124:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  411128:	0005883a 	mov	r2,zero
}
  41112c:	e037883a 	mov	sp,fp
  411130:	df000017 	ldw	fp,0(sp)
  411134:	dec00104 	addi	sp,sp,4
  411138:	f800283a 	ret

0041113c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  41113c:	defff004 	addi	sp,sp,-64
  411140:	dfc00f15 	stw	ra,60(sp)
  411144:	df000e15 	stw	fp,56(sp)
  411148:	df000e04 	addi	fp,sp,56
  41114c:	e13ffd15 	stw	r4,-12(fp)
  411150:	2805883a 	mov	r2,r5
  411154:	e1bfff15 	stw	r6,-4(fp)
  411158:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  41115c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  411160:	e0bfff17 	ldw	r2,-4(fp)
  411164:	1000021e 	bne	r2,zero,411170 <OSQPend+0x34>
        return ((void *)0);
  411168:	0005883a 	mov	r2,zero
  41116c:	0000ce06 	br	4114a8 <OSQPend+0x36c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  411170:	e0bffd17 	ldw	r2,-12(fp)
  411174:	1000051e 	bne	r2,zero,41118c <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  411178:	e0bfff17 	ldw	r2,-4(fp)
  41117c:	00c00104 	movi	r3,4
  411180:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  411184:	0005883a 	mov	r2,zero
  411188:	0000c706 	br	4114a8 <OSQPend+0x36c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  41118c:	e0bffd17 	ldw	r2,-12(fp)
  411190:	10800003 	ldbu	r2,0(r2)
  411194:	10803fcc 	andi	r2,r2,255
  411198:	108000a0 	cmpeqi	r2,r2,2
  41119c:	1000051e 	bne	r2,zero,4111b4 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  4111a0:	e0bfff17 	ldw	r2,-4(fp)
  4111a4:	00c00044 	movi	r3,1
  4111a8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  4111ac:	0005883a 	mov	r2,zero
  4111b0:	0000bd06 	br	4114a8 <OSQPend+0x36c>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  4111b4:	008010b4 	movhi	r2,66
  4111b8:	10b59d04 	addi	r2,r2,-10636
  4111bc:	10800003 	ldbu	r2,0(r2)
  4111c0:	10803fcc 	andi	r2,r2,255
  4111c4:	10000526 	beq	r2,zero,4111dc <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  4111c8:	e0bfff17 	ldw	r2,-4(fp)
  4111cc:	00c00084 	movi	r3,2
  4111d0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  4111d4:	0005883a 	mov	r2,zero
  4111d8:	0000b306 	br	4114a8 <OSQPend+0x36c>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  4111dc:	008010b4 	movhi	r2,66
  4111e0:	10b58f04 	addi	r2,r2,-10692
  4111e4:	10800003 	ldbu	r2,0(r2)
  4111e8:	10803fcc 	andi	r2,r2,255
  4111ec:	10000526 	beq	r2,zero,411204 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  4111f0:	e0bfff17 	ldw	r2,-4(fp)
  4111f4:	00c00344 	movi	r3,13
  4111f8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
  4111fc:	0005883a 	mov	r2,zero
  411200:	0000a906 	br	4114a8 <OSQPend+0x36c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  411204:	0005303a 	rdctl	r2,status
  411208:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  41120c:	e0fff517 	ldw	r3,-44(fp)
  411210:	00bfff84 	movi	r2,-2
  411214:	1884703a 	and	r2,r3,r2
  411218:	1001703a 	wrctl	status,r2
  
  return context;
  41121c:	e0bff517 	ldw	r2,-44(fp)
    }
    OS_ENTER_CRITICAL();
  411220:	e0bff315 	stw	r2,-52(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  411224:	e0bffd17 	ldw	r2,-12(fp)
  411228:	10800117 	ldw	r2,4(r2)
  41122c:	e0bff415 	stw	r2,-48(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  411230:	e0bff417 	ldw	r2,-48(fp)
  411234:	1080058b 	ldhu	r2,22(r2)
  411238:	10bfffcc 	andi	r2,r2,65535
  41123c:	10002926 	beq	r2,zero,4112e4 <OSQPend+0x1a8>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  411240:	e0bff417 	ldw	r2,-48(fp)
  411244:	10800417 	ldw	r2,16(r2)
  411248:	10c00017 	ldw	r3,0(r2)
  41124c:	e0fff215 	stw	r3,-56(fp)
  411250:	10c00104 	addi	r3,r2,4
  411254:	e0bff417 	ldw	r2,-48(fp)
  411258:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  41125c:	e0bff417 	ldw	r2,-48(fp)
  411260:	1080058b 	ldhu	r2,22(r2)
  411264:	10bfffc4 	addi	r2,r2,-1
  411268:	1007883a 	mov	r3,r2
  41126c:	e0bff417 	ldw	r2,-48(fp)
  411270:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  411274:	e0bff417 	ldw	r2,-48(fp)
  411278:	10c00417 	ldw	r3,16(r2)
  41127c:	e0bff417 	ldw	r2,-48(fp)
  411280:	10800217 	ldw	r2,8(r2)
  411284:	1880041e 	bne	r3,r2,411298 <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
  411288:	e0bff417 	ldw	r2,-48(fp)
  41128c:	10c00117 	ldw	r3,4(r2)
  411290:	e0bff417 	ldw	r2,-48(fp)
  411294:	10c00415 	stw	r3,16(r2)
  411298:	e0bff317 	ldw	r2,-52(fp)
  41129c:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4112a0:	0005303a 	rdctl	r2,status
  4112a4:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4112a8:	e0fff717 	ldw	r3,-36(fp)
  4112ac:	00bfff84 	movi	r2,-2
  4112b0:	1884703a 	and	r2,r3,r2
  4112b4:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4112b8:	e0bff617 	ldw	r2,-40(fp)
  4112bc:	1080004c 	andi	r2,r2,1
  4112c0:	e0fff717 	ldw	r3,-36(fp)
  4112c4:	1884b03a 	or	r2,r3,r2
  4112c8:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  4112cc:	e0bff717 	ldw	r2,-36(fp)
  4112d0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  4112d4:	e0bfff17 	ldw	r2,-4(fp)
  4112d8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  4112dc:	e0bff217 	ldw	r2,-56(fp)
  4112e0:	00007106 	br	4114a8 <OSQPend+0x36c>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  4112e4:	008010b4 	movhi	r2,66
  4112e8:	10b59e04 	addi	r2,r2,-10632
  4112ec:	10800017 	ldw	r2,0(r2)
  4112f0:	00c010b4 	movhi	r3,66
  4112f4:	18f59e04 	addi	r3,r3,-10632
  4112f8:	18c00017 	ldw	r3,0(r3)
  4112fc:	18c00c03 	ldbu	r3,48(r3)
  411300:	18c00114 	ori	r3,r3,4
  411304:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  411308:	008010b4 	movhi	r2,66
  41130c:	10b59e04 	addi	r2,r2,-10632
  411310:	10800017 	ldw	r2,0(r2)
  411314:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  411318:	008010b4 	movhi	r2,66
  41131c:	10b59e04 	addi	r2,r2,-10632
  411320:	10800017 	ldw	r2,0(r2)
  411324:	e0fffe0b 	ldhu	r3,-8(fp)
  411328:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  41132c:	e13ffd17 	ldw	r4,-12(fp)
  411330:	040cfe00 	call	40cfe0 <OS_EventTaskWait>
  411334:	e0bff317 	ldw	r2,-52(fp)
  411338:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41133c:	0005303a 	rdctl	r2,status
  411340:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  411344:	e0fff917 	ldw	r3,-28(fp)
  411348:	00bfff84 	movi	r2,-2
  41134c:	1884703a 	and	r2,r3,r2
  411350:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  411354:	e0bff817 	ldw	r2,-32(fp)
  411358:	1080004c 	andi	r2,r2,1
  41135c:	e0fff917 	ldw	r3,-28(fp)
  411360:	1884b03a 	or	r2,r3,r2
  411364:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  411368:	e0bff917 	ldw	r2,-28(fp)
  41136c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  411370:	040d8640 	call	40d864 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  411374:	0005303a 	rdctl	r2,status
  411378:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  41137c:	e0fffa17 	ldw	r3,-24(fp)
  411380:	00bfff84 	movi	r2,-2
  411384:	1884703a 	and	r2,r3,r2
  411388:	1001703a 	wrctl	status,r2
  
  return context;
  41138c:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
  411390:	e0bff315 	stw	r2,-52(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  411394:	008010b4 	movhi	r2,66
  411398:	10b59e04 	addi	r2,r2,-10632
  41139c:	10800017 	ldw	r2,0(r2)
  4113a0:	10800c43 	ldbu	r2,49(r2)
  4113a4:	10803fcc 	andi	r2,r2,255
  4113a8:	10000326 	beq	r2,zero,4113b8 <OSQPend+0x27c>
  4113ac:	108000a0 	cmpeqi	r2,r2,2
  4113b0:	1000091e 	bne	r2,zero,4113d8 <OSQPend+0x29c>
  4113b4:	00000d06 	br	4113ec <OSQPend+0x2b0>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  4113b8:	008010b4 	movhi	r2,66
  4113bc:	10b59e04 	addi	r2,r2,-10632
  4113c0:	10800017 	ldw	r2,0(r2)
  4113c4:	10800917 	ldw	r2,36(r2)
  4113c8:	e0bff215 	stw	r2,-56(fp)
            *perr =  OS_ERR_NONE;
  4113cc:	e0bfff17 	ldw	r2,-4(fp)
  4113d0:	10000005 	stb	zero,0(r2)
             break;
  4113d4:	00001006 	br	411418 <OSQPend+0x2dc>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  4113d8:	e03ff215 	stw	zero,-56(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  4113dc:	e0bfff17 	ldw	r2,-4(fp)
  4113e0:	00c00384 	movi	r3,14
  4113e4:	10c00005 	stb	r3,0(r2)
             break;
  4113e8:	00000b06 	br	411418 <OSQPend+0x2dc>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  4113ec:	008010b4 	movhi	r2,66
  4113f0:	10b59e04 	addi	r2,r2,-10632
  4113f4:	10800017 	ldw	r2,0(r2)
  4113f8:	1009883a 	mov	r4,r2
  4113fc:	e17ffd17 	ldw	r5,-12(fp)
  411400:	040d2300 	call	40d230 <OS_EventTaskRemove>
             pmsg = (void *)0;
  411404:	e03ff215 	stw	zero,-56(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  411408:	e0bfff17 	ldw	r2,-4(fp)
  41140c:	00c00284 	movi	r3,10
  411410:	10c00005 	stb	r3,0(r2)
             break;
  411414:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  411418:	008010b4 	movhi	r2,66
  41141c:	10b59e04 	addi	r2,r2,-10632
  411420:	10800017 	ldw	r2,0(r2)
  411424:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  411428:	008010b4 	movhi	r2,66
  41142c:	10b59e04 	addi	r2,r2,-10632
  411430:	10800017 	ldw	r2,0(r2)
  411434:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  411438:	008010b4 	movhi	r2,66
  41143c:	10b59e04 	addi	r2,r2,-10632
  411440:	10800017 	ldw	r2,0(r2)
  411444:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  411448:	008010b4 	movhi	r2,66
  41144c:	10b59e04 	addi	r2,r2,-10632
  411450:	10800017 	ldw	r2,0(r2)
  411454:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  411458:	008010b4 	movhi	r2,66
  41145c:	10b59e04 	addi	r2,r2,-10632
  411460:	10800017 	ldw	r2,0(r2)
  411464:	10000915 	stw	zero,36(r2)
  411468:	e0bff317 	ldw	r2,-52(fp)
  41146c:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  411470:	0005303a 	rdctl	r2,status
  411474:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  411478:	e0fffc17 	ldw	r3,-16(fp)
  41147c:	00bfff84 	movi	r2,-2
  411480:	1884703a 	and	r2,r3,r2
  411484:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  411488:	e0bffb17 	ldw	r2,-20(fp)
  41148c:	1080004c 	andi	r2,r2,1
  411490:	e0fffc17 	ldw	r3,-16(fp)
  411494:	1884b03a 	or	r2,r3,r2
  411498:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  41149c:	e0bffc17 	ldw	r2,-16(fp)
  4114a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  4114a4:	e0bff217 	ldw	r2,-56(fp)
}
  4114a8:	e037883a 	mov	sp,fp
  4114ac:	dfc00117 	ldw	ra,4(sp)
  4114b0:	df000017 	ldw	fp,0(sp)
  4114b4:	dec00204 	addi	sp,sp,8
  4114b8:	f800283a 	ret

004114bc <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  4114bc:	defff404 	addi	sp,sp,-48
  4114c0:	dfc00b15 	stw	ra,44(sp)
  4114c4:	df000a15 	stw	fp,40(sp)
  4114c8:	df000a04 	addi	fp,sp,40
  4114cc:	e13ffd15 	stw	r4,-12(fp)
  4114d0:	2805883a 	mov	r2,r5
  4114d4:	e1bfff15 	stw	r6,-4(fp)
  4114d8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  4114dc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  4114e0:	e0bfff17 	ldw	r2,-4(fp)
  4114e4:	1000021e 	bne	r2,zero,4114f0 <OSQPendAbort+0x34>
        return (0);
  4114e8:	0005883a 	mov	r2,zero
  4114ec:	00006106 	br	411674 <OSQPendAbort+0x1b8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  4114f0:	e0bffd17 	ldw	r2,-12(fp)
  4114f4:	1000051e 	bne	r2,zero,41150c <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  4114f8:	e0bfff17 	ldw	r2,-4(fp)
  4114fc:	00c00104 	movi	r3,4
  411500:	10c00005 	stb	r3,0(r2)
        return (0);
  411504:	0005883a 	mov	r2,zero
  411508:	00005a06 	br	411674 <OSQPendAbort+0x1b8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  41150c:	e0bffd17 	ldw	r2,-12(fp)
  411510:	10800003 	ldbu	r2,0(r2)
  411514:	10803fcc 	andi	r2,r2,255
  411518:	108000a0 	cmpeqi	r2,r2,2
  41151c:	1000051e 	bne	r2,zero,411534 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  411520:	e0bfff17 	ldw	r2,-4(fp)
  411524:	00c00044 	movi	r3,1
  411528:	10c00005 	stb	r3,0(r2)
        return (0);
  41152c:	0005883a 	mov	r2,zero
  411530:	00005006 	br	411674 <OSQPendAbort+0x1b8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  411534:	0005303a 	rdctl	r2,status
  411538:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  41153c:	e0fff817 	ldw	r3,-32(fp)
  411540:	00bfff84 	movi	r2,-2
  411544:	1884703a 	and	r2,r3,r2
  411548:	1001703a 	wrctl	status,r2
  
  return context;
  41154c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  411550:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  411554:	e0bffd17 	ldw	r2,-12(fp)
  411558:	10800283 	ldbu	r2,10(r2)
  41155c:	10803fcc 	andi	r2,r2,255
  411560:	10003226 	beq	r2,zero,41162c <OSQPendAbort+0x170>
        nbr_tasks = 0;
  411564:	e03ff605 	stb	zero,-40(fp)
        switch (opt) {
  411568:	e0bffe03 	ldbu	r2,-8(fp)
  41156c:	10800060 	cmpeqi	r2,r2,1
  411570:	10000a1e 	bne	r2,zero,41159c <OSQPendAbort+0xe0>
  411574:	00000f06 	br	4115b4 <OSQPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  411578:	e13ffd17 	ldw	r4,-12(fp)
  41157c:	000b883a 	mov	r5,zero
  411580:	01800104 	movi	r6,4
  411584:	01c00084 	movi	r7,2
  411588:	040ce480 	call	40ce48 <OS_EventTaskRdy>
                     nbr_tasks++;
  41158c:	e0bff603 	ldbu	r2,-40(fp)
  411590:	10800044 	addi	r2,r2,1
  411594:	e0bff605 	stb	r2,-40(fp)
  411598:	00000106 	br	4115a0 <OSQPendAbort+0xe4>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  41159c:	0001883a 	nop
  4115a0:	e0bffd17 	ldw	r2,-12(fp)
  4115a4:	10800283 	ldbu	r2,10(r2)
  4115a8:	10803fcc 	andi	r2,r2,255
  4115ac:	103ff21e 	bne	r2,zero,411578 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  4115b0:	00000906 	br	4115d8 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  4115b4:	e13ffd17 	ldw	r4,-12(fp)
  4115b8:	000b883a 	mov	r5,zero
  4115bc:	01800104 	movi	r6,4
  4115c0:	01c00084 	movi	r7,2
  4115c4:	040ce480 	call	40ce48 <OS_EventTaskRdy>
                 nbr_tasks++;
  4115c8:	e0bff603 	ldbu	r2,-40(fp)
  4115cc:	10800044 	addi	r2,r2,1
  4115d0:	e0bff605 	stb	r2,-40(fp)
                 break;
  4115d4:	0001883a 	nop
  4115d8:	e0bff717 	ldw	r2,-36(fp)
  4115dc:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4115e0:	0005303a 	rdctl	r2,status
  4115e4:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4115e8:	e0fffa17 	ldw	r3,-24(fp)
  4115ec:	00bfff84 	movi	r2,-2
  4115f0:	1884703a 	and	r2,r3,r2
  4115f4:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4115f8:	e0bff917 	ldw	r2,-28(fp)
  4115fc:	1080004c 	andi	r2,r2,1
  411600:	e0fffa17 	ldw	r3,-24(fp)
  411604:	1884b03a 	or	r2,r3,r2
  411608:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  41160c:	e0bffa17 	ldw	r2,-24(fp)
  411610:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  411614:	040d8640 	call	40d864 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  411618:	e0bfff17 	ldw	r2,-4(fp)
  41161c:	00c00384 	movi	r3,14
  411620:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  411624:	e0bff603 	ldbu	r2,-40(fp)
  411628:	00001206 	br	411674 <OSQPendAbort+0x1b8>
  41162c:	e0bff717 	ldw	r2,-36(fp)
  411630:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  411634:	0005303a 	rdctl	r2,status
  411638:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  41163c:	e0fffc17 	ldw	r3,-16(fp)
  411640:	00bfff84 	movi	r2,-2
  411644:	1884703a 	and	r2,r3,r2
  411648:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  41164c:	e0bffb17 	ldw	r2,-20(fp)
  411650:	1080004c 	andi	r2,r2,1
  411654:	e0fffc17 	ldw	r3,-16(fp)
  411658:	1884b03a 	or	r2,r3,r2
  41165c:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  411660:	e0bffc17 	ldw	r2,-16(fp)
  411664:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  411668:	e0bfff17 	ldw	r2,-4(fp)
  41166c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  411670:	0005883a 	mov	r2,zero
}
  411674:	e037883a 	mov	sp,fp
  411678:	dfc00117 	ldw	ra,4(sp)
  41167c:	df000017 	ldw	fp,0(sp)
  411680:	dec00204 	addi	sp,sp,8
  411684:	f800283a 	ret

00411688 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  411688:	defff304 	addi	sp,sp,-52
  41168c:	dfc00c15 	stw	ra,48(sp)
  411690:	df000b15 	stw	fp,44(sp)
  411694:	df000b04 	addi	fp,sp,44
  411698:	e13ffe15 	stw	r4,-8(fp)
  41169c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  4116a0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  4116a4:	e0bffe17 	ldw	r2,-8(fp)
  4116a8:	1000021e 	bne	r2,zero,4116b4 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
  4116ac:	00800104 	movi	r2,4
  4116b0:	00006b06 	br	411860 <OSQPost+0x1d8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  4116b4:	e0bffe17 	ldw	r2,-8(fp)
  4116b8:	10800003 	ldbu	r2,0(r2)
  4116bc:	10803fcc 	andi	r2,r2,255
  4116c0:	108000a0 	cmpeqi	r2,r2,2
  4116c4:	1000021e 	bne	r2,zero,4116d0 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
  4116c8:	00800044 	movi	r2,1
  4116cc:	00006406 	br	411860 <OSQPost+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4116d0:	0005303a 	rdctl	r2,status
  4116d4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4116d8:	e0fff717 	ldw	r3,-36(fp)
  4116dc:	00bfff84 	movi	r2,-2
  4116e0:	1884703a 	and	r2,r3,r2
  4116e4:	1001703a 	wrctl	status,r2
  
  return context;
  4116e8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  4116ec:	e0bff515 	stw	r2,-44(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  4116f0:	e0bffe17 	ldw	r2,-8(fp)
  4116f4:	10800283 	ldbu	r2,10(r2)
  4116f8:	10803fcc 	andi	r2,r2,255
  4116fc:	10001726 	beq	r2,zero,41175c <OSQPost+0xd4>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  411700:	e13ffe17 	ldw	r4,-8(fp)
  411704:	e17fff17 	ldw	r5,-4(fp)
  411708:	01800104 	movi	r6,4
  41170c:	000f883a 	mov	r7,zero
  411710:	040ce480 	call	40ce48 <OS_EventTaskRdy>
  411714:	e0bff517 	ldw	r2,-44(fp)
  411718:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41171c:	0005303a 	rdctl	r2,status
  411720:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  411724:	e0fff917 	ldw	r3,-28(fp)
  411728:	00bfff84 	movi	r2,-2
  41172c:	1884703a 	and	r2,r3,r2
  411730:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  411734:	e0bff817 	ldw	r2,-32(fp)
  411738:	1080004c 	andi	r2,r2,1
  41173c:	e0fff917 	ldw	r3,-28(fp)
  411740:	1884b03a 	or	r2,r3,r2
  411744:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  411748:	e0bff917 	ldw	r2,-28(fp)
  41174c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  411750:	040d8640 	call	40d864 <OS_Sched>
        return (OS_ERR_NONE);
  411754:	0005883a 	mov	r2,zero
  411758:	00004106 	br	411860 <OSQPost+0x1d8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  41175c:	e0bffe17 	ldw	r2,-8(fp)
  411760:	10800117 	ldw	r2,4(r2)
  411764:	e0bff615 	stw	r2,-40(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  411768:	e0bff617 	ldw	r2,-40(fp)
  41176c:	10c0058b 	ldhu	r3,22(r2)
  411770:	e0bff617 	ldw	r2,-40(fp)
  411774:	1080050b 	ldhu	r2,20(r2)
  411778:	18ffffcc 	andi	r3,r3,65535
  41177c:	10bfffcc 	andi	r2,r2,65535
  411780:	18801136 	bltu	r3,r2,4117c8 <OSQPost+0x140>
  411784:	e0bff517 	ldw	r2,-44(fp)
  411788:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41178c:	0005303a 	rdctl	r2,status
  411790:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  411794:	e0fffb17 	ldw	r3,-20(fp)
  411798:	00bfff84 	movi	r2,-2
  41179c:	1884703a 	and	r2,r3,r2
  4117a0:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4117a4:	e0bffa17 	ldw	r2,-24(fp)
  4117a8:	1080004c 	andi	r2,r2,1
  4117ac:	e0fffb17 	ldw	r3,-20(fp)
  4117b0:	1884b03a 	or	r2,r3,r2
  4117b4:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  4117b8:	e0bffb17 	ldw	r2,-20(fp)
  4117bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  4117c0:	00800784 	movi	r2,30
  4117c4:	00002606 	br	411860 <OSQPost+0x1d8>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  4117c8:	e0bff617 	ldw	r2,-40(fp)
  4117cc:	10800317 	ldw	r2,12(r2)
  4117d0:	e0ffff17 	ldw	r3,-4(fp)
  4117d4:	10c00015 	stw	r3,0(r2)
  4117d8:	10c00104 	addi	r3,r2,4
  4117dc:	e0bff617 	ldw	r2,-40(fp)
  4117e0:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  4117e4:	e0bff617 	ldw	r2,-40(fp)
  4117e8:	1080058b 	ldhu	r2,22(r2)
  4117ec:	10800044 	addi	r2,r2,1
  4117f0:	1007883a 	mov	r3,r2
  4117f4:	e0bff617 	ldw	r2,-40(fp)
  4117f8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  4117fc:	e0bff617 	ldw	r2,-40(fp)
  411800:	10c00317 	ldw	r3,12(r2)
  411804:	e0bff617 	ldw	r2,-40(fp)
  411808:	10800217 	ldw	r2,8(r2)
  41180c:	1880041e 	bne	r3,r2,411820 <OSQPost+0x198>
        pq->OSQIn = pq->OSQStart;
  411810:	e0bff617 	ldw	r2,-40(fp)
  411814:	10c00117 	ldw	r3,4(r2)
  411818:	e0bff617 	ldw	r2,-40(fp)
  41181c:	10c00315 	stw	r3,12(r2)
  411820:	e0bff517 	ldw	r2,-44(fp)
  411824:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  411828:	0005303a 	rdctl	r2,status
  41182c:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  411830:	e0fffd17 	ldw	r3,-12(fp)
  411834:	00bfff84 	movi	r2,-2
  411838:	1884703a 	and	r2,r3,r2
  41183c:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  411840:	e0bffc17 	ldw	r2,-16(fp)
  411844:	1080004c 	andi	r2,r2,1
  411848:	e0fffd17 	ldw	r3,-12(fp)
  41184c:	1884b03a 	or	r2,r3,r2
  411850:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  411854:	e0bffd17 	ldw	r2,-12(fp)
  411858:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  41185c:	0005883a 	mov	r2,zero
}
  411860:	e037883a 	mov	sp,fp
  411864:	dfc00117 	ldw	ra,4(sp)
  411868:	df000017 	ldw	fp,0(sp)
  41186c:	dec00204 	addi	sp,sp,8
  411870:	f800283a 	ret

00411874 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  411874:	defff304 	addi	sp,sp,-52
  411878:	dfc00c15 	stw	ra,48(sp)
  41187c:	df000b15 	stw	fp,44(sp)
  411880:	df000b04 	addi	fp,sp,44
  411884:	e13ffe15 	stw	r4,-8(fp)
  411888:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  41188c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  411890:	e0bffe17 	ldw	r2,-8(fp)
  411894:	1000021e 	bne	r2,zero,4118a0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
  411898:	00800104 	movi	r2,4
  41189c:	00006d06 	br	411a54 <OSQPostFront+0x1e0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  4118a0:	e0bffe17 	ldw	r2,-8(fp)
  4118a4:	10800003 	ldbu	r2,0(r2)
  4118a8:	10803fcc 	andi	r2,r2,255
  4118ac:	108000a0 	cmpeqi	r2,r2,2
  4118b0:	1000021e 	bne	r2,zero,4118bc <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
  4118b4:	00800044 	movi	r2,1
  4118b8:	00006606 	br	411a54 <OSQPostFront+0x1e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4118bc:	0005303a 	rdctl	r2,status
  4118c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4118c4:	e0fff717 	ldw	r3,-36(fp)
  4118c8:	00bfff84 	movi	r2,-2
  4118cc:	1884703a 	and	r2,r3,r2
  4118d0:	1001703a 	wrctl	status,r2
  
  return context;
  4118d4:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  4118d8:	e0bff515 	stw	r2,-44(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  4118dc:	e0bffe17 	ldw	r2,-8(fp)
  4118e0:	10800283 	ldbu	r2,10(r2)
  4118e4:	10803fcc 	andi	r2,r2,255
  4118e8:	10001726 	beq	r2,zero,411948 <OSQPostFront+0xd4>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  4118ec:	e13ffe17 	ldw	r4,-8(fp)
  4118f0:	e17fff17 	ldw	r5,-4(fp)
  4118f4:	01800104 	movi	r6,4
  4118f8:	000f883a 	mov	r7,zero
  4118fc:	040ce480 	call	40ce48 <OS_EventTaskRdy>
  411900:	e0bff517 	ldw	r2,-44(fp)
  411904:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  411908:	0005303a 	rdctl	r2,status
  41190c:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  411910:	e0fff917 	ldw	r3,-28(fp)
  411914:	00bfff84 	movi	r2,-2
  411918:	1884703a 	and	r2,r3,r2
  41191c:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  411920:	e0bff817 	ldw	r2,-32(fp)
  411924:	1080004c 	andi	r2,r2,1
  411928:	e0fff917 	ldw	r3,-28(fp)
  41192c:	1884b03a 	or	r2,r3,r2
  411930:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  411934:	e0bff917 	ldw	r2,-28(fp)
  411938:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  41193c:	040d8640 	call	40d864 <OS_Sched>
        return (OS_ERR_NONE);
  411940:	0005883a 	mov	r2,zero
  411944:	00004306 	br	411a54 <OSQPostFront+0x1e0>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  411948:	e0bffe17 	ldw	r2,-8(fp)
  41194c:	10800117 	ldw	r2,4(r2)
  411950:	e0bff615 	stw	r2,-40(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  411954:	e0bff617 	ldw	r2,-40(fp)
  411958:	10c0058b 	ldhu	r3,22(r2)
  41195c:	e0bff617 	ldw	r2,-40(fp)
  411960:	1080050b 	ldhu	r2,20(r2)
  411964:	18ffffcc 	andi	r3,r3,65535
  411968:	10bfffcc 	andi	r2,r2,65535
  41196c:	18801136 	bltu	r3,r2,4119b4 <OSQPostFront+0x140>
  411970:	e0bff517 	ldw	r2,-44(fp)
  411974:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  411978:	0005303a 	rdctl	r2,status
  41197c:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  411980:	e0fffb17 	ldw	r3,-20(fp)
  411984:	00bfff84 	movi	r2,-2
  411988:	1884703a 	and	r2,r3,r2
  41198c:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  411990:	e0bffa17 	ldw	r2,-24(fp)
  411994:	1080004c 	andi	r2,r2,1
  411998:	e0fffb17 	ldw	r3,-20(fp)
  41199c:	1884b03a 	or	r2,r3,r2
  4119a0:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  4119a4:	e0bffb17 	ldw	r2,-20(fp)
  4119a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  4119ac:	00800784 	movi	r2,30
  4119b0:	00002806 	br	411a54 <OSQPostFront+0x1e0>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  4119b4:	e0bff617 	ldw	r2,-40(fp)
  4119b8:	10c00417 	ldw	r3,16(r2)
  4119bc:	e0bff617 	ldw	r2,-40(fp)
  4119c0:	10800117 	ldw	r2,4(r2)
  4119c4:	1880041e 	bne	r3,r2,4119d8 <OSQPostFront+0x164>
        pq->OSQOut = pq->OSQEnd;
  4119c8:	e0bff617 	ldw	r2,-40(fp)
  4119cc:	10c00217 	ldw	r3,8(r2)
  4119d0:	e0bff617 	ldw	r2,-40(fp)
  4119d4:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  4119d8:	e0bff617 	ldw	r2,-40(fp)
  4119dc:	10800417 	ldw	r2,16(r2)
  4119e0:	10ffff04 	addi	r3,r2,-4
  4119e4:	e0bff617 	ldw	r2,-40(fp)
  4119e8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  4119ec:	e0bff617 	ldw	r2,-40(fp)
  4119f0:	10800417 	ldw	r2,16(r2)
  4119f4:	e0ffff17 	ldw	r3,-4(fp)
  4119f8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  4119fc:	e0bff617 	ldw	r2,-40(fp)
  411a00:	1080058b 	ldhu	r2,22(r2)
  411a04:	10800044 	addi	r2,r2,1
  411a08:	1007883a 	mov	r3,r2
  411a0c:	e0bff617 	ldw	r2,-40(fp)
  411a10:	10c0058d 	sth	r3,22(r2)
  411a14:	e0bff517 	ldw	r2,-44(fp)
  411a18:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  411a1c:	0005303a 	rdctl	r2,status
  411a20:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  411a24:	e0fffd17 	ldw	r3,-12(fp)
  411a28:	00bfff84 	movi	r2,-2
  411a2c:	1884703a 	and	r2,r3,r2
  411a30:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  411a34:	e0bffc17 	ldw	r2,-16(fp)
  411a38:	1080004c 	andi	r2,r2,1
  411a3c:	e0fffd17 	ldw	r3,-12(fp)
  411a40:	1884b03a 	or	r2,r3,r2
  411a44:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  411a48:	e0bffd17 	ldw	r2,-12(fp)
  411a4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  411a50:	0005883a 	mov	r2,zero
}
  411a54:	e037883a 	mov	sp,fp
  411a58:	dfc00117 	ldw	ra,4(sp)
  411a5c:	df000017 	ldw	fp,0(sp)
  411a60:	dec00204 	addi	sp,sp,8
  411a64:	f800283a 	ret

00411a68 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  411a68:	defff204 	addi	sp,sp,-56
  411a6c:	dfc00d15 	stw	ra,52(sp)
  411a70:	df000c15 	stw	fp,48(sp)
  411a74:	df000c04 	addi	fp,sp,48
  411a78:	e13ffd15 	stw	r4,-12(fp)
  411a7c:	e17ffe15 	stw	r5,-8(fp)
  411a80:	3005883a 	mov	r2,r6
  411a84:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  411a88:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  411a8c:	e0bffd17 	ldw	r2,-12(fp)
  411a90:	1000021e 	bne	r2,zero,411a9c <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
  411a94:	00800104 	movi	r2,4
  411a98:	00009206 	br	411ce4 <OSQPostOpt+0x27c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  411a9c:	e0bffd17 	ldw	r2,-12(fp)
  411aa0:	10800003 	ldbu	r2,0(r2)
  411aa4:	10803fcc 	andi	r2,r2,255
  411aa8:	108000a0 	cmpeqi	r2,r2,2
  411aac:	1000021e 	bne	r2,zero,411ab8 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
  411ab0:	00800044 	movi	r2,1
  411ab4:	00008b06 	br	411ce4 <OSQPostOpt+0x27c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  411ab8:	0005303a 	rdctl	r2,status
  411abc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  411ac0:	e0fff617 	ldw	r3,-40(fp)
  411ac4:	00bfff84 	movi	r2,-2
  411ac8:	1884703a 	and	r2,r3,r2
  411acc:	1001703a 	wrctl	status,r2
  
  return context;
  411ad0:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  411ad4:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  411ad8:	e0bffd17 	ldw	r2,-12(fp)
  411adc:	10800283 	ldbu	r2,10(r2)
  411ae0:	10803fcc 	andi	r2,r2,255
  411ae4:	10002826 	beq	r2,zero,411b88 <OSQPostOpt+0x120>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  411ae8:	e0bfff03 	ldbu	r2,-4(fp)
  411aec:	1080004c 	andi	r2,r2,1
  411af0:	10000b26 	beq	r2,zero,411b20 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  411af4:	00000506 	br	411b0c <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  411af8:	e13ffd17 	ldw	r4,-12(fp)
  411afc:	e17ffe17 	ldw	r5,-8(fp)
  411b00:	01800104 	movi	r6,4
  411b04:	000f883a 	mov	r7,zero
  411b08:	040ce480 	call	40ce48 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  411b0c:	e0bffd17 	ldw	r2,-12(fp)
  411b10:	10800283 	ldbu	r2,10(r2)
  411b14:	10803fcc 	andi	r2,r2,255
  411b18:	103ff71e 	bne	r2,zero,411af8 <OSQPostOpt+0x90>
  411b1c:	00000506 	br	411b34 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  411b20:	e13ffd17 	ldw	r4,-12(fp)
  411b24:	e17ffe17 	ldw	r5,-8(fp)
  411b28:	01800104 	movi	r6,4
  411b2c:	000f883a 	mov	r7,zero
  411b30:	040ce480 	call	40ce48 <OS_EventTaskRdy>
  411b34:	e0bff417 	ldw	r2,-48(fp)
  411b38:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  411b3c:	0005303a 	rdctl	r2,status
  411b40:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  411b44:	e0fff817 	ldw	r3,-32(fp)
  411b48:	00bfff84 	movi	r2,-2
  411b4c:	1884703a 	and	r2,r3,r2
  411b50:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  411b54:	e0bff717 	ldw	r2,-36(fp)
  411b58:	1080004c 	andi	r2,r2,1
  411b5c:	e0fff817 	ldw	r3,-32(fp)
  411b60:	1884b03a 	or	r2,r3,r2
  411b64:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  411b68:	e0bff817 	ldw	r2,-32(fp)
  411b6c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  411b70:	e0bfff03 	ldbu	r2,-4(fp)
  411b74:	1080010c 	andi	r2,r2,4
  411b78:	1000011e 	bne	r2,zero,411b80 <OSQPostOpt+0x118>
            OS_Sched();                               /* Find highest priority task ready to run       */
  411b7c:	040d8640 	call	40d864 <OS_Sched>
        }
        return (OS_ERR_NONE);
  411b80:	0005883a 	mov	r2,zero
  411b84:	00005706 	br	411ce4 <OSQPostOpt+0x27c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  411b88:	e0bffd17 	ldw	r2,-12(fp)
  411b8c:	10800117 	ldw	r2,4(r2)
  411b90:	e0bff515 	stw	r2,-44(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  411b94:	e0bff517 	ldw	r2,-44(fp)
  411b98:	10c0058b 	ldhu	r3,22(r2)
  411b9c:	e0bff517 	ldw	r2,-44(fp)
  411ba0:	1080050b 	ldhu	r2,20(r2)
  411ba4:	18ffffcc 	andi	r3,r3,65535
  411ba8:	10bfffcc 	andi	r2,r2,65535
  411bac:	18801136 	bltu	r3,r2,411bf4 <OSQPostOpt+0x18c>
  411bb0:	e0bff417 	ldw	r2,-48(fp)
  411bb4:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  411bb8:	0005303a 	rdctl	r2,status
  411bbc:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  411bc0:	e0fffa17 	ldw	r3,-24(fp)
  411bc4:	00bfff84 	movi	r2,-2
  411bc8:	1884703a 	and	r2,r3,r2
  411bcc:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  411bd0:	e0bff917 	ldw	r2,-28(fp)
  411bd4:	1080004c 	andi	r2,r2,1
  411bd8:	e0fffa17 	ldw	r3,-24(fp)
  411bdc:	1884b03a 	or	r2,r3,r2
  411be0:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  411be4:	e0bffa17 	ldw	r2,-24(fp)
  411be8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  411bec:	00800784 	movi	r2,30
  411bf0:	00003c06 	br	411ce4 <OSQPostOpt+0x27c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  411bf4:	e0bfff03 	ldbu	r2,-4(fp)
  411bf8:	1080008c 	andi	r2,r2,2
  411bfc:	10001326 	beq	r2,zero,411c4c <OSQPostOpt+0x1e4>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  411c00:	e0bff517 	ldw	r2,-44(fp)
  411c04:	10c00417 	ldw	r3,16(r2)
  411c08:	e0bff517 	ldw	r2,-44(fp)
  411c0c:	10800117 	ldw	r2,4(r2)
  411c10:	1880041e 	bne	r3,r2,411c24 <OSQPostOpt+0x1bc>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  411c14:	e0bff517 	ldw	r2,-44(fp)
  411c18:	10c00217 	ldw	r3,8(r2)
  411c1c:	e0bff517 	ldw	r2,-44(fp)
  411c20:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  411c24:	e0bff517 	ldw	r2,-44(fp)
  411c28:	10800417 	ldw	r2,16(r2)
  411c2c:	10ffff04 	addi	r3,r2,-4
  411c30:	e0bff517 	ldw	r2,-44(fp)
  411c34:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  411c38:	e0bff517 	ldw	r2,-44(fp)
  411c3c:	10800417 	ldw	r2,16(r2)
  411c40:	e0fffe17 	ldw	r3,-8(fp)
  411c44:	10c00015 	stw	r3,0(r2)
  411c48:	00001006 	br	411c8c <OSQPostOpt+0x224>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  411c4c:	e0bff517 	ldw	r2,-44(fp)
  411c50:	10800317 	ldw	r2,12(r2)
  411c54:	e0fffe17 	ldw	r3,-8(fp)
  411c58:	10c00015 	stw	r3,0(r2)
  411c5c:	10c00104 	addi	r3,r2,4
  411c60:	e0bff517 	ldw	r2,-44(fp)
  411c64:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  411c68:	e0bff517 	ldw	r2,-44(fp)
  411c6c:	10c00317 	ldw	r3,12(r2)
  411c70:	e0bff517 	ldw	r2,-44(fp)
  411c74:	10800217 	ldw	r2,8(r2)
  411c78:	1880041e 	bne	r3,r2,411c8c <OSQPostOpt+0x224>
            pq->OSQIn = pq->OSQStart;
  411c7c:	e0bff517 	ldw	r2,-44(fp)
  411c80:	10c00117 	ldw	r3,4(r2)
  411c84:	e0bff517 	ldw	r2,-44(fp)
  411c88:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  411c8c:	e0bff517 	ldw	r2,-44(fp)
  411c90:	1080058b 	ldhu	r2,22(r2)
  411c94:	10800044 	addi	r2,r2,1
  411c98:	1007883a 	mov	r3,r2
  411c9c:	e0bff517 	ldw	r2,-44(fp)
  411ca0:	10c0058d 	sth	r3,22(r2)
  411ca4:	e0bff417 	ldw	r2,-48(fp)
  411ca8:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  411cac:	0005303a 	rdctl	r2,status
  411cb0:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  411cb4:	e0fffc17 	ldw	r3,-16(fp)
  411cb8:	00bfff84 	movi	r2,-2
  411cbc:	1884703a 	and	r2,r3,r2
  411cc0:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  411cc4:	e0bffb17 	ldw	r2,-20(fp)
  411cc8:	1080004c 	andi	r2,r2,1
  411ccc:	e0fffc17 	ldw	r3,-16(fp)
  411cd0:	1884b03a 	or	r2,r3,r2
  411cd4:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  411cd8:	e0bffc17 	ldw	r2,-16(fp)
  411cdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  411ce0:	0005883a 	mov	r2,zero
}
  411ce4:	e037883a 	mov	sp,fp
  411ce8:	dfc00117 	ldw	ra,4(sp)
  411cec:	df000017 	ldw	fp,0(sp)
  411cf0:	dec00204 	addi	sp,sp,8
  411cf4:	f800283a 	ret

00411cf8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  411cf8:	defff504 	addi	sp,sp,-44
  411cfc:	df000a15 	stw	fp,40(sp)
  411d00:	df000a04 	addi	fp,sp,40
  411d04:	e13ffe15 	stw	r4,-8(fp)
  411d08:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  411d0c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  411d10:	e0bffe17 	ldw	r2,-8(fp)
  411d14:	1000021e 	bne	r2,zero,411d20 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  411d18:	00800104 	movi	r2,4
  411d1c:	00005606 	br	411e78 <OSQQuery+0x180>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  411d20:	e0bfff17 	ldw	r2,-4(fp)
  411d24:	1000021e 	bne	r2,zero,411d30 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  411d28:	00800244 	movi	r2,9
  411d2c:	00005206 	br	411e78 <OSQQuery+0x180>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  411d30:	e0bffe17 	ldw	r2,-8(fp)
  411d34:	10800003 	ldbu	r2,0(r2)
  411d38:	10803fcc 	andi	r2,r2,255
  411d3c:	108000a0 	cmpeqi	r2,r2,2
  411d40:	1000021e 	bne	r2,zero,411d4c <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  411d44:	00800044 	movi	r2,1
  411d48:	00004b06 	br	411e78 <OSQQuery+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  411d4c:	0005303a 	rdctl	r2,status
  411d50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  411d54:	e0fffb17 	ldw	r3,-20(fp)
  411d58:	00bfff84 	movi	r2,-2
  411d5c:	1884703a 	and	r2,r3,r2
  411d60:	1001703a 	wrctl	status,r2
  
  return context;
  411d64:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  411d68:	e0bff915 	stw	r2,-28(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  411d6c:	e0bffe17 	ldw	r2,-8(fp)
  411d70:	10c00283 	ldbu	r3,10(r2)
  411d74:	e0bfff17 	ldw	r2,-4(fp)
  411d78:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  411d7c:	e0bffe17 	ldw	r2,-8(fp)
  411d80:	108002c4 	addi	r2,r2,11
  411d84:	e0bff715 	stw	r2,-36(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  411d88:	e0bfff17 	ldw	r2,-4(fp)
  411d8c:	10800204 	addi	r2,r2,8
  411d90:	e0bff815 	stw	r2,-32(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  411d94:	e03ff605 	stb	zero,-40(fp)
  411d98:	00000d06 	br	411dd0 <OSQQuery+0xd8>
        *pdest++ = *psrc++;
  411d9c:	e0bff717 	ldw	r2,-36(fp)
  411da0:	10c00003 	ldbu	r3,0(r2)
  411da4:	e0bff817 	ldw	r2,-32(fp)
  411da8:	10c00005 	stb	r3,0(r2)
  411dac:	e0bff817 	ldw	r2,-32(fp)
  411db0:	10800044 	addi	r2,r2,1
  411db4:	e0bff815 	stw	r2,-32(fp)
  411db8:	e0bff717 	ldw	r2,-36(fp)
  411dbc:	10800044 	addi	r2,r2,1
  411dc0:	e0bff715 	stw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  411dc4:	e0bff603 	ldbu	r2,-40(fp)
  411dc8:	10800044 	addi	r2,r2,1
  411dcc:	e0bff605 	stb	r2,-40(fp)
  411dd0:	e0bff603 	ldbu	r2,-40(fp)
  411dd4:	108000f0 	cmpltui	r2,r2,3
  411dd8:	103ff01e 	bne	r2,zero,411d9c <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  411ddc:	e0bffe17 	ldw	r2,-8(fp)
  411de0:	10800117 	ldw	r2,4(r2)
  411de4:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries > 0) {
  411de8:	e0bffa17 	ldw	r2,-24(fp)
  411dec:	1080058b 	ldhu	r2,22(r2)
  411df0:	10bfffcc 	andi	r2,r2,65535
  411df4:	10000626 	beq	r2,zero,411e10 <OSQQuery+0x118>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  411df8:	e0bffa17 	ldw	r2,-24(fp)
  411dfc:	10800417 	ldw	r2,16(r2)
  411e00:	10c00017 	ldw	r3,0(r2)
  411e04:	e0bfff17 	ldw	r2,-4(fp)
  411e08:	10c00015 	stw	r3,0(r2)
  411e0c:	00000206 	br	411e18 <OSQQuery+0x120>
    } else {
        p_q_data->OSMsg = (void *)0;
  411e10:	e0bfff17 	ldw	r2,-4(fp)
  411e14:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  411e18:	e0bffa17 	ldw	r2,-24(fp)
  411e1c:	10c0058b 	ldhu	r3,22(r2)
  411e20:	e0bfff17 	ldw	r2,-4(fp)
  411e24:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  411e28:	e0bffa17 	ldw	r2,-24(fp)
  411e2c:	10c0050b 	ldhu	r3,20(r2)
  411e30:	e0bfff17 	ldw	r2,-4(fp)
  411e34:	10c0018d 	sth	r3,6(r2)
  411e38:	e0bff917 	ldw	r2,-28(fp)
  411e3c:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  411e40:	0005303a 	rdctl	r2,status
  411e44:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  411e48:	e0fffd17 	ldw	r3,-12(fp)
  411e4c:	00bfff84 	movi	r2,-2
  411e50:	1884703a 	and	r2,r3,r2
  411e54:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  411e58:	e0bffc17 	ldw	r2,-16(fp)
  411e5c:	1080004c 	andi	r2,r2,1
  411e60:	e0fffd17 	ldw	r3,-12(fp)
  411e64:	1884b03a 	or	r2,r3,r2
  411e68:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  411e6c:	e0bffd17 	ldw	r2,-12(fp)
  411e70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  411e74:	0005883a 	mov	r2,zero
}
  411e78:	e037883a 	mov	sp,fp
  411e7c:	df000017 	ldw	fp,0(sp)
  411e80:	dec00104 	addi	sp,sp,4
  411e84:	f800283a 	ret

00411e88 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  411e88:	defffb04 	addi	sp,sp,-20
  411e8c:	dfc00415 	stw	ra,16(sp)
  411e90:	df000315 	stw	fp,12(sp)
  411e94:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  411e98:	010010b4 	movhi	r4,66
  411e9c:	213be304 	addi	r4,r4,-4212
  411ea0:	01407804 	movi	r5,480
  411ea4:	040d7a40 	call	40d7a4 <OS_MemClr>
    pq1 = &OSQTbl[0];
  411ea8:	008010b4 	movhi	r2,66
  411eac:	10bbe304 	addi	r2,r2,-4212
  411eb0:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  411eb4:	008010b4 	movhi	r2,66
  411eb8:	10bbe904 	addi	r2,r2,-4188
  411ebc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  411ec0:	e03ffd0d 	sth	zero,-12(fp)
  411ec4:	00000c06 	br	411ef8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  411ec8:	e0bffe17 	ldw	r2,-8(fp)
  411ecc:	e0ffff17 	ldw	r3,-4(fp)
  411ed0:	10c00015 	stw	r3,0(r2)
        pq1++;
  411ed4:	e0bffe17 	ldw	r2,-8(fp)
  411ed8:	10800604 	addi	r2,r2,24
  411edc:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  411ee0:	e0bfff17 	ldw	r2,-4(fp)
  411ee4:	10800604 	addi	r2,r2,24
  411ee8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  411eec:	e0bffd0b 	ldhu	r2,-12(fp)
  411ef0:	10800044 	addi	r2,r2,1
  411ef4:	e0bffd0d 	sth	r2,-12(fp)
  411ef8:	e0bffd0b 	ldhu	r2,-12(fp)
  411efc:	108004f0 	cmpltui	r2,r2,19
  411f00:	103ff11e 	bne	r2,zero,411ec8 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  411f04:	e0bffe17 	ldw	r2,-8(fp)
  411f08:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  411f0c:	008010b4 	movhi	r2,66
  411f10:	10b59a04 	addi	r2,r2,-10648
  411f14:	00c010b4 	movhi	r3,66
  411f18:	18fbe304 	addi	r3,r3,-4212
  411f1c:	10c00015 	stw	r3,0(r2)
#endif
}
  411f20:	e037883a 	mov	sp,fp
  411f24:	dfc00117 	ldw	ra,4(sp)
  411f28:	df000017 	ldw	fp,0(sp)
  411f2c:	dec00204 	addi	sp,sp,8
  411f30:	f800283a 	ret

00411f34 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  411f34:	defff904 	addi	sp,sp,-28
  411f38:	df000615 	stw	fp,24(sp)
  411f3c:	df000604 	addi	fp,sp,24
  411f40:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  411f44:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  411f48:	e0bfff17 	ldw	r2,-4(fp)
  411f4c:	1000021e 	bne	r2,zero,411f58 <OSSemAccept+0x24>
        return (0);
  411f50:	0005883a 	mov	r2,zero
  411f54:	00002a06 	br	412000 <OSSemAccept+0xcc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  411f58:	e0bfff17 	ldw	r2,-4(fp)
  411f5c:	10800003 	ldbu	r2,0(r2)
  411f60:	10803fcc 	andi	r2,r2,255
  411f64:	108000e0 	cmpeqi	r2,r2,3
  411f68:	1000021e 	bne	r2,zero,411f74 <OSSemAccept+0x40>
        return (0);
  411f6c:	0005883a 	mov	r2,zero
  411f70:	00002306 	br	412000 <OSSemAccept+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  411f74:	0005303a 	rdctl	r2,status
  411f78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  411f7c:	e0fffc17 	ldw	r3,-16(fp)
  411f80:	00bfff84 	movi	r2,-2
  411f84:	1884703a 	and	r2,r3,r2
  411f88:	1001703a 	wrctl	status,r2
  
  return context;
  411f8c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  411f90:	e0bffa15 	stw	r2,-24(fp)
    cnt = pevent->OSEventCnt;
  411f94:	e0bfff17 	ldw	r2,-4(fp)
  411f98:	1080020b 	ldhu	r2,8(r2)
  411f9c:	e0bffb0d 	sth	r2,-20(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  411fa0:	e0bffb0b 	ldhu	r2,-20(fp)
  411fa4:	10000626 	beq	r2,zero,411fc0 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  411fa8:	e0bfff17 	ldw	r2,-4(fp)
  411fac:	1080020b 	ldhu	r2,8(r2)
  411fb0:	10bfffc4 	addi	r2,r2,-1
  411fb4:	1007883a 	mov	r3,r2
  411fb8:	e0bfff17 	ldw	r2,-4(fp)
  411fbc:	10c0020d 	sth	r3,8(r2)
  411fc0:	e0bffa17 	ldw	r2,-24(fp)
  411fc4:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  411fc8:	0005303a 	rdctl	r2,status
  411fcc:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  411fd0:	e0fffe17 	ldw	r3,-8(fp)
  411fd4:	00bfff84 	movi	r2,-2
  411fd8:	1884703a 	and	r2,r3,r2
  411fdc:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  411fe0:	e0bffd17 	ldw	r2,-12(fp)
  411fe4:	1080004c 	andi	r2,r2,1
  411fe8:	e0fffe17 	ldw	r3,-8(fp)
  411fec:	1884b03a 	or	r2,r3,r2
  411ff0:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  411ff4:	e0bffe17 	ldw	r2,-8(fp)
  411ff8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  411ffc:	e0bffb0b 	ldhu	r2,-20(fp)
}
  412000:	e037883a 	mov	sp,fp
  412004:	df000017 	ldw	fp,0(sp)
  412008:	dec00104 	addi	sp,sp,4
  41200c:	f800283a 	ret

00412010 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  412010:	defff804 	addi	sp,sp,-32
  412014:	dfc00715 	stw	ra,28(sp)
  412018:	df000615 	stw	fp,24(sp)
  41201c:	df000604 	addi	fp,sp,24
  412020:	2005883a 	mov	r2,r4
  412024:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  412028:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  41202c:	008010b4 	movhi	r2,66
  412030:	10b59d04 	addi	r2,r2,-10636
  412034:	10800003 	ldbu	r2,0(r2)
  412038:	10803fcc 	andi	r2,r2,255
  41203c:	10000226 	beq	r2,zero,412048 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  412040:	0005883a 	mov	r2,zero
  412044:	00003806 	br	412128 <OSSemCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  412048:	0005303a 	rdctl	r2,status
  41204c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  412050:	e0fffc17 	ldw	r3,-16(fp)
  412054:	00bfff84 	movi	r2,-2
  412058:	1884703a 	and	r2,r3,r2
  41205c:	1001703a 	wrctl	status,r2
  
  return context;
  412060:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  412064:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  412068:	008010b4 	movhi	r2,66
  41206c:	10b59c04 	addi	r2,r2,-10640
  412070:	10800017 	ldw	r2,0(r2)
  412074:	e0bffb15 	stw	r2,-20(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  412078:	008010b4 	movhi	r2,66
  41207c:	10b59c04 	addi	r2,r2,-10640
  412080:	10800017 	ldw	r2,0(r2)
  412084:	10000726 	beq	r2,zero,4120a4 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  412088:	008010b4 	movhi	r2,66
  41208c:	10b59c04 	addi	r2,r2,-10640
  412090:	10800017 	ldw	r2,0(r2)
  412094:	10c00117 	ldw	r3,4(r2)
  412098:	008010b4 	movhi	r2,66
  41209c:	10b59c04 	addi	r2,r2,-10640
  4120a0:	10c00015 	stw	r3,0(r2)
  4120a4:	e0bffa17 	ldw	r2,-24(fp)
  4120a8:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4120ac:	0005303a 	rdctl	r2,status
  4120b0:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4120b4:	e0fffe17 	ldw	r3,-8(fp)
  4120b8:	00bfff84 	movi	r2,-2
  4120bc:	1884703a 	and	r2,r3,r2
  4120c0:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4120c4:	e0bffd17 	ldw	r2,-12(fp)
  4120c8:	1080004c 	andi	r2,r2,1
  4120cc:	e0fffe17 	ldw	r3,-8(fp)
  4120d0:	1884b03a 	or	r2,r3,r2
  4120d4:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  4120d8:	e0bffe17 	ldw	r2,-8(fp)
  4120dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  4120e0:	e0bffb17 	ldw	r2,-20(fp)
  4120e4:	10000f26 	beq	r2,zero,412124 <OSSemCreate+0x114>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  4120e8:	e0bffb17 	ldw	r2,-20(fp)
  4120ec:	00c000c4 	movi	r3,3
  4120f0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  4120f4:	e0bffb17 	ldw	r2,-20(fp)
  4120f8:	e0ffff0b 	ldhu	r3,-4(fp)
  4120fc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  412100:	e0bffb17 	ldw	r2,-20(fp)
  412104:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  412108:	e0bffb17 	ldw	r2,-20(fp)
  41210c:	00c00fc4 	movi	r3,63
  412110:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  412114:	e0bffb17 	ldw	r2,-20(fp)
  412118:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  41211c:	e13ffb17 	ldw	r4,-20(fp)
  412120:	040d3d80 	call	40d3d8 <OS_EventWaitListInit>
    }
    return (pevent);
  412124:	e0bffb17 	ldw	r2,-20(fp)
}
  412128:	e037883a 	mov	sp,fp
  41212c:	dfc00117 	ldw	ra,4(sp)
  412130:	df000017 	ldw	fp,0(sp)
  412134:	dec00204 	addi	sp,sp,8
  412138:	f800283a 	ret

0041213c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  41213c:	deffef04 	addi	sp,sp,-68
  412140:	dfc01015 	stw	ra,64(sp)
  412144:	df000f15 	stw	fp,60(sp)
  412148:	df000f04 	addi	fp,sp,60
  41214c:	e13ffd15 	stw	r4,-12(fp)
  412150:	2805883a 	mov	r2,r5
  412154:	e1bfff15 	stw	r6,-4(fp)
  412158:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  41215c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  412160:	e0bfff17 	ldw	r2,-4(fp)
  412164:	1000021e 	bne	r2,zero,412170 <OSSemDel+0x34>
        return (pevent);
  412168:	e0bffd17 	ldw	r2,-12(fp)
  41216c:	0000b606 	br	412448 <OSSemDel+0x30c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  412170:	e0bffd17 	ldw	r2,-12(fp)
  412174:	1000051e 	bne	r2,zero,41218c <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  412178:	e0bfff17 	ldw	r2,-4(fp)
  41217c:	00c00104 	movi	r3,4
  412180:	10c00005 	stb	r3,0(r2)
        return (pevent);
  412184:	e0bffd17 	ldw	r2,-12(fp)
  412188:	0000af06 	br	412448 <OSSemDel+0x30c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  41218c:	e0bffd17 	ldw	r2,-12(fp)
  412190:	10800003 	ldbu	r2,0(r2)
  412194:	10803fcc 	andi	r2,r2,255
  412198:	108000e0 	cmpeqi	r2,r2,3
  41219c:	1000051e 	bne	r2,zero,4121b4 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  4121a0:	e0bfff17 	ldw	r2,-4(fp)
  4121a4:	00c00044 	movi	r3,1
  4121a8:	10c00005 	stb	r3,0(r2)
        return (pevent);
  4121ac:	e0bffd17 	ldw	r2,-12(fp)
  4121b0:	0000a506 	br	412448 <OSSemDel+0x30c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  4121b4:	008010b4 	movhi	r2,66
  4121b8:	10b59d04 	addi	r2,r2,-10636
  4121bc:	10800003 	ldbu	r2,0(r2)
  4121c0:	10803fcc 	andi	r2,r2,255
  4121c4:	10000526 	beq	r2,zero,4121dc <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  4121c8:	e0bfff17 	ldw	r2,-4(fp)
  4121cc:	00c003c4 	movi	r3,15
  4121d0:	10c00005 	stb	r3,0(r2)
        return (pevent);
  4121d4:	e0bffd17 	ldw	r2,-12(fp)
  4121d8:	00009b06 	br	412448 <OSSemDel+0x30c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4121dc:	0005303a 	rdctl	r2,status
  4121e0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4121e4:	e0fff417 	ldw	r3,-48(fp)
  4121e8:	00bfff84 	movi	r2,-2
  4121ec:	1884703a 	and	r2,r3,r2
  4121f0:	1001703a 	wrctl	status,r2
  
  return context;
  4121f4:	e0bff417 	ldw	r2,-48(fp)
    }
    OS_ENTER_CRITICAL();
  4121f8:	e0bff315 	stw	r2,-52(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  4121fc:	e0bffd17 	ldw	r2,-12(fp)
  412200:	10800283 	ldbu	r2,10(r2)
  412204:	10803fcc 	andi	r2,r2,255
  412208:	10000326 	beq	r2,zero,412218 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  41220c:	00800044 	movi	r2,1
  412210:	e0bff105 	stb	r2,-60(fp)
  412214:	00000106 	br	41221c <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  412218:	e03ff105 	stb	zero,-60(fp)
    }
    switch (opt) {
  41221c:	e0bffe03 	ldbu	r2,-8(fp)
  412220:	10000326 	beq	r2,zero,412230 <OSSemDel+0xf4>
  412224:	10800060 	cmpeqi	r2,r2,1
  412228:	1000431e 	bne	r2,zero,412338 <OSSemDel+0x1fc>
  41222c:	00007006 	br	4123f0 <OSSemDel+0x2b4>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  412230:	e0bff103 	ldbu	r2,-60(fp)
  412234:	1000251e 	bne	r2,zero,4122cc <OSSemDel+0x190>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  412238:	e0bffd17 	ldw	r2,-12(fp)
  41223c:	00c00fc4 	movi	r3,63
  412240:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  412244:	e0bffd17 	ldw	r2,-12(fp)
  412248:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  41224c:	e0bffd17 	ldw	r2,-12(fp)
  412250:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  412254:	008010b4 	movhi	r2,66
  412258:	10b59c04 	addi	r2,r2,-10640
  41225c:	10c00017 	ldw	r3,0(r2)
  412260:	e0bffd17 	ldw	r2,-12(fp)
  412264:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  412268:	e0bffd17 	ldw	r2,-12(fp)
  41226c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  412270:	008010b4 	movhi	r2,66
  412274:	10b59c04 	addi	r2,r2,-10640
  412278:	e0fffd17 	ldw	r3,-12(fp)
  41227c:	10c00015 	stw	r3,0(r2)
  412280:	e0bff317 	ldw	r2,-52(fp)
  412284:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  412288:	0005303a 	rdctl	r2,status
  41228c:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  412290:	e0fff617 	ldw	r3,-40(fp)
  412294:	00bfff84 	movi	r2,-2
  412298:	1884703a 	and	r2,r3,r2
  41229c:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4122a0:	e0bff517 	ldw	r2,-44(fp)
  4122a4:	1080004c 	andi	r2,r2,1
  4122a8:	e0fff617 	ldw	r3,-40(fp)
  4122ac:	1884b03a 	or	r2,r3,r2
  4122b0:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  4122b4:	e0bff617 	ldw	r2,-40(fp)
  4122b8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  4122bc:	e0bfff17 	ldw	r2,-4(fp)
  4122c0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  4122c4:	e03ff215 	stw	zero,-56(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
  4122c8:	00005e06 	br	412444 <OSSemDel+0x308>
  4122cc:	e0bff317 	ldw	r2,-52(fp)
  4122d0:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4122d4:	0005303a 	rdctl	r2,status
  4122d8:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4122dc:	e0fff817 	ldw	r3,-32(fp)
  4122e0:	00bfff84 	movi	r2,-2
  4122e4:	1884703a 	and	r2,r3,r2
  4122e8:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4122ec:	e0bff717 	ldw	r2,-36(fp)
  4122f0:	1080004c 	andi	r2,r2,1
  4122f4:	e0fff817 	ldw	r3,-32(fp)
  4122f8:	1884b03a 	or	r2,r3,r2
  4122fc:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  412300:	e0bff817 	ldw	r2,-32(fp)
  412304:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  412308:	e0bfff17 	ldw	r2,-4(fp)
  41230c:	00c01244 	movi	r3,73
  412310:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
  412314:	e0bffd17 	ldw	r2,-12(fp)
  412318:	e0bff215 	stw	r2,-56(fp)
             }
             break;
  41231c:	00004906 	br	412444 <OSSemDel+0x308>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  412320:	e13ffd17 	ldw	r4,-12(fp)
  412324:	000b883a 	mov	r5,zero
  412328:	01800044 	movi	r6,1
  41232c:	000f883a 	mov	r7,zero
  412330:	040ce480 	call	40ce48 <OS_EventTaskRdy>
  412334:	00000106 	br	41233c <OSSemDel+0x200>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  412338:	0001883a 	nop
  41233c:	e0bffd17 	ldw	r2,-12(fp)
  412340:	10800283 	ldbu	r2,10(r2)
  412344:	10803fcc 	andi	r2,r2,255
  412348:	103ff51e 	bne	r2,zero,412320 <OSSemDel+0x1e4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  41234c:	e0bffd17 	ldw	r2,-12(fp)
  412350:	00c00fc4 	movi	r3,63
  412354:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  412358:	e0bffd17 	ldw	r2,-12(fp)
  41235c:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  412360:	e0bffd17 	ldw	r2,-12(fp)
  412364:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  412368:	008010b4 	movhi	r2,66
  41236c:	10b59c04 	addi	r2,r2,-10640
  412370:	10c00017 	ldw	r3,0(r2)
  412374:	e0bffd17 	ldw	r2,-12(fp)
  412378:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  41237c:	e0bffd17 	ldw	r2,-12(fp)
  412380:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  412384:	008010b4 	movhi	r2,66
  412388:	10b59c04 	addi	r2,r2,-10640
  41238c:	e0fffd17 	ldw	r3,-12(fp)
  412390:	10c00015 	stw	r3,0(r2)
  412394:	e0bff317 	ldw	r2,-52(fp)
  412398:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41239c:	0005303a 	rdctl	r2,status
  4123a0:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4123a4:	e0fffa17 	ldw	r3,-24(fp)
  4123a8:	00bfff84 	movi	r2,-2
  4123ac:	1884703a 	and	r2,r3,r2
  4123b0:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4123b4:	e0bff917 	ldw	r2,-28(fp)
  4123b8:	1080004c 	andi	r2,r2,1
  4123bc:	e0fffa17 	ldw	r3,-24(fp)
  4123c0:	1884b03a 	or	r2,r3,r2
  4123c4:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  4123c8:	e0bffa17 	ldw	r2,-24(fp)
  4123cc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  4123d0:	e0bff103 	ldbu	r2,-60(fp)
  4123d4:	10800058 	cmpnei	r2,r2,1
  4123d8:	1000011e 	bne	r2,zero,4123e0 <OSSemDel+0x2a4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  4123dc:	040d8640 	call	40d864 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  4123e0:	e0bfff17 	ldw	r2,-4(fp)
  4123e4:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  4123e8:	e03ff215 	stw	zero,-56(fp)
             break;
  4123ec:	00001506 	br	412444 <OSSemDel+0x308>
  4123f0:	e0bff317 	ldw	r2,-52(fp)
  4123f4:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4123f8:	0005303a 	rdctl	r2,status
  4123fc:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  412400:	e0fffc17 	ldw	r3,-16(fp)
  412404:	00bfff84 	movi	r2,-2
  412408:	1884703a 	and	r2,r3,r2
  41240c:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  412410:	e0bffb17 	ldw	r2,-20(fp)
  412414:	1080004c 	andi	r2,r2,1
  412418:	e0fffc17 	ldw	r3,-16(fp)
  41241c:	1884b03a 	or	r2,r3,r2
  412420:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  412424:	e0bffc17 	ldw	r2,-16(fp)
  412428:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  41242c:	e0bfff17 	ldw	r2,-4(fp)
  412430:	00c001c4 	movi	r3,7
  412434:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
  412438:	e0bffd17 	ldw	r2,-12(fp)
  41243c:	e0bff215 	stw	r2,-56(fp)
             break;
  412440:	0001883a 	nop
    }
    return (pevent_return);
  412444:	e0bff217 	ldw	r2,-56(fp)
}
  412448:	e037883a 	mov	sp,fp
  41244c:	dfc00117 	ldw	ra,4(sp)
  412450:	df000017 	ldw	fp,0(sp)
  412454:	dec00204 	addi	sp,sp,8
  412458:	f800283a 	ret

0041245c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  41245c:	defff204 	addi	sp,sp,-56
  412460:	dfc00d15 	stw	ra,52(sp)
  412464:	df000c15 	stw	fp,48(sp)
  412468:	df000c04 	addi	fp,sp,48
  41246c:	e13ffd15 	stw	r4,-12(fp)
  412470:	2805883a 	mov	r2,r5
  412474:	e1bfff15 	stw	r6,-4(fp)
  412478:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  41247c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  412480:	e0bfff17 	ldw	r2,-4(fp)
  412484:	1000ab26 	beq	r2,zero,412734 <OSSemPend+0x2d8>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  412488:	e0bffd17 	ldw	r2,-12(fp)
  41248c:	1000041e 	bne	r2,zero,4124a0 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  412490:	e0bfff17 	ldw	r2,-4(fp)
  412494:	00c00104 	movi	r3,4
  412498:	10c00005 	stb	r3,0(r2)
        return;
  41249c:	0000a606 	br	412738 <OSSemPend+0x2dc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  4124a0:	e0bffd17 	ldw	r2,-12(fp)
  4124a4:	10800003 	ldbu	r2,0(r2)
  4124a8:	10803fcc 	andi	r2,r2,255
  4124ac:	108000e0 	cmpeqi	r2,r2,3
  4124b0:	1000041e 	bne	r2,zero,4124c4 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  4124b4:	e0bfff17 	ldw	r2,-4(fp)
  4124b8:	00c00044 	movi	r3,1
  4124bc:	10c00005 	stb	r3,0(r2)
        return;
  4124c0:	00009d06 	br	412738 <OSSemPend+0x2dc>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  4124c4:	008010b4 	movhi	r2,66
  4124c8:	10b59d04 	addi	r2,r2,-10636
  4124cc:	10800003 	ldbu	r2,0(r2)
  4124d0:	10803fcc 	andi	r2,r2,255
  4124d4:	10000426 	beq	r2,zero,4124e8 <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  4124d8:	e0bfff17 	ldw	r2,-4(fp)
  4124dc:	00c00084 	movi	r3,2
  4124e0:	10c00005 	stb	r3,0(r2)
        return;
  4124e4:	00009406 	br	412738 <OSSemPend+0x2dc>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  4124e8:	008010b4 	movhi	r2,66
  4124ec:	10b58f04 	addi	r2,r2,-10692
  4124f0:	10800003 	ldbu	r2,0(r2)
  4124f4:	10803fcc 	andi	r2,r2,255
  4124f8:	10000426 	beq	r2,zero,41250c <OSSemPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  4124fc:	e0bfff17 	ldw	r2,-4(fp)
  412500:	00c00344 	movi	r3,13
  412504:	10c00005 	stb	r3,0(r2)
        return;
  412508:	00008b06 	br	412738 <OSSemPend+0x2dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  41250c:	0005303a 	rdctl	r2,status
  412510:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  412514:	e0fff517 	ldw	r3,-44(fp)
  412518:	00bfff84 	movi	r2,-2
  41251c:	1884703a 	and	r2,r3,r2
  412520:	1001703a 	wrctl	status,r2
  
  return context;
  412524:	e0bff517 	ldw	r2,-44(fp)
    }
    OS_ENTER_CRITICAL();
  412528:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  41252c:	e0bffd17 	ldw	r2,-12(fp)
  412530:	1080020b 	ldhu	r2,8(r2)
  412534:	10bfffcc 	andi	r2,r2,65535
  412538:	10001826 	beq	r2,zero,41259c <OSSemPend+0x140>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  41253c:	e0bffd17 	ldw	r2,-12(fp)
  412540:	1080020b 	ldhu	r2,8(r2)
  412544:	10bfffc4 	addi	r2,r2,-1
  412548:	1007883a 	mov	r3,r2
  41254c:	e0bffd17 	ldw	r2,-12(fp)
  412550:	10c0020d 	sth	r3,8(r2)
  412554:	e0bff417 	ldw	r2,-48(fp)
  412558:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41255c:	0005303a 	rdctl	r2,status
  412560:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  412564:	e0fff717 	ldw	r3,-36(fp)
  412568:	00bfff84 	movi	r2,-2
  41256c:	1884703a 	and	r2,r3,r2
  412570:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  412574:	e0bff617 	ldw	r2,-40(fp)
  412578:	1080004c 	andi	r2,r2,1
  41257c:	e0fff717 	ldw	r3,-36(fp)
  412580:	1884b03a 	or	r2,r3,r2
  412584:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  412588:	e0bff717 	ldw	r2,-36(fp)
  41258c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  412590:	e0bfff17 	ldw	r2,-4(fp)
  412594:	10000005 	stb	zero,0(r2)
        return;
  412598:	00006706 	br	412738 <OSSemPend+0x2dc>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  41259c:	008010b4 	movhi	r2,66
  4125a0:	10b59e04 	addi	r2,r2,-10632
  4125a4:	10800017 	ldw	r2,0(r2)
  4125a8:	00c010b4 	movhi	r3,66
  4125ac:	18f59e04 	addi	r3,r3,-10632
  4125b0:	18c00017 	ldw	r3,0(r3)
  4125b4:	18c00c03 	ldbu	r3,48(r3)
  4125b8:	18c00054 	ori	r3,r3,1
  4125bc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  4125c0:	008010b4 	movhi	r2,66
  4125c4:	10b59e04 	addi	r2,r2,-10632
  4125c8:	10800017 	ldw	r2,0(r2)
  4125cc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  4125d0:	008010b4 	movhi	r2,66
  4125d4:	10b59e04 	addi	r2,r2,-10632
  4125d8:	10800017 	ldw	r2,0(r2)
  4125dc:	e0fffe0b 	ldhu	r3,-8(fp)
  4125e0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  4125e4:	e13ffd17 	ldw	r4,-12(fp)
  4125e8:	040cfe00 	call	40cfe0 <OS_EventTaskWait>
  4125ec:	e0bff417 	ldw	r2,-48(fp)
  4125f0:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4125f4:	0005303a 	rdctl	r2,status
  4125f8:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4125fc:	e0fff917 	ldw	r3,-28(fp)
  412600:	00bfff84 	movi	r2,-2
  412604:	1884703a 	and	r2,r3,r2
  412608:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  41260c:	e0bff817 	ldw	r2,-32(fp)
  412610:	1080004c 	andi	r2,r2,1
  412614:	e0fff917 	ldw	r3,-28(fp)
  412618:	1884b03a 	or	r2,r3,r2
  41261c:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  412620:	e0bff917 	ldw	r2,-28(fp)
  412624:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  412628:	040d8640 	call	40d864 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  41262c:	0005303a 	rdctl	r2,status
  412630:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  412634:	e0fffa17 	ldw	r3,-24(fp)
  412638:	00bfff84 	movi	r2,-2
  41263c:	1884703a 	and	r2,r3,r2
  412640:	1001703a 	wrctl	status,r2
  
  return context;
  412644:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();
  412648:	e0bff415 	stw	r2,-48(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  41264c:	008010b4 	movhi	r2,66
  412650:	10b59e04 	addi	r2,r2,-10632
  412654:	10800017 	ldw	r2,0(r2)
  412658:	10800c43 	ldbu	r2,49(r2)
  41265c:	10803fcc 	andi	r2,r2,255
  412660:	10000326 	beq	r2,zero,412670 <OSSemPend+0x214>
  412664:	108000a0 	cmpeqi	r2,r2,2
  412668:	1000041e 	bne	r2,zero,41267c <OSSemPend+0x220>
  41266c:	00000706 	br	41268c <OSSemPend+0x230>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  412670:	e0bfff17 	ldw	r2,-4(fp)
  412674:	10000005 	stb	zero,0(r2)
             break;
  412678:	00000e06 	br	4126b4 <OSSemPend+0x258>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  41267c:	e0bfff17 	ldw	r2,-4(fp)
  412680:	00c00384 	movi	r3,14
  412684:	10c00005 	stb	r3,0(r2)
             break;
  412688:	00000a06 	br	4126b4 <OSSemPend+0x258>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  41268c:	008010b4 	movhi	r2,66
  412690:	10b59e04 	addi	r2,r2,-10632
  412694:	10800017 	ldw	r2,0(r2)
  412698:	1009883a 	mov	r4,r2
  41269c:	e17ffd17 	ldw	r5,-12(fp)
  4126a0:	040d2300 	call	40d230 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  4126a4:	e0bfff17 	ldw	r2,-4(fp)
  4126a8:	00c00284 	movi	r3,10
  4126ac:	10c00005 	stb	r3,0(r2)
             break;
  4126b0:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  4126b4:	008010b4 	movhi	r2,66
  4126b8:	10b59e04 	addi	r2,r2,-10632
  4126bc:	10800017 	ldw	r2,0(r2)
  4126c0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  4126c4:	008010b4 	movhi	r2,66
  4126c8:	10b59e04 	addi	r2,r2,-10632
  4126cc:	10800017 	ldw	r2,0(r2)
  4126d0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  4126d4:	008010b4 	movhi	r2,66
  4126d8:	10b59e04 	addi	r2,r2,-10632
  4126dc:	10800017 	ldw	r2,0(r2)
  4126e0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  4126e4:	008010b4 	movhi	r2,66
  4126e8:	10b59e04 	addi	r2,r2,-10632
  4126ec:	10800017 	ldw	r2,0(r2)
  4126f0:	10000815 	stw	zero,32(r2)
  4126f4:	e0bff417 	ldw	r2,-48(fp)
  4126f8:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4126fc:	0005303a 	rdctl	r2,status
  412700:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  412704:	e0fffc17 	ldw	r3,-16(fp)
  412708:	00bfff84 	movi	r2,-2
  41270c:	1884703a 	and	r2,r3,r2
  412710:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  412714:	e0bffb17 	ldw	r2,-20(fp)
  412718:	1080004c 	andi	r2,r2,1
  41271c:	e0fffc17 	ldw	r3,-16(fp)
  412720:	1884b03a 	or	r2,r3,r2
  412724:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  412728:	e0bffc17 	ldw	r2,-16(fp)
  41272c:	1001703a 	wrctl	status,r2
  412730:	00000106 	br	412738 <OSSemPend+0x2dc>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  412734:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
  412738:	e037883a 	mov	sp,fp
  41273c:	dfc00117 	ldw	ra,4(sp)
  412740:	df000017 	ldw	fp,0(sp)
  412744:	dec00204 	addi	sp,sp,8
  412748:	f800283a 	ret

0041274c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  41274c:	defff404 	addi	sp,sp,-48
  412750:	dfc00b15 	stw	ra,44(sp)
  412754:	df000a15 	stw	fp,40(sp)
  412758:	df000a04 	addi	fp,sp,40
  41275c:	e13ffd15 	stw	r4,-12(fp)
  412760:	2805883a 	mov	r2,r5
  412764:	e1bfff15 	stw	r6,-4(fp)
  412768:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  41276c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  412770:	e0bfff17 	ldw	r2,-4(fp)
  412774:	1000021e 	bne	r2,zero,412780 <OSSemPendAbort+0x34>
        return (0);
  412778:	0005883a 	mov	r2,zero
  41277c:	00006106 	br	412904 <OSSemPendAbort+0x1b8>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  412780:	e0bffd17 	ldw	r2,-12(fp)
  412784:	1000051e 	bne	r2,zero,41279c <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
  412788:	e0bfff17 	ldw	r2,-4(fp)
  41278c:	00c00104 	movi	r3,4
  412790:	10c00005 	stb	r3,0(r2)
        return (0);
  412794:	0005883a 	mov	r2,zero
  412798:	00005a06 	br	412904 <OSSemPendAbort+0x1b8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  41279c:	e0bffd17 	ldw	r2,-12(fp)
  4127a0:	10800003 	ldbu	r2,0(r2)
  4127a4:	10803fcc 	andi	r2,r2,255
  4127a8:	108000e0 	cmpeqi	r2,r2,3
  4127ac:	1000051e 	bne	r2,zero,4127c4 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
  4127b0:	e0bfff17 	ldw	r2,-4(fp)
  4127b4:	00c00044 	movi	r3,1
  4127b8:	10c00005 	stb	r3,0(r2)
        return (0);
  4127bc:	0005883a 	mov	r2,zero
  4127c0:	00005006 	br	412904 <OSSemPendAbort+0x1b8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4127c4:	0005303a 	rdctl	r2,status
  4127c8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4127cc:	e0fff817 	ldw	r3,-32(fp)
  4127d0:	00bfff84 	movi	r2,-2
  4127d4:	1884703a 	and	r2,r3,r2
  4127d8:	1001703a 	wrctl	status,r2
  
  return context;
  4127dc:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  4127e0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  4127e4:	e0bffd17 	ldw	r2,-12(fp)
  4127e8:	10800283 	ldbu	r2,10(r2)
  4127ec:	10803fcc 	andi	r2,r2,255
  4127f0:	10003226 	beq	r2,zero,4128bc <OSSemPendAbort+0x170>
        nbr_tasks = 0;
  4127f4:	e03ff605 	stb	zero,-40(fp)
        switch (opt) {
  4127f8:	e0bffe03 	ldbu	r2,-8(fp)
  4127fc:	10800060 	cmpeqi	r2,r2,1
  412800:	10000a1e 	bne	r2,zero,41282c <OSSemPendAbort+0xe0>
  412804:	00000f06 	br	412844 <OSSemPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  412808:	e13ffd17 	ldw	r4,-12(fp)
  41280c:	000b883a 	mov	r5,zero
  412810:	01800044 	movi	r6,1
  412814:	01c00084 	movi	r7,2
  412818:	040ce480 	call	40ce48 <OS_EventTaskRdy>
                     nbr_tasks++;
  41281c:	e0bff603 	ldbu	r2,-40(fp)
  412820:	10800044 	addi	r2,r2,1
  412824:	e0bff605 	stb	r2,-40(fp)
  412828:	00000106 	br	412830 <OSSemPendAbort+0xe4>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  41282c:	0001883a 	nop
  412830:	e0bffd17 	ldw	r2,-12(fp)
  412834:	10800283 	ldbu	r2,10(r2)
  412838:	10803fcc 	andi	r2,r2,255
  41283c:	103ff21e 	bne	r2,zero,412808 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  412840:	00000906 	br	412868 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  412844:	e13ffd17 	ldw	r4,-12(fp)
  412848:	000b883a 	mov	r5,zero
  41284c:	01800044 	movi	r6,1
  412850:	01c00084 	movi	r7,2
  412854:	040ce480 	call	40ce48 <OS_EventTaskRdy>
                 nbr_tasks++;
  412858:	e0bff603 	ldbu	r2,-40(fp)
  41285c:	10800044 	addi	r2,r2,1
  412860:	e0bff605 	stb	r2,-40(fp)
                 break;
  412864:	0001883a 	nop
  412868:	e0bff717 	ldw	r2,-36(fp)
  41286c:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  412870:	0005303a 	rdctl	r2,status
  412874:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  412878:	e0fffa17 	ldw	r3,-24(fp)
  41287c:	00bfff84 	movi	r2,-2
  412880:	1884703a 	and	r2,r3,r2
  412884:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  412888:	e0bff917 	ldw	r2,-28(fp)
  41288c:	1080004c 	andi	r2,r2,1
  412890:	e0fffa17 	ldw	r3,-24(fp)
  412894:	1884b03a 	or	r2,r3,r2
  412898:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  41289c:	e0bffa17 	ldw	r2,-24(fp)
  4128a0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  4128a4:	040d8640 	call	40d864 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  4128a8:	e0bfff17 	ldw	r2,-4(fp)
  4128ac:	00c00384 	movi	r3,14
  4128b0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
  4128b4:	e0bff603 	ldbu	r2,-40(fp)
  4128b8:	00001206 	br	412904 <OSSemPendAbort+0x1b8>
  4128bc:	e0bff717 	ldw	r2,-36(fp)
  4128c0:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4128c4:	0005303a 	rdctl	r2,status
  4128c8:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4128cc:	e0fffc17 	ldw	r3,-16(fp)
  4128d0:	00bfff84 	movi	r2,-2
  4128d4:	1884703a 	and	r2,r3,r2
  4128d8:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4128dc:	e0bffb17 	ldw	r2,-20(fp)
  4128e0:	1080004c 	andi	r2,r2,1
  4128e4:	e0fffc17 	ldw	r3,-16(fp)
  4128e8:	1884b03a 	or	r2,r3,r2
  4128ec:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  4128f0:	e0bffc17 	ldw	r2,-16(fp)
  4128f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  4128f8:	e0bfff17 	ldw	r2,-4(fp)
  4128fc:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  412900:	0005883a 	mov	r2,zero
}
  412904:	e037883a 	mov	sp,fp
  412908:	dfc00117 	ldw	ra,4(sp)
  41290c:	df000017 	ldw	fp,0(sp)
  412910:	dec00204 	addi	sp,sp,8
  412914:	f800283a 	ret

00412918 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  412918:	defff504 	addi	sp,sp,-44
  41291c:	dfc00a15 	stw	ra,40(sp)
  412920:	df000915 	stw	fp,36(sp)
  412924:	df000904 	addi	fp,sp,36
  412928:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  41292c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  412930:	e0bfff17 	ldw	r2,-4(fp)
  412934:	1000021e 	bne	r2,zero,412940 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
  412938:	00800104 	movi	r2,4
  41293c:	00005606 	br	412a98 <OSSemPost+0x180>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  412940:	e0bfff17 	ldw	r2,-4(fp)
  412944:	10800003 	ldbu	r2,0(r2)
  412948:	10803fcc 	andi	r2,r2,255
  41294c:	108000e0 	cmpeqi	r2,r2,3
  412950:	1000021e 	bne	r2,zero,41295c <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
  412954:	00800044 	movi	r2,1
  412958:	00004f06 	br	412a98 <OSSemPost+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  41295c:	0005303a 	rdctl	r2,status
  412960:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  412964:	e0fff817 	ldw	r3,-32(fp)
  412968:	00bfff84 	movi	r2,-2
  41296c:	1884703a 	and	r2,r3,r2
  412970:	1001703a 	wrctl	status,r2
  
  return context;
  412974:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  412978:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  41297c:	e0bfff17 	ldw	r2,-4(fp)
  412980:	10800283 	ldbu	r2,10(r2)
  412984:	10803fcc 	andi	r2,r2,255
  412988:	10001726 	beq	r2,zero,4129e8 <OSSemPost+0xd0>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  41298c:	e13fff17 	ldw	r4,-4(fp)
  412990:	000b883a 	mov	r5,zero
  412994:	01800044 	movi	r6,1
  412998:	000f883a 	mov	r7,zero
  41299c:	040ce480 	call	40ce48 <OS_EventTaskRdy>
  4129a0:	e0bff717 	ldw	r2,-36(fp)
  4129a4:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4129a8:	0005303a 	rdctl	r2,status
  4129ac:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4129b0:	e0fffa17 	ldw	r3,-24(fp)
  4129b4:	00bfff84 	movi	r2,-2
  4129b8:	1884703a 	and	r2,r3,r2
  4129bc:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4129c0:	e0bff917 	ldw	r2,-28(fp)
  4129c4:	1080004c 	andi	r2,r2,1
  4129c8:	e0fffa17 	ldw	r3,-24(fp)
  4129cc:	1884b03a 	or	r2,r3,r2
  4129d0:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  4129d4:	e0bffa17 	ldw	r2,-24(fp)
  4129d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  4129dc:	040d8640 	call	40d864 <OS_Sched>
        return (OS_ERR_NONE);
  4129e0:	0005883a 	mov	r2,zero
  4129e4:	00002c06 	br	412a98 <OSSemPost+0x180>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  4129e8:	e0bfff17 	ldw	r2,-4(fp)
  4129ec:	1080020b 	ldhu	r2,8(r2)
  4129f0:	10ffffcc 	andi	r3,r2,65535
  4129f4:	00bfffd4 	movui	r2,65535
  4129f8:	18801726 	beq	r3,r2,412a58 <OSSemPost+0x140>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  4129fc:	e0bfff17 	ldw	r2,-4(fp)
  412a00:	1080020b 	ldhu	r2,8(r2)
  412a04:	10800044 	addi	r2,r2,1
  412a08:	1007883a 	mov	r3,r2
  412a0c:	e0bfff17 	ldw	r2,-4(fp)
  412a10:	10c0020d 	sth	r3,8(r2)
  412a14:	e0bff717 	ldw	r2,-36(fp)
  412a18:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  412a1c:	0005303a 	rdctl	r2,status
  412a20:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  412a24:	e0fffc17 	ldw	r3,-16(fp)
  412a28:	00bfff84 	movi	r2,-2
  412a2c:	1884703a 	and	r2,r3,r2
  412a30:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  412a34:	e0bffb17 	ldw	r2,-20(fp)
  412a38:	1080004c 	andi	r2,r2,1
  412a3c:	e0fffc17 	ldw	r3,-16(fp)
  412a40:	1884b03a 	or	r2,r3,r2
  412a44:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  412a48:	e0bffc17 	ldw	r2,-16(fp)
  412a4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  412a50:	0005883a 	mov	r2,zero
  412a54:	00001006 	br	412a98 <OSSemPost+0x180>
  412a58:	e0bff717 	ldw	r2,-36(fp)
  412a5c:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  412a60:	0005303a 	rdctl	r2,status
  412a64:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  412a68:	e0fffe17 	ldw	r3,-8(fp)
  412a6c:	00bfff84 	movi	r2,-2
  412a70:	1884703a 	and	r2,r3,r2
  412a74:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  412a78:	e0bffd17 	ldw	r2,-12(fp)
  412a7c:	1080004c 	andi	r2,r2,1
  412a80:	e0fffe17 	ldw	r3,-8(fp)
  412a84:	1884b03a 	or	r2,r3,r2
  412a88:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  412a8c:	e0bffe17 	ldw	r2,-8(fp)
  412a90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  412a94:	00800c84 	movi	r2,50
}
  412a98:	e037883a 	mov	sp,fp
  412a9c:	dfc00117 	ldw	ra,4(sp)
  412aa0:	df000017 	ldw	fp,0(sp)
  412aa4:	dec00204 	addi	sp,sp,8
  412aa8:	f800283a 	ret

00412aac <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  412aac:	defff604 	addi	sp,sp,-40
  412ab0:	df000915 	stw	fp,36(sp)
  412ab4:	df000904 	addi	fp,sp,36
  412ab8:	e13ffe15 	stw	r4,-8(fp)
  412abc:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  412ac0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  412ac4:	e0bffe17 	ldw	r2,-8(fp)
  412ac8:	1000021e 	bne	r2,zero,412ad4 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
  412acc:	00800104 	movi	r2,4
  412ad0:	00004306 	br	412be0 <OSSemQuery+0x134>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  412ad4:	e0bfff17 	ldw	r2,-4(fp)
  412ad8:	1000021e 	bne	r2,zero,412ae4 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
  412adc:	00800244 	movi	r2,9
  412ae0:	00003f06 	br	412be0 <OSSemQuery+0x134>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  412ae4:	e0bffe17 	ldw	r2,-8(fp)
  412ae8:	10800003 	ldbu	r2,0(r2)
  412aec:	10803fcc 	andi	r2,r2,255
  412af0:	108000e0 	cmpeqi	r2,r2,3
  412af4:	1000021e 	bne	r2,zero,412b00 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
  412af8:	00800044 	movi	r2,1
  412afc:	00003806 	br	412be0 <OSSemQuery+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  412b00:	0005303a 	rdctl	r2,status
  412b04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  412b08:	e0fffb17 	ldw	r3,-20(fp)
  412b0c:	00bfff84 	movi	r2,-2
  412b10:	1884703a 	and	r2,r3,r2
  412b14:	1001703a 	wrctl	status,r2
  
  return context;
  412b18:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  412b1c:	e0bffa15 	stw	r2,-24(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  412b20:	e0bffe17 	ldw	r2,-8(fp)
  412b24:	10c00283 	ldbu	r3,10(r2)
  412b28:	e0bfff17 	ldw	r2,-4(fp)
  412b2c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  412b30:	e0bffe17 	ldw	r2,-8(fp)
  412b34:	108002c4 	addi	r2,r2,11
  412b38:	e0bff715 	stw	r2,-36(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  412b3c:	e0bfff17 	ldw	r2,-4(fp)
  412b40:	10800084 	addi	r2,r2,2
  412b44:	e0bff815 	stw	r2,-32(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  412b48:	e03ff905 	stb	zero,-28(fp)
  412b4c:	00000d06 	br	412b84 <OSSemQuery+0xd8>
        *pdest++ = *psrc++;
  412b50:	e0bff717 	ldw	r2,-36(fp)
  412b54:	10c00003 	ldbu	r3,0(r2)
  412b58:	e0bff817 	ldw	r2,-32(fp)
  412b5c:	10c00005 	stb	r3,0(r2)
  412b60:	e0bff817 	ldw	r2,-32(fp)
  412b64:	10800044 	addi	r2,r2,1
  412b68:	e0bff815 	stw	r2,-32(fp)
  412b6c:	e0bff717 	ldw	r2,-36(fp)
  412b70:	10800044 	addi	r2,r2,1
  412b74:	e0bff715 	stw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  412b78:	e0bff903 	ldbu	r2,-28(fp)
  412b7c:	10800044 	addi	r2,r2,1
  412b80:	e0bff905 	stb	r2,-28(fp)
  412b84:	e0bff903 	ldbu	r2,-28(fp)
  412b88:	108000f0 	cmpltui	r2,r2,3
  412b8c:	103ff01e 	bne	r2,zero,412b50 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  412b90:	e0bffe17 	ldw	r2,-8(fp)
  412b94:	10c0020b 	ldhu	r3,8(r2)
  412b98:	e0bfff17 	ldw	r2,-4(fp)
  412b9c:	10c0000d 	sth	r3,0(r2)
  412ba0:	e0bffa17 	ldw	r2,-24(fp)
  412ba4:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  412ba8:	0005303a 	rdctl	r2,status
  412bac:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  412bb0:	e0fffd17 	ldw	r3,-12(fp)
  412bb4:	00bfff84 	movi	r2,-2
  412bb8:	1884703a 	and	r2,r3,r2
  412bbc:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  412bc0:	e0bffc17 	ldw	r2,-16(fp)
  412bc4:	1080004c 	andi	r2,r2,1
  412bc8:	e0fffd17 	ldw	r3,-12(fp)
  412bcc:	1884b03a 	or	r2,r3,r2
  412bd0:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  412bd4:	e0bffd17 	ldw	r2,-12(fp)
  412bd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  412bdc:	0005883a 	mov	r2,zero
}
  412be0:	e037883a 	mov	sp,fp
  412be4:	df000017 	ldw	fp,0(sp)
  412be8:	dec00104 	addi	sp,sp,4
  412bec:	f800283a 	ret

00412bf0 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  412bf0:	defff804 	addi	sp,sp,-32
  412bf4:	df000715 	stw	fp,28(sp)
  412bf8:	df000704 	addi	fp,sp,28
  412bfc:	e13ffd15 	stw	r4,-12(fp)
  412c00:	2805883a 	mov	r2,r5
  412c04:	e1bfff15 	stw	r6,-4(fp)
  412c08:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  412c0c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  412c10:	e0bfff17 	ldw	r2,-4(fp)
  412c14:	10003c26 	beq	r2,zero,412d08 <OSSemSet+0x118>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  412c18:	e0bffd17 	ldw	r2,-12(fp)
  412c1c:	1000041e 	bne	r2,zero,412c30 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
  412c20:	e0bfff17 	ldw	r2,-4(fp)
  412c24:	00c00104 	movi	r3,4
  412c28:	10c00005 	stb	r3,0(r2)
        return;
  412c2c:	00003706 	br	412d0c <OSSemSet+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  412c30:	e0bffd17 	ldw	r2,-12(fp)
  412c34:	10800003 	ldbu	r2,0(r2)
  412c38:	10803fcc 	andi	r2,r2,255
  412c3c:	108000e0 	cmpeqi	r2,r2,3
  412c40:	1000041e 	bne	r2,zero,412c54 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
  412c44:	e0bfff17 	ldw	r2,-4(fp)
  412c48:	00c00044 	movi	r3,1
  412c4c:	10c00005 	stb	r3,0(r2)
        return;
  412c50:	00002e06 	br	412d0c <OSSemSet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  412c54:	0005303a 	rdctl	r2,status
  412c58:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  412c5c:	e0fffa17 	ldw	r3,-24(fp)
  412c60:	00bfff84 	movi	r2,-2
  412c64:	1884703a 	and	r2,r3,r2
  412c68:	1001703a 	wrctl	status,r2
  
  return context;
  412c6c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  412c70:	e0bff915 	stw	r2,-28(fp)
    *perr = OS_ERR_NONE;
  412c74:	e0bfff17 	ldw	r2,-4(fp)
  412c78:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  412c7c:	e0bffd17 	ldw	r2,-12(fp)
  412c80:	1080020b 	ldhu	r2,8(r2)
  412c84:	10bfffcc 	andi	r2,r2,65535
  412c88:	10000426 	beq	r2,zero,412c9c <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  412c8c:	e0bffd17 	ldw	r2,-12(fp)
  412c90:	e0fffe0b 	ldhu	r3,-8(fp)
  412c94:	10c0020d 	sth	r3,8(r2)
  412c98:	00000b06 	br	412cc8 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  412c9c:	e0bffd17 	ldw	r2,-12(fp)
  412ca0:	10800283 	ldbu	r2,10(r2)
  412ca4:	10803fcc 	andi	r2,r2,255
  412ca8:	1000041e 	bne	r2,zero,412cbc <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  412cac:	e0bffd17 	ldw	r2,-12(fp)
  412cb0:	e0fffe0b 	ldhu	r3,-8(fp)
  412cb4:	10c0020d 	sth	r3,8(r2)
  412cb8:	00000306 	br	412cc8 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  412cbc:	e0bfff17 	ldw	r2,-4(fp)
  412cc0:	00c01244 	movi	r3,73
  412cc4:	10c00005 	stb	r3,0(r2)
  412cc8:	e0bff917 	ldw	r2,-28(fp)
  412ccc:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  412cd0:	0005303a 	rdctl	r2,status
  412cd4:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  412cd8:	e0fffc17 	ldw	r3,-16(fp)
  412cdc:	00bfff84 	movi	r2,-2
  412ce0:	1884703a 	and	r2,r3,r2
  412ce4:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  412ce8:	e0bffb17 	ldw	r2,-20(fp)
  412cec:	1080004c 	andi	r2,r2,1
  412cf0:	e0fffc17 	ldw	r3,-16(fp)
  412cf4:	1884b03a 	or	r2,r3,r2
  412cf8:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  412cfc:	e0bffc17 	ldw	r2,-16(fp)
  412d00:	1001703a 	wrctl	status,r2
  412d04:	00000106 	br	412d0c <OSSemSet+0x11c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
  412d08:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
  412d0c:	e037883a 	mov	sp,fp
  412d10:	df000017 	ldw	fp,0(sp)
  412d14:	dec00104 	addi	sp,sp,4
  412d18:	f800283a 	ret

00412d1c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  412d1c:	deffed04 	addi	sp,sp,-76
  412d20:	dfc01215 	stw	ra,72(sp)
  412d24:	df001115 	stw	fp,68(sp)
  412d28:	df001104 	addi	fp,sp,68
  412d2c:	2007883a 	mov	r3,r4
  412d30:	2805883a 	mov	r2,r5
  412d34:	e0fffe05 	stb	r3,-8(fp)
  412d38:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  412d3c:	e03ff115 	stw	zero,-60(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  412d40:	e0bffe03 	ldbu	r2,-8(fp)
  412d44:	10800530 	cmpltui	r2,r2,20
  412d48:	1000051e 	bne	r2,zero,412d60 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
  412d4c:	e0bffe03 	ldbu	r2,-8(fp)
  412d50:	10803fe0 	cmpeqi	r2,r2,255
  412d54:	1000021e 	bne	r2,zero,412d60 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
  412d58:	00800a84 	movi	r2,42
  412d5c:	00016006 	br	4132e0 <OSTaskChangePrio+0x5c4>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  412d60:	e0bfff03 	ldbu	r2,-4(fp)
  412d64:	10800530 	cmpltui	r2,r2,20
  412d68:	1000021e 	bne	r2,zero,412d74 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  412d6c:	00800a84 	movi	r2,42
  412d70:	00015b06 	br	4132e0 <OSTaskChangePrio+0x5c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  412d74:	0005303a 	rdctl	r2,status
  412d78:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  412d7c:	e0fff517 	ldw	r3,-44(fp)
  412d80:	00bfff84 	movi	r2,-2
  412d84:	1884703a 	and	r2,r3,r2
  412d88:	1001703a 	wrctl	status,r2
  
  return context;
  412d8c:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  412d90:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  412d94:	e0bfff03 	ldbu	r2,-4(fp)
  412d98:	00c010b4 	movhi	r3,66
  412d9c:	18c26f04 	addi	r3,r3,2492
  412da0:	1085883a 	add	r2,r2,r2
  412da4:	1085883a 	add	r2,r2,r2
  412da8:	1885883a 	add	r2,r3,r2
  412dac:	10800017 	ldw	r2,0(r2)
  412db0:	10001126 	beq	r2,zero,412df8 <OSTaskChangePrio+0xdc>
  412db4:	e0bff117 	ldw	r2,-60(fp)
  412db8:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  412dbc:	0005303a 	rdctl	r2,status
  412dc0:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  412dc4:	e0fff717 	ldw	r3,-36(fp)
  412dc8:	00bfff84 	movi	r2,-2
  412dcc:	1884703a 	and	r2,r3,r2
  412dd0:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  412dd4:	e0bff617 	ldw	r2,-40(fp)
  412dd8:	1080004c 	andi	r2,r2,1
  412ddc:	e0fff717 	ldw	r3,-36(fp)
  412de0:	1884b03a 	or	r2,r3,r2
  412de4:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  412de8:	e0bff717 	ldw	r2,-36(fp)
  412dec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  412df0:	00800a04 	movi	r2,40
  412df4:	00013a06 	br	4132e0 <OSTaskChangePrio+0x5c4>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  412df8:	e0bffe03 	ldbu	r2,-8(fp)
  412dfc:	10803fd8 	cmpnei	r2,r2,255
  412e00:	1000051e 	bne	r2,zero,412e18 <OSTaskChangePrio+0xfc>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  412e04:	008010b4 	movhi	r2,66
  412e08:	10b59e04 	addi	r2,r2,-10632
  412e0c:	10800017 	ldw	r2,0(r2)
  412e10:	10800c83 	ldbu	r2,50(r2)
  412e14:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  412e18:	e0bffe03 	ldbu	r2,-8(fp)
  412e1c:	00c010b4 	movhi	r3,66
  412e20:	18c26f04 	addi	r3,r3,2492
  412e24:	1085883a 	add	r2,r2,r2
  412e28:	1085883a 	add	r2,r2,r2
  412e2c:	1885883a 	add	r2,r3,r2
  412e30:	10800017 	ldw	r2,0(r2)
  412e34:	e0bff215 	stw	r2,-56(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  412e38:	e0bff217 	ldw	r2,-56(fp)
  412e3c:	1000111e 	bne	r2,zero,412e84 <OSTaskChangePrio+0x168>
  412e40:	e0bff117 	ldw	r2,-60(fp)
  412e44:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  412e48:	0005303a 	rdctl	r2,status
  412e4c:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  412e50:	e0fff917 	ldw	r3,-28(fp)
  412e54:	00bfff84 	movi	r2,-2
  412e58:	1884703a 	and	r2,r3,r2
  412e5c:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  412e60:	e0bff817 	ldw	r2,-32(fp)
  412e64:	1080004c 	andi	r2,r2,1
  412e68:	e0fff917 	ldw	r3,-28(fp)
  412e6c:	1884b03a 	or	r2,r3,r2
  412e70:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  412e74:	e0bff917 	ldw	r2,-28(fp)
  412e78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  412e7c:	00800a44 	movi	r2,41
  412e80:	00011706 	br	4132e0 <OSTaskChangePrio+0x5c4>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  412e84:	e0bff217 	ldw	r2,-56(fp)
  412e88:	10800058 	cmpnei	r2,r2,1
  412e8c:	1000111e 	bne	r2,zero,412ed4 <OSTaskChangePrio+0x1b8>
  412e90:	e0bff117 	ldw	r2,-60(fp)
  412e94:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  412e98:	0005303a 	rdctl	r2,status
  412e9c:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  412ea0:	e0fffb17 	ldw	r3,-20(fp)
  412ea4:	00bfff84 	movi	r2,-2
  412ea8:	1884703a 	and	r2,r3,r2
  412eac:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  412eb0:	e0bffa17 	ldw	r2,-24(fp)
  412eb4:	1080004c 	andi	r2,r2,1
  412eb8:	e0fffb17 	ldw	r3,-20(fp)
  412ebc:	1884b03a 	or	r2,r3,r2
  412ec0:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  412ec4:	e0bffb17 	ldw	r2,-20(fp)
  412ec8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  412ecc:	008010c4 	movi	r2,67
  412ed0:	00010306 	br	4132e0 <OSTaskChangePrio+0x5c4>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  412ed4:	e0bfff03 	ldbu	r2,-4(fp)
  412ed8:	1004d0fa 	srli	r2,r2,3
  412edc:	e0bff305 	stb	r2,-52(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  412ee0:	e0bfff03 	ldbu	r2,-4(fp)
  412ee4:	108001cc 	andi	r2,r2,7
  412ee8:	e0bff345 	stb	r2,-51(fp)
    bity_new              = (INT8U)(1 << y_new);
  412eec:	e0bff303 	ldbu	r2,-52(fp)
  412ef0:	00c00044 	movi	r3,1
  412ef4:	1884983a 	sll	r2,r3,r2
  412ef8:	e0bff385 	stb	r2,-50(fp)
    bitx_new              = (INT8U)(1 << x_new);
  412efc:	e0bff343 	ldbu	r2,-51(fp)
  412f00:	00c00044 	movi	r3,1
  412f04:	1884983a 	sll	r2,r3,r2
  412f08:	e0bff3c5 	stb	r2,-49(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  412f0c:	e0bffe03 	ldbu	r2,-8(fp)
  412f10:	00c010b4 	movhi	r3,66
  412f14:	18c26f04 	addi	r3,r3,2492
  412f18:	1085883a 	add	r2,r2,r2
  412f1c:	1085883a 	add	r2,r2,r2
  412f20:	1885883a 	add	r2,r3,r2
  412f24:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  412f28:	e0bfff03 	ldbu	r2,-4(fp)
  412f2c:	00c010b4 	movhi	r3,66
  412f30:	18c26f04 	addi	r3,r3,2492
  412f34:	1085883a 	add	r2,r2,r2
  412f38:	1085883a 	add	r2,r2,r2
  412f3c:	1885883a 	add	r2,r3,r2
  412f40:	e0fff217 	ldw	r3,-56(fp)
  412f44:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
  412f48:	e0bff217 	ldw	r2,-56(fp)
  412f4c:	10800d03 	ldbu	r2,52(r2)
  412f50:	e0bff405 	stb	r2,-48(fp)
    bity_old              =  ptcb->OSTCBBitY;
  412f54:	e0bff217 	ldw	r2,-56(fp)
  412f58:	10800d83 	ldbu	r2,54(r2)
  412f5c:	e0bff445 	stb	r2,-47(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  412f60:	e0bff217 	ldw	r2,-56(fp)
  412f64:	10800d43 	ldbu	r2,53(r2)
  412f68:	e0bff485 	stb	r2,-46(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  412f6c:	e0bff403 	ldbu	r2,-48(fp)
  412f70:	00c010b4 	movhi	r3,66
  412f74:	18f59b44 	addi	r3,r3,-10643
  412f78:	1885883a 	add	r2,r3,r2
  412f7c:	10c00003 	ldbu	r3,0(r2)
  412f80:	e0bff483 	ldbu	r2,-46(fp)
  412f84:	1884703a 	and	r2,r3,r2
  412f88:	10803fcc 	andi	r2,r2,255
  412f8c:	10003526 	beq	r2,zero,413064 <OSTaskChangePrio+0x348>
         OSRdyTbl[y_old] &= ~bitx_old;
  412f90:	e0bff403 	ldbu	r2,-48(fp)
  412f94:	e0fff403 	ldbu	r3,-48(fp)
  412f98:	010010b4 	movhi	r4,66
  412f9c:	21359b44 	addi	r4,r4,-10643
  412fa0:	20c7883a 	add	r3,r4,r3
  412fa4:	18c00003 	ldbu	r3,0(r3)
  412fa8:	1809883a 	mov	r4,r3
  412fac:	e0fff483 	ldbu	r3,-46(fp)
  412fb0:	00c6303a 	nor	r3,zero,r3
  412fb4:	20c6703a 	and	r3,r4,r3
  412fb8:	010010b4 	movhi	r4,66
  412fbc:	21359b44 	addi	r4,r4,-10643
  412fc0:	2085883a 	add	r2,r4,r2
  412fc4:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  412fc8:	e0bff403 	ldbu	r2,-48(fp)
  412fcc:	00c010b4 	movhi	r3,66
  412fd0:	18f59b44 	addi	r3,r3,-10643
  412fd4:	1885883a 	add	r2,r3,r2
  412fd8:	10800003 	ldbu	r2,0(r2)
  412fdc:	10803fcc 	andi	r2,r2,255
  412fe0:	10000b1e 	bne	r2,zero,413010 <OSTaskChangePrio+0x2f4>
             OSRdyGrp &= ~bity_old;
  412fe4:	e0bff443 	ldbu	r2,-47(fp)
  412fe8:	0084303a 	nor	r2,zero,r2
  412fec:	1007883a 	mov	r3,r2
  412ff0:	008010b4 	movhi	r2,66
  412ff4:	10b59b04 	addi	r2,r2,-10644
  412ff8:	10800003 	ldbu	r2,0(r2)
  412ffc:	1884703a 	and	r2,r3,r2
  413000:	1007883a 	mov	r3,r2
  413004:	008010b4 	movhi	r2,66
  413008:	10b59b04 	addi	r2,r2,-10644
  41300c:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  413010:	008010b4 	movhi	r2,66
  413014:	10b59b04 	addi	r2,r2,-10644
  413018:	10c00003 	ldbu	r3,0(r2)
  41301c:	e0bff383 	ldbu	r2,-50(fp)
  413020:	1884b03a 	or	r2,r3,r2
  413024:	1007883a 	mov	r3,r2
  413028:	008010b4 	movhi	r2,66
  41302c:	10b59b04 	addi	r2,r2,-10644
  413030:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  413034:	e0bff303 	ldbu	r2,-52(fp)
  413038:	e0fff303 	ldbu	r3,-52(fp)
  41303c:	010010b4 	movhi	r4,66
  413040:	21359b44 	addi	r4,r4,-10643
  413044:	20c7883a 	add	r3,r4,r3
  413048:	19000003 	ldbu	r4,0(r3)
  41304c:	e0fff3c3 	ldbu	r3,-49(fp)
  413050:	20c6b03a 	or	r3,r4,r3
  413054:	010010b4 	movhi	r4,66
  413058:	21359b44 	addi	r4,r4,-10643
  41305c:	2085883a 	add	r2,r4,r2
  413060:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  413064:	e0bff217 	ldw	r2,-56(fp)
  413068:	10800717 	ldw	r2,28(r2)
  41306c:	e0bfef15 	stw	r2,-68(fp)
    if (pevent != (OS_EVENT *)0) {
  413070:	e0bfef17 	ldw	r2,-68(fp)
  413074:	10003126 	beq	r2,zero,41313c <OSTaskChangePrio+0x420>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  413078:	e0bff403 	ldbu	r2,-48(fp)
  41307c:	e0fff403 	ldbu	r3,-48(fp)
  413080:	e13fef17 	ldw	r4,-68(fp)
  413084:	20c7883a 	add	r3,r4,r3
  413088:	18c00204 	addi	r3,r3,8
  41308c:	18c000c3 	ldbu	r3,3(r3)
  413090:	1809883a 	mov	r4,r3
  413094:	e0fff483 	ldbu	r3,-46(fp)
  413098:	00c6303a 	nor	r3,zero,r3
  41309c:	20c6703a 	and	r3,r4,r3
  4130a0:	e13fef17 	ldw	r4,-68(fp)
  4130a4:	2085883a 	add	r2,r4,r2
  4130a8:	10800204 	addi	r2,r2,8
  4130ac:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  4130b0:	e0bff403 	ldbu	r2,-48(fp)
  4130b4:	e0ffef17 	ldw	r3,-68(fp)
  4130b8:	1885883a 	add	r2,r3,r2
  4130bc:	10800204 	addi	r2,r2,8
  4130c0:	108000c3 	ldbu	r2,3(r2)
  4130c4:	10803fcc 	andi	r2,r2,255
  4130c8:	1000091e 	bne	r2,zero,4130f0 <OSTaskChangePrio+0x3d4>
            pevent->OSEventGrp    &= ~bity_old;
  4130cc:	e0bfef17 	ldw	r2,-68(fp)
  4130d0:	10800283 	ldbu	r2,10(r2)
  4130d4:	1007883a 	mov	r3,r2
  4130d8:	e0bff443 	ldbu	r2,-47(fp)
  4130dc:	0084303a 	nor	r2,zero,r2
  4130e0:	1884703a 	and	r2,r3,r2
  4130e4:	1007883a 	mov	r3,r2
  4130e8:	e0bfef17 	ldw	r2,-68(fp)
  4130ec:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  4130f0:	e0bfef17 	ldw	r2,-68(fp)
  4130f4:	10c00283 	ldbu	r3,10(r2)
  4130f8:	e0bff383 	ldbu	r2,-50(fp)
  4130fc:	1884b03a 	or	r2,r3,r2
  413100:	1007883a 	mov	r3,r2
  413104:	e0bfef17 	ldw	r2,-68(fp)
  413108:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  41310c:	e0bff303 	ldbu	r2,-52(fp)
  413110:	e0fff303 	ldbu	r3,-52(fp)
  413114:	e13fef17 	ldw	r4,-68(fp)
  413118:	20c7883a 	add	r3,r4,r3
  41311c:	18c00204 	addi	r3,r3,8
  413120:	190000c3 	ldbu	r4,3(r3)
  413124:	e0fff3c3 	ldbu	r3,-49(fp)
  413128:	20c6b03a 	or	r3,r4,r3
  41312c:	e13fef17 	ldw	r4,-68(fp)
  413130:	2085883a 	add	r2,r4,r2
  413134:	10800204 	addi	r2,r2,8
  413138:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  41313c:	e0bff217 	ldw	r2,-56(fp)
  413140:	10800817 	ldw	r2,32(r2)
  413144:	10004026 	beq	r2,zero,413248 <OSTaskChangePrio+0x52c>
        pevents =  ptcb->OSTCBEventMultiPtr;
  413148:	e0bff217 	ldw	r2,-56(fp)
  41314c:	10800817 	ldw	r2,32(r2)
  413150:	e0bff015 	stw	r2,-64(fp)
        pevent  = *pevents;
  413154:	e0bff017 	ldw	r2,-64(fp)
  413158:	10800017 	ldw	r2,0(r2)
  41315c:	e0bfef15 	stw	r2,-68(fp)
        while (pevent != (OS_EVENT *)0) {
  413160:	00003706 	br	413240 <OSTaskChangePrio+0x524>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  413164:	e0bff403 	ldbu	r2,-48(fp)
  413168:	e0fff403 	ldbu	r3,-48(fp)
  41316c:	e13fef17 	ldw	r4,-68(fp)
  413170:	20c7883a 	add	r3,r4,r3
  413174:	18c00204 	addi	r3,r3,8
  413178:	18c000c3 	ldbu	r3,3(r3)
  41317c:	1809883a 	mov	r4,r3
  413180:	e0fff483 	ldbu	r3,-46(fp)
  413184:	00c6303a 	nor	r3,zero,r3
  413188:	20c6703a 	and	r3,r4,r3
  41318c:	e13fef17 	ldw	r4,-68(fp)
  413190:	2085883a 	add	r2,r4,r2
  413194:	10800204 	addi	r2,r2,8
  413198:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  41319c:	e0bff403 	ldbu	r2,-48(fp)
  4131a0:	e0ffef17 	ldw	r3,-68(fp)
  4131a4:	1885883a 	add	r2,r3,r2
  4131a8:	10800204 	addi	r2,r2,8
  4131ac:	108000c3 	ldbu	r2,3(r2)
  4131b0:	10803fcc 	andi	r2,r2,255
  4131b4:	1000091e 	bne	r2,zero,4131dc <OSTaskChangePrio+0x4c0>
                pevent->OSEventGrp    &= ~bity_old;
  4131b8:	e0bfef17 	ldw	r2,-68(fp)
  4131bc:	10800283 	ldbu	r2,10(r2)
  4131c0:	1007883a 	mov	r3,r2
  4131c4:	e0bff443 	ldbu	r2,-47(fp)
  4131c8:	0084303a 	nor	r2,zero,r2
  4131cc:	1884703a 	and	r2,r3,r2
  4131d0:	1007883a 	mov	r3,r2
  4131d4:	e0bfef17 	ldw	r2,-68(fp)
  4131d8:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  4131dc:	e0bfef17 	ldw	r2,-68(fp)
  4131e0:	10c00283 	ldbu	r3,10(r2)
  4131e4:	e0bff383 	ldbu	r2,-50(fp)
  4131e8:	1884b03a 	or	r2,r3,r2
  4131ec:	1007883a 	mov	r3,r2
  4131f0:	e0bfef17 	ldw	r2,-68(fp)
  4131f4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  4131f8:	e0bff303 	ldbu	r2,-52(fp)
  4131fc:	e0fff303 	ldbu	r3,-52(fp)
  413200:	e13fef17 	ldw	r4,-68(fp)
  413204:	20c7883a 	add	r3,r4,r3
  413208:	18c00204 	addi	r3,r3,8
  41320c:	190000c3 	ldbu	r4,3(r3)
  413210:	e0fff3c3 	ldbu	r3,-49(fp)
  413214:	20c6b03a 	or	r3,r4,r3
  413218:	e13fef17 	ldw	r4,-68(fp)
  41321c:	2085883a 	add	r2,r4,r2
  413220:	10800204 	addi	r2,r2,8
  413224:	10c000c5 	stb	r3,3(r2)
            pevents++;
  413228:	e0bff017 	ldw	r2,-64(fp)
  41322c:	10800104 	addi	r2,r2,4
  413230:	e0bff015 	stw	r2,-64(fp)
            pevent                     = *pevents;
  413234:	e0bff017 	ldw	r2,-64(fp)
  413238:	10800017 	ldw	r2,0(r2)
  41323c:	e0bfef15 	stw	r2,-68(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  413240:	e0bfef17 	ldw	r2,-68(fp)
  413244:	103fc71e 	bne	r2,zero,413164 <OSTaskChangePrio+0x448>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  413248:	e0bff217 	ldw	r2,-56(fp)
  41324c:	e0ffff03 	ldbu	r3,-4(fp)
  413250:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
  413254:	e0bff217 	ldw	r2,-56(fp)
  413258:	e0fff303 	ldbu	r3,-52(fp)
  41325c:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
  413260:	e0bff217 	ldw	r2,-56(fp)
  413264:	e0fff343 	ldbu	r3,-51(fp)
  413268:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
  41326c:	e0bff217 	ldw	r2,-56(fp)
  413270:	e0fff383 	ldbu	r3,-50(fp)
  413274:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
  413278:	e0bff217 	ldw	r2,-56(fp)
  41327c:	e0fff3c3 	ldbu	r3,-49(fp)
  413280:	10c00d45 	stb	r3,53(r2)
  413284:	e0bff117 	ldw	r2,-60(fp)
  413288:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41328c:	0005303a 	rdctl	r2,status
  413290:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  413294:	e0fffd17 	ldw	r3,-12(fp)
  413298:	00bfff84 	movi	r2,-2
  41329c:	1884703a 	and	r2,r3,r2
  4132a0:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4132a4:	e0bffc17 	ldw	r2,-16(fp)
  4132a8:	1080004c 	andi	r2,r2,1
  4132ac:	e0fffd17 	ldw	r3,-12(fp)
  4132b0:	1884b03a 	or	r2,r3,r2
  4132b4:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  4132b8:	e0bffd17 	ldw	r2,-12(fp)
  4132bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  4132c0:	008010b4 	movhi	r2,66
  4132c4:	10b58f44 	addi	r2,r2,-10691
  4132c8:	10800003 	ldbu	r2,0(r2)
  4132cc:	10803fcc 	andi	r2,r2,255
  4132d0:	10800058 	cmpnei	r2,r2,1
  4132d4:	1000011e 	bne	r2,zero,4132dc <OSTaskChangePrio+0x5c0>
        OS_Sched();                                         /* Find new highest priority task          */
  4132d8:	040d8640 	call	40d864 <OS_Sched>
    }
    return (OS_ERR_NONE);
  4132dc:	0005883a 	mov	r2,zero
}
  4132e0:	e037883a 	mov	sp,fp
  4132e4:	dfc00117 	ldw	ra,4(sp)
  4132e8:	df000017 	ldw	fp,0(sp)
  4132ec:	dec00204 	addi	sp,sp,8
  4132f0:	f800283a 	ret

004132f4 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  4132f4:	deffea04 	addi	sp,sp,-88
  4132f8:	dfc01515 	stw	ra,84(sp)
  4132fc:	df001415 	stw	fp,80(sp)
  413300:	df001404 	addi	fp,sp,80
  413304:	e13ffc15 	stw	r4,-16(fp)
  413308:	e17ffd15 	stw	r5,-12(fp)
  41330c:	e1bffe15 	stw	r6,-8(fp)
  413310:	3805883a 	mov	r2,r7
  413314:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  413318:	e03fef15 	stw	zero,-68(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  41331c:	e0bfff03 	ldbu	r2,-4(fp)
  413320:	10800570 	cmpltui	r2,r2,21
  413324:	1000021e 	bne	r2,zero,413330 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  413328:	00800a84 	movi	r2,42
  41332c:	00008706 	br	41354c <OSTaskCreate+0x258>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  413330:	0005303a 	rdctl	r2,status
  413334:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413338:	e0fff217 	ldw	r3,-56(fp)
  41333c:	00bfff84 	movi	r2,-2
  413340:	1884703a 	and	r2,r3,r2
  413344:	1001703a 	wrctl	status,r2
  
  return context;
  413348:	e0bff217 	ldw	r2,-56(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  41334c:	e0bfef15 	stw	r2,-68(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  413350:	008010b4 	movhi	r2,66
  413354:	10b59d04 	addi	r2,r2,-10636
  413358:	10800003 	ldbu	r2,0(r2)
  41335c:	10803fcc 	andi	r2,r2,255
  413360:	10001126 	beq	r2,zero,4133a8 <OSTaskCreate+0xb4>
  413364:	e0bfef17 	ldw	r2,-68(fp)
  413368:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41336c:	0005303a 	rdctl	r2,status
  413370:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  413374:	e0fff417 	ldw	r3,-48(fp)
  413378:	00bfff84 	movi	r2,-2
  41337c:	1884703a 	and	r2,r3,r2
  413380:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  413384:	e0bff317 	ldw	r2,-52(fp)
  413388:	1080004c 	andi	r2,r2,1
  41338c:	e0fff417 	ldw	r3,-48(fp)
  413390:	1884b03a 	or	r2,r3,r2
  413394:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
  413398:	e0bff417 	ldw	r2,-48(fp)
  41339c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  4133a0:	00800f04 	movi	r2,60
  4133a4:	00006906 	br	41354c <OSTaskCreate+0x258>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  4133a8:	e0bfff03 	ldbu	r2,-4(fp)
  4133ac:	00c010b4 	movhi	r3,66
  4133b0:	18c26f04 	addi	r3,r3,2492
  4133b4:	1085883a 	add	r2,r2,r2
  4133b8:	1085883a 	add	r2,r2,r2
  4133bc:	1885883a 	add	r2,r3,r2
  4133c0:	10800017 	ldw	r2,0(r2)
  4133c4:	1000511e 	bne	r2,zero,41350c <OSTaskCreate+0x218>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  4133c8:	e0bfff03 	ldbu	r2,-4(fp)
  4133cc:	00c010b4 	movhi	r3,66
  4133d0:	18c26f04 	addi	r3,r3,2492
  4133d4:	1085883a 	add	r2,r2,r2
  4133d8:	1085883a 	add	r2,r2,r2
  4133dc:	1885883a 	add	r2,r3,r2
  4133e0:	00c00044 	movi	r3,1
  4133e4:	10c00015 	stw	r3,0(r2)
  4133e8:	e0bfef17 	ldw	r2,-68(fp)
  4133ec:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4133f0:	0005303a 	rdctl	r2,status
  4133f4:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4133f8:	e0fff617 	ldw	r3,-40(fp)
  4133fc:	00bfff84 	movi	r2,-2
  413400:	1884703a 	and	r2,r3,r2
  413404:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  413408:	e0bff517 	ldw	r2,-44(fp)
  41340c:	1080004c 	andi	r2,r2,1
  413410:	e0fff617 	ldw	r3,-40(fp)
  413414:	1884b03a 	or	r2,r3,r2
  413418:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  41341c:	e0bff617 	ldw	r2,-40(fp)
  413420:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  413424:	e13ffc17 	ldw	r4,-16(fp)
  413428:	e17ffd17 	ldw	r5,-12(fp)
  41342c:	e1bffe17 	ldw	r6,-8(fp)
  413430:	000f883a 	mov	r7,zero
  413434:	0418be40 	call	418be4 <OSTaskStkInit>
  413438:	e0bff015 	stw	r2,-64(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  41343c:	e0bfff03 	ldbu	r2,-4(fp)
  413440:	d8000015 	stw	zero,0(sp)
  413444:	d8000115 	stw	zero,4(sp)
  413448:	d8000215 	stw	zero,8(sp)
  41344c:	1009883a 	mov	r4,r2
  413450:	e17ff017 	ldw	r5,-64(fp)
  413454:	000d883a 	mov	r6,zero
  413458:	000f883a 	mov	r7,zero
  41345c:	040dce00 	call	40dce0 <OS_TCBInit>
  413460:	e0bff105 	stb	r2,-60(fp)
        if (err == OS_ERR_NONE) {
  413464:	e0bff103 	ldbu	r2,-60(fp)
  413468:	1000081e 	bne	r2,zero,41348c <OSTaskCreate+0x198>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  41346c:	008010b4 	movhi	r2,66
  413470:	10b58f44 	addi	r2,r2,-10691
  413474:	10800003 	ldbu	r2,0(r2)
  413478:	10803fcc 	andi	r2,r2,255
  41347c:	10800058 	cmpnei	r2,r2,1
  413480:	1000201e 	bne	r2,zero,413504 <OSTaskCreate+0x210>
                OS_Sched();
  413484:	040d8640 	call	40d864 <OS_Sched>
  413488:	00001e06 	br	413504 <OSTaskCreate+0x210>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  41348c:	0005303a 	rdctl	r2,status
  413490:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413494:	e0fff717 	ldw	r3,-36(fp)
  413498:	00bfff84 	movi	r2,-2
  41349c:	1884703a 	and	r2,r3,r2
  4134a0:	1001703a 	wrctl	status,r2
  
  return context;
  4134a4:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  4134a8:	e0bfef15 	stw	r2,-68(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  4134ac:	e0bfff03 	ldbu	r2,-4(fp)
  4134b0:	00c010b4 	movhi	r3,66
  4134b4:	18c26f04 	addi	r3,r3,2492
  4134b8:	1085883a 	add	r2,r2,r2
  4134bc:	1085883a 	add	r2,r2,r2
  4134c0:	1885883a 	add	r2,r3,r2
  4134c4:	10000015 	stw	zero,0(r2)
  4134c8:	e0bfef17 	ldw	r2,-68(fp)
  4134cc:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4134d0:	0005303a 	rdctl	r2,status
  4134d4:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4134d8:	e0fff917 	ldw	r3,-28(fp)
  4134dc:	00bfff84 	movi	r2,-2
  4134e0:	1884703a 	and	r2,r3,r2
  4134e4:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4134e8:	e0bff817 	ldw	r2,-32(fp)
  4134ec:	1080004c 	andi	r2,r2,1
  4134f0:	e0fff917 	ldw	r3,-28(fp)
  4134f4:	1884b03a 	or	r2,r3,r2
  4134f8:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  4134fc:	e0bff917 	ldw	r2,-28(fp)
  413500:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  413504:	e0bff103 	ldbu	r2,-60(fp)
  413508:	00001006 	br	41354c <OSTaskCreate+0x258>
  41350c:	e0bfef17 	ldw	r2,-68(fp)
  413510:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  413514:	0005303a 	rdctl	r2,status
  413518:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  41351c:	e0fffb17 	ldw	r3,-20(fp)
  413520:	00bfff84 	movi	r2,-2
  413524:	1884703a 	and	r2,r3,r2
  413528:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  41352c:	e0bffa17 	ldw	r2,-24(fp)
  413530:	1080004c 	andi	r2,r2,1
  413534:	e0fffb17 	ldw	r3,-20(fp)
  413538:	1884b03a 	or	r2,r3,r2
  41353c:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  413540:	e0bffb17 	ldw	r2,-20(fp)
  413544:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  413548:	00800a04 	movi	r2,40
}
  41354c:	e037883a 	mov	sp,fp
  413550:	dfc00117 	ldw	ra,4(sp)
  413554:	df000017 	ldw	fp,0(sp)
  413558:	dec00204 	addi	sp,sp,8
  41355c:	f800283a 	ret

00413560 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  413560:	deffe804 	addi	sp,sp,-96
  413564:	dfc01715 	stw	ra,92(sp)
  413568:	df001615 	stw	fp,88(sp)
  41356c:	df001604 	addi	fp,sp,88
  413570:	e13ffa15 	stw	r4,-24(fp)
  413574:	e17ffb15 	stw	r5,-20(fp)
  413578:	e1bffc15 	stw	r6,-16(fp)
  41357c:	3805883a 	mov	r2,r7
  413580:	e1000217 	ldw	r4,8(fp)
  413584:	e0c00617 	ldw	r3,24(fp)
  413588:	e0bffd05 	stb	r2,-12(fp)
  41358c:	e13ffe0d 	sth	r4,-8(fp)
  413590:	e0ffff0d 	sth	r3,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  413594:	e03fed15 	stw	zero,-76(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  413598:	e0bffd03 	ldbu	r2,-12(fp)
  41359c:	10800570 	cmpltui	r2,r2,21
  4135a0:	1000021e 	bne	r2,zero,4135ac <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  4135a4:	00800a84 	movi	r2,42
  4135a8:	00009106 	br	4137f0 <OSTaskCreateExt+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4135ac:	0005303a 	rdctl	r2,status
  4135b0:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4135b4:	e0fff017 	ldw	r3,-64(fp)
  4135b8:	00bfff84 	movi	r2,-2
  4135bc:	1884703a 	and	r2,r3,r2
  4135c0:	1001703a 	wrctl	status,r2
  
  return context;
  4135c4:	e0bff017 	ldw	r2,-64(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  4135c8:	e0bfed15 	stw	r2,-76(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  4135cc:	008010b4 	movhi	r2,66
  4135d0:	10b59d04 	addi	r2,r2,-10636
  4135d4:	10800003 	ldbu	r2,0(r2)
  4135d8:	10803fcc 	andi	r2,r2,255
  4135dc:	10001126 	beq	r2,zero,413624 <OSTaskCreateExt+0xc4>
  4135e0:	e0bfed17 	ldw	r2,-76(fp)
  4135e4:	e0bff115 	stw	r2,-60(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4135e8:	0005303a 	rdctl	r2,status
  4135ec:	e0bff215 	stw	r2,-56(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4135f0:	e0fff217 	ldw	r3,-56(fp)
  4135f4:	00bfff84 	movi	r2,-2
  4135f8:	1884703a 	and	r2,r3,r2
  4135fc:	e0bff215 	stw	r2,-56(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  413600:	e0bff117 	ldw	r2,-60(fp)
  413604:	1080004c 	andi	r2,r2,1
  413608:	e0fff217 	ldw	r3,-56(fp)
  41360c:	1884b03a 	or	r2,r3,r2
  413610:	e0bff215 	stw	r2,-56(fp)
  
  NIOS2_WRITE_STATUS (status);
  413614:	e0bff217 	ldw	r2,-56(fp)
  413618:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  41361c:	00800f04 	movi	r2,60
  413620:	00007306 	br	4137f0 <OSTaskCreateExt+0x290>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  413624:	e0bffd03 	ldbu	r2,-12(fp)
  413628:	00c010b4 	movhi	r3,66
  41362c:	18c26f04 	addi	r3,r3,2492
  413630:	1085883a 	add	r2,r2,r2
  413634:	1085883a 	add	r2,r2,r2
  413638:	1885883a 	add	r2,r3,r2
  41363c:	10800017 	ldw	r2,0(r2)
  413640:	10005b1e 	bne	r2,zero,4137b0 <OSTaskCreateExt+0x250>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  413644:	e0bffd03 	ldbu	r2,-12(fp)
  413648:	00c010b4 	movhi	r3,66
  41364c:	18c26f04 	addi	r3,r3,2492
  413650:	1085883a 	add	r2,r2,r2
  413654:	1085883a 	add	r2,r2,r2
  413658:	1885883a 	add	r2,r3,r2
  41365c:	00c00044 	movi	r3,1
  413660:	10c00015 	stw	r3,0(r2)
  413664:	e0bfed17 	ldw	r2,-76(fp)
  413668:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41366c:	0005303a 	rdctl	r2,status
  413670:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  413674:	e0fff417 	ldw	r3,-48(fp)
  413678:	00bfff84 	movi	r2,-2
  41367c:	1884703a 	and	r2,r3,r2
  413680:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  413684:	e0bff317 	ldw	r2,-52(fp)
  413688:	1080004c 	andi	r2,r2,1
  41368c:	e0fff417 	ldw	r3,-48(fp)
  413690:	1884b03a 	or	r2,r3,r2
  413694:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
  413698:	e0bff417 	ldw	r2,-48(fp)
  41369c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  4136a0:	e0bfff0b 	ldhu	r2,-4(fp)
  4136a4:	e1000317 	ldw	r4,12(fp)
  4136a8:	e1400417 	ldw	r5,16(fp)
  4136ac:	100d883a 	mov	r6,r2
  4136b0:	0414cfc0 	call	414cfc <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  4136b4:	e0bfff0b 	ldhu	r2,-4(fp)
  4136b8:	e13ffa17 	ldw	r4,-24(fp)
  4136bc:	e17ffb17 	ldw	r5,-20(fp)
  4136c0:	e1bffc17 	ldw	r6,-16(fp)
  4136c4:	100f883a 	mov	r7,r2
  4136c8:	0418be40 	call	418be4 <OSTaskStkInit>
  4136cc:	e0bfee15 	stw	r2,-72(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  4136d0:	e0fffd03 	ldbu	r3,-12(fp)
  4136d4:	e0bffe0b 	ldhu	r2,-8(fp)
  4136d8:	e13fff0b 	ldhu	r4,-4(fp)
  4136dc:	e1400417 	ldw	r5,16(fp)
  4136e0:	d9400015 	stw	r5,0(sp)
  4136e4:	e1400517 	ldw	r5,20(fp)
  4136e8:	d9400115 	stw	r5,4(sp)
  4136ec:	d9000215 	stw	r4,8(sp)
  4136f0:	1809883a 	mov	r4,r3
  4136f4:	e17fee17 	ldw	r5,-72(fp)
  4136f8:	e1800317 	ldw	r6,12(fp)
  4136fc:	100f883a 	mov	r7,r2
  413700:	040dce00 	call	40dce0 <OS_TCBInit>
  413704:	e0bfef05 	stb	r2,-68(fp)
        if (err == OS_ERR_NONE) {
  413708:	e0bfef03 	ldbu	r2,-68(fp)
  41370c:	1000081e 	bne	r2,zero,413730 <OSTaskCreateExt+0x1d0>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  413710:	008010b4 	movhi	r2,66
  413714:	10b58f44 	addi	r2,r2,-10691
  413718:	10800003 	ldbu	r2,0(r2)
  41371c:	10803fcc 	andi	r2,r2,255
  413720:	10800058 	cmpnei	r2,r2,1
  413724:	1000201e 	bne	r2,zero,4137a8 <OSTaskCreateExt+0x248>
                OS_Sched();
  413728:	040d8640 	call	40d864 <OS_Sched>
  41372c:	00001e06 	br	4137a8 <OSTaskCreateExt+0x248>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  413730:	0005303a 	rdctl	r2,status
  413734:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413738:	e0fff517 	ldw	r3,-44(fp)
  41373c:	00bfff84 	movi	r2,-2
  413740:	1884703a 	and	r2,r3,r2
  413744:	1001703a 	wrctl	status,r2
  
  return context;
  413748:	e0bff517 	ldw	r2,-44(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  41374c:	e0bfed15 	stw	r2,-76(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  413750:	e0bffd03 	ldbu	r2,-12(fp)
  413754:	00c010b4 	movhi	r3,66
  413758:	18c26f04 	addi	r3,r3,2492
  41375c:	1085883a 	add	r2,r2,r2
  413760:	1085883a 	add	r2,r2,r2
  413764:	1885883a 	add	r2,r3,r2
  413768:	10000015 	stw	zero,0(r2)
  41376c:	e0bfed17 	ldw	r2,-76(fp)
  413770:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  413774:	0005303a 	rdctl	r2,status
  413778:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  41377c:	e0fff717 	ldw	r3,-36(fp)
  413780:	00bfff84 	movi	r2,-2
  413784:	1884703a 	and	r2,r3,r2
  413788:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  41378c:	e0bff617 	ldw	r2,-40(fp)
  413790:	1080004c 	andi	r2,r2,1
  413794:	e0fff717 	ldw	r3,-36(fp)
  413798:	1884b03a 	or	r2,r3,r2
  41379c:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  4137a0:	e0bff717 	ldw	r2,-36(fp)
  4137a4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  4137a8:	e0bfef03 	ldbu	r2,-68(fp)
  4137ac:	00001006 	br	4137f0 <OSTaskCreateExt+0x290>
  4137b0:	e0bfed17 	ldw	r2,-76(fp)
  4137b4:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4137b8:	0005303a 	rdctl	r2,status
  4137bc:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4137c0:	e0fff917 	ldw	r3,-28(fp)
  4137c4:	00bfff84 	movi	r2,-2
  4137c8:	1884703a 	and	r2,r3,r2
  4137cc:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4137d0:	e0bff817 	ldw	r2,-32(fp)
  4137d4:	1080004c 	andi	r2,r2,1
  4137d8:	e0fff917 	ldw	r3,-28(fp)
  4137dc:	1884b03a 	or	r2,r3,r2
  4137e0:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  4137e4:	e0bff917 	ldw	r2,-28(fp)
  4137e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  4137ec:	00800a04 	movi	r2,40
}
  4137f0:	e037883a 	mov	sp,fp
  4137f4:	dfc00117 	ldw	ra,4(sp)
  4137f8:	df000017 	ldw	fp,0(sp)
  4137fc:	dec00204 	addi	sp,sp,8
  413800:	f800283a 	ret

00413804 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  413804:	defff004 	addi	sp,sp,-64
  413808:	dfc00f15 	stw	ra,60(sp)
  41380c:	df000e15 	stw	fp,56(sp)
  413810:	df000e04 	addi	fp,sp,56
  413814:	2005883a 	mov	r2,r4
  413818:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  41381c:	e03ff215 	stw	zero,-56(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  413820:	008010b4 	movhi	r2,66
  413824:	10b59d04 	addi	r2,r2,-10636
  413828:	10800003 	ldbu	r2,0(r2)
  41382c:	10803fcc 	andi	r2,r2,255
  413830:	10000226 	beq	r2,zero,41383c <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
  413834:	00801004 	movi	r2,64
  413838:	00011006 	br	413c7c <OSTaskDel+0x478>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  41383c:	e0bfff03 	ldbu	r2,-4(fp)
  413840:	10800518 	cmpnei	r2,r2,20
  413844:	1000021e 	bne	r2,zero,413850 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
  413848:	00800f84 	movi	r2,62
  41384c:	00010b06 	br	413c7c <OSTaskDel+0x478>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  413850:	e0bfff03 	ldbu	r2,-4(fp)
  413854:	10800530 	cmpltui	r2,r2,20
  413858:	1000051e 	bne	r2,zero,413870 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
  41385c:	e0bfff03 	ldbu	r2,-4(fp)
  413860:	10803fe0 	cmpeqi	r2,r2,255
  413864:	1000021e 	bne	r2,zero,413870 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
  413868:	00800a84 	movi	r2,42
  41386c:	00010306 	br	413c7c <OSTaskDel+0x478>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  413870:	0005303a 	rdctl	r2,status
  413874:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413878:	e0fff517 	ldw	r3,-44(fp)
  41387c:	00bfff84 	movi	r2,-2
  413880:	1884703a 	and	r2,r3,r2
  413884:	1001703a 	wrctl	status,r2
  
  return context;
  413888:	e0bff517 	ldw	r2,-44(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  41388c:	e0bff215 	stw	r2,-56(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  413890:	e0bfff03 	ldbu	r2,-4(fp)
  413894:	10803fd8 	cmpnei	r2,r2,255
  413898:	1000051e 	bne	r2,zero,4138b0 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  41389c:	008010b4 	movhi	r2,66
  4138a0:	10b59e04 	addi	r2,r2,-10632
  4138a4:	10800017 	ldw	r2,0(r2)
  4138a8:	10800c83 	ldbu	r2,50(r2)
  4138ac:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  4138b0:	e0bfff03 	ldbu	r2,-4(fp)
  4138b4:	00c010b4 	movhi	r3,66
  4138b8:	18c26f04 	addi	r3,r3,2492
  4138bc:	1085883a 	add	r2,r2,r2
  4138c0:	1085883a 	add	r2,r2,r2
  4138c4:	1885883a 	add	r2,r3,r2
  4138c8:	10800017 	ldw	r2,0(r2)
  4138cc:	e0bff315 	stw	r2,-52(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  4138d0:	e0bff317 	ldw	r2,-52(fp)
  4138d4:	1000111e 	bne	r2,zero,41391c <OSTaskDel+0x118>
  4138d8:	e0bff217 	ldw	r2,-56(fp)
  4138dc:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4138e0:	0005303a 	rdctl	r2,status
  4138e4:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4138e8:	e0fff717 	ldw	r3,-36(fp)
  4138ec:	00bfff84 	movi	r2,-2
  4138f0:	1884703a 	and	r2,r3,r2
  4138f4:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4138f8:	e0bff617 	ldw	r2,-40(fp)
  4138fc:	1080004c 	andi	r2,r2,1
  413900:	e0fff717 	ldw	r3,-36(fp)
  413904:	1884b03a 	or	r2,r3,r2
  413908:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  41390c:	e0bff717 	ldw	r2,-36(fp)
  413910:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  413914:	008010c4 	movi	r2,67
  413918:	0000d806 	br	413c7c <OSTaskDel+0x478>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  41391c:	e0bff317 	ldw	r2,-52(fp)
  413920:	10800058 	cmpnei	r2,r2,1
  413924:	1000111e 	bne	r2,zero,41396c <OSTaskDel+0x168>
  413928:	e0bff217 	ldw	r2,-56(fp)
  41392c:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  413930:	0005303a 	rdctl	r2,status
  413934:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  413938:	e0fff917 	ldw	r3,-28(fp)
  41393c:	00bfff84 	movi	r2,-2
  413940:	1884703a 	and	r2,r3,r2
  413944:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  413948:	e0bff817 	ldw	r2,-32(fp)
  41394c:	1080004c 	andi	r2,r2,1
  413950:	e0fff917 	ldw	r3,-28(fp)
  413954:	1884b03a 	or	r2,r3,r2
  413958:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  41395c:	e0bff917 	ldw	r2,-28(fp)
  413960:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  413964:	00800f44 	movi	r2,61
  413968:	0000c406 	br	413c7c <OSTaskDel+0x478>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  41396c:	e0bff317 	ldw	r2,-52(fp)
  413970:	10800d03 	ldbu	r2,52(r2)
  413974:	10803fcc 	andi	r2,r2,255
  413978:	e0fff317 	ldw	r3,-52(fp)
  41397c:	18c00d03 	ldbu	r3,52(r3)
  413980:	18c03fcc 	andi	r3,r3,255
  413984:	010010b4 	movhi	r4,66
  413988:	21359b44 	addi	r4,r4,-10643
  41398c:	20c7883a 	add	r3,r4,r3
  413990:	18c00003 	ldbu	r3,0(r3)
  413994:	1809883a 	mov	r4,r3
  413998:	e0fff317 	ldw	r3,-52(fp)
  41399c:	18c00d43 	ldbu	r3,53(r3)
  4139a0:	00c6303a 	nor	r3,zero,r3
  4139a4:	20c6703a 	and	r3,r4,r3
  4139a8:	010010b4 	movhi	r4,66
  4139ac:	21359b44 	addi	r4,r4,-10643
  4139b0:	2085883a 	add	r2,r4,r2
  4139b4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  4139b8:	e0bff317 	ldw	r2,-52(fp)
  4139bc:	10800d03 	ldbu	r2,52(r2)
  4139c0:	10803fcc 	andi	r2,r2,255
  4139c4:	00c010b4 	movhi	r3,66
  4139c8:	18f59b44 	addi	r3,r3,-10643
  4139cc:	1885883a 	add	r2,r3,r2
  4139d0:	10800003 	ldbu	r2,0(r2)
  4139d4:	10803fcc 	andi	r2,r2,255
  4139d8:	10000c1e 	bne	r2,zero,413a0c <OSTaskDel+0x208>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  4139dc:	e0bff317 	ldw	r2,-52(fp)
  4139e0:	10800d83 	ldbu	r2,54(r2)
  4139e4:	0084303a 	nor	r2,zero,r2
  4139e8:	1007883a 	mov	r3,r2
  4139ec:	008010b4 	movhi	r2,66
  4139f0:	10b59b04 	addi	r2,r2,-10644
  4139f4:	10800003 	ldbu	r2,0(r2)
  4139f8:	1884703a 	and	r2,r3,r2
  4139fc:	1007883a 	mov	r3,r2
  413a00:	008010b4 	movhi	r2,66
  413a04:	10b59b04 	addi	r2,r2,-10644
  413a08:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  413a0c:	e0bff317 	ldw	r2,-52(fp)
  413a10:	10800717 	ldw	r2,28(r2)
  413a14:	10000526 	beq	r2,zero,413a2c <OSTaskDel+0x228>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  413a18:	e0bff317 	ldw	r2,-52(fp)
  413a1c:	10800717 	ldw	r2,28(r2)
  413a20:	e13ff317 	ldw	r4,-52(fp)
  413a24:	100b883a 	mov	r5,r2
  413a28:	040d2300 	call	40d230 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  413a2c:	e0bff317 	ldw	r2,-52(fp)
  413a30:	10800817 	ldw	r2,32(r2)
  413a34:	10000526 	beq	r2,zero,413a4c <OSTaskDel+0x248>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  413a38:	e0bff317 	ldw	r2,-52(fp)
  413a3c:	10800817 	ldw	r2,32(r2)
  413a40:	e13ff317 	ldw	r4,-52(fp)
  413a44:	100b883a 	mov	r5,r2
  413a48:	040d2e00 	call	40d2e0 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  413a4c:	e0bff317 	ldw	r2,-52(fp)
  413a50:	10800a17 	ldw	r2,40(r2)
  413a54:	e0bff415 	stw	r2,-48(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  413a58:	e0bff417 	ldw	r2,-48(fp)
  413a5c:	10000226 	beq	r2,zero,413a68 <OSTaskDel+0x264>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  413a60:	e13ff417 	ldw	r4,-48(fp)
  413a64:	040ff340 	call	40ff34 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  413a68:	e0bff317 	ldw	r2,-52(fp)
  413a6c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  413a70:	e0bff317 	ldw	r2,-52(fp)
  413a74:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  413a78:	e0bff317 	ldw	r2,-52(fp)
  413a7c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  413a80:	008010b4 	movhi	r2,66
  413a84:	10b58f04 	addi	r2,r2,-10692
  413a88:	10800003 	ldbu	r2,0(r2)
  413a8c:	10803fcc 	andi	r2,r2,255
  413a90:	10803fe0 	cmpeqi	r2,r2,255
  413a94:	1000081e 	bne	r2,zero,413ab8 <OSTaskDel+0x2b4>
        OSLockNesting++;
  413a98:	008010b4 	movhi	r2,66
  413a9c:	10b58f04 	addi	r2,r2,-10692
  413aa0:	10800003 	ldbu	r2,0(r2)
  413aa4:	10800044 	addi	r2,r2,1
  413aa8:	1007883a 	mov	r3,r2
  413aac:	008010b4 	movhi	r2,66
  413ab0:	10b58f04 	addi	r2,r2,-10692
  413ab4:	10c00005 	stb	r3,0(r2)
  413ab8:	e0bff217 	ldw	r2,-56(fp)
  413abc:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  413ac0:	0005303a 	rdctl	r2,status
  413ac4:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  413ac8:	e0fffb17 	ldw	r3,-20(fp)
  413acc:	00bfff84 	movi	r2,-2
  413ad0:	1884703a 	and	r2,r3,r2
  413ad4:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  413ad8:	e0bffa17 	ldw	r2,-24(fp)
  413adc:	1080004c 	andi	r2,r2,1
  413ae0:	e0fffb17 	ldw	r3,-20(fp)
  413ae4:	1884b03a 	or	r2,r3,r2
  413ae8:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  413aec:	e0bffb17 	ldw	r2,-20(fp)
  413af0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  413af4:	040ce2c0 	call	40ce2c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  413af8:	0005303a 	rdctl	r2,status
  413afc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413b00:	e0fffc17 	ldw	r3,-16(fp)
  413b04:	00bfff84 	movi	r2,-2
  413b08:	1884703a 	and	r2,r3,r2
  413b0c:	1001703a 	wrctl	status,r2
  
  return context;
  413b10:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  413b14:	e0bff215 	stw	r2,-56(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  413b18:	008010b4 	movhi	r2,66
  413b1c:	10b58f04 	addi	r2,r2,-10692
  413b20:	10800003 	ldbu	r2,0(r2)
  413b24:	10803fcc 	andi	r2,r2,255
  413b28:	10000826 	beq	r2,zero,413b4c <OSTaskDel+0x348>
        OSLockNesting--;
  413b2c:	008010b4 	movhi	r2,66
  413b30:	10b58f04 	addi	r2,r2,-10692
  413b34:	10800003 	ldbu	r2,0(r2)
  413b38:	10bfffc4 	addi	r2,r2,-1
  413b3c:	1007883a 	mov	r3,r2
  413b40:	008010b4 	movhi	r2,66
  413b44:	10b58f04 	addi	r2,r2,-10692
  413b48:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  413b4c:	e13ff317 	ldw	r4,-52(fp)
  413b50:	0418ef80 	call	418ef8 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  413b54:	008010b4 	movhi	r2,66
  413b58:	10b59744 	addi	r2,r2,-10659
  413b5c:	10800003 	ldbu	r2,0(r2)
  413b60:	10bfffc4 	addi	r2,r2,-1
  413b64:	1007883a 	mov	r3,r2
  413b68:	008010b4 	movhi	r2,66
  413b6c:	10b59744 	addi	r2,r2,-10659
  413b70:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  413b74:	e0bfff03 	ldbu	r2,-4(fp)
  413b78:	00c010b4 	movhi	r3,66
  413b7c:	18c26f04 	addi	r3,r3,2492
  413b80:	1085883a 	add	r2,r2,r2
  413b84:	1085883a 	add	r2,r2,r2
  413b88:	1885883a 	add	r2,r3,r2
  413b8c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  413b90:	e0bff317 	ldw	r2,-52(fp)
  413b94:	10800617 	ldw	r2,24(r2)
  413b98:	1000091e 	bne	r2,zero,413bc0 <OSTaskDel+0x3bc>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  413b9c:	e0bff317 	ldw	r2,-52(fp)
  413ba0:	10800517 	ldw	r2,20(r2)
  413ba4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  413ba8:	e0bff317 	ldw	r2,-52(fp)
  413bac:	10c00517 	ldw	r3,20(r2)
  413bb0:	008010b4 	movhi	r2,66
  413bb4:	10b59204 	addi	r2,r2,-10680
  413bb8:	10c00015 	stw	r3,0(r2)
  413bbc:	00000a06 	br	413be8 <OSTaskDel+0x3e4>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  413bc0:	e0bff317 	ldw	r2,-52(fp)
  413bc4:	10800617 	ldw	r2,24(r2)
  413bc8:	e0fff317 	ldw	r3,-52(fp)
  413bcc:	18c00517 	ldw	r3,20(r3)
  413bd0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  413bd4:	e0bff317 	ldw	r2,-52(fp)
  413bd8:	10800517 	ldw	r2,20(r2)
  413bdc:	e0fff317 	ldw	r3,-52(fp)
  413be0:	18c00617 	ldw	r3,24(r3)
  413be4:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  413be8:	008010b4 	movhi	r2,66
  413bec:	10b59604 	addi	r2,r2,-10664
  413bf0:	10c00017 	ldw	r3,0(r2)
  413bf4:	e0bff317 	ldw	r2,-52(fp)
  413bf8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  413bfc:	008010b4 	movhi	r2,66
  413c00:	10b59604 	addi	r2,r2,-10664
  413c04:	e0fff317 	ldw	r3,-52(fp)
  413c08:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  413c0c:	e0bff317 	ldw	r2,-52(fp)
  413c10:	00c00fc4 	movi	r3,63
  413c14:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  413c18:	e0bff317 	ldw	r2,-52(fp)
  413c1c:	10001345 	stb	zero,77(r2)
  413c20:	e0bff217 	ldw	r2,-56(fp)
  413c24:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  413c28:	0005303a 	rdctl	r2,status
  413c2c:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  413c30:	e0fffe17 	ldw	r3,-8(fp)
  413c34:	00bfff84 	movi	r2,-2
  413c38:	1884703a 	and	r2,r3,r2
  413c3c:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  413c40:	e0bffd17 	ldw	r2,-12(fp)
  413c44:	1080004c 	andi	r2,r2,1
  413c48:	e0fffe17 	ldw	r3,-8(fp)
  413c4c:	1884b03a 	or	r2,r3,r2
  413c50:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  413c54:	e0bffe17 	ldw	r2,-8(fp)
  413c58:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  413c5c:	008010b4 	movhi	r2,66
  413c60:	10b58f44 	addi	r2,r2,-10691
  413c64:	10800003 	ldbu	r2,0(r2)
  413c68:	10803fcc 	andi	r2,r2,255
  413c6c:	10800058 	cmpnei	r2,r2,1
  413c70:	1000011e 	bne	r2,zero,413c78 <OSTaskDel+0x474>
        OS_Sched();                                     /* Find new highest priority task              */
  413c74:	040d8640 	call	40d864 <OS_Sched>
    }
    return (OS_ERR_NONE);
  413c78:	0005883a 	mov	r2,zero
}
  413c7c:	e037883a 	mov	sp,fp
  413c80:	dfc00117 	ldw	ra,4(sp)
  413c84:	df000017 	ldw	fp,0(sp)
  413c88:	dec00204 	addi	sp,sp,8
  413c8c:	f800283a 	ret

00413c90 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  413c90:	defff104 	addi	sp,sp,-60
  413c94:	df000e15 	stw	fp,56(sp)
  413c98:	df000e04 	addi	fp,sp,56
  413c9c:	2005883a 	mov	r2,r4
  413ca0:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  413ca4:	e03ff215 	stw	zero,-56(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  413ca8:	e0bfff03 	ldbu	r2,-4(fp)
  413cac:	10800518 	cmpnei	r2,r2,20
  413cb0:	1000021e 	bne	r2,zero,413cbc <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  413cb4:	00800f84 	movi	r2,62
  413cb8:	00007306 	br	413e88 <OSTaskDelReq+0x1f8>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  413cbc:	e0bfff03 	ldbu	r2,-4(fp)
  413cc0:	10800530 	cmpltui	r2,r2,20
  413cc4:	1000051e 	bne	r2,zero,413cdc <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
  413cc8:	e0bfff03 	ldbu	r2,-4(fp)
  413ccc:	10803fe0 	cmpeqi	r2,r2,255
  413cd0:	1000021e 	bne	r2,zero,413cdc <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
  413cd4:	00800a84 	movi	r2,42
  413cd8:	00006b06 	br	413e88 <OSTaskDelReq+0x1f8>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  413cdc:	e0bfff03 	ldbu	r2,-4(fp)
  413ce0:	10803fd8 	cmpnei	r2,r2,255
  413ce4:	10001e1e 	bne	r2,zero,413d60 <OSTaskDelReq+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  413ce8:	0005303a 	rdctl	r2,status
  413cec:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413cf0:	e0fff517 	ldw	r3,-44(fp)
  413cf4:	00bfff84 	movi	r2,-2
  413cf8:	1884703a 	and	r2,r3,r2
  413cfc:	1001703a 	wrctl	status,r2
  
  return context;
  413d00:	e0bff517 	ldw	r2,-44(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  413d04:	e0bff215 	stw	r2,-56(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  413d08:	008010b4 	movhi	r2,66
  413d0c:	10b59e04 	addi	r2,r2,-10632
  413d10:	10800017 	ldw	r2,0(r2)
  413d14:	10800dc3 	ldbu	r2,55(r2)
  413d18:	e0bff305 	stb	r2,-52(fp)
  413d1c:	e0bff217 	ldw	r2,-56(fp)
  413d20:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  413d24:	0005303a 	rdctl	r2,status
  413d28:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  413d2c:	e0fff717 	ldw	r3,-36(fp)
  413d30:	00bfff84 	movi	r2,-2
  413d34:	1884703a 	and	r2,r3,r2
  413d38:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  413d3c:	e0bff617 	ldw	r2,-40(fp)
  413d40:	1080004c 	andi	r2,r2,1
  413d44:	e0fff717 	ldw	r3,-36(fp)
  413d48:	1884b03a 	or	r2,r3,r2
  413d4c:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  413d50:	e0bff717 	ldw	r2,-36(fp)
  413d54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  413d58:	e0bff303 	ldbu	r2,-52(fp)
  413d5c:	00004a06 	br	413e88 <OSTaskDelReq+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  413d60:	0005303a 	rdctl	r2,status
  413d64:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413d68:	e0fff817 	ldw	r3,-32(fp)
  413d6c:	00bfff84 	movi	r2,-2
  413d70:	1884703a 	and	r2,r3,r2
  413d74:	1001703a 	wrctl	status,r2
  
  return context;
  413d78:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  413d7c:	e0bff215 	stw	r2,-56(fp)
    ptcb = OSTCBPrioTbl[prio];
  413d80:	e0bfff03 	ldbu	r2,-4(fp)
  413d84:	00c010b4 	movhi	r3,66
  413d88:	18c26f04 	addi	r3,r3,2492
  413d8c:	1085883a 	add	r2,r2,r2
  413d90:	1085883a 	add	r2,r2,r2
  413d94:	1885883a 	add	r2,r3,r2
  413d98:	10800017 	ldw	r2,0(r2)
  413d9c:	e0bff415 	stw	r2,-48(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  413da0:	e0bff417 	ldw	r2,-48(fp)
  413da4:	1000111e 	bne	r2,zero,413dec <OSTaskDelReq+0x15c>
  413da8:	e0bff217 	ldw	r2,-56(fp)
  413dac:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  413db0:	0005303a 	rdctl	r2,status
  413db4:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  413db8:	e0fffa17 	ldw	r3,-24(fp)
  413dbc:	00bfff84 	movi	r2,-2
  413dc0:	1884703a 	and	r2,r3,r2
  413dc4:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  413dc8:	e0bff917 	ldw	r2,-28(fp)
  413dcc:	1080004c 	andi	r2,r2,1
  413dd0:	e0fffa17 	ldw	r3,-24(fp)
  413dd4:	1884b03a 	or	r2,r3,r2
  413dd8:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  413ddc:	e0bffa17 	ldw	r2,-24(fp)
  413de0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  413de4:	008010c4 	movi	r2,67
  413de8:	00002706 	br	413e88 <OSTaskDelReq+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  413dec:	e0bff417 	ldw	r2,-48(fp)
  413df0:	10800058 	cmpnei	r2,r2,1
  413df4:	1000111e 	bne	r2,zero,413e3c <OSTaskDelReq+0x1ac>
  413df8:	e0bff217 	ldw	r2,-56(fp)
  413dfc:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  413e00:	0005303a 	rdctl	r2,status
  413e04:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  413e08:	e0fffc17 	ldw	r3,-16(fp)
  413e0c:	00bfff84 	movi	r2,-2
  413e10:	1884703a 	and	r2,r3,r2
  413e14:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  413e18:	e0bffb17 	ldw	r2,-20(fp)
  413e1c:	1080004c 	andi	r2,r2,1
  413e20:	e0fffc17 	ldw	r3,-16(fp)
  413e24:	1884b03a 	or	r2,r3,r2
  413e28:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  413e2c:	e0bffc17 	ldw	r2,-16(fp)
  413e30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  413e34:	00800f44 	movi	r2,61
  413e38:	00001306 	br	413e88 <OSTaskDelReq+0x1f8>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  413e3c:	e0bff417 	ldw	r2,-48(fp)
  413e40:	00c00fc4 	movi	r3,63
  413e44:	10c00dc5 	stb	r3,55(r2)
  413e48:	e0bff217 	ldw	r2,-56(fp)
  413e4c:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  413e50:	0005303a 	rdctl	r2,status
  413e54:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  413e58:	e0fffe17 	ldw	r3,-8(fp)
  413e5c:	00bfff84 	movi	r2,-2
  413e60:	1884703a 	and	r2,r3,r2
  413e64:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  413e68:	e0bffd17 	ldw	r2,-12(fp)
  413e6c:	1080004c 	andi	r2,r2,1
  413e70:	e0fffe17 	ldw	r3,-8(fp)
  413e74:	1884b03a 	or	r2,r3,r2
  413e78:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  413e7c:	e0bffe17 	ldw	r2,-8(fp)
  413e80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  413e84:	0005883a 	mov	r2,zero
}
  413e88:	e037883a 	mov	sp,fp
  413e8c:	df000017 	ldw	fp,0(sp)
  413e90:	dec00104 	addi	sp,sp,4
  413e94:	f800283a 	ret

00413e98 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  413e98:	defff104 	addi	sp,sp,-60
  413e9c:	dfc00e15 	stw	ra,56(sp)
  413ea0:	df000d15 	stw	fp,52(sp)
  413ea4:	df000d04 	addi	fp,sp,52
  413ea8:	2005883a 	mov	r2,r4
  413eac:	e17ffe15 	stw	r5,-8(fp)
  413eb0:	e1bfff15 	stw	r6,-4(fp)
  413eb4:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  413eb8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  413ebc:	e0bfff17 	ldw	r2,-4(fp)
  413ec0:	1000021e 	bne	r2,zero,413ecc <OSTaskNameGet+0x34>
        return (0);
  413ec4:	0005883a 	mov	r2,zero
  413ec8:	00007906 	br	4140b0 <OSTaskNameGet+0x218>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  413ecc:	e0bffd03 	ldbu	r2,-12(fp)
  413ed0:	10800570 	cmpltui	r2,r2,21
  413ed4:	1000081e 	bne	r2,zero,413ef8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  413ed8:	e0bffd03 	ldbu	r2,-12(fp)
  413edc:	10803fe0 	cmpeqi	r2,r2,255
  413ee0:	1000051e 	bne	r2,zero,413ef8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  413ee4:	e0bfff17 	ldw	r2,-4(fp)
  413ee8:	00c00a84 	movi	r3,42
  413eec:	10c00005 	stb	r3,0(r2)
            return (0);
  413ef0:	0005883a 	mov	r2,zero
  413ef4:	00006e06 	br	4140b0 <OSTaskNameGet+0x218>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  413ef8:	e0bffe17 	ldw	r2,-8(fp)
  413efc:	1000051e 	bne	r2,zero,413f14 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  413f00:	e0bfff17 	ldw	r2,-4(fp)
  413f04:	00c00304 	movi	r3,12
  413f08:	10c00005 	stb	r3,0(r2)
        return (0);
  413f0c:	0005883a 	mov	r2,zero
  413f10:	00006706 	br	4140b0 <OSTaskNameGet+0x218>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  413f14:	008010b4 	movhi	r2,66
  413f18:	10b59d04 	addi	r2,r2,-10636
  413f1c:	10800003 	ldbu	r2,0(r2)
  413f20:	10803fcc 	andi	r2,r2,255
  413f24:	10000526 	beq	r2,zero,413f3c <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
  413f28:	e0bfff17 	ldw	r2,-4(fp)
  413f2c:	00c00444 	movi	r3,17
  413f30:	10c00005 	stb	r3,0(r2)
        return (0);
  413f34:	0005883a 	mov	r2,zero
  413f38:	00005d06 	br	4140b0 <OSTaskNameGet+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  413f3c:	0005303a 	rdctl	r2,status
  413f40:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  413f44:	e0fff617 	ldw	r3,-40(fp)
  413f48:	00bfff84 	movi	r2,-2
  413f4c:	1884703a 	and	r2,r3,r2
  413f50:	1001703a 	wrctl	status,r2
  
  return context;
  413f54:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  413f58:	e0bff315 	stw	r2,-52(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  413f5c:	e0bffd03 	ldbu	r2,-12(fp)
  413f60:	10803fd8 	cmpnei	r2,r2,255
  413f64:	1000051e 	bne	r2,zero,413f7c <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
  413f68:	008010b4 	movhi	r2,66
  413f6c:	10b59e04 	addi	r2,r2,-10632
  413f70:	10800017 	ldw	r2,0(r2)
  413f74:	10800c83 	ldbu	r2,50(r2)
  413f78:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  413f7c:	e0bffd03 	ldbu	r2,-12(fp)
  413f80:	00c010b4 	movhi	r3,66
  413f84:	18c26f04 	addi	r3,r3,2492
  413f88:	1085883a 	add	r2,r2,r2
  413f8c:	1085883a 	add	r2,r2,r2
  413f90:	1885883a 	add	r2,r3,r2
  413f94:	10800017 	ldw	r2,0(r2)
  413f98:	e0bff415 	stw	r2,-48(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  413f9c:	e0bff417 	ldw	r2,-48(fp)
  413fa0:	1000141e 	bne	r2,zero,413ff4 <OSTaskNameGet+0x15c>
  413fa4:	e0bff317 	ldw	r2,-52(fp)
  413fa8:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  413fac:	0005303a 	rdctl	r2,status
  413fb0:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  413fb4:	e0fff817 	ldw	r3,-32(fp)
  413fb8:	00bfff84 	movi	r2,-2
  413fbc:	1884703a 	and	r2,r3,r2
  413fc0:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  413fc4:	e0bff717 	ldw	r2,-36(fp)
  413fc8:	1080004c 	andi	r2,r2,1
  413fcc:	e0fff817 	ldw	r3,-32(fp)
  413fd0:	1884b03a 	or	r2,r3,r2
  413fd4:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  413fd8:	e0bff817 	ldw	r2,-32(fp)
  413fdc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  413fe0:	e0bfff17 	ldw	r2,-4(fp)
  413fe4:	00c010c4 	movi	r3,67
  413fe8:	10c00005 	stb	r3,0(r2)
        return (0);
  413fec:	0005883a 	mov	r2,zero
  413ff0:	00002f06 	br	4140b0 <OSTaskNameGet+0x218>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  413ff4:	e0bff417 	ldw	r2,-48(fp)
  413ff8:	10800058 	cmpnei	r2,r2,1
  413ffc:	1000141e 	bne	r2,zero,414050 <OSTaskNameGet+0x1b8>
  414000:	e0bff317 	ldw	r2,-52(fp)
  414004:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414008:	0005303a 	rdctl	r2,status
  41400c:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414010:	e0fffa17 	ldw	r3,-24(fp)
  414014:	00bfff84 	movi	r2,-2
  414018:	1884703a 	and	r2,r3,r2
  41401c:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414020:	e0bff917 	ldw	r2,-28(fp)
  414024:	1080004c 	andi	r2,r2,1
  414028:	e0fffa17 	ldw	r3,-24(fp)
  41402c:	1884b03a 	or	r2,r3,r2
  414030:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  414034:	e0bffa17 	ldw	r2,-24(fp)
  414038:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  41403c:	e0bfff17 	ldw	r2,-4(fp)
  414040:	00c010c4 	movi	r3,67
  414044:	10c00005 	stb	r3,0(r2)
        return (0);
  414048:	0005883a 	mov	r2,zero
  41404c:	00001806 	br	4140b0 <OSTaskNameGet+0x218>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  414050:	e0bff417 	ldw	r2,-48(fp)
  414054:	10801304 	addi	r2,r2,76
  414058:	e13ffe17 	ldw	r4,-8(fp)
  41405c:	100b883a 	mov	r5,r2
  414060:	040d9cc0 	call	40d9cc <OS_StrCopy>
  414064:	e0bff505 	stb	r2,-44(fp)
  414068:	e0bff317 	ldw	r2,-52(fp)
  41406c:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414070:	0005303a 	rdctl	r2,status
  414074:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414078:	e0fffc17 	ldw	r3,-16(fp)
  41407c:	00bfff84 	movi	r2,-2
  414080:	1884703a 	and	r2,r3,r2
  414084:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414088:	e0bffb17 	ldw	r2,-20(fp)
  41408c:	1080004c 	andi	r2,r2,1
  414090:	e0fffc17 	ldw	r3,-16(fp)
  414094:	1884b03a 	or	r2,r3,r2
  414098:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  41409c:	e0bffc17 	ldw	r2,-16(fp)
  4140a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  4140a4:	e0bfff17 	ldw	r2,-4(fp)
  4140a8:	10000005 	stb	zero,0(r2)
    return (len);
  4140ac:	e0bff503 	ldbu	r2,-44(fp)
}
  4140b0:	e037883a 	mov	sp,fp
  4140b4:	dfc00117 	ldw	ra,4(sp)
  4140b8:	df000017 	ldw	fp,0(sp)
  4140bc:	dec00204 	addi	sp,sp,8
  4140c0:	f800283a 	ret

004140c4 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  4140c4:	deffef04 	addi	sp,sp,-68
  4140c8:	dfc01015 	stw	ra,64(sp)
  4140cc:	df000f15 	stw	fp,60(sp)
  4140d0:	df000f04 	addi	fp,sp,60
  4140d4:	2005883a 	mov	r2,r4
  4140d8:	e17ffe15 	stw	r5,-8(fp)
  4140dc:	e1bfff15 	stw	r6,-4(fp)
  4140e0:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  4140e4:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  4140e8:	e0bfff17 	ldw	r2,-4(fp)
  4140ec:	10008c26 	beq	r2,zero,414320 <OSTaskNameSet+0x25c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  4140f0:	e0bffd03 	ldbu	r2,-12(fp)
  4140f4:	10800570 	cmpltui	r2,r2,21
  4140f8:	1000071e 	bne	r2,zero,414118 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  4140fc:	e0bffd03 	ldbu	r2,-12(fp)
  414100:	10803fe0 	cmpeqi	r2,r2,255
  414104:	1000041e 	bne	r2,zero,414118 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  414108:	e0bfff17 	ldw	r2,-4(fp)
  41410c:	00c00a84 	movi	r3,42
  414110:	10c00005 	stb	r3,0(r2)
            return;
  414114:	00008306 	br	414324 <OSTaskNameSet+0x260>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  414118:	e0bffe17 	ldw	r2,-8(fp)
  41411c:	1000041e 	bne	r2,zero,414130 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  414120:	e0bfff17 	ldw	r2,-4(fp)
  414124:	00c00304 	movi	r3,12
  414128:	10c00005 	stb	r3,0(r2)
        return;
  41412c:	00007d06 	br	414324 <OSTaskNameSet+0x260>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  414130:	008010b4 	movhi	r2,66
  414134:	10b59d04 	addi	r2,r2,-10636
  414138:	10800003 	ldbu	r2,0(r2)
  41413c:	10803fcc 	andi	r2,r2,255
  414140:	10000426 	beq	r2,zero,414154 <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
  414144:	e0bfff17 	ldw	r2,-4(fp)
  414148:	00c00484 	movi	r3,18
  41414c:	10c00005 	stb	r3,0(r2)
        return;
  414150:	00007406 	br	414324 <OSTaskNameSet+0x260>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  414154:	0005303a 	rdctl	r2,status
  414158:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  41415c:	e0fff417 	ldw	r3,-48(fp)
  414160:	00bfff84 	movi	r2,-2
  414164:	1884703a 	and	r2,r3,r2
  414168:	1001703a 	wrctl	status,r2
  
  return context;
  41416c:	e0bff417 	ldw	r2,-48(fp)
    }
    OS_ENTER_CRITICAL();
  414170:	e0bff115 	stw	r2,-60(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  414174:	e0bffd03 	ldbu	r2,-12(fp)
  414178:	10803fd8 	cmpnei	r2,r2,255
  41417c:	1000051e 	bne	r2,zero,414194 <OSTaskNameSet+0xd0>
        prio = OSTCBCur->OSTCBPrio;
  414180:	008010b4 	movhi	r2,66
  414184:	10b59e04 	addi	r2,r2,-10632
  414188:	10800017 	ldw	r2,0(r2)
  41418c:	10800c83 	ldbu	r2,50(r2)
  414190:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  414194:	e0bffd03 	ldbu	r2,-12(fp)
  414198:	00c010b4 	movhi	r3,66
  41419c:	18c26f04 	addi	r3,r3,2492
  4141a0:	1085883a 	add	r2,r2,r2
  4141a4:	1085883a 	add	r2,r2,r2
  4141a8:	1885883a 	add	r2,r3,r2
  4141ac:	10800017 	ldw	r2,0(r2)
  4141b0:	e0bff215 	stw	r2,-56(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  4141b4:	e0bff217 	ldw	r2,-56(fp)
  4141b8:	1000131e 	bne	r2,zero,414208 <OSTaskNameSet+0x144>
  4141bc:	e0bff117 	ldw	r2,-60(fp)
  4141c0:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4141c4:	0005303a 	rdctl	r2,status
  4141c8:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4141cc:	e0fff617 	ldw	r3,-40(fp)
  4141d0:	00bfff84 	movi	r2,-2
  4141d4:	1884703a 	and	r2,r3,r2
  4141d8:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4141dc:	e0bff517 	ldw	r2,-44(fp)
  4141e0:	1080004c 	andi	r2,r2,1
  4141e4:	e0fff617 	ldw	r3,-40(fp)
  4141e8:	1884b03a 	or	r2,r3,r2
  4141ec:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  4141f0:	e0bff617 	ldw	r2,-40(fp)
  4141f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  4141f8:	e0bfff17 	ldw	r2,-4(fp)
  4141fc:	00c010c4 	movi	r3,67
  414200:	10c00005 	stb	r3,0(r2)
        return;
  414204:	00004706 	br	414324 <OSTaskNameSet+0x260>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  414208:	e0bff217 	ldw	r2,-56(fp)
  41420c:	10800058 	cmpnei	r2,r2,1
  414210:	1000131e 	bne	r2,zero,414260 <OSTaskNameSet+0x19c>
  414214:	e0bff117 	ldw	r2,-60(fp)
  414218:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41421c:	0005303a 	rdctl	r2,status
  414220:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414224:	e0fff817 	ldw	r3,-32(fp)
  414228:	00bfff84 	movi	r2,-2
  41422c:	1884703a 	and	r2,r3,r2
  414230:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414234:	e0bff717 	ldw	r2,-36(fp)
  414238:	1080004c 	andi	r2,r2,1
  41423c:	e0fff817 	ldw	r3,-32(fp)
  414240:	1884b03a 	or	r2,r3,r2
  414244:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  414248:	e0bff817 	ldw	r2,-32(fp)
  41424c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  414250:	e0bfff17 	ldw	r2,-4(fp)
  414254:	00c010c4 	movi	r3,67
  414258:	10c00005 	stb	r3,0(r2)
        return;
  41425c:	00003106 	br	414324 <OSTaskNameSet+0x260>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  414260:	e13ffe17 	ldw	r4,-8(fp)
  414264:	040da480 	call	40da48 <OS_StrLen>
  414268:	e0bff305 	stb	r2,-52(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  41426c:	e0bff303 	ldbu	r2,-52(fp)
  414270:	10800830 	cmpltui	r2,r2,32
  414274:	1000131e 	bne	r2,zero,4142c4 <OSTaskNameSet+0x200>
  414278:	e0bff117 	ldw	r2,-60(fp)
  41427c:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414280:	0005303a 	rdctl	r2,status
  414284:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414288:	e0fffa17 	ldw	r3,-24(fp)
  41428c:	00bfff84 	movi	r2,-2
  414290:	1884703a 	and	r2,r3,r2
  414294:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414298:	e0bff917 	ldw	r2,-28(fp)
  41429c:	1080004c 	andi	r2,r2,1
  4142a0:	e0fffa17 	ldw	r3,-24(fp)
  4142a4:	1884b03a 	or	r2,r3,r2
  4142a8:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  4142ac:	e0bffa17 	ldw	r2,-24(fp)
  4142b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  4142b4:	e0bfff17 	ldw	r2,-4(fp)
  4142b8:	00c01044 	movi	r3,65
  4142bc:	10c00005 	stb	r3,0(r2)
        return;
  4142c0:	00001806 	br	414324 <OSTaskNameSet+0x260>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  4142c4:	e0bff217 	ldw	r2,-56(fp)
  4142c8:	10801304 	addi	r2,r2,76
  4142cc:	1009883a 	mov	r4,r2
  4142d0:	e17ffe17 	ldw	r5,-8(fp)
  4142d4:	040d9cc0 	call	40d9cc <OS_StrCopy>
  4142d8:	e0bff117 	ldw	r2,-60(fp)
  4142dc:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4142e0:	0005303a 	rdctl	r2,status
  4142e4:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4142e8:	e0fffc17 	ldw	r3,-16(fp)
  4142ec:	00bfff84 	movi	r2,-2
  4142f0:	1884703a 	and	r2,r3,r2
  4142f4:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4142f8:	e0bffb17 	ldw	r2,-20(fp)
  4142fc:	1080004c 	andi	r2,r2,1
  414300:	e0fffc17 	ldw	r3,-16(fp)
  414304:	1884b03a 	or	r2,r3,r2
  414308:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  41430c:	e0bffc17 	ldw	r2,-16(fp)
  414310:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  414314:	e0bfff17 	ldw	r2,-4(fp)
  414318:	10000005 	stb	zero,0(r2)
  41431c:	00000106 	br	414324 <OSTaskNameSet+0x260>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
  414320:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
  414324:	e037883a 	mov	sp,fp
  414328:	dfc00117 	ldw	ra,4(sp)
  41432c:	df000017 	ldw	fp,0(sp)
  414330:	dec00204 	addi	sp,sp,8
  414334:	f800283a 	ret

00414338 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  414338:	deffee04 	addi	sp,sp,-72
  41433c:	dfc01115 	stw	ra,68(sp)
  414340:	df001015 	stw	fp,64(sp)
  414344:	df001004 	addi	fp,sp,64
  414348:	2005883a 	mov	r2,r4
  41434c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  414350:	e03ff015 	stw	zero,-64(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  414354:	e0bfff03 	ldbu	r2,-4(fp)
  414358:	10800530 	cmpltui	r2,r2,20
  41435c:	1000021e 	bne	r2,zero,414368 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  414360:	00800a84 	movi	r2,42
  414364:	0000ae06 	br	414620 <OSTaskResume+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  414368:	0005303a 	rdctl	r2,status
  41436c:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  414370:	e0fff217 	ldw	r3,-56(fp)
  414374:	00bfff84 	movi	r2,-2
  414378:	1884703a 	and	r2,r3,r2
  41437c:	1001703a 	wrctl	status,r2
  
  return context;
  414380:	e0bff217 	ldw	r2,-56(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  414384:	e0bff015 	stw	r2,-64(fp)
    ptcb = OSTCBPrioTbl[prio];
  414388:	e0bfff03 	ldbu	r2,-4(fp)
  41438c:	00c010b4 	movhi	r3,66
  414390:	18c26f04 	addi	r3,r3,2492
  414394:	1085883a 	add	r2,r2,r2
  414398:	1085883a 	add	r2,r2,r2
  41439c:	1885883a 	add	r2,r3,r2
  4143a0:	10800017 	ldw	r2,0(r2)
  4143a4:	e0bff115 	stw	r2,-60(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  4143a8:	e0bff117 	ldw	r2,-60(fp)
  4143ac:	1000111e 	bne	r2,zero,4143f4 <OSTaskResume+0xbc>
  4143b0:	e0bff017 	ldw	r2,-64(fp)
  4143b4:	e0bff315 	stw	r2,-52(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4143b8:	0005303a 	rdctl	r2,status
  4143bc:	e0bff415 	stw	r2,-48(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4143c0:	e0fff417 	ldw	r3,-48(fp)
  4143c4:	00bfff84 	movi	r2,-2
  4143c8:	1884703a 	and	r2,r3,r2
  4143cc:	e0bff415 	stw	r2,-48(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4143d0:	e0bff317 	ldw	r2,-52(fp)
  4143d4:	1080004c 	andi	r2,r2,1
  4143d8:	e0fff417 	ldw	r3,-48(fp)
  4143dc:	1884b03a 	or	r2,r3,r2
  4143e0:	e0bff415 	stw	r2,-48(fp)
  
  NIOS2_WRITE_STATUS (status);
  4143e4:	e0bff417 	ldw	r2,-48(fp)
  4143e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  4143ec:	00801184 	movi	r2,70
  4143f0:	00008b06 	br	414620 <OSTaskResume+0x2e8>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  4143f4:	e0bff117 	ldw	r2,-60(fp)
  4143f8:	10800058 	cmpnei	r2,r2,1
  4143fc:	1000111e 	bne	r2,zero,414444 <OSTaskResume+0x10c>
  414400:	e0bff017 	ldw	r2,-64(fp)
  414404:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414408:	0005303a 	rdctl	r2,status
  41440c:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414410:	e0fff617 	ldw	r3,-40(fp)
  414414:	00bfff84 	movi	r2,-2
  414418:	1884703a 	and	r2,r3,r2
  41441c:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414420:	e0bff517 	ldw	r2,-44(fp)
  414424:	1080004c 	andi	r2,r2,1
  414428:	e0fff617 	ldw	r3,-40(fp)
  41442c:	1884b03a 	or	r2,r3,r2
  414430:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  414434:	e0bff617 	ldw	r2,-40(fp)
  414438:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  41443c:	008010c4 	movi	r2,67
  414440:	00007706 	br	414620 <OSTaskResume+0x2e8>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  414444:	e0bff117 	ldw	r2,-60(fp)
  414448:	10800c03 	ldbu	r2,48(r2)
  41444c:	10803fcc 	andi	r2,r2,255
  414450:	1080020c 	andi	r2,r2,8
  414454:	10006226 	beq	r2,zero,4145e0 <OSTaskResume+0x2a8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  414458:	e0bff117 	ldw	r2,-60(fp)
  41445c:	10c00c03 	ldbu	r3,48(r2)
  414460:	00bffdc4 	movi	r2,-9
  414464:	1884703a 	and	r2,r3,r2
  414468:	1007883a 	mov	r3,r2
  41446c:	e0bff117 	ldw	r2,-60(fp)
  414470:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  414474:	e0bff117 	ldw	r2,-60(fp)
  414478:	10800c03 	ldbu	r2,48(r2)
  41447c:	10803fcc 	andi	r2,r2,255
  414480:	1000461e 	bne	r2,zero,41459c <OSTaskResume+0x264>
            if (ptcb->OSTCBDly == 0) {
  414484:	e0bff117 	ldw	r2,-60(fp)
  414488:	10800b8b 	ldhu	r2,46(r2)
  41448c:	10bfffcc 	andi	r2,r2,65535
  414490:	1000321e 	bne	r2,zero,41455c <OSTaskResume+0x224>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  414494:	e0bff117 	ldw	r2,-60(fp)
  414498:	10c00d83 	ldbu	r3,54(r2)
  41449c:	008010b4 	movhi	r2,66
  4144a0:	10b59b04 	addi	r2,r2,-10644
  4144a4:	10800003 	ldbu	r2,0(r2)
  4144a8:	1884b03a 	or	r2,r3,r2
  4144ac:	1007883a 	mov	r3,r2
  4144b0:	008010b4 	movhi	r2,66
  4144b4:	10b59b04 	addi	r2,r2,-10644
  4144b8:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  4144bc:	e0bff117 	ldw	r2,-60(fp)
  4144c0:	10800d03 	ldbu	r2,52(r2)
  4144c4:	10803fcc 	andi	r2,r2,255
  4144c8:	e0fff117 	ldw	r3,-60(fp)
  4144cc:	18c00d03 	ldbu	r3,52(r3)
  4144d0:	18c03fcc 	andi	r3,r3,255
  4144d4:	010010b4 	movhi	r4,66
  4144d8:	21359b44 	addi	r4,r4,-10643
  4144dc:	20c7883a 	add	r3,r4,r3
  4144e0:	19000003 	ldbu	r4,0(r3)
  4144e4:	e0fff117 	ldw	r3,-60(fp)
  4144e8:	18c00d43 	ldbu	r3,53(r3)
  4144ec:	20c6b03a 	or	r3,r4,r3
  4144f0:	010010b4 	movhi	r4,66
  4144f4:	21359b44 	addi	r4,r4,-10643
  4144f8:	2085883a 	add	r2,r4,r2
  4144fc:	10c00005 	stb	r3,0(r2)
  414500:	e0bff017 	ldw	r2,-64(fp)
  414504:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414508:	0005303a 	rdctl	r2,status
  41450c:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414510:	e0fff817 	ldw	r3,-32(fp)
  414514:	00bfff84 	movi	r2,-2
  414518:	1884703a 	and	r2,r3,r2
  41451c:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414520:	e0bff717 	ldw	r2,-36(fp)
  414524:	1080004c 	andi	r2,r2,1
  414528:	e0fff817 	ldw	r3,-32(fp)
  41452c:	1884b03a 	or	r2,r3,r2
  414530:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  414534:	e0bff817 	ldw	r2,-32(fp)
  414538:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  41453c:	008010b4 	movhi	r2,66
  414540:	10b58f44 	addi	r2,r2,-10691
  414544:	10800003 	ldbu	r2,0(r2)
  414548:	10803fcc 	andi	r2,r2,255
  41454c:	10800058 	cmpnei	r2,r2,1
  414550:	1000211e 	bne	r2,zero,4145d8 <OSTaskResume+0x2a0>
                    OS_Sched();                               /* Find new highest priority task        */
  414554:	040d8640 	call	40d864 <OS_Sched>
  414558:	00001f06 	br	4145d8 <OSTaskResume+0x2a0>
  41455c:	e0bff017 	ldw	r2,-64(fp)
  414560:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414564:	0005303a 	rdctl	r2,status
  414568:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  41456c:	e0fffa17 	ldw	r3,-24(fp)
  414570:	00bfff84 	movi	r2,-2
  414574:	1884703a 	and	r2,r3,r2
  414578:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  41457c:	e0bff917 	ldw	r2,-28(fp)
  414580:	1080004c 	andi	r2,r2,1
  414584:	e0fffa17 	ldw	r3,-24(fp)
  414588:	1884b03a 	or	r2,r3,r2
  41458c:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  414590:	e0bffa17 	ldw	r2,-24(fp)
  414594:	1001703a 	wrctl	status,r2
  414598:	00000f06 	br	4145d8 <OSTaskResume+0x2a0>
  41459c:	e0bff017 	ldw	r2,-64(fp)
  4145a0:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4145a4:	0005303a 	rdctl	r2,status
  4145a8:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4145ac:	e0fffc17 	ldw	r3,-16(fp)
  4145b0:	00bfff84 	movi	r2,-2
  4145b4:	1884703a 	and	r2,r3,r2
  4145b8:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4145bc:	e0bffb17 	ldw	r2,-20(fp)
  4145c0:	1080004c 	andi	r2,r2,1
  4145c4:	e0fffc17 	ldw	r3,-16(fp)
  4145c8:	1884b03a 	or	r2,r3,r2
  4145cc:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  4145d0:	e0bffc17 	ldw	r2,-16(fp)
  4145d4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  4145d8:	0005883a 	mov	r2,zero
  4145dc:	00001006 	br	414620 <OSTaskResume+0x2e8>
  4145e0:	e0bff017 	ldw	r2,-64(fp)
  4145e4:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4145e8:	0005303a 	rdctl	r2,status
  4145ec:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4145f0:	e0fffe17 	ldw	r3,-8(fp)
  4145f4:	00bfff84 	movi	r2,-2
  4145f8:	1884703a 	and	r2,r3,r2
  4145fc:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414600:	e0bffd17 	ldw	r2,-12(fp)
  414604:	1080004c 	andi	r2,r2,1
  414608:	e0fffe17 	ldw	r3,-8(fp)
  41460c:	1884b03a 	or	r2,r3,r2
  414610:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  414614:	e0bffe17 	ldw	r2,-8(fp)
  414618:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  41461c:	00801104 	movi	r2,68
}
  414620:	e037883a 	mov	sp,fp
  414624:	dfc00117 	ldw	ra,4(sp)
  414628:	df000017 	ldw	fp,0(sp)
  41462c:	dec00204 	addi	sp,sp,8
  414630:	f800283a 	ret

00414634 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  414634:	deffef04 	addi	sp,sp,-68
  414638:	df001015 	stw	fp,64(sp)
  41463c:	df001004 	addi	fp,sp,64
  414640:	2005883a 	mov	r2,r4
  414644:	e17fff15 	stw	r5,-4(fp)
  414648:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  41464c:	e03ff215 	stw	zero,-56(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  414650:	e0bffe03 	ldbu	r2,-8(fp)
  414654:	10800570 	cmpltui	r2,r2,21
  414658:	1000051e 	bne	r2,zero,414670 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  41465c:	e0bffe03 	ldbu	r2,-8(fp)
  414660:	10803fe0 	cmpeqi	r2,r2,255
  414664:	1000021e 	bne	r2,zero,414670 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  414668:	00800a84 	movi	r2,42
  41466c:	00008e06 	br	4148a8 <OSTaskStkChk+0x274>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  414670:	e0bfff17 	ldw	r2,-4(fp)
  414674:	1000021e 	bne	r2,zero,414680 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
  414678:	00800244 	movi	r2,9
  41467c:	00008a06 	br	4148a8 <OSTaskStkChk+0x274>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  414680:	e0bfff17 	ldw	r2,-4(fp)
  414684:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  414688:	e0bfff17 	ldw	r2,-4(fp)
  41468c:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  414690:	0005303a 	rdctl	r2,status
  414694:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  414698:	e0fff517 	ldw	r3,-44(fp)
  41469c:	00bfff84 	movi	r2,-2
  4146a0:	1884703a 	and	r2,r3,r2
  4146a4:	1001703a 	wrctl	status,r2
  
  return context;
  4146a8:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
  4146ac:	e0bff215 	stw	r2,-56(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  4146b0:	e0bffe03 	ldbu	r2,-8(fp)
  4146b4:	10803fd8 	cmpnei	r2,r2,255
  4146b8:	1000051e 	bne	r2,zero,4146d0 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
  4146bc:	008010b4 	movhi	r2,66
  4146c0:	10b59e04 	addi	r2,r2,-10632
  4146c4:	10800017 	ldw	r2,0(r2)
  4146c8:	10800c83 	ldbu	r2,50(r2)
  4146cc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  4146d0:	e0bffe03 	ldbu	r2,-8(fp)
  4146d4:	00c010b4 	movhi	r3,66
  4146d8:	18c26f04 	addi	r3,r3,2492
  4146dc:	1085883a 	add	r2,r2,r2
  4146e0:	1085883a 	add	r2,r2,r2
  4146e4:	1885883a 	add	r2,r3,r2
  4146e8:	10800017 	ldw	r2,0(r2)
  4146ec:	e0bff315 	stw	r2,-52(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  4146f0:	e0bff317 	ldw	r2,-52(fp)
  4146f4:	1000111e 	bne	r2,zero,41473c <OSTaskStkChk+0x108>
  4146f8:	e0bff217 	ldw	r2,-56(fp)
  4146fc:	e0bff615 	stw	r2,-40(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414700:	0005303a 	rdctl	r2,status
  414704:	e0bff715 	stw	r2,-36(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414708:	e0fff717 	ldw	r3,-36(fp)
  41470c:	00bfff84 	movi	r2,-2
  414710:	1884703a 	and	r2,r3,r2
  414714:	e0bff715 	stw	r2,-36(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414718:	e0bff617 	ldw	r2,-40(fp)
  41471c:	1080004c 	andi	r2,r2,1
  414720:	e0fff717 	ldw	r3,-36(fp)
  414724:	1884b03a 	or	r2,r3,r2
  414728:	e0bff715 	stw	r2,-36(fp)
  
  NIOS2_WRITE_STATUS (status);
  41472c:	e0bff717 	ldw	r2,-36(fp)
  414730:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  414734:	008010c4 	movi	r2,67
  414738:	00005b06 	br	4148a8 <OSTaskStkChk+0x274>
    }
    if (ptcb == OS_TCB_RESERVED) {
  41473c:	e0bff317 	ldw	r2,-52(fp)
  414740:	10800058 	cmpnei	r2,r2,1
  414744:	1000111e 	bne	r2,zero,41478c <OSTaskStkChk+0x158>
  414748:	e0bff217 	ldw	r2,-56(fp)
  41474c:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414750:	0005303a 	rdctl	r2,status
  414754:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414758:	e0fff917 	ldw	r3,-28(fp)
  41475c:	00bfff84 	movi	r2,-2
  414760:	1884703a 	and	r2,r3,r2
  414764:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414768:	e0bff817 	ldw	r2,-32(fp)
  41476c:	1080004c 	andi	r2,r2,1
  414770:	e0fff917 	ldw	r3,-28(fp)
  414774:	1884b03a 	or	r2,r3,r2
  414778:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  41477c:	e0bff917 	ldw	r2,-28(fp)
  414780:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  414784:	008010c4 	movi	r2,67
  414788:	00004706 	br	4148a8 <OSTaskStkChk+0x274>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  41478c:	e0bff317 	ldw	r2,-52(fp)
  414790:	1080040b 	ldhu	r2,16(r2)
  414794:	10bfffcc 	andi	r2,r2,65535
  414798:	1080004c 	andi	r2,r2,1
  41479c:	1000111e 	bne	r2,zero,4147e4 <OSTaskStkChk+0x1b0>
  4147a0:	e0bff217 	ldw	r2,-56(fp)
  4147a4:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4147a8:	0005303a 	rdctl	r2,status
  4147ac:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4147b0:	e0fffb17 	ldw	r3,-20(fp)
  4147b4:	00bfff84 	movi	r2,-2
  4147b8:	1884703a 	and	r2,r3,r2
  4147bc:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4147c0:	e0bffa17 	ldw	r2,-24(fp)
  4147c4:	1080004c 	andi	r2,r2,1
  4147c8:	e0fffb17 	ldw	r3,-20(fp)
  4147cc:	1884b03a 	or	r2,r3,r2
  4147d0:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  4147d4:	e0bffb17 	ldw	r2,-20(fp)
  4147d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  4147dc:	00801144 	movi	r2,69
  4147e0:	00003106 	br	4148a8 <OSTaskStkChk+0x274>
    }
    nfree = 0;
  4147e4:	e03ff115 	stw	zero,-60(fp)
    size  = ptcb->OSTCBStkSize;
  4147e8:	e0bff317 	ldw	r2,-52(fp)
  4147ec:	10800317 	ldw	r2,12(r2)
  4147f0:	e0bff415 	stw	r2,-48(fp)
    pchk  = ptcb->OSTCBStkBottom;
  4147f4:	e0bff317 	ldw	r2,-52(fp)
  4147f8:	10800217 	ldw	r2,8(r2)
  4147fc:	e0bff015 	stw	r2,-64(fp)
  414800:	e0bff217 	ldw	r2,-56(fp)
  414804:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414808:	0005303a 	rdctl	r2,status
  41480c:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414810:	e0fffd17 	ldw	r3,-12(fp)
  414814:	00bfff84 	movi	r2,-2
  414818:	1884703a 	and	r2,r3,r2
  41481c:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414820:	e0bffc17 	ldw	r2,-16(fp)
  414824:	1080004c 	andi	r2,r2,1
  414828:	e0fffd17 	ldw	r3,-12(fp)
  41482c:	1884b03a 	or	r2,r3,r2
  414830:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  414834:	e0bffd17 	ldw	r2,-12(fp)
  414838:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  41483c:	00000306 	br	41484c <OSTaskStkChk+0x218>
        nfree++;
  414840:	e0bff117 	ldw	r2,-60(fp)
  414844:	10800044 	addi	r2,r2,1
  414848:	e0bff115 	stw	r2,-60(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  41484c:	e0bff017 	ldw	r2,-64(fp)
  414850:	10800017 	ldw	r2,0(r2)
  414854:	1005003a 	cmpeq	r2,r2,zero
  414858:	e0fff017 	ldw	r3,-64(fp)
  41485c:	18c00104 	addi	r3,r3,4
  414860:	e0fff015 	stw	r3,-64(fp)
  414864:	10803fcc 	andi	r2,r2,255
  414868:	103ff51e 	bne	r2,zero,414840 <OSTaskStkChk+0x20c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  41486c:	e0bff117 	ldw	r2,-60(fp)
  414870:	1085883a 	add	r2,r2,r2
  414874:	1085883a 	add	r2,r2,r2
  414878:	1007883a 	mov	r3,r2
  41487c:	e0bfff17 	ldw	r2,-4(fp)
  414880:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  414884:	e0fff417 	ldw	r3,-48(fp)
  414888:	e0bff117 	ldw	r2,-60(fp)
  41488c:	1885c83a 	sub	r2,r3,r2
  414890:	1085883a 	add	r2,r2,r2
  414894:	1085883a 	add	r2,r2,r2
  414898:	1007883a 	mov	r3,r2
  41489c:	e0bfff17 	ldw	r2,-4(fp)
  4148a0:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  4148a4:	0005883a 	mov	r2,zero
}
  4148a8:	e037883a 	mov	sp,fp
  4148ac:	df000017 	ldw	fp,0(sp)
  4148b0:	dec00104 	addi	sp,sp,4
  4148b4:	f800283a 	ret

004148b8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  4148b8:	defff204 	addi	sp,sp,-56
  4148bc:	dfc00d15 	stw	ra,52(sp)
  4148c0:	df000c15 	stw	fp,48(sp)
  4148c4:	df000c04 	addi	fp,sp,48
  4148c8:	2005883a 	mov	r2,r4
  4148cc:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  4148d0:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  4148d4:	e0bfff03 	ldbu	r2,-4(fp)
  4148d8:	10800518 	cmpnei	r2,r2,20
  4148dc:	1000021e 	bne	r2,zero,4148e8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  4148e0:	008011c4 	movi	r2,71
  4148e4:	00009406 	br	414b38 <OSTaskSuspend+0x280>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  4148e8:	e0bfff03 	ldbu	r2,-4(fp)
  4148ec:	10800530 	cmpltui	r2,r2,20
  4148f0:	1000051e 	bne	r2,zero,414908 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
  4148f4:	e0bfff03 	ldbu	r2,-4(fp)
  4148f8:	10803fe0 	cmpeqi	r2,r2,255
  4148fc:	1000021e 	bne	r2,zero,414908 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
  414900:	00800a84 	movi	r2,42
  414904:	00008c06 	br	414b38 <OSTaskSuspend+0x280>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  414908:	0005303a 	rdctl	r2,status
  41490c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  414910:	e0fff817 	ldw	r3,-32(fp)
  414914:	00bfff84 	movi	r2,-2
  414918:	1884703a 	and	r2,r3,r2
  41491c:	1001703a 	wrctl	status,r2
  
  return context;
  414920:	e0bff817 	ldw	r2,-32(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  414924:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  414928:	e0bfff03 	ldbu	r2,-4(fp)
  41492c:	10803fd8 	cmpnei	r2,r2,255
  414930:	1000081e 	bne	r2,zero,414954 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
  414934:	008010b4 	movhi	r2,66
  414938:	10b59e04 	addi	r2,r2,-10632
  41493c:	10800017 	ldw	r2,0(r2)
  414940:	10800c83 	ldbu	r2,50(r2)
  414944:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
  414948:	00800044 	movi	r2,1
  41494c:	e0bff405 	stb	r2,-48(fp)
  414950:	00000b06 	br	414980 <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  414954:	008010b4 	movhi	r2,66
  414958:	10b59e04 	addi	r2,r2,-10632
  41495c:	10800017 	ldw	r2,0(r2)
  414960:	10800c83 	ldbu	r2,50(r2)
  414964:	10c03fcc 	andi	r3,r2,255
  414968:	e0bfff03 	ldbu	r2,-4(fp)
  41496c:	1880031e 	bne	r3,r2,41497c <OSTaskSuspend+0xc4>
        self = OS_TRUE;
  414970:	00800044 	movi	r2,1
  414974:	e0bff405 	stb	r2,-48(fp)
  414978:	00000106 	br	414980 <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  41497c:	e03ff405 	stb	zero,-48(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  414980:	e0bfff03 	ldbu	r2,-4(fp)
  414984:	00c010b4 	movhi	r3,66
  414988:	18c26f04 	addi	r3,r3,2492
  41498c:	1085883a 	add	r2,r2,r2
  414990:	1085883a 	add	r2,r2,r2
  414994:	1885883a 	add	r2,r3,r2
  414998:	10800017 	ldw	r2,0(r2)
  41499c:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  4149a0:	e0bff617 	ldw	r2,-40(fp)
  4149a4:	1000111e 	bne	r2,zero,4149ec <OSTaskSuspend+0x134>
  4149a8:	e0bff517 	ldw	r2,-44(fp)
  4149ac:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4149b0:	0005303a 	rdctl	r2,status
  4149b4:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4149b8:	e0fffa17 	ldw	r3,-24(fp)
  4149bc:	00bfff84 	movi	r2,-2
  4149c0:	1884703a 	and	r2,r3,r2
  4149c4:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4149c8:	e0bff917 	ldw	r2,-28(fp)
  4149cc:	1080004c 	andi	r2,r2,1
  4149d0:	e0fffa17 	ldw	r3,-24(fp)
  4149d4:	1884b03a 	or	r2,r3,r2
  4149d8:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  4149dc:	e0bffa17 	ldw	r2,-24(fp)
  4149e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  4149e4:	00801204 	movi	r2,72
  4149e8:	00005306 	br	414b38 <OSTaskSuspend+0x280>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  4149ec:	e0bff617 	ldw	r2,-40(fp)
  4149f0:	10800058 	cmpnei	r2,r2,1
  4149f4:	1000111e 	bne	r2,zero,414a3c <OSTaskSuspend+0x184>
  4149f8:	e0bff517 	ldw	r2,-44(fp)
  4149fc:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414a00:	0005303a 	rdctl	r2,status
  414a04:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414a08:	e0fffc17 	ldw	r3,-16(fp)
  414a0c:	00bfff84 	movi	r2,-2
  414a10:	1884703a 	and	r2,r3,r2
  414a14:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414a18:	e0bffb17 	ldw	r2,-20(fp)
  414a1c:	1080004c 	andi	r2,r2,1
  414a20:	e0fffc17 	ldw	r3,-16(fp)
  414a24:	1884b03a 	or	r2,r3,r2
  414a28:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  414a2c:	e0bffc17 	ldw	r2,-16(fp)
  414a30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  414a34:	008010c4 	movi	r2,67
  414a38:	00003f06 	br	414b38 <OSTaskSuspend+0x280>
    }
    y            = ptcb->OSTCBY;
  414a3c:	e0bff617 	ldw	r2,-40(fp)
  414a40:	10800d03 	ldbu	r2,52(r2)
  414a44:	e0bff705 	stb	r2,-36(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  414a48:	e0bff703 	ldbu	r2,-36(fp)
  414a4c:	e0fff703 	ldbu	r3,-36(fp)
  414a50:	010010b4 	movhi	r4,66
  414a54:	21359b44 	addi	r4,r4,-10643
  414a58:	20c7883a 	add	r3,r4,r3
  414a5c:	18c00003 	ldbu	r3,0(r3)
  414a60:	1809883a 	mov	r4,r3
  414a64:	e0fff617 	ldw	r3,-40(fp)
  414a68:	18c00d43 	ldbu	r3,53(r3)
  414a6c:	00c6303a 	nor	r3,zero,r3
  414a70:	20c6703a 	and	r3,r4,r3
  414a74:	010010b4 	movhi	r4,66
  414a78:	21359b44 	addi	r4,r4,-10643
  414a7c:	2085883a 	add	r2,r4,r2
  414a80:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  414a84:	e0bff703 	ldbu	r2,-36(fp)
  414a88:	00c010b4 	movhi	r3,66
  414a8c:	18f59b44 	addi	r3,r3,-10643
  414a90:	1885883a 	add	r2,r3,r2
  414a94:	10800003 	ldbu	r2,0(r2)
  414a98:	10803fcc 	andi	r2,r2,255
  414a9c:	10000c1e 	bne	r2,zero,414ad0 <OSTaskSuspend+0x218>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  414aa0:	e0bff617 	ldw	r2,-40(fp)
  414aa4:	10800d83 	ldbu	r2,54(r2)
  414aa8:	0084303a 	nor	r2,zero,r2
  414aac:	1007883a 	mov	r3,r2
  414ab0:	008010b4 	movhi	r2,66
  414ab4:	10b59b04 	addi	r2,r2,-10644
  414ab8:	10800003 	ldbu	r2,0(r2)
  414abc:	1884703a 	and	r2,r3,r2
  414ac0:	1007883a 	mov	r3,r2
  414ac4:	008010b4 	movhi	r2,66
  414ac8:	10b59b04 	addi	r2,r2,-10644
  414acc:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  414ad0:	e0bff617 	ldw	r2,-40(fp)
  414ad4:	10800c03 	ldbu	r2,48(r2)
  414ad8:	10800214 	ori	r2,r2,8
  414adc:	1007883a 	mov	r3,r2
  414ae0:	e0bff617 	ldw	r2,-40(fp)
  414ae4:	10c00c05 	stb	r3,48(r2)
  414ae8:	e0bff517 	ldw	r2,-44(fp)
  414aec:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414af0:	0005303a 	rdctl	r2,status
  414af4:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414af8:	e0fffe17 	ldw	r3,-8(fp)
  414afc:	00bfff84 	movi	r2,-2
  414b00:	1884703a 	and	r2,r3,r2
  414b04:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414b08:	e0bffd17 	ldw	r2,-12(fp)
  414b0c:	1080004c 	andi	r2,r2,1
  414b10:	e0fffe17 	ldw	r3,-8(fp)
  414b14:	1884b03a 	or	r2,r3,r2
  414b18:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  414b1c:	e0bffe17 	ldw	r2,-8(fp)
  414b20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  414b24:	e0bff403 	ldbu	r2,-48(fp)
  414b28:	10800058 	cmpnei	r2,r2,1
  414b2c:	1000011e 	bne	r2,zero,414b34 <OSTaskSuspend+0x27c>
        OS_Sched();                                             /* Find new highest priority task      */
  414b30:	040d8640 	call	40d864 <OS_Sched>
    }
    return (OS_ERR_NONE);
  414b34:	0005883a 	mov	r2,zero
}
  414b38:	e037883a 	mov	sp,fp
  414b3c:	dfc00117 	ldw	ra,4(sp)
  414b40:	df000017 	ldw	fp,0(sp)
  414b44:	dec00204 	addi	sp,sp,8
  414b48:	f800283a 	ret

00414b4c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  414b4c:	defff304 	addi	sp,sp,-52
  414b50:	dfc00c15 	stw	ra,48(sp)
  414b54:	df000b15 	stw	fp,44(sp)
  414b58:	df000b04 	addi	fp,sp,44
  414b5c:	2005883a 	mov	r2,r4
  414b60:	e17fff15 	stw	r5,-4(fp)
  414b64:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  414b68:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  414b6c:	e0bffe03 	ldbu	r2,-8(fp)
  414b70:	10800570 	cmpltui	r2,r2,21
  414b74:	1000051e 	bne	r2,zero,414b8c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  414b78:	e0bffe03 	ldbu	r2,-8(fp)
  414b7c:	10803fe0 	cmpeqi	r2,r2,255
  414b80:	1000021e 	bne	r2,zero,414b8c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  414b84:	00800a84 	movi	r2,42
  414b88:	00005706 	br	414ce8 <OSTaskQuery+0x19c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  414b8c:	e0bfff17 	ldw	r2,-4(fp)
  414b90:	1000021e 	bne	r2,zero,414b9c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
  414b94:	00800244 	movi	r2,9
  414b98:	00005306 	br	414ce8 <OSTaskQuery+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  414b9c:	0005303a 	rdctl	r2,status
  414ba0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  414ba4:	e0fff717 	ldw	r3,-36(fp)
  414ba8:	00bfff84 	movi	r2,-2
  414bac:	1884703a 	and	r2,r3,r2
  414bb0:	1001703a 	wrctl	status,r2
  
  return context;
  414bb4:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  414bb8:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  414bbc:	e0bffe03 	ldbu	r2,-8(fp)
  414bc0:	10803fd8 	cmpnei	r2,r2,255
  414bc4:	1000051e 	bne	r2,zero,414bdc <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
  414bc8:	008010b4 	movhi	r2,66
  414bcc:	10b59e04 	addi	r2,r2,-10632
  414bd0:	10800017 	ldw	r2,0(r2)
  414bd4:	10800c83 	ldbu	r2,50(r2)
  414bd8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  414bdc:	e0bffe03 	ldbu	r2,-8(fp)
  414be0:	00c010b4 	movhi	r3,66
  414be4:	18c26f04 	addi	r3,r3,2492
  414be8:	1085883a 	add	r2,r2,r2
  414bec:	1085883a 	add	r2,r2,r2
  414bf0:	1885883a 	add	r2,r3,r2
  414bf4:	10800017 	ldw	r2,0(r2)
  414bf8:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  414bfc:	e0bff617 	ldw	r2,-40(fp)
  414c00:	1000111e 	bne	r2,zero,414c48 <OSTaskQuery+0xfc>
  414c04:	e0bff517 	ldw	r2,-44(fp)
  414c08:	e0bff815 	stw	r2,-32(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414c0c:	0005303a 	rdctl	r2,status
  414c10:	e0bff915 	stw	r2,-28(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414c14:	e0fff917 	ldw	r3,-28(fp)
  414c18:	00bfff84 	movi	r2,-2
  414c1c:	1884703a 	and	r2,r3,r2
  414c20:	e0bff915 	stw	r2,-28(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414c24:	e0bff817 	ldw	r2,-32(fp)
  414c28:	1080004c 	andi	r2,r2,1
  414c2c:	e0fff917 	ldw	r3,-28(fp)
  414c30:	1884b03a 	or	r2,r3,r2
  414c34:	e0bff915 	stw	r2,-28(fp)
  
  NIOS2_WRITE_STATUS (status);
  414c38:	e0bff917 	ldw	r2,-28(fp)
  414c3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  414c40:	00800a44 	movi	r2,41
  414c44:	00002806 	br	414ce8 <OSTaskQuery+0x19c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  414c48:	e0bff617 	ldw	r2,-40(fp)
  414c4c:	10800058 	cmpnei	r2,r2,1
  414c50:	1000111e 	bne	r2,zero,414c98 <OSTaskQuery+0x14c>
  414c54:	e0bff517 	ldw	r2,-44(fp)
  414c58:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414c5c:	0005303a 	rdctl	r2,status
  414c60:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414c64:	e0fffb17 	ldw	r3,-20(fp)
  414c68:	00bfff84 	movi	r2,-2
  414c6c:	1884703a 	and	r2,r3,r2
  414c70:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414c74:	e0bffa17 	ldw	r2,-24(fp)
  414c78:	1080004c 	andi	r2,r2,1
  414c7c:	e0fffb17 	ldw	r3,-20(fp)
  414c80:	1884b03a 	or	r2,r3,r2
  414c84:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  414c88:	e0bffb17 	ldw	r2,-20(fp)
  414c8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  414c90:	008010c4 	movi	r2,67
  414c94:	00001406 	br	414ce8 <OSTaskQuery+0x19c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  414c98:	e13fff17 	ldw	r4,-4(fp)
  414c9c:	e17ff617 	ldw	r5,-40(fp)
  414ca0:	01801b04 	movi	r6,108
  414ca4:	040d7f80 	call	40d7f8 <OS_MemCopy>
  414ca8:	e0bff517 	ldw	r2,-44(fp)
  414cac:	e0bffc15 	stw	r2,-16(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414cb0:	0005303a 	rdctl	r2,status
  414cb4:	e0bffd15 	stw	r2,-12(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414cb8:	e0fffd17 	ldw	r3,-12(fp)
  414cbc:	00bfff84 	movi	r2,-2
  414cc0:	1884703a 	and	r2,r3,r2
  414cc4:	e0bffd15 	stw	r2,-12(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414cc8:	e0bffc17 	ldw	r2,-16(fp)
  414ccc:	1080004c 	andi	r2,r2,1
  414cd0:	e0fffd17 	ldw	r3,-12(fp)
  414cd4:	1884b03a 	or	r2,r3,r2
  414cd8:	e0bffd15 	stw	r2,-12(fp)
  
  NIOS2_WRITE_STATUS (status);
  414cdc:	e0bffd17 	ldw	r2,-12(fp)
  414ce0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  414ce4:	0005883a 	mov	r2,zero
}
  414ce8:	e037883a 	mov	sp,fp
  414cec:	dfc00117 	ldw	ra,4(sp)
  414cf0:	df000017 	ldw	fp,0(sp)
  414cf4:	dec00204 	addi	sp,sp,8
  414cf8:	f800283a 	ret

00414cfc <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  414cfc:	defffc04 	addi	sp,sp,-16
  414d00:	df000315 	stw	fp,12(sp)
  414d04:	df000304 	addi	fp,sp,12
  414d08:	e13ffd15 	stw	r4,-12(fp)
  414d0c:	e17ffe15 	stw	r5,-8(fp)
  414d10:	3005883a 	mov	r2,r6
  414d14:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  414d18:	e0bfff0b 	ldhu	r2,-4(fp)
  414d1c:	1080004c 	andi	r2,r2,1
  414d20:	10000e26 	beq	r2,zero,414d5c <OS_TaskStkClr+0x60>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  414d24:	e0bfff0b 	ldhu	r2,-4(fp)
  414d28:	1080008c 	andi	r2,r2,2
  414d2c:	10000b26 	beq	r2,zero,414d5c <OS_TaskStkClr+0x60>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  414d30:	00000806 	br	414d54 <OS_TaskStkClr+0x58>
                size--;
  414d34:	e0bffe17 	ldw	r2,-8(fp)
  414d38:	10bfffc4 	addi	r2,r2,-1
  414d3c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  414d40:	e0bffd17 	ldw	r2,-12(fp)
  414d44:	10000015 	stw	zero,0(r2)
  414d48:	e0bffd17 	ldw	r2,-12(fp)
  414d4c:	10800104 	addi	r2,r2,4
  414d50:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  414d54:	e0bffe17 	ldw	r2,-8(fp)
  414d58:	103ff61e 	bne	r2,zero,414d34 <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  414d5c:	e037883a 	mov	sp,fp
  414d60:	df000017 	ldw	fp,0(sp)
  414d64:	dec00104 	addi	sp,sp,4
  414d68:	f800283a 	ret

00414d6c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  414d6c:	defff804 	addi	sp,sp,-32
  414d70:	dfc00715 	stw	ra,28(sp)
  414d74:	df000615 	stw	fp,24(sp)
  414d78:	df000604 	addi	fp,sp,24
  414d7c:	2005883a 	mov	r2,r4
  414d80:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  414d84:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  414d88:	008010b4 	movhi	r2,66
  414d8c:	10b59d04 	addi	r2,r2,-10636
  414d90:	10800003 	ldbu	r2,0(r2)
  414d94:	10803fcc 	andi	r2,r2,255
  414d98:	10004b1e 	bne	r2,zero,414ec8 <OSTimeDly+0x15c>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  414d9c:	e0bfff0b 	ldhu	r2,-4(fp)
  414da0:	10004a26 	beq	r2,zero,414ecc <OSTimeDly+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  414da4:	0005303a 	rdctl	r2,status
  414da8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  414dac:	e0fffc17 	ldw	r3,-16(fp)
  414db0:	00bfff84 	movi	r2,-2
  414db4:	1884703a 	and	r2,r3,r2
  414db8:	1001703a 	wrctl	status,r2
  
  return context;
  414dbc:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  414dc0:	e0bffa15 	stw	r2,-24(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  414dc4:	008010b4 	movhi	r2,66
  414dc8:	10b59e04 	addi	r2,r2,-10632
  414dcc:	10800017 	ldw	r2,0(r2)
  414dd0:	10800d03 	ldbu	r2,52(r2)
  414dd4:	e0bffb05 	stb	r2,-20(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  414dd8:	e0bffb03 	ldbu	r2,-20(fp)
  414ddc:	e0fffb03 	ldbu	r3,-20(fp)
  414de0:	010010b4 	movhi	r4,66
  414de4:	21359b44 	addi	r4,r4,-10643
  414de8:	20c7883a 	add	r3,r4,r3
  414dec:	18c00003 	ldbu	r3,0(r3)
  414df0:	1809883a 	mov	r4,r3
  414df4:	00c010b4 	movhi	r3,66
  414df8:	18f59e04 	addi	r3,r3,-10632
  414dfc:	18c00017 	ldw	r3,0(r3)
  414e00:	18c00d43 	ldbu	r3,53(r3)
  414e04:	00c6303a 	nor	r3,zero,r3
  414e08:	20c6703a 	and	r3,r4,r3
  414e0c:	010010b4 	movhi	r4,66
  414e10:	21359b44 	addi	r4,r4,-10643
  414e14:	2085883a 	add	r2,r4,r2
  414e18:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  414e1c:	e0bffb03 	ldbu	r2,-20(fp)
  414e20:	00c010b4 	movhi	r3,66
  414e24:	18f59b44 	addi	r3,r3,-10643
  414e28:	1885883a 	add	r2,r3,r2
  414e2c:	10800003 	ldbu	r2,0(r2)
  414e30:	10803fcc 	andi	r2,r2,255
  414e34:	10000e1e 	bne	r2,zero,414e70 <OSTimeDly+0x104>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  414e38:	008010b4 	movhi	r2,66
  414e3c:	10b59e04 	addi	r2,r2,-10632
  414e40:	10800017 	ldw	r2,0(r2)
  414e44:	10800d83 	ldbu	r2,54(r2)
  414e48:	0084303a 	nor	r2,zero,r2
  414e4c:	1007883a 	mov	r3,r2
  414e50:	008010b4 	movhi	r2,66
  414e54:	10b59b04 	addi	r2,r2,-10644
  414e58:	10800003 	ldbu	r2,0(r2)
  414e5c:	1884703a 	and	r2,r3,r2
  414e60:	1007883a 	mov	r3,r2
  414e64:	008010b4 	movhi	r2,66
  414e68:	10b59b04 	addi	r2,r2,-10644
  414e6c:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  414e70:	008010b4 	movhi	r2,66
  414e74:	10b59e04 	addi	r2,r2,-10632
  414e78:	10800017 	ldw	r2,0(r2)
  414e7c:	e0ffff0b 	ldhu	r3,-4(fp)
  414e80:	10c00b8d 	sth	r3,46(r2)
  414e84:	e0bffa17 	ldw	r2,-24(fp)
  414e88:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  414e8c:	0005303a 	rdctl	r2,status
  414e90:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  414e94:	e0fffe17 	ldw	r3,-8(fp)
  414e98:	00bfff84 	movi	r2,-2
  414e9c:	1884703a 	and	r2,r3,r2
  414ea0:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  414ea4:	e0bffd17 	ldw	r2,-12(fp)
  414ea8:	1080004c 	andi	r2,r2,1
  414eac:	e0fffe17 	ldw	r3,-8(fp)
  414eb0:	1884b03a 	or	r2,r3,r2
  414eb4:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  414eb8:	e0bffe17 	ldw	r2,-8(fp)
  414ebc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  414ec0:	040d8640 	call	40d864 <OS_Sched>
  414ec4:	00000106 	br	414ecc <OSTimeDly+0x160>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
  414ec8:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
  414ecc:	e037883a 	mov	sp,fp
  414ed0:	dfc00117 	ldw	ra,4(sp)
  414ed4:	df000017 	ldw	fp,0(sp)
  414ed8:	dec00204 	addi	sp,sp,8
  414edc:	f800283a 	ret

00414ee0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  414ee0:	defff604 	addi	sp,sp,-40
  414ee4:	dfc00915 	stw	ra,36(sp)
  414ee8:	df000815 	stw	fp,32(sp)
  414eec:	dc400715 	stw	r17,28(sp)
  414ef0:	dc000615 	stw	r16,24(sp)
  414ef4:	df000604 	addi	fp,sp,24
  414ef8:	2011883a 	mov	r8,r4
  414efc:	2809883a 	mov	r4,r5
  414f00:	3007883a 	mov	r3,r6
  414f04:	3805883a 	mov	r2,r7
  414f08:	e23ffc05 	stb	r8,-16(fp)
  414f0c:	e13ffd05 	stb	r4,-12(fp)
  414f10:	e0fffe05 	stb	r3,-8(fp)
  414f14:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  414f18:	008010b4 	movhi	r2,66
  414f1c:	10b59d04 	addi	r2,r2,-10636
  414f20:	10800003 	ldbu	r2,0(r2)
  414f24:	10803fcc 	andi	r2,r2,255
  414f28:	10000226 	beq	r2,zero,414f34 <OSTimeDlyHMSM+0x54>
        return (OS_ERR_TIME_DLY_ISR);
  414f2c:	00801544 	movi	r2,85
  414f30:	00007506 	br	415108 <OSTimeDlyHMSM+0x228>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  414f34:	e0bffc03 	ldbu	r2,-16(fp)
  414f38:	1000081e 	bne	r2,zero,414f5c <OSTimeDlyHMSM+0x7c>
        if (minutes == 0) {
  414f3c:	e0bffd03 	ldbu	r2,-12(fp)
  414f40:	1000061e 	bne	r2,zero,414f5c <OSTimeDlyHMSM+0x7c>
            if (seconds == 0) {
  414f44:	e0bffe03 	ldbu	r2,-8(fp)
  414f48:	1000041e 	bne	r2,zero,414f5c <OSTimeDlyHMSM+0x7c>
                if (ms == 0) {
  414f4c:	e0bfff0b 	ldhu	r2,-4(fp)
  414f50:	1000021e 	bne	r2,zero,414f5c <OSTimeDlyHMSM+0x7c>
                    return (OS_ERR_TIME_ZERO_DLY);
  414f54:	00801504 	movi	r2,84
  414f58:	00006b06 	br	415108 <OSTimeDlyHMSM+0x228>
                }
            }
        }
    }
    if (minutes > 59) {
  414f5c:	e0bffd03 	ldbu	r2,-12(fp)
  414f60:	10800f30 	cmpltui	r2,r2,60
  414f64:	1000021e 	bne	r2,zero,414f70 <OSTimeDlyHMSM+0x90>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  414f68:	00801444 	movi	r2,81
  414f6c:	00006606 	br	415108 <OSTimeDlyHMSM+0x228>
    }
    if (seconds > 59) {
  414f70:	e0bffe03 	ldbu	r2,-8(fp)
  414f74:	10800f30 	cmpltui	r2,r2,60
  414f78:	1000021e 	bne	r2,zero,414f84 <OSTimeDlyHMSM+0xa4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  414f7c:	00801484 	movi	r2,82
  414f80:	00006106 	br	415108 <OSTimeDlyHMSM+0x228>
    }
    if (ms > 999) {
  414f84:	e0bfff0b 	ldhu	r2,-4(fp)
  414f88:	1080fa30 	cmpltui	r2,r2,1000
  414f8c:	1000021e 	bne	r2,zero,414f98 <OSTimeDlyHMSM+0xb8>
        return (OS_ERR_TIME_INVALID_MS);
  414f90:	008014c4 	movi	r2,83
  414f94:	00005c06 	br	415108 <OSTimeDlyHMSM+0x228>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  414f98:	e0bffc03 	ldbu	r2,-16(fp)
  414f9c:	1009883a 	mov	r4,r2
  414fa0:	01438404 	movi	r5,3600
  414fa4:	0400e700 	call	400e70 <__mulsi3>
  414fa8:	1021883a 	mov	r16,r2
  414fac:	e0bffd03 	ldbu	r2,-12(fp)
  414fb0:	1009883a 	mov	r4,r2
  414fb4:	01400f04 	movi	r5,60
  414fb8:	0400e700 	call	400e70 <__mulsi3>
  414fbc:	8087883a 	add	r3,r16,r2
  414fc0:	e0bffe03 	ldbu	r2,-8(fp)
  414fc4:	1885883a 	add	r2,r3,r2
  414fc8:	1009883a 	mov	r4,r2
  414fcc:	0409f100 	call	409f10 <__floatunsidf>
  414fd0:	100b883a 	mov	r5,r2
  414fd4:	180d883a 	mov	r6,r3
  414fd8:	2809883a 	mov	r4,r5
  414fdc:	300b883a 	mov	r5,r6
  414fe0:	000d883a 	mov	r6,zero
  414fe4:	01d01674 	movhi	r7,16473
  414fe8:	04096f40 	call	4096f4 <__muldf3>
  414fec:	1009883a 	mov	r4,r2
  414ff0:	180b883a 	mov	r5,r3
  414ff4:	2021883a 	mov	r16,r4
  414ff8:	2823883a 	mov	r17,r5
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
  414ffc:	e0bfff0b 	ldhu	r2,-4(fp)
  415000:	1009883a 	mov	r4,r2
  415004:	0409f100 	call	409f10 <__floatunsidf>
  415008:	100b883a 	mov	r5,r2
  41500c:	180d883a 	mov	r6,r3
  415010:	2809883a 	mov	r4,r5
  415014:	300b883a 	mov	r5,r6
  415018:	000d883a 	mov	r6,zero
  41501c:	01d00534 	movhi	r7,16404
  415020:	04096400 	call	409640 <__adddf3>
  415024:	1009883a 	mov	r4,r2
  415028:	180b883a 	mov	r5,r3
  41502c:	2005883a 	mov	r2,r4
  415030:	2807883a 	mov	r3,r5
  415034:	1009883a 	mov	r4,r2
  415038:	180b883a 	mov	r5,r3
  41503c:	000d883a 	mov	r6,zero
  415040:	01d01674 	movhi	r7,16473
  415044:	04096f40 	call	4096f4 <__muldf3>
  415048:	1009883a 	mov	r4,r2
  41504c:	180b883a 	mov	r5,r3
  415050:	2005883a 	mov	r2,r4
  415054:	2807883a 	mov	r3,r5
  415058:	1009883a 	mov	r4,r2
  41505c:	180b883a 	mov	r5,r3
  415060:	000d883a 	mov	r6,zero
  415064:	01d023f4 	movhi	r7,16527
  415068:	39d00004 	addi	r7,r7,16384
  41506c:	04099d80 	call	4099d8 <__divdf3>
  415070:	1009883a 	mov	r4,r2
  415074:	180b883a 	mov	r5,r3
  415078:	2005883a 	mov	r2,r4
  41507c:	2807883a 	mov	r3,r5
  415080:	8009883a 	mov	r4,r16
  415084:	880b883a 	mov	r5,r17
  415088:	100d883a 	mov	r6,r2
  41508c:	180f883a 	mov	r7,r3
  415090:	04096400 	call	409640 <__adddf3>
  415094:	1009883a 	mov	r4,r2
  415098:	180b883a 	mov	r5,r3
  41509c:	2005883a 	mov	r2,r4
  4150a0:	2807883a 	mov	r3,r5
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  4150a4:	1009883a 	mov	r4,r2
  4150a8:	180b883a 	mov	r5,r3
  4150ac:	04195500 	call	419550 <__fixunsdfsi>
  4150b0:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  4150b4:	e0bffb17 	ldw	r2,-20(fp)
  4150b8:	1004d43a 	srli	r2,r2,16
  4150bc:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  4150c0:	e0bffb17 	ldw	r2,-20(fp)
  4150c4:	10bfffcc 	andi	r2,r2,65535
  4150c8:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
  4150cc:	e0bffb17 	ldw	r2,-20(fp)
  4150d0:	10bfffcc 	andi	r2,r2,65535
  4150d4:	1009883a 	mov	r4,r2
  4150d8:	0414d6c0 	call	414d6c <OSTimeDly>
    while (loops > 0) {
  4150dc:	00000706 	br	4150fc <OSTimeDlyHMSM+0x21c>
        OSTimeDly((INT16U)32768u);
  4150e0:	01200014 	movui	r4,32768
  4150e4:	0414d6c0 	call	414d6c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  4150e8:	01200014 	movui	r4,32768
  4150ec:	0414d6c0 	call	414d6c <OSTimeDly>
        loops--;
  4150f0:	e0bffa0b 	ldhu	r2,-24(fp)
  4150f4:	10bfffc4 	addi	r2,r2,-1
  4150f8:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  4150fc:	e0bffa0b 	ldhu	r2,-24(fp)
  415100:	103ff71e 	bne	r2,zero,4150e0 <OSTimeDlyHMSM+0x200>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  415104:	0005883a 	mov	r2,zero
}
  415108:	e037883a 	mov	sp,fp
  41510c:	dfc00317 	ldw	ra,12(sp)
  415110:	df000217 	ldw	fp,8(sp)
  415114:	dc400117 	ldw	r17,4(sp)
  415118:	dc000017 	ldw	r16,0(sp)
  41511c:	dec00404 	addi	sp,sp,16
  415120:	f800283a 	ret

00415124 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  415124:	defff004 	addi	sp,sp,-64
  415128:	dfc00f15 	stw	ra,60(sp)
  41512c:	df000e15 	stw	fp,56(sp)
  415130:	df000e04 	addi	fp,sp,56
  415134:	2005883a 	mov	r2,r4
  415138:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  41513c:	e03ff215 	stw	zero,-56(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  415140:	e0bfff03 	ldbu	r2,-4(fp)
  415144:	10800530 	cmpltui	r2,r2,20
  415148:	1000021e 	bne	r2,zero,415154 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  41514c:	00800a84 	movi	r2,42
  415150:	0000a106 	br	4153d8 <OSTimeDlyResume+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  415154:	0005303a 	rdctl	r2,status
  415158:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  41515c:	e0fff417 	ldw	r3,-48(fp)
  415160:	00bfff84 	movi	r2,-2
  415164:	1884703a 	and	r2,r3,r2
  415168:	1001703a 	wrctl	status,r2
  
  return context;
  41516c:	e0bff417 	ldw	r2,-48(fp)
    }
    OS_ENTER_CRITICAL();
  415170:	e0bff215 	stw	r2,-56(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  415174:	e0bfff03 	ldbu	r2,-4(fp)
  415178:	00c010b4 	movhi	r3,66
  41517c:	18c26f04 	addi	r3,r3,2492
  415180:	1085883a 	add	r2,r2,r2
  415184:	1085883a 	add	r2,r2,r2
  415188:	1885883a 	add	r2,r3,r2
  41518c:	10800017 	ldw	r2,0(r2)
  415190:	e0bff315 	stw	r2,-52(fp)
    if (ptcb == (OS_TCB *)0) {
  415194:	e0bff317 	ldw	r2,-52(fp)
  415198:	1000111e 	bne	r2,zero,4151e0 <OSTimeDlyResume+0xbc>
  41519c:	e0bff217 	ldw	r2,-56(fp)
  4151a0:	e0bff515 	stw	r2,-44(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4151a4:	0005303a 	rdctl	r2,status
  4151a8:	e0bff615 	stw	r2,-40(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4151ac:	e0fff617 	ldw	r3,-40(fp)
  4151b0:	00bfff84 	movi	r2,-2
  4151b4:	1884703a 	and	r2,r3,r2
  4151b8:	e0bff615 	stw	r2,-40(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4151bc:	e0bff517 	ldw	r2,-44(fp)
  4151c0:	1080004c 	andi	r2,r2,1
  4151c4:	e0fff617 	ldw	r3,-40(fp)
  4151c8:	1884b03a 	or	r2,r3,r2
  4151cc:	e0bff615 	stw	r2,-40(fp)
  
  NIOS2_WRITE_STATUS (status);
  4151d0:	e0bff617 	ldw	r2,-40(fp)
  4151d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  4151d8:	008010c4 	movi	r2,67
  4151dc:	00007e06 	br	4153d8 <OSTimeDlyResume+0x2b4>
    }
    if (ptcb == OS_TCB_RESERVED) {
  4151e0:	e0bff317 	ldw	r2,-52(fp)
  4151e4:	10800058 	cmpnei	r2,r2,1
  4151e8:	1000111e 	bne	r2,zero,415230 <OSTimeDlyResume+0x10c>
  4151ec:	e0bff217 	ldw	r2,-56(fp)
  4151f0:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4151f4:	0005303a 	rdctl	r2,status
  4151f8:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4151fc:	e0fff817 	ldw	r3,-32(fp)
  415200:	00bfff84 	movi	r2,-2
  415204:	1884703a 	and	r2,r3,r2
  415208:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  41520c:	e0bff717 	ldw	r2,-36(fp)
  415210:	1080004c 	andi	r2,r2,1
  415214:	e0fff817 	ldw	r3,-32(fp)
  415218:	1884b03a 	or	r2,r3,r2
  41521c:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  415220:	e0bff817 	ldw	r2,-32(fp)
  415224:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  415228:	008010c4 	movi	r2,67
  41522c:	00006a06 	br	4153d8 <OSTimeDlyResume+0x2b4>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  415230:	e0bff317 	ldw	r2,-52(fp)
  415234:	10800b8b 	ldhu	r2,46(r2)
  415238:	10bfffcc 	andi	r2,r2,65535
  41523c:	1000111e 	bne	r2,zero,415284 <OSTimeDlyResume+0x160>
  415240:	e0bff217 	ldw	r2,-56(fp)
  415244:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  415248:	0005303a 	rdctl	r2,status
  41524c:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  415250:	e0fffa17 	ldw	r3,-24(fp)
  415254:	00bfff84 	movi	r2,-2
  415258:	1884703a 	and	r2,r3,r2
  41525c:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  415260:	e0bff917 	ldw	r2,-28(fp)
  415264:	1080004c 	andi	r2,r2,1
  415268:	e0fffa17 	ldw	r3,-24(fp)
  41526c:	1884b03a 	or	r2,r3,r2
  415270:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  415274:	e0bffa17 	ldw	r2,-24(fp)
  415278:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  41527c:	00801404 	movi	r2,80
  415280:	00005506 	br	4153d8 <OSTimeDlyResume+0x2b4>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  415284:	e0bff317 	ldw	r2,-52(fp)
  415288:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  41528c:	e0bff317 	ldw	r2,-52(fp)
  415290:	10800c03 	ldbu	r2,48(r2)
  415294:	10803fcc 	andi	r2,r2,255
  415298:	10800dcc 	andi	r2,r2,55
  41529c:	10000b26 	beq	r2,zero,4152cc <OSTimeDlyResume+0x1a8>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  4152a0:	e0bff317 	ldw	r2,-52(fp)
  4152a4:	10c00c03 	ldbu	r3,48(r2)
  4152a8:	00bff204 	movi	r2,-56
  4152ac:	1884703a 	and	r2,r3,r2
  4152b0:	1007883a 	mov	r3,r2
  4152b4:	e0bff317 	ldw	r2,-52(fp)
  4152b8:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  4152bc:	e0bff317 	ldw	r2,-52(fp)
  4152c0:	00c00044 	movi	r3,1
  4152c4:	10c00c45 	stb	r3,49(r2)
  4152c8:	00000206 	br	4152d4 <OSTimeDlyResume+0x1b0>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  4152cc:	e0bff317 	ldw	r2,-52(fp)
  4152d0:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  4152d4:	e0bff317 	ldw	r2,-52(fp)
  4152d8:	10800c03 	ldbu	r2,48(r2)
  4152dc:	10803fcc 	andi	r2,r2,255
  4152e0:	1080020c 	andi	r2,r2,8
  4152e4:	10002c1e 	bne	r2,zero,415398 <OSTimeDlyResume+0x274>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  4152e8:	e0bff317 	ldw	r2,-52(fp)
  4152ec:	10c00d83 	ldbu	r3,54(r2)
  4152f0:	008010b4 	movhi	r2,66
  4152f4:	10b59b04 	addi	r2,r2,-10644
  4152f8:	10800003 	ldbu	r2,0(r2)
  4152fc:	1884b03a 	or	r2,r3,r2
  415300:	1007883a 	mov	r3,r2
  415304:	008010b4 	movhi	r2,66
  415308:	10b59b04 	addi	r2,r2,-10644
  41530c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  415310:	e0bff317 	ldw	r2,-52(fp)
  415314:	10800d03 	ldbu	r2,52(r2)
  415318:	10803fcc 	andi	r2,r2,255
  41531c:	e0fff317 	ldw	r3,-52(fp)
  415320:	18c00d03 	ldbu	r3,52(r3)
  415324:	18c03fcc 	andi	r3,r3,255
  415328:	010010b4 	movhi	r4,66
  41532c:	21359b44 	addi	r4,r4,-10643
  415330:	20c7883a 	add	r3,r4,r3
  415334:	19000003 	ldbu	r4,0(r3)
  415338:	e0fff317 	ldw	r3,-52(fp)
  41533c:	18c00d43 	ldbu	r3,53(r3)
  415340:	20c6b03a 	or	r3,r4,r3
  415344:	010010b4 	movhi	r4,66
  415348:	21359b44 	addi	r4,r4,-10643
  41534c:	2085883a 	add	r2,r4,r2
  415350:	10c00005 	stb	r3,0(r2)
  415354:	e0bff217 	ldw	r2,-56(fp)
  415358:	e0bffb15 	stw	r2,-20(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41535c:	0005303a 	rdctl	r2,status
  415360:	e0bffc15 	stw	r2,-16(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  415364:	e0fffc17 	ldw	r3,-16(fp)
  415368:	00bfff84 	movi	r2,-2
  41536c:	1884703a 	and	r2,r3,r2
  415370:	e0bffc15 	stw	r2,-16(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  415374:	e0bffb17 	ldw	r2,-20(fp)
  415378:	1080004c 	andi	r2,r2,1
  41537c:	e0fffc17 	ldw	r3,-16(fp)
  415380:	1884b03a 	or	r2,r3,r2
  415384:	e0bffc15 	stw	r2,-16(fp)
  
  NIOS2_WRITE_STATUS (status);
  415388:	e0bffc17 	ldw	r2,-16(fp)
  41538c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  415390:	040d8640 	call	40d864 <OS_Sched>
  415394:	00000f06 	br	4153d4 <OSTimeDlyResume+0x2b0>
  415398:	e0bff217 	ldw	r2,-56(fp)
  41539c:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4153a0:	0005303a 	rdctl	r2,status
  4153a4:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4153a8:	e0fffe17 	ldw	r3,-8(fp)
  4153ac:	00bfff84 	movi	r2,-2
  4153b0:	1884703a 	and	r2,r3,r2
  4153b4:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4153b8:	e0bffd17 	ldw	r2,-12(fp)
  4153bc:	1080004c 	andi	r2,r2,1
  4153c0:	e0fffe17 	ldw	r3,-8(fp)
  4153c4:	1884b03a 	or	r2,r3,r2
  4153c8:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  4153cc:	e0bffe17 	ldw	r2,-8(fp)
  4153d0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  4153d4:	0005883a 	mov	r2,zero
}
  4153d8:	e037883a 	mov	sp,fp
  4153dc:	dfc00117 	ldw	ra,4(sp)
  4153e0:	df000017 	ldw	fp,0(sp)
  4153e4:	dec00204 	addi	sp,sp,8
  4153e8:	f800283a 	ret

004153ec <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  4153ec:	defffa04 	addi	sp,sp,-24
  4153f0:	df000515 	stw	fp,20(sp)
  4153f4:	df000504 	addi	fp,sp,20
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  4153f8:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4153fc:	0005303a 	rdctl	r2,status
  415400:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  415404:	e0fffd17 	ldw	r3,-12(fp)
  415408:	00bfff84 	movi	r2,-2
  41540c:	1884703a 	and	r2,r3,r2
  415410:	1001703a 	wrctl	status,r2
  
  return context;
  415414:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  415418:	e0bffb15 	stw	r2,-20(fp)
    ticks = OSTime;
  41541c:	008010b4 	movhi	r2,66
  415420:	10b59f04 	addi	r2,r2,-10628
  415424:	10800017 	ldw	r2,0(r2)
  415428:	e0bffc15 	stw	r2,-16(fp)
  41542c:	e0bffb17 	ldw	r2,-20(fp)
  415430:	e0bffe15 	stw	r2,-8(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  415434:	0005303a 	rdctl	r2,status
  415438:	e0bfff15 	stw	r2,-4(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  41543c:	e0ffff17 	ldw	r3,-4(fp)
  415440:	00bfff84 	movi	r2,-2
  415444:	1884703a 	and	r2,r3,r2
  415448:	e0bfff15 	stw	r2,-4(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  41544c:	e0bffe17 	ldw	r2,-8(fp)
  415450:	1080004c 	andi	r2,r2,1
  415454:	e0ffff17 	ldw	r3,-4(fp)
  415458:	1884b03a 	or	r2,r3,r2
  41545c:	e0bfff15 	stw	r2,-4(fp)
  
  NIOS2_WRITE_STATUS (status);
  415460:	e0bfff17 	ldw	r2,-4(fp)
  415464:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  415468:	e0bffc17 	ldw	r2,-16(fp)
}
  41546c:	e037883a 	mov	sp,fp
  415470:	df000017 	ldw	fp,0(sp)
  415474:	dec00104 	addi	sp,sp,4
  415478:	f800283a 	ret

0041547c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  41547c:	defffa04 	addi	sp,sp,-24
  415480:	df000515 	stw	fp,20(sp)
  415484:	df000504 	addi	fp,sp,20
  415488:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  41548c:	e03ffb15 	stw	zero,-20(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  415490:	0005303a 	rdctl	r2,status
  415494:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  415498:	e0fffc17 	ldw	r3,-16(fp)
  41549c:	00bfff84 	movi	r2,-2
  4154a0:	1884703a 	and	r2,r3,r2
  4154a4:	1001703a 	wrctl	status,r2
  
  return context;
  4154a8:	e0bffc17 	ldw	r2,-16(fp)
#endif



    OS_ENTER_CRITICAL();
  4154ac:	e0bffb15 	stw	r2,-20(fp)
    OSTime = ticks;
  4154b0:	008010b4 	movhi	r2,66
  4154b4:	10b59f04 	addi	r2,r2,-10628
  4154b8:	e0ffff17 	ldw	r3,-4(fp)
  4154bc:	10c00015 	stw	r3,0(r2)
  4154c0:	e0bffb17 	ldw	r2,-20(fp)
  4154c4:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4154c8:	0005303a 	rdctl	r2,status
  4154cc:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4154d0:	e0fffe17 	ldw	r3,-8(fp)
  4154d4:	00bfff84 	movi	r2,-2
  4154d8:	1884703a 	and	r2,r3,r2
  4154dc:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4154e0:	e0bffd17 	ldw	r2,-12(fp)
  4154e4:	1080004c 	andi	r2,r2,1
  4154e8:	e0fffe17 	ldw	r3,-8(fp)
  4154ec:	1884b03a 	or	r2,r3,r2
  4154f0:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  4154f4:	e0bffe17 	ldw	r2,-8(fp)
  4154f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  4154fc:	e037883a 	mov	sp,fp
  415500:	df000017 	ldw	fp,0(sp)
  415504:	dec00104 	addi	sp,sp,4
  415508:	f800283a 	ret

0041550c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  41550c:	defffd04 	addi	sp,sp,-12
  415510:	dfc00215 	stw	ra,8(sp)
  415514:	df000115 	stw	fp,4(sp)
  415518:	df000104 	addi	fp,sp,4
  41551c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  415520:	e13fff17 	ldw	r4,-4(fp)
  415524:	014010b4 	movhi	r5,66
  415528:	296e0c04 	addi	r5,r5,-18384
  41552c:	04183300 	call	418330 <alt_dev_llist_insert>
}
  415530:	e037883a 	mov	sp,fp
  415534:	dfc00117 	ldw	ra,4(sp)
  415538:	df000017 	ldw	fp,0(sp)
  41553c:	dec00204 	addi	sp,sp,8
  415540:	f800283a 	ret

00415544 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  415544:	defffe04 	addi	sp,sp,-8
  415548:	dfc00115 	stw	ra,4(sp)
  41554c:	df000015 	stw	fp,0(sp)
  415550:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  415554:	008010b4 	movhi	r2,66
  415558:	10ae1304 	addi	r2,r2,-18356
  41555c:	10800017 	ldw	r2,0(r2)
  415560:	10000526 	beq	r2,zero,415578 <alt_get_errno+0x34>
  415564:	008010b4 	movhi	r2,66
  415568:	10ae1304 	addi	r2,r2,-18356
  41556c:	10800017 	ldw	r2,0(r2)
  415570:	103ee83a 	callr	r2
  415574:	00000206 	br	415580 <alt_get_errno+0x3c>
  415578:	008010b4 	movhi	r2,66
  41557c:	10b58504 	addi	r2,r2,-10732
}
  415580:	e037883a 	mov	sp,fp
  415584:	dfc00117 	ldw	ra,4(sp)
  415588:	df000017 	ldw	fp,0(sp)
  41558c:	dec00204 	addi	sp,sp,8
  415590:	f800283a 	ret

00415594 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
  415594:	defffa04 	addi	sp,sp,-24
  415598:	dfc00515 	stw	ra,20(sp)
  41559c:	df000415 	stw	fp,16(sp)
  4155a0:	df000404 	addi	fp,sp,16
  4155a4:	e13fff15 	stw	r4,-4(fp)
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
  4155a8:	e0bfff17 	ldw	r2,-4(fp)
  4155ac:	10800404 	addi	r2,r2,16
  4155b0:	e0bffd15 	stw	r2,-12(fp)
  4155b4:	00800044 	movi	r2,1
  4155b8:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  4155bc:	e0bffe0b 	ldhu	r2,-8(fp)
  4155c0:	1009883a 	mov	r4,r2
  4155c4:	04120100 	call	412010 <OSSemCreate>
  4155c8:	e0fffd17 	ldw	r3,-12(fp)
  4155cc:	18800015 	stw	r2,0(r3)
  return *sem ? 0 : -1;
  4155d0:	e0bffd17 	ldw	r2,-12(fp)
  4155d4:	10800017 	ldw	r2,0(r2)
  4155d8:	10000226 	beq	r2,zero,4155e4 <alt_avalon_mutex_reg+0x50>
  4155dc:	0005883a 	mov	r2,zero
  4155e0:	00000106 	br	4155e8 <alt_avalon_mutex_reg+0x54>
  4155e4:	00bfffc4 	movi	r2,-1
  4155e8:	e0bffc15 	stw	r2,-16(fp)
  if (!ret_code)
  4155ec:	e0bffc17 	ldw	r2,-16(fp)
  4155f0:	1000061e 	bne	r2,zero,41560c <alt_avalon_mutex_reg+0x78>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
  4155f4:	e13fff17 	ldw	r4,-4(fp)
  4155f8:	014010b4 	movhi	r5,66
  4155fc:	296e3504 	addi	r5,r5,-18220
  415600:	04183300 	call	418330 <alt_dev_llist_insert>
  415604:	e0bffc15 	stw	r2,-16(fp)
  415608:	00000506 	br	415620 <alt_avalon_mutex_reg+0x8c>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
  41560c:	04155440 	call	415544 <alt_get_errno>
  415610:	00c00304 	movi	r3,12
  415614:	10c00015 	stw	r3,0(r2)
    ret_code = -ENOMEM;
  415618:	00bffd04 	movi	r2,-12
  41561c:	e0bffc15 	stw	r2,-16(fp)
  }

  return ret_code;
  415620:	e0bffc17 	ldw	r2,-16(fp)
}
  415624:	e037883a 	mov	sp,fp
  415628:	dfc00117 	ldw	ra,4(sp)
  41562c:	df000017 	ldw	fp,0(sp)
  415630:	dec00204 	addi	sp,sp,8
  415634:	f800283a 	ret

00415638 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  415638:	defffd04 	addi	sp,sp,-12
  41563c:	dfc00215 	stw	ra,8(sp)
  415640:	df000115 	stw	fp,4(sp)
  415644:	df000104 	addi	fp,sp,4
  415648:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( PROCESSORM_0_CPUM, processorM_0_cpuM);
  41564c:	0418af40 	call	418af4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  415650:	00800044 	movi	r2,1
  415654:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  415658:	e037883a 	mov	sp,fp
  41565c:	dfc00117 	ldw	ra,4(sp)
  415660:	df000017 	ldw	fp,0(sp)
  415664:	dec00204 	addi	sp,sp,8
  415668:	f800283a 	ret

0041566c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  41566c:	defffd04 	addi	sp,sp,-12
  415670:	dfc00215 	stw	ra,8(sp)
  415674:	df000115 	stw	fp,4(sp)
  415678:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( PROCESSORM_0_TIMER, processorM_0_timer);
  41567c:	01020034 	movhi	r4,2048
  415680:	21040804 	addi	r4,r4,4128
  415684:	000b883a 	mov	r5,zero
  415688:	000d883a 	mov	r6,zero
  41568c:	01c01904 	movi	r7,100
  415690:	04175080 	call	417508 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( PROCESSORM_0_TIMESTAMP, processorM_0_timestamp);
  415694:	008010b4 	movhi	r2,66
  415698:	10b5a304 	addi	r2,r2,-10612
  41569c:	00c20034 	movhi	r3,2048
  4156a0:	10c00015 	stw	r3,0(r2)
  4156a4:	008010b4 	movhi	r2,66
  4156a8:	10b5a404 	addi	r2,r2,-10608
  4156ac:	00c0bef4 	movhi	r3,763
  4156b0:	18fc2004 	addi	r3,r3,-3968
  4156b4:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_DMA_INIT ( PROCESSOR0_0_DMA_0, processor0_0_dma_0);
  4156b8:	00800144 	movi	r2,5
  4156bc:	d8800015 	stw	r2,0(sp)
  4156c0:	010010b4 	movhi	r4,66
  4156c4:	21299204 	addi	r4,r4,-22968
  4156c8:	014010b4 	movhi	r5,66
  4156cc:	29699904 	addi	r5,r5,-22940
  4156d0:	01808434 	movhi	r6,528
  4156d4:	000f883a 	mov	r7,zero
  4156d8:	04162c40 	call	4162c4 <alt_avalon_dma_init>
    ALTERA_AVALON_DMA_INIT ( PROCESSOR1_0_DMA_0, processor1_0_dma_0);
  4156dc:	00800184 	movi	r2,6
  4156e0:	d8800015 	stw	r2,0(sp)
  4156e4:	010010b4 	movhi	r4,66
  4156e8:	2129c904 	addi	r4,r4,-22748
  4156ec:	014010b4 	movhi	r5,66
  4156f0:	2969d004 	addi	r5,r5,-22720
  4156f4:	01808474 	movhi	r6,529
  4156f8:	000f883a 	mov	r7,zero
  4156fc:	04162c40 	call	4162c4 <alt_avalon_dma_init>
    ALTERA_AVALON_JTAG_UART_INIT ( PROCESSORM_0_JTAG_UART, processorM_0_jtag_uart);
  415700:	010010b4 	movhi	r4,66
  415704:	2129e104 	addi	r4,r4,-22652
  415708:	000b883a 	mov	r5,zero
  41570c:	01800104 	movi	r6,4
  415710:	04164d80 	call	4164d8 <altera_avalon_jtag_uart_init>
  415714:	010010b4 	movhi	r4,66
  415718:	2129d704 	addi	r4,r4,-22692
  41571c:	041550c0 	call	41550c <alt_dev_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
  415720:	010010b4 	movhi	r4,66
  415724:	212df204 	addi	r4,r4,-18488
  415728:	04155940 	call	415594 <alt_avalon_mutex_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
  41572c:	0001883a 	nop
    ALTERA_RO_ZIPFS_INIT ( ALTERA_RO_ZIPFS, altera_ro_zipfs);
  415730:	010010b4 	movhi	r4,66
  415734:	212df704 	addi	r4,r4,-18468
  415738:	04181000 	call	418100 <alt_ro_zipfs_check_valid>
  41573c:	10000326 	beq	r2,zero,41574c <alt_sys_init+0xe0>
  415740:	010010b4 	movhi	r4,66
  415744:	212df704 	addi	r4,r4,-18468
  415748:	04184880 	call	418488 <alt_fs_reg>
}
  41574c:	e037883a 	mov	sp,fp
  415750:	dfc00117 	ldw	ra,4(sp)
  415754:	df000017 	ldw	fp,0(sp)
  415758:	dec00204 	addi	sp,sp,8
  41575c:	f800283a 	ret

00415760 <alt_dma_txchan_reg>:
/*
 * Register a DMA transmit channel with the system.
 */

static ALT_INLINE int alt_dma_txchan_reg (alt_dma_txchan_dev* dev)
{
  415760:	defffd04 	addi	sp,sp,-12
  415764:	dfc00215 	stw	ra,8(sp)
  415768:	df000115 	stw	fp,4(sp)
  41576c:	df000104 	addi	fp,sp,4
  415770:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_txchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_txchan_list);
  415774:	e13fff17 	ldw	r4,-4(fp)
  415778:	014010b4 	movhi	r5,66
  41577c:	296e1104 	addi	r5,r5,-18364
  415780:	04183300 	call	418330 <alt_dev_llist_insert>
}
  415784:	e037883a 	mov	sp,fp
  415788:	dfc00117 	ldw	ra,4(sp)
  41578c:	df000017 	ldw	fp,0(sp)
  415790:	dec00204 	addi	sp,sp,8
  415794:	f800283a 	ret

00415798 <alt_dma_rxchan_reg>:
/*
 * Register a DMA receive channel with the system.
 */

static ALT_INLINE int alt_dma_rxchan_reg (alt_dma_rxchan_dev* dev)
{
  415798:	defffd04 	addi	sp,sp,-12
  41579c:	dfc00215 	stw	ra,8(sp)
  4157a0:	df000115 	stw	fp,4(sp)
  4157a4:	df000104 	addi	fp,sp,4
  4157a8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dma_rxchan_list;

  return alt_dev_llist_insert((alt_dev_llist*) dev, &alt_dma_rxchan_list);
  4157ac:	e13fff17 	ldw	r4,-4(fp)
  4157b0:	014010b4 	movhi	r5,66
  4157b4:	296e0f04 	addi	r5,r5,-18372
  4157b8:	04183300 	call	418330 <alt_dev_llist_insert>
}
  4157bc:	e037883a 	mov	sp,fp
  4157c0:	dfc00117 	ldw	ra,4(sp)
  4157c4:	df000017 	ldw	fp,0(sp)
  4157c8:	dec00204 	addi	sp,sp,8
  4157cc:	f800283a 	ret

004157d0 <alt_avalon_dma_launch_bidir>:
 * both the receive and transmit channels are using incrementing addresses,
 * i.e. both channels are accesing memory rather than devices.
 */

void alt_avalon_dma_launch_bidir (alt_avalon_dma_priv* priv)
{
  4157d0:	defffc04 	addi	sp,sp,-16
  4157d4:	df000315 	stw	fp,12(sp)
  4157d8:	df000304 	addi	fp,sp,12
  4157dc:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;
  alt_avalon_dma_rxslot* rx_slot;

  if ((priv->tx_start != priv->tx_end) && (priv->rx_start != priv->rx_end))
  4157e0:	e0bfff17 	ldw	r2,-4(fp)
  4157e4:	10c00117 	ldw	r3,4(r2)
  4157e8:	e0bfff17 	ldw	r2,-4(fp)
  4157ec:	10800217 	ldw	r2,8(r2)
  4157f0:	18802d26 	beq	r3,r2,4158a8 <alt_avalon_dma_launch_bidir+0xd8>
  4157f4:	e0bfff17 	ldw	r2,-4(fp)
  4157f8:	10c00317 	ldw	r3,12(r2)
  4157fc:	e0bfff17 	ldw	r2,-4(fp)
  415800:	10800417 	ldw	r2,16(r2)
  415804:	18802826 	beq	r3,r2,4158a8 <alt_avalon_dma_launch_bidir+0xd8>
  {
    priv->active = 1;
  415808:	e0bfff17 	ldw	r2,-4(fp)
  41580c:	00c00044 	movi	r3,1
  415810:	10c00815 	stw	r3,32(r2)

    tx_slot = &priv->tx_buf[priv->tx_start];
  415814:	e0bfff17 	ldw	r2,-4(fp)
  415818:	10800117 	ldw	r2,4(r2)
  41581c:	1004913a 	slli	r2,r2,4
  415820:	10800904 	addi	r2,r2,36
  415824:	e0ffff17 	ldw	r3,-4(fp)
  415828:	1885883a 	add	r2,r3,r2
  41582c:	e0bffd15 	stw	r2,-12(fp)
    rx_slot = &priv->rx_buf[priv->rx_start];
  415830:	e0bfff17 	ldw	r2,-4(fp)
  415834:	10800317 	ldw	r2,12(r2)
  415838:	1004913a 	slli	r2,r2,4
  41583c:	10801904 	addi	r2,r2,100
  415840:	e0ffff17 	ldw	r3,-4(fp)
  415844:	1885883a 	add	r2,r3,r2
  415848:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
  41584c:	e0bfff17 	ldw	r2,-4(fp)
  415850:	10800017 	ldw	r2,0(r2)
  415854:	10800104 	addi	r2,r2,4
  415858:	e0fffd17 	ldw	r3,-12(fp)
  41585c:	18c00017 	ldw	r3,0(r3)
  415860:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
  415864:	e0bfff17 	ldw	r2,-4(fp)
  415868:	10800017 	ldw	r2,0(r2)
  41586c:	10800204 	addi	r2,r2,8
  415870:	e0fffe17 	ldw	r3,-8(fp)
  415874:	18c00017 	ldw	r3,0(r3)
  415878:	10c00035 	stwio	r3,0(r2)

    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base,
  41587c:	e0bfff17 	ldw	r2,-4(fp)
  415880:	10800017 	ldw	r2,0(r2)
  415884:	11000304 	addi	r4,r2,12
  415888:	e0bffd17 	ldw	r2,-12(fp)
  41588c:	10800117 	ldw	r2,4(r2)
  415890:	e0fffe17 	ldw	r3,-8(fp)
  415894:	18c00117 	ldw	r3,4(r3)
  415898:	1880012e 	bgeu	r3,r2,4158a0 <alt_avalon_dma_launch_bidir+0xd0>
  41589c:	1805883a 	mov	r2,r3
  4158a0:	20800035 	stwio	r2,0(r4)
  4158a4:	00000206 	br	4158b0 <alt_avalon_dma_launch_bidir+0xe0>
       (tx_slot->len > rx_slot->len) ? rx_slot->len : tx_slot->len);
  }
  else
  {
    priv->active = 0;
  4158a8:	e0bfff17 	ldw	r2,-4(fp)
  4158ac:	10000815 	stw	zero,32(r2)
  }
}
  4158b0:	e037883a 	mov	sp,fp
  4158b4:	df000017 	ldw	fp,0(sp)
  4158b8:	dec00104 	addi	sp,sp,4
  4158bc:	f800283a 	ret

004158c0 <alt_avalon_dma_launch_txonly>:
 * i.e. the receive channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_txonly (alt_avalon_dma_priv* priv)
{
  4158c0:	defffd04 	addi	sp,sp,-12
  4158c4:	df000215 	stw	fp,8(sp)
  4158c8:	df000204 	addi	fp,sp,8
  4158cc:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_txslot* tx_slot;

  if (priv->tx_start != priv->tx_end)
  4158d0:	e0bfff17 	ldw	r2,-4(fp)
  4158d4:	10c00117 	ldw	r3,4(r2)
  4158d8:	e0bfff17 	ldw	r2,-4(fp)
  4158dc:	10800217 	ldw	r2,8(r2)
  4158e0:	18801726 	beq	r3,r2,415940 <alt_avalon_dma_launch_txonly+0x80>
  {
    priv->active = 1;
  4158e4:	e0bfff17 	ldw	r2,-4(fp)
  4158e8:	00c00044 	movi	r3,1
  4158ec:	10c00815 	stw	r3,32(r2)
    tx_slot      = &priv->tx_buf[priv->tx_start];
  4158f0:	e0bfff17 	ldw	r2,-4(fp)
  4158f4:	10800117 	ldw	r2,4(r2)
  4158f8:	1004913a 	slli	r2,r2,4
  4158fc:	10800904 	addi	r2,r2,36
  415900:	e0ffff17 	ldw	r3,-4(fp)
  415904:	1885883a 	add	r2,r3,r2
  415908:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) tx_slot->from);
  41590c:	e0bfff17 	ldw	r2,-4(fp)
  415910:	10800017 	ldw	r2,0(r2)
  415914:	10800104 	addi	r2,r2,4
  415918:	e0fffe17 	ldw	r3,-8(fp)
  41591c:	18c00017 	ldw	r3,0(r3)
  415920:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, tx_slot->len);
  415924:	e0bfff17 	ldw	r2,-4(fp)
  415928:	10800017 	ldw	r2,0(r2)
  41592c:	10800304 	addi	r2,r2,12
  415930:	e0fffe17 	ldw	r3,-8(fp)
  415934:	18c00117 	ldw	r3,4(r3)
  415938:	10c00035 	stwio	r3,0(r2)
  41593c:	00000206 	br	415948 <alt_avalon_dma_launch_txonly+0x88>
  }
  else
  {
    priv->active = 0;
  415940:	e0bfff17 	ldw	r2,-4(fp)
  415944:	10000815 	stw	zero,32(r2)
  }
}
  415948:	e037883a 	mov	sp,fp
  41594c:	df000017 	ldw	fp,0(sp)
  415950:	dec00104 	addi	sp,sp,4
  415954:	f800283a 	ret

00415958 <alt_avalon_dma_launch_rxonly>:
 * i.e. the transmit channel is accessing a single memory location (which is
 * probably a device register).
 */

static void alt_avalon_dma_launch_rxonly (alt_avalon_dma_priv* priv)
{
  415958:	defffd04 	addi	sp,sp,-12
  41595c:	df000215 	stw	fp,8(sp)
  415960:	df000204 	addi	fp,sp,8
  415964:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_rxslot* rx_slot;

  if (priv->rx_start != priv->rx_end)
  415968:	e0bfff17 	ldw	r2,-4(fp)
  41596c:	10c00317 	ldw	r3,12(r2)
  415970:	e0bfff17 	ldw	r2,-4(fp)
  415974:	10800417 	ldw	r2,16(r2)
  415978:	18801726 	beq	r3,r2,4159d8 <alt_avalon_dma_launch_rxonly+0x80>
  {
    priv->active = 1;
  41597c:	e0bfff17 	ldw	r2,-4(fp)
  415980:	00c00044 	movi	r3,1
  415984:	10c00815 	stw	r3,32(r2)
    rx_slot      = &priv->rx_buf[priv->rx_start];
  415988:	e0bfff17 	ldw	r2,-4(fp)
  41598c:	10800317 	ldw	r2,12(r2)
  415990:	1004913a 	slli	r2,r2,4
  415994:	10801904 	addi	r2,r2,100
  415998:	e0ffff17 	ldw	r3,-4(fp)
  41599c:	1885883a 	add	r2,r3,r2
  4159a0:	e0bffe15 	stw	r2,-8(fp)

    IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) rx_slot->data);
  4159a4:	e0bfff17 	ldw	r2,-4(fp)
  4159a8:	10800017 	ldw	r2,0(r2)
  4159ac:	10800204 	addi	r2,r2,8
  4159b0:	e0fffe17 	ldw	r3,-8(fp)
  4159b4:	18c00017 	ldw	r3,0(r3)
  4159b8:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_DMA_LENGTH (priv->base, rx_slot->len);
  4159bc:	e0bfff17 	ldw	r2,-4(fp)
  4159c0:	10800017 	ldw	r2,0(r2)
  4159c4:	10800304 	addi	r2,r2,12
  4159c8:	e0fffe17 	ldw	r3,-8(fp)
  4159cc:	18c00117 	ldw	r3,4(r3)
  4159d0:	10c00035 	stwio	r3,0(r2)
  4159d4:	00000206 	br	4159e0 <alt_avalon_dma_launch_rxonly+0x88>
  }
  else
  {
    priv->active = 0;
  4159d8:	e0bfff17 	ldw	r2,-4(fp)
  4159dc:	10000815 	stw	zero,32(r2)
  }
}
  4159e0:	e037883a 	mov	sp,fp
  4159e4:	df000017 	ldw	fp,0(sp)
  4159e8:	dec00104 	addi	sp,sp,4
  4159ec:	f800283a 	ret

004159f0 <alt_avalon_dma_ioctl>:
 * device instance. See alt_dma_dev.h for the meaning of the supported
 * ioctl requests.
 */

static int alt_avalon_dma_ioctl (alt_avalon_dma_priv* priv, int req, void* arg)
{
  4159f0:	defffa04 	addi	sp,sp,-24
  4159f4:	df000515 	stw	fp,20(sp)
  4159f8:	df000504 	addi	fp,sp,20
  4159fc:	e13ffd15 	stw	r4,-12(fp)
  415a00:	e17ffe15 	stw	r5,-8(fp)
  415a04:	e1bfff15 	stw	r6,-4(fp)
  int     status = 0;
  415a08:	e03ffb15 	stw	zero,-20(fp)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
  415a0c:	e0bffd17 	ldw	r2,-12(fp)
  415a10:	10c00117 	ldw	r3,4(r2)
  415a14:	e0bffd17 	ldw	r2,-12(fp)
  415a18:	10800217 	ldw	r2,8(r2)
  415a1c:	18800a1e 	bne	r3,r2,415a48 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
  415a20:	e0bffd17 	ldw	r2,-12(fp)
  415a24:	10c00317 	ldw	r3,12(r2)
  415a28:	e0bffd17 	ldw	r2,-12(fp)
  415a2c:	10800417 	ldw	r2,16(r2)
   * since it cannot catch concurrent calls to alt_alavalon_dma_prepare()
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
  415a30:	1880051e 	bne	r3,r2,415a48 <alt_avalon_dma_ioctl+0x58>
      (priv->rx_start != priv->rx_end) ||
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  415a34:	e0bffd17 	ldw	r2,-12(fp)
  415a38:	10800017 	ldw	r2,0(r2)
  415a3c:	10800304 	addi	r2,r2,12
  415a40:	10800037 	ldwio	r2,0(r2)
   * or alt_avalon_dma_send(), but it should at least catch the most
   * common class of problems.
   */

  if ((priv->tx_start != priv->tx_end) ||
      (priv->rx_start != priv->rx_end) ||
  415a44:	10000226 	beq	r2,zero,415a50 <alt_avalon_dma_ioctl+0x60>
      IORD_ALTERA_AVALON_DMA_LENGTH (priv->base))
  {
    return -EIO;
  415a48:	00bffec4 	movi	r2,-5
  415a4c:	0000b606 	br	415d28 <alt_avalon_dma_ioctl+0x338>
  }

  /* Now process the ioctl. */

  switch (req)
  415a50:	e0bffe17 	ldw	r2,-8(fp)
  415a54:	108002a8 	cmpgeui	r2,r2,10
  415a58:	1000791e 	bne	r2,zero,415c40 <alt_avalon_dma_ioctl+0x250>
  415a5c:	e0bffe17 	ldw	r2,-8(fp)
  415a60:	1085883a 	add	r2,r2,r2
  415a64:	1087883a 	add	r3,r2,r2
  415a68:	00801074 	movhi	r2,65
  415a6c:	10969f04 	addi	r2,r2,23164
  415a70:	1885883a 	add	r2,r3,r2
  415a74:	10800017 	ldw	r2,0(r2)
  415a78:	1000683a 	jmp	r2
  415a7c:	00415c40 	call	415c4 <OSCtxSw_SWITCH_PC+0x41584>
  415a80:	00415aa4 	muli	at,zero,1386
  415a84:	00415afc 	xorhi	at,zero,1387
  415a88:	00415b28 	cmpgeui	at,zero,1388
  415a8c:	00415b80 	call	415b8 <OSCtxSw_SWITCH_PC+0x41578>
  415a90:	00415bac 	andhi	at,zero,1390
  415a94:	00415bc8 	cmpgei	at,zero,1391
  415a98:	00415be8 	cmpgeui	at,zero,1391
  415a9c:	00415c08 	cmpgei	at,zero,1392
  415aa0:	00415c28 	cmpgeui	at,zero,1392
  {
  case ALT_DMA_TX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_RX_STREAM))
  415aa4:	e0bffd17 	ldw	r2,-12(fp)
  415aa8:	10800517 	ldw	r2,20(r2)
  415aac:	1080100c 	andi	r2,r2,64
  415ab0:	10000f1e 	bne	r2,zero,415af0 <alt_avalon_dma_ioctl+0x100>
    {
      IOWR_ALTERA_AVALON_DMA_RADDRESS (priv->base, (alt_u32) arg);
  415ab4:	e0bffd17 	ldw	r2,-12(fp)
  415ab8:	10800017 	ldw	r2,0(r2)
  415abc:	10800104 	addi	r2,r2,4
  415ac0:	e0ffff17 	ldw	r3,-4(fp)
  415ac4:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
  415ac8:	e0bffd17 	ldw	r2,-12(fp)
  415acc:	10800517 	ldw	r2,20(r2)
  415ad0:	10c00814 	ori	r3,r2,32
  415ad4:	e0bffd17 	ldw	r2,-12(fp)
  415ad8:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_rxonly;
  415adc:	e0bffd17 	ldw	r2,-12(fp)
  415ae0:	00c01074 	movhi	r3,65
  415ae4:	18d65604 	addi	r3,r3,22872
  415ae8:	10c00715 	stw	r3,28(r2)
    }
    else
    {
      status = -EIO;
    }
    break;
  415aec:	00005606 	br	415c48 <alt_avalon_dma_ioctl+0x258>
      priv->flags |= ALT_AVALON_DMA_TX_STREAM;
      priv->launch = alt_avalon_dma_launch_rxonly;
    }
    else
    {
      status = -EIO;
  415af0:	00bffec4 	movi	r2,-5
  415af4:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
  415af8:	00005306 	br	415c48 <alt_avalon_dma_ioctl+0x258>
  case ALT_DMA_TX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_TX_STREAM;
  415afc:	e0bffd17 	ldw	r2,-12(fp)
  415b00:	10c00517 	ldw	r3,20(r2)
  415b04:	00bff7c4 	movi	r2,-33
  415b08:	1886703a 	and	r3,r3,r2
  415b0c:	e0bffd17 	ldw	r2,-12(fp)
  415b10:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
  415b14:	e0bffd17 	ldw	r2,-12(fp)
  415b18:	00c01074 	movhi	r3,65
  415b1c:	18d5f404 	addi	r3,r3,22480
  415b20:	10c00715 	stw	r3,28(r2)
    break;
  415b24:	00004806 	br	415c48 <alt_avalon_dma_ioctl+0x258>
  case ALT_DMA_RX_STREAM_ON:
    if (!(priv->flags & ALT_AVALON_DMA_TX_STREAM))
  415b28:	e0bffd17 	ldw	r2,-12(fp)
  415b2c:	10800517 	ldw	r2,20(r2)
  415b30:	1080080c 	andi	r2,r2,32
  415b34:	10000f1e 	bne	r2,zero,415b74 <alt_avalon_dma_ioctl+0x184>
    {
      IOWR_ALTERA_AVALON_DMA_WADDRESS (priv->base, (alt_u32) arg);
  415b38:	e0bffd17 	ldw	r2,-12(fp)
  415b3c:	10800017 	ldw	r2,0(r2)
  415b40:	10800204 	addi	r2,r2,8
  415b44:	e0ffff17 	ldw	r3,-4(fp)
  415b48:	10c00035 	stwio	r3,0(r2)
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
  415b4c:	e0bffd17 	ldw	r2,-12(fp)
  415b50:	10800517 	ldw	r2,20(r2)
  415b54:	10c01014 	ori	r3,r2,64
  415b58:	e0bffd17 	ldw	r2,-12(fp)
  415b5c:	10c00515 	stw	r3,20(r2)
      priv->launch = alt_avalon_dma_launch_txonly;
  415b60:	e0bffd17 	ldw	r2,-12(fp)
  415b64:	00c01074 	movhi	r3,65
  415b68:	18d63004 	addi	r3,r3,22720
  415b6c:	10c00715 	stw	r3,28(r2)
    }
    else
    {
      status = -EIO;
    }
    break;
  415b70:	00003506 	br	415c48 <alt_avalon_dma_ioctl+0x258>
      priv->flags |= ALT_AVALON_DMA_RX_STREAM;
      priv->launch = alt_avalon_dma_launch_txonly;
    }
    else
    {
      status = -EIO;
  415b74:	00bffec4 	movi	r2,-5
  415b78:	e0bffb15 	stw	r2,-20(fp)
    }
    break;
  415b7c:	00003206 	br	415c48 <alt_avalon_dma_ioctl+0x258>
  case ALT_DMA_RX_STREAM_OFF:
    priv->flags &= ~ALT_AVALON_DMA_RX_STREAM;
  415b80:	e0bffd17 	ldw	r2,-12(fp)
  415b84:	10c00517 	ldw	r3,20(r2)
  415b88:	00bfefc4 	movi	r2,-65
  415b8c:	1886703a 	and	r3,r3,r2
  415b90:	e0bffd17 	ldw	r2,-12(fp)
  415b94:	10c00515 	stw	r3,20(r2)
    priv->launch = alt_avalon_dma_launch_bidir;
  415b98:	e0bffd17 	ldw	r2,-12(fp)
  415b9c:	00c01074 	movhi	r3,65
  415ba0:	18d5f404 	addi	r3,r3,22480
  415ba4:	10c00715 	stw	r3,28(r2)
    break;
  415ba8:	00002706 	br	415c48 <alt_avalon_dma_ioctl+0x258>
  case ALT_DMA_SET_MODE_8:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  415bac:	e0bffd17 	ldw	r2,-12(fp)
  415bb0:	10c00517 	ldw	r3,20(r2)
  415bb4:	00bffc04 	movi	r2,-16
  415bb8:	1886703a 	and	r3,r3,r2
  415bbc:	e0bffd17 	ldw	r2,-12(fp)
  415bc0:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_8;
    break;
  415bc4:	00002006 	br	415c48 <alt_avalon_dma_ioctl+0x258>
  case ALT_DMA_SET_MODE_16:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  415bc8:	e0bffd17 	ldw	r2,-12(fp)
  415bcc:	10c00517 	ldw	r3,20(r2)
  415bd0:	00bffc04 	movi	r2,-16
  415bd4:	1884703a 	and	r2,r3,r2
  415bd8:	10c00054 	ori	r3,r2,1
  415bdc:	e0bffd17 	ldw	r2,-12(fp)
  415be0:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_16;
    break;
  415be4:	00001806 	br	415c48 <alt_avalon_dma_ioctl+0x258>
  case ALT_DMA_SET_MODE_32:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  415be8:	e0bffd17 	ldw	r2,-12(fp)
  415bec:	10c00517 	ldw	r3,20(r2)
  415bf0:	00bffc04 	movi	r2,-16
  415bf4:	1884703a 	and	r2,r3,r2
  415bf8:	10c000d4 	ori	r3,r2,3
  415bfc:	e0bffd17 	ldw	r2,-12(fp)
  415c00:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_32;
    break;
  415c04:	00001006 	br	415c48 <alt_avalon_dma_ioctl+0x258>
  case ALT_DMA_SET_MODE_64:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  415c08:	e0bffd17 	ldw	r2,-12(fp)
  415c0c:	10c00517 	ldw	r3,20(r2)
  415c10:	00bffc04 	movi	r2,-16
  415c14:	1884703a 	and	r2,r3,r2
  415c18:	10c001d4 	ori	r3,r2,7
  415c1c:	e0bffd17 	ldw	r2,-12(fp)
  415c20:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_64;
    break;
  415c24:	00000806 	br	415c48 <alt_avalon_dma_ioctl+0x258>
  case ALT_DMA_SET_MODE_128:
    priv->flags = (priv->flags & ~ALT_AVALON_DMA_MODE_MSK) |
  415c28:	e0bffd17 	ldw	r2,-12(fp)
  415c2c:	10800517 	ldw	r2,20(r2)
  415c30:	10c003d4 	ori	r3,r2,15
  415c34:	e0bffd17 	ldw	r2,-12(fp)
  415c38:	10c00515 	stw	r3,20(r2)
      ALT_AVALON_DMA_MODE_128;
    break;
  415c3c:	00000206 	br	415c48 <alt_avalon_dma_ioctl+0x258>
  default:
    status = -ENOTTY;
  415c40:	00bff9c4 	movi	r2,-25
  415c44:	e0bffb15 	stw	r2,-20(fp)
  }

  if (!status)
  415c48:	e0bffb17 	ldw	r2,-20(fp)
  415c4c:	1000351e 	bne	r2,zero,415d24 <alt_avalon_dma_ioctl+0x334>
  {
     switch (priv->flags & ALT_AVALON_DMA_MODE_MSK)
  415c50:	e0bffd17 	ldw	r2,-12(fp)
  415c54:	10800517 	ldw	r2,20(r2)
  415c58:	108003cc 	andi	r2,r2,15
  415c5c:	10c00060 	cmpeqi	r3,r2,1
  415c60:	1800091e 	bne	r3,zero,415c88 <alt_avalon_dma_ioctl+0x298>
  415c64:	0080052e 	bgeu	zero,r2,415c7c <alt_avalon_dma_ioctl+0x28c>
  415c68:	10c000e0 	cmpeqi	r3,r2,3
  415c6c:	1800091e 	bne	r3,zero,415c94 <alt_avalon_dma_ioctl+0x2a4>
  415c70:	108001e0 	cmpeqi	r2,r2,7
  415c74:	10000a1e 	bne	r2,zero,415ca0 <alt_avalon_dma_ioctl+0x2b0>
  415c78:	00000c06 	br	415cac <alt_avalon_dma_ioctl+0x2bc>
     {
     case ALT_AVALON_DMA_MODE_8:
       mode = ALTERA_AVALON_DMA_CONTROL_BYTE_MSK;
  415c7c:	00800044 	movi	r2,1
  415c80:	e0bffc15 	stw	r2,-16(fp)
       break;
  415c84:	00000b06 	br	415cb4 <alt_avalon_dma_ioctl+0x2c4>
     case ALT_AVALON_DMA_MODE_16:
       mode = ALTERA_AVALON_DMA_CONTROL_HW_MSK;
  415c88:	00800084 	movi	r2,2
  415c8c:	e0bffc15 	stw	r2,-16(fp)
       break;
  415c90:	00000806 	br	415cb4 <alt_avalon_dma_ioctl+0x2c4>
     case ALT_AVALON_DMA_MODE_32:
       mode = ALTERA_AVALON_DMA_CONTROL_WORD_MSK;
  415c94:	00800104 	movi	r2,4
  415c98:	e0bffc15 	stw	r2,-16(fp)
       break;
  415c9c:	00000506 	br	415cb4 <alt_avalon_dma_ioctl+0x2c4>
     case ALT_AVALON_DMA_MODE_64:
       mode = ALTERA_AVALON_DMA_CONTROL_DWORD_MSK;
  415ca0:	00810004 	movi	r2,1024
  415ca4:	e0bffc15 	stw	r2,-16(fp)
       break;
  415ca8:	00000206 	br	415cb4 <alt_avalon_dma_ioctl+0x2c4>
     default:
       mode = ALTERA_AVALON_DMA_CONTROL_QWORD_MSK;
  415cac:	00820004 	movi	r2,2048
  415cb0:	e0bffc15 	stw	r2,-16(fp)
     }

    if (priv->flags & ALT_AVALON_DMA_TX_STREAM)
  415cb4:	e0bffd17 	ldw	r2,-12(fp)
  415cb8:	10800517 	ldw	r2,20(r2)
  415cbc:	1080080c 	andi	r2,r2,32
  415cc0:	10000726 	beq	r2,zero,415ce0 <alt_avalon_dma_ioctl+0x2f0>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  415cc4:	e0bffd17 	ldw	r2,-12(fp)
  415cc8:	10800017 	ldw	r2,0(r2)
  415ccc:	10800604 	addi	r2,r2,24
  415cd0:	e0fffc17 	ldw	r3,-16(fp)
  415cd4:	18c07e14 	ori	r3,r3,504
  415cd8:	10c00035 	stwio	r3,0(r2)
  415cdc:	00001106 	br	415d24 <alt_avalon_dma_ioctl+0x334>
        ALTERA_AVALON_DMA_CONTROL_REEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_RCON_MSK);
    }
    else if (priv->flags & ALT_AVALON_DMA_RX_STREAM)
  415ce0:	e0bffd17 	ldw	r2,-12(fp)
  415ce4:	10800517 	ldw	r2,20(r2)
  415ce8:	1080100c 	andi	r2,r2,64
  415cec:	10000726 	beq	r2,zero,415d0c <alt_avalon_dma_ioctl+0x31c>
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  415cf0:	e0bffd17 	ldw	r2,-12(fp)
  415cf4:	10800017 	ldw	r2,0(r2)
  415cf8:	10800604 	addi	r2,r2,24
  415cfc:	e0fffc17 	ldw	r3,-16(fp)
  415d00:	18c0be14 	ori	r3,r3,760
  415d04:	10c00035 	stwio	r3,0(r2)
  415d08:	00000606 	br	415d24 <alt_avalon_dma_ioctl+0x334>
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK |
        ALTERA_AVALON_DMA_CONTROL_WCON_MSK);
    }
    else
    {
      IOWR_ALTERA_AVALON_DMA_CONTROL (priv->base,
  415d0c:	e0bffd17 	ldw	r2,-12(fp)
  415d10:	10800017 	ldw	r2,0(r2)
  415d14:	10800604 	addi	r2,r2,24
  415d18:	e0fffc17 	ldw	r3,-16(fp)
  415d1c:	18c03e14 	ori	r3,r3,248
  415d20:	10c00035 	stwio	r3,0(r2)
        ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
        ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);
    }
  }

  return status;
  415d24:	e0bffb17 	ldw	r2,-20(fp)
}
  415d28:	e037883a 	mov	sp,fp
  415d2c:	df000017 	ldw	fp,0(sp)
  415d30:	dec00104 	addi	sp,sp,4
  415d34:	f800283a 	ret

00415d38 <alt_avalon_dma_tx_ioctl>:
 */

int alt_avalon_dma_tx_ioctl (alt_dma_txchan dma,
           int req,
           void* arg)
{
  415d38:	defffb04 	addi	sp,sp,-20
  415d3c:	dfc00415 	stw	ra,16(sp)
  415d40:	df000315 	stw	fp,12(sp)
  415d44:	df000304 	addi	fp,sp,12
  415d48:	e13ffd15 	stw	r4,-12(fp)
  415d4c:	e17ffe15 	stw	r5,-8(fp)
  415d50:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_txchan*) dma)->priv,
  415d54:	e0bffd17 	ldw	r2,-12(fp)
  415d58:	10800617 	ldw	r2,24(r2)
  415d5c:	1009883a 	mov	r4,r2
  415d60:	e17ffe17 	ldw	r5,-8(fp)
  415d64:	e1bfff17 	ldw	r6,-4(fp)
  415d68:	04159f00 	call	4159f0 <alt_avalon_dma_ioctl>
             req,
             arg);
}
  415d6c:	e037883a 	mov	sp,fp
  415d70:	dfc00117 	ldw	ra,4(sp)
  415d74:	df000017 	ldw	fp,0(sp)
  415d78:	dec00204 	addi	sp,sp,8
  415d7c:	f800283a 	ret

00415d80 <alt_avalon_dma_rx_ioctl>:
 */

int alt_avalon_dma_rx_ioctl (alt_dma_rxchan dma,
           int req,
           void* arg)
{
  415d80:	defffb04 	addi	sp,sp,-20
  415d84:	dfc00415 	stw	ra,16(sp)
  415d88:	df000315 	stw	fp,12(sp)
  415d8c:	df000304 	addi	fp,sp,12
  415d90:	e13ffd15 	stw	r4,-12(fp)
  415d94:	e17ffe15 	stw	r5,-8(fp)
  415d98:	e1bfff15 	stw	r6,-4(fp)
  return alt_avalon_dma_ioctl (((alt_avalon_dma_rxchan*) dma)->priv,
  415d9c:	e0bffd17 	ldw	r2,-12(fp)
  415da0:	10800617 	ldw	r2,24(r2)
  415da4:	1009883a 	mov	r4,r2
  415da8:	e17ffe17 	ldw	r5,-8(fp)
  415dac:	e1bfff17 	ldw	r6,-4(fp)
  415db0:	04159f00 	call	4159f0 <alt_avalon_dma_ioctl>
             req,
             arg);
}
  415db4:	e037883a 	mov	sp,fp
  415db8:	dfc00117 	ldw	ra,4(sp)
  415dbc:	df000017 	ldw	fp,0(sp)
  415dc0:	dec00204 	addi	sp,sp,8
  415dc4:	f800283a 	ret

00415dc8 <alt_avalon_dma_prepare>:
int alt_avalon_dma_prepare (alt_dma_rxchan   dma,
                            void*            data,
                            alt_u32          len,
                            alt_rxchan_done* done,
                            void*            handle)
{
  415dc8:	defff404 	addi	sp,sp,-48
  415dcc:	dfc00b15 	stw	ra,44(sp)
  415dd0:	df000a15 	stw	fp,40(sp)
  415dd4:	df000a04 	addi	fp,sp,40
  415dd8:	e13ffc15 	stw	r4,-16(fp)
  415ddc:	e17ffd15 	stw	r5,-12(fp)
  415de0:	e1bffe15 	stw	r6,-8(fp)
  415de4:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                next;
  alt_u32                align_mask;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_rxchan*) dma)->priv;
  415de8:	e0bffc17 	ldw	r2,-16(fp)
  415dec:	10800617 	ldw	r2,24(r2)
  415df0:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and that it's not too
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
  415df4:	e0bff617 	ldw	r2,-40(fp)
  415df8:	10800517 	ldw	r2,20(r2)
  415dfc:	108003cc 	andi	r2,r2,15
  415e00:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
  415e04:	e0fffd17 	ldw	r3,-12(fp)
  415e08:	e0bff717 	ldw	r2,-36(fp)
  415e0c:	1884703a 	and	r2,r3,r2
  415e10:	1000081e 	bne	r2,zero,415e34 <alt_avalon_dma_prepare+0x6c>
  415e14:	e0fffe17 	ldw	r3,-8(fp)
  415e18:	e0bff717 	ldw	r2,-36(fp)
  415e1c:	1884703a 	and	r2,r3,r2
  415e20:	1000041e 	bne	r2,zero,415e34 <alt_avalon_dma_prepare+0x6c>
     (len > priv->max_length))
  415e24:	e0bff617 	ldw	r2,-40(fp)
  415e28:	10c00617 	ldw	r3,24(r2)
   * big for the device.
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) data) & align_mask) || (len & align_mask) ||
  415e2c:	e0bffe17 	ldw	r2,-8(fp)
  415e30:	1880022e 	bgeu	r3,r2,415e3c <alt_avalon_dma_prepare+0x74>
     (len > priv->max_length))
  {
    return -EINVAL;
  415e34:	00bffa84 	movi	r2,-22
  415e38:	00002c06 	br	415eec <alt_avalon_dma_prepare+0x124>
  }

  start = priv->rx_start;
  415e3c:	e0bff617 	ldw	r2,-40(fp)
  415e40:	10800317 	ldw	r2,12(r2)
  415e44:	e0bff815 	stw	r2,-32(fp)
  end   = priv->rx_end;
  415e48:	e0bff617 	ldw	r2,-40(fp)
  415e4c:	10800417 	ldw	r2,16(r2)
  415e50:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->rx_buf[end];
  415e54:	e0bff917 	ldw	r2,-28(fp)
  415e58:	1004913a 	slli	r2,r2,4
  415e5c:	10801904 	addi	r2,r2,100
  415e60:	e0fff617 	ldw	r3,-40(fp)
  415e64:	1885883a 	add	r2,r3,r2
  415e68:	e0bffa15 	stw	r2,-24(fp)

  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  415e6c:	e0bff917 	ldw	r2,-28(fp)
  415e70:	10800044 	addi	r2,r2,1
  415e74:	108000cc 	andi	r2,r2,3
  415e78:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
  415e7c:	e0fffb17 	ldw	r3,-20(fp)
  415e80:	e0bff817 	ldw	r2,-32(fp)
  415e84:	1880021e 	bne	r3,r2,415e90 <alt_avalon_dma_prepare+0xc8>
  {
    return -ENOSPC;
  415e88:	00bff904 	movi	r2,-28
  415e8c:	00001706 	br	415eec <alt_avalon_dma_prepare+0x124>
  }

  slot->data   = data;
  415e90:	e0bffa17 	ldw	r2,-24(fp)
  415e94:	e0fffd17 	ldw	r3,-12(fp)
  415e98:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
  415e9c:	e0bffa17 	ldw	r2,-24(fp)
  415ea0:	e0fffe17 	ldw	r3,-8(fp)
  415ea4:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
  415ea8:	e0bffa17 	ldw	r2,-24(fp)
  415eac:	e0ffff17 	ldw	r3,-4(fp)
  415eb0:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
  415eb4:	e0bffa17 	ldw	r2,-24(fp)
  415eb8:	e0c00217 	ldw	r3,8(fp)
  415ebc:	10c00315 	stw	r3,12(r2)

  priv->rx_end = next;
  415ec0:	e0bff617 	ldw	r2,-40(fp)
  415ec4:	e0fffb17 	ldw	r3,-20(fp)
  415ec8:	10c00415 	stw	r3,16(r2)

  if (!priv->active)
  415ecc:	e0bff617 	ldw	r2,-40(fp)
  415ed0:	10800817 	ldw	r2,32(r2)
  415ed4:	1000041e 	bne	r2,zero,415ee8 <alt_avalon_dma_prepare+0x120>
  {
    priv->launch (priv);
  415ed8:	e0bff617 	ldw	r2,-40(fp)
  415edc:	10800717 	ldw	r2,28(r2)
  415ee0:	e13ff617 	ldw	r4,-40(fp)
  415ee4:	103ee83a 	callr	r2
  }

  return 0;
  415ee8:	0005883a 	mov	r2,zero
}
  415eec:	e037883a 	mov	sp,fp
  415ef0:	dfc00117 	ldw	ra,4(sp)
  415ef4:	df000017 	ldw	fp,0(sp)
  415ef8:	dec00204 	addi	sp,sp,8
  415efc:	f800283a 	ret

00415f00 <alt_avalon_dma_space>:
 *
 * A negative value indicates that the value could not be determined.
 */

int alt_avalon_dma_space (alt_dma_txchan dma)
{
  415f00:	defffb04 	addi	sp,sp,-20
  415f04:	df000415 	stw	fp,16(sp)
  415f08:	df000404 	addi	fp,sp,16
  415f0c:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv;

  alt_u32 start;
  alt_u32 end;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
  415f10:	e0bfff17 	ldw	r2,-4(fp)
  415f14:	10800617 	ldw	r2,24(r2)
  415f18:	e0bffc15 	stw	r2,-16(fp)

  start = priv->tx_start;
  415f1c:	e0bffc17 	ldw	r2,-16(fp)
  415f20:	10800117 	ldw	r2,4(r2)
  415f24:	e0bffd15 	stw	r2,-12(fp)
  end   = priv->tx_end;
  415f28:	e0bffc17 	ldw	r2,-16(fp)
  415f2c:	10800217 	ldw	r2,8(r2)
  415f30:	e0bffe15 	stw	r2,-8(fp)

  return (start > end) ? start - end - 1 :
  415f34:	e0bffd17 	ldw	r2,-12(fp)
  415f38:	e0fffe17 	ldw	r3,-8(fp)
  415f3c:	1880052e 	bgeu	r3,r2,415f54 <alt_avalon_dma_space+0x54>
  415f40:	e0fffd17 	ldw	r3,-12(fp)
  415f44:	e0bffe17 	ldw	r2,-8(fp)
  415f48:	1885c83a 	sub	r2,r3,r2
  415f4c:	10bfffc4 	addi	r2,r2,-1
  415f50:	00000406 	br	415f64 <alt_avalon_dma_space+0x64>
    ALT_AVALON_DMA_NSLOTS + start - end - 1;
  415f54:	e0fffd17 	ldw	r3,-12(fp)
  415f58:	e0bffe17 	ldw	r2,-8(fp)
  415f5c:	1885c83a 	sub	r2,r3,r2
  415f60:	108000c4 	addi	r2,r2,3
}
  415f64:	e037883a 	mov	sp,fp
  415f68:	df000017 	ldw	fp,0(sp)
  415f6c:	dec00104 	addi	sp,sp,4
  415f70:	f800283a 	ret

00415f74 <alt_avalon_dma_send>:
int alt_avalon_dma_send (alt_dma_txchan   dma,
                         const void*      from,
                         alt_u32          len,
                         alt_txchan_done* done,
                         void*            handle)
{
  415f74:	defff404 	addi	sp,sp,-48
  415f78:	dfc00b15 	stw	ra,44(sp)
  415f7c:	df000a15 	stw	fp,40(sp)
  415f80:	df000a04 	addi	fp,sp,40
  415f84:	e13ffc15 	stw	r4,-16(fp)
  415f88:	e17ffd15 	stw	r5,-12(fp)
  415f8c:	e1bffe15 	stw	r6,-8(fp)
  415f90:	e1ffff15 	stw	r7,-4(fp)
  alt_u32                end;
  alt_u32                align_mask;
  alt_u32                next;
  alt_avalon_dma_priv*   priv;

  priv = ((alt_avalon_dma_txchan*) dma)->priv;
  415f94:	e0bffc17 	ldw	r2,-16(fp)
  415f98:	10800617 	ldw	r2,24(r2)
  415f9c:	e0bff615 	stw	r2,-40(fp)
  /*
   * Ensure that the data is correctly aligned, and not too large
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;
  415fa0:	e0bff617 	ldw	r2,-40(fp)
  415fa4:	10800517 	ldw	r2,20(r2)
  415fa8:	108003cc 	andi	r2,r2,15
  415fac:	e0bff715 	stw	r2,-36(fp)

  if ((((alt_u32) from) & align_mask) ||
  415fb0:	e0fffd17 	ldw	r3,-12(fp)
  415fb4:	e0bff717 	ldw	r2,-36(fp)
  415fb8:	1884703a 	and	r2,r3,r2
  415fbc:	1000081e 	bne	r2,zero,415fe0 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
  415fc0:	e0fffe17 	ldw	r3,-8(fp)
  415fc4:	e0bff717 	ldw	r2,-36(fp)
  415fc8:	1884703a 	and	r2,r3,r2
   * for the device
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
  415fcc:	1000041e 	bne	r2,zero,415fe0 <alt_avalon_dma_send+0x6c>
        (len & align_mask)            ||
        (len > priv->max_length))
  415fd0:	e0bff617 	ldw	r2,-40(fp)
  415fd4:	10c00617 	ldw	r3,24(r2)
   */

  align_mask = priv->flags & ALT_AVALON_DMA_MODE_MSK;

  if ((((alt_u32) from) & align_mask) ||
        (len & align_mask)            ||
  415fd8:	e0bffe17 	ldw	r2,-8(fp)
  415fdc:	1880022e 	bgeu	r3,r2,415fe8 <alt_avalon_dma_send+0x74>
        (len > priv->max_length))
  {
    return -EINVAL;
  415fe0:	00bffa84 	movi	r2,-22
  415fe4:	00002c06 	br	416098 <alt_avalon_dma_send+0x124>
  }

  start = priv->tx_start;
  415fe8:	e0bff617 	ldw	r2,-40(fp)
  415fec:	10800117 	ldw	r2,4(r2)
  415ff0:	e0bff815 	stw	r2,-32(fp)
  end   = priv->tx_end;
  415ff4:	e0bff617 	ldw	r2,-40(fp)
  415ff8:	10800217 	ldw	r2,8(r2)
  415ffc:	e0bff915 	stw	r2,-28(fp)
  slot  = &priv->tx_buf[end];
  416000:	e0bff917 	ldw	r2,-28(fp)
  416004:	1004913a 	slli	r2,r2,4
  416008:	10800904 	addi	r2,r2,36
  41600c:	e0fff617 	ldw	r3,-40(fp)
  416010:	1885883a 	add	r2,r3,r2
  416014:	e0bffa15 	stw	r2,-24(fp)
  next  = (end + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  416018:	e0bff917 	ldw	r2,-28(fp)
  41601c:	10800044 	addi	r2,r2,1
  416020:	108000cc 	andi	r2,r2,3
  416024:	e0bffb15 	stw	r2,-20(fp)

  if (next == start)
  416028:	e0fffb17 	ldw	r3,-20(fp)
  41602c:	e0bff817 	ldw	r2,-32(fp)
  416030:	1880021e 	bne	r3,r2,41603c <alt_avalon_dma_send+0xc8>
  {
    return -ENOSPC;
  416034:	00bff904 	movi	r2,-28
  416038:	00001706 	br	416098 <alt_avalon_dma_send+0x124>
  }

  /* Fill in the descriptor */

  slot->from   = from;
  41603c:	e0bffa17 	ldw	r2,-24(fp)
  416040:	e0fffd17 	ldw	r3,-12(fp)
  416044:	10c00015 	stw	r3,0(r2)
  slot->len    = len;
  416048:	e0bffa17 	ldw	r2,-24(fp)
  41604c:	e0fffe17 	ldw	r3,-8(fp)
  416050:	10c00115 	stw	r3,4(r2)
  slot->done   = done;
  416054:	e0bffa17 	ldw	r2,-24(fp)
  416058:	e0ffff17 	ldw	r3,-4(fp)
  41605c:	10c00215 	stw	r3,8(r2)
  slot->handle = handle;
  416060:	e0bffa17 	ldw	r2,-24(fp)
  416064:	e0c00217 	ldw	r3,8(fp)
  416068:	10c00315 	stw	r3,12(r2)

  priv->tx_end = next;
  41606c:	e0bff617 	ldw	r2,-40(fp)
  416070:	e0fffb17 	ldw	r3,-20(fp)
  416074:	10c00215 	stw	r3,8(r2)

  if (!priv->active)
  416078:	e0bff617 	ldw	r2,-40(fp)
  41607c:	10800817 	ldw	r2,32(r2)
  416080:	1000041e 	bne	r2,zero,416094 <alt_avalon_dma_send+0x120>
  {
    priv->launch (priv);
  416084:	e0bff617 	ldw	r2,-40(fp)
  416088:	10800717 	ldw	r2,28(r2)
  41608c:	e13ff617 	ldw	r4,-40(fp)
  416090:	103ee83a 	callr	r2
  }

  return 0;
  416094:	0005883a 	mov	r2,zero
}
  416098:	e037883a 	mov	sp,fp
  41609c:	dfc00117 	ldw	ra,4(sp)
  4160a0:	df000017 	ldw	fp,0(sp)
  4160a4:	dec00204 	addi	sp,sp,8
  4160a8:	f800283a 	ret

004160ac <alt_avalon_dma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_dma_irq (void* context)
#else
static void alt_avalon_dma_irq (void* context, alt_u32 id)
#endif
{
  4160ac:	deffef04 	addi	sp,sp,-68
  4160b0:	dfc01015 	stw	ra,64(sp)
  4160b4:	df000f15 	stw	fp,60(sp)
  4160b8:	df000f04 	addi	fp,sp,60
  4160bc:	e13fff15 	stw	r4,-4(fp)
  alt_avalon_dma_priv* priv = (alt_avalon_dma_priv*) context;
  4160c0:	e0bfff17 	ldw	r2,-4(fp)
  4160c4:	e0bff115 	stw	r2,-60(fp)
  alt_u32                rx_start;
  int                    stream_tx;
  int                    stream_rx;
  alt_irq_context        cpu_sr;

  stream_tx = priv->flags & ALT_AVALON_DMA_TX_STREAM;
  4160c8:	e0bff117 	ldw	r2,-60(fp)
  4160cc:	10800517 	ldw	r2,20(r2)
  4160d0:	1080080c 	andi	r2,r2,32
  4160d4:	e0bff215 	stw	r2,-56(fp)
  stream_rx = priv->flags & ALT_AVALON_DMA_RX_STREAM;
  4160d8:	e0bff117 	ldw	r2,-60(fp)
  4160dc:	10800517 	ldw	r2,20(r2)
  4160e0:	1080100c 	andi	r2,r2,64
  4160e4:	e0bff315 	stw	r2,-52(fp)

  tx_start = priv->tx_start;
  4160e8:	e0bff117 	ldw	r2,-60(fp)
  4160ec:	10800117 	ldw	r2,4(r2)
  4160f0:	e0bff415 	stw	r2,-48(fp)
  rx_start = priv->rx_start;
  4160f4:	e0bff117 	ldw	r2,-60(fp)
  4160f8:	10800317 	ldw	r2,12(r2)
  4160fc:	e0bff515 	stw	r2,-44(fp)

  tx_slot = &priv->tx_buf[tx_start];
  416100:	e0bff417 	ldw	r2,-48(fp)
  416104:	1004913a 	slli	r2,r2,4
  416108:	10800904 	addi	r2,r2,36
  41610c:	e0fff117 	ldw	r3,-60(fp)
  416110:	1885883a 	add	r2,r3,r2
  416114:	e0bff615 	stw	r2,-40(fp)
  rx_slot = &priv->rx_buf[rx_start];
  416118:	e0bff517 	ldw	r2,-44(fp)
  41611c:	1004913a 	slli	r2,r2,4
  416120:	10801904 	addi	r2,r2,100
  416124:	e0fff117 	ldw	r3,-60(fp)
  416128:	1885883a 	add	r2,r3,r2
  41612c:	e0bff715 	stw	r2,-36(fp)

  /* Increment the descriptors */

  if (!stream_tx)
  416130:	e0bff217 	ldw	r2,-56(fp)
  416134:	1000051e 	bne	r2,zero,41614c <alt_avalon_dma_irq+0xa0>
  {
    priv->tx_start = (tx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  416138:	e0bff417 	ldw	r2,-48(fp)
  41613c:	10800044 	addi	r2,r2,1
  416140:	10c000cc 	andi	r3,r2,3
  416144:	e0bff117 	ldw	r2,-60(fp)
  416148:	10c00115 	stw	r3,4(r2)
  }
  if (!stream_rx)
  41614c:	e0bff317 	ldw	r2,-52(fp)
  416150:	1000051e 	bne	r2,zero,416168 <alt_avalon_dma_irq+0xbc>
  {
    priv->rx_start = (rx_start + 1) & ALT_AVALON_DMA_NSLOTS_MSK;
  416154:	e0bff517 	ldw	r2,-44(fp)
  416158:	10800044 	addi	r2,r2,1
  41615c:	10c000cc 	andi	r3,r2,3
  416160:	e0bff117 	ldw	r2,-60(fp)
  416164:	10c00315 	stw	r3,12(r2)
  }

  /* clear the interrupt */

  IOWR_ALTERA_AVALON_DMA_STATUS (priv->base, 0);
  416168:	e0bff117 	ldw	r2,-60(fp)
  41616c:	10800017 	ldw	r2,0(r2)
  416170:	0007883a 	mov	r3,zero
  416174:	10c00035 	stwio	r3,0(r2)
  
  /* Dummy read to ensure IRQ is cleared prior to ISR completion*/
  IORD_ALTERA_AVALON_DMA_STATUS (priv->base);
  416178:	e0bff117 	ldw	r2,-60(fp)
  41617c:	10800017 	ldw	r2,0(r2)
  416180:	10800037 	ldwio	r2,0(r2)

  /* launch the next transaction */

  priv->launch (priv);
  416184:	e0bff117 	ldw	r2,-60(fp)
  416188:	10800717 	ldw	r2,28(r2)
  41618c:	e13ff117 	ldw	r4,-60(fp)
  416190:	103ee83a 	callr	r2
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the DMA driver to support 
   * interrupt preemption.
   */
  if (!stream_tx && tx_slot->done)
  416194:	e0bff217 	ldw	r2,-56(fp)
  416198:	1000201e 	bne	r2,zero,41621c <alt_avalon_dma_irq+0x170>
  41619c:	e0bff617 	ldw	r2,-40(fp)
  4161a0:	10800217 	ldw	r2,8(r2)
  4161a4:	10001d26 	beq	r2,zero,41621c <alt_avalon_dma_irq+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4161a8:	0005303a 	rdctl	r2,status
  4161ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4161b0:	e0fff917 	ldw	r3,-28(fp)
  4161b4:	00bfff84 	movi	r2,-2
  4161b8:	1884703a 	and	r2,r3,r2
  4161bc:	1001703a 	wrctl	status,r2
  
  return context;
  4161c0:	e0bff917 	ldw	r2,-28(fp)
  {
    cpu_sr = alt_irq_disable_all();
  4161c4:	e0bff815 	stw	r2,-32(fp)
    tx_slot->done (tx_slot->handle);
  4161c8:	e0bff617 	ldw	r2,-40(fp)
  4161cc:	10c00217 	ldw	r3,8(r2)
  4161d0:	e0bff617 	ldw	r2,-40(fp)
  4161d4:	10800317 	ldw	r2,12(r2)
  4161d8:	1009883a 	mov	r4,r2
  4161dc:	183ee83a 	callr	r3
  4161e0:	e0bff817 	ldw	r2,-32(fp)
  4161e4:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4161e8:	0005303a 	rdctl	r2,status
  4161ec:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4161f0:	e0fffb17 	ldw	r3,-20(fp)
  4161f4:	00bfff84 	movi	r2,-2
  4161f8:	1884703a 	and	r2,r3,r2
  4161fc:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  416200:	e0bffa17 	ldw	r2,-24(fp)
  416204:	1080004c 	andi	r2,r2,1
  416208:	e0fffb17 	ldw	r3,-20(fp)
  41620c:	1884b03a 	or	r2,r3,r2
  416210:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  416214:	e0bffb17 	ldw	r2,-20(fp)
  416218:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
    
  }
  if (!stream_rx && rx_slot->done)
  41621c:	e0bff317 	ldw	r2,-52(fp)
  416220:	1000231e 	bne	r2,zero,4162b0 <alt_avalon_dma_irq+0x204>
  416224:	e0bff717 	ldw	r2,-36(fp)
  416228:	10800217 	ldw	r2,8(r2)
  41622c:	10002026 	beq	r2,zero,4162b0 <alt_avalon_dma_irq+0x204>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  416230:	0005303a 	rdctl	r2,status
  416234:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  416238:	e0fffc17 	ldw	r3,-16(fp)
  41623c:	00bfff84 	movi	r2,-2
  416240:	1884703a 	and	r2,r3,r2
  416244:	1001703a 	wrctl	status,r2
  
  return context;
  416248:	e0bffc17 	ldw	r2,-16(fp)
  {
    cpu_sr = alt_irq_disable_all();
  41624c:	e0bff815 	stw	r2,-32(fp)
    rx_slot->done (rx_slot->handle, rx_slot->data);
  416250:	e0bff717 	ldw	r2,-36(fp)
  416254:	11800217 	ldw	r6,8(r2)
  416258:	e0bff717 	ldw	r2,-36(fp)
  41625c:	10c00317 	ldw	r3,12(r2)
  416260:	e0bff717 	ldw	r2,-36(fp)
  416264:	10800017 	ldw	r2,0(r2)
  416268:	1809883a 	mov	r4,r3
  41626c:	100b883a 	mov	r5,r2
  416270:	303ee83a 	callr	r6
  416274:	e0bff817 	ldw	r2,-32(fp)
  416278:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41627c:	0005303a 	rdctl	r2,status
  416280:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  416284:	e0fffe17 	ldw	r3,-8(fp)
  416288:	00bfff84 	movi	r2,-2
  41628c:	1884703a 	and	r2,r3,r2
  416290:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  416294:	e0bffd17 	ldw	r2,-12(fp)
  416298:	1080004c 	andi	r2,r2,1
  41629c:	e0fffe17 	ldw	r3,-8(fp)
  4162a0:	1884b03a 	or	r2,r3,r2
  4162a4:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  4162a8:	e0bffe17 	ldw	r2,-8(fp)
  4162ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
  4162b0:	e037883a 	mov	sp,fp
  4162b4:	dfc00117 	ldw	ra,4(sp)
  4162b8:	df000017 	ldw	fp,0(sp)
  4162bc:	dec00204 	addi	sp,sp,8
  4162c0:	f800283a 	ret

004162c4 <alt_avalon_dma_init>:
void alt_avalon_dma_init (alt_avalon_dma_txchan* tx,
                          alt_avalon_dma_rxchan* rx,
                          void*                  base,
                          alt_u32                ic_id,
                          alt_u32                irq)
{
  4162c4:	defff904 	addi	sp,sp,-28
  4162c8:	dfc00615 	stw	ra,24(sp)
  4162cc:	df000515 	stw	fp,20(sp)
  4162d0:	df000504 	addi	fp,sp,20
  4162d4:	e13ffc15 	stw	r4,-16(fp)
  4162d8:	e17ffd15 	stw	r5,-12(fp)
  4162dc:	e1bffe15 	stw	r6,-8(fp)
  4162e0:	e1ffff15 	stw	r7,-4(fp)

  /* Halt any current transactions (reset the device) */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
  4162e4:	e0bffe17 	ldw	r2,-8(fp)
  4162e8:	10800604 	addi	r2,r2,24
  4162ec:	00c40004 	movi	r3,4096
  4162f0:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_DMA_CONTROL (base, ALTERA_AVALON_DMA_CONTROL_SOFTWARERESET_MSK);
  4162f4:	e0bffe17 	ldw	r2,-8(fp)
  4162f8:	10800604 	addi	r2,r2,24
  4162fc:	00c40004 	movi	r3,4096
  416300:	10c00035 	stwio	r3,0(r2)

  /* Set the default mode of the device (32 bit block reads and writes from/to memory). */
  IOWR_ALTERA_AVALON_DMA_CONTROL (base,
  416304:	e0bffe17 	ldw	r2,-8(fp)
  416308:	10800604 	addi	r2,r2,24
  41630c:	00c03f04 	movi	r3,252
  416310:	10c00035 	stwio	r3,0(r2)
                          ALTERA_AVALON_DMA_CONTROL_REEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_WEEN_MSK      |
                          ALTERA_AVALON_DMA_CONTROL_LEEN_MSK);

  /* Clear any pending interrupts and the DONE flag */
  IOWR_ALTERA_AVALON_DMA_STATUS (base, 0);
  416314:	0007883a 	mov	r3,zero
  416318:	e0bffe17 	ldw	r2,-8(fp)
  41631c:	10c00035 	stwio	r3,0(r2)
  /*
   * Register the interrupt handler, and make the device available to the
   * system.
   */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if (alt_ic_isr_register(ic_id, irq, alt_avalon_dma_irq, tx->priv, 0x0) >= 0)
  416320:	e0bffc17 	ldw	r2,-16(fp)
  416324:	10800617 	ldw	r2,24(r2)
  416328:	d8000015 	stw	zero,0(sp)
  41632c:	e13fff17 	ldw	r4,-4(fp)
  416330:	e1400217 	ldw	r5,8(fp)
  416334:	01801074 	movhi	r6,65
  416338:	31982b04 	addi	r6,r6,24748
  41633c:	100f883a 	mov	r7,r2
  416340:	040abf40 	call	40abf4 <alt_ic_isr_register>
  416344:	10000616 	blt	r2,zero,416360 <alt_avalon_dma_init+0x9c>
#else
  if (alt_irq_register (irq, tx->priv, alt_avalon_dma_irq) >= 0)
#endif  
  {
    alt_dma_txchan_reg (&tx->dev);
  416348:	e0bffc17 	ldw	r2,-16(fp)
  41634c:	1009883a 	mov	r4,r2
  416350:	04157600 	call	415760 <alt_dma_txchan_reg>
    alt_dma_rxchan_reg (&rx->dev);
  416354:	e0bffd17 	ldw	r2,-12(fp)
  416358:	1009883a 	mov	r4,r2
  41635c:	04157980 	call	415798 <alt_dma_rxchan_reg>
  }
}
  416360:	e037883a 	mov	sp,fp
  416364:	dfc00117 	ldw	ra,4(sp)
  416368:	df000017 	ldw	fp,0(sp)
  41636c:	dec00204 	addi	sp,sp,8
  416370:	f800283a 	ret

00416374 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  416374:	defffa04 	addi	sp,sp,-24
  416378:	dfc00515 	stw	ra,20(sp)
  41637c:	df000415 	stw	fp,16(sp)
  416380:	df000404 	addi	fp,sp,16
  416384:	e13ffd15 	stw	r4,-12(fp)
  416388:	e17ffe15 	stw	r5,-8(fp)
  41638c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  416390:	e0bffd17 	ldw	r2,-12(fp)
  416394:	10800017 	ldw	r2,0(r2)
  416398:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  41639c:	e0bffc17 	ldw	r2,-16(fp)
  4163a0:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
  4163a4:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  4163a8:	10800217 	ldw	r2,8(r2)
  4163ac:	1809883a 	mov	r4,r3
  4163b0:	e17ffe17 	ldw	r5,-8(fp)
  4163b4:	e1bfff17 	ldw	r6,-4(fp)
  4163b8:	100f883a 	mov	r7,r2
  4163bc:	0416b280 	call	416b28 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  4163c0:	e037883a 	mov	sp,fp
  4163c4:	dfc00117 	ldw	ra,4(sp)
  4163c8:	df000017 	ldw	fp,0(sp)
  4163cc:	dec00204 	addi	sp,sp,8
  4163d0:	f800283a 	ret

004163d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  4163d4:	defffa04 	addi	sp,sp,-24
  4163d8:	dfc00515 	stw	ra,20(sp)
  4163dc:	df000415 	stw	fp,16(sp)
  4163e0:	df000404 	addi	fp,sp,16
  4163e4:	e13ffd15 	stw	r4,-12(fp)
  4163e8:	e17ffe15 	stw	r5,-8(fp)
  4163ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  4163f0:	e0bffd17 	ldw	r2,-12(fp)
  4163f4:	10800017 	ldw	r2,0(r2)
  4163f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  4163fc:	e0bffc17 	ldw	r2,-16(fp)
  416400:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
  416404:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  416408:	10800217 	ldw	r2,8(r2)
  41640c:	1809883a 	mov	r4,r3
  416410:	e17ffe17 	ldw	r5,-8(fp)
  416414:	e1bfff17 	ldw	r6,-4(fp)
  416418:	100f883a 	mov	r7,r2
  41641c:	0416e180 	call	416e18 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  416420:	e037883a 	mov	sp,fp
  416424:	dfc00117 	ldw	ra,4(sp)
  416428:	df000017 	ldw	fp,0(sp)
  41642c:	dec00204 	addi	sp,sp,8
  416430:	f800283a 	ret

00416434 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  416434:	defffc04 	addi	sp,sp,-16
  416438:	dfc00315 	stw	ra,12(sp)
  41643c:	df000215 	stw	fp,8(sp)
  416440:	df000204 	addi	fp,sp,8
  416444:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  416448:	e0bfff17 	ldw	r2,-4(fp)
  41644c:	10800017 	ldw	r2,0(r2)
  416450:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  416454:	e0bffe17 	ldw	r2,-8(fp)
  416458:	10c00a04 	addi	r3,r2,40
  41645c:	e0bfff17 	ldw	r2,-4(fp)
  416460:	10800217 	ldw	r2,8(r2)
  416464:	1809883a 	mov	r4,r3
  416468:	100b883a 	mov	r5,r2
  41646c:	04169cc0 	call	4169cc <altera_avalon_jtag_uart_close>
}
  416470:	e037883a 	mov	sp,fp
  416474:	dfc00117 	ldw	ra,4(sp)
  416478:	df000017 	ldw	fp,0(sp)
  41647c:	dec00204 	addi	sp,sp,8
  416480:	f800283a 	ret

00416484 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  416484:	defffa04 	addi	sp,sp,-24
  416488:	dfc00515 	stw	ra,20(sp)
  41648c:	df000415 	stw	fp,16(sp)
  416490:	df000404 	addi	fp,sp,16
  416494:	e13ffd15 	stw	r4,-12(fp)
  416498:	e17ffe15 	stw	r5,-8(fp)
  41649c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  4164a0:	e0bffd17 	ldw	r2,-12(fp)
  4164a4:	10800017 	ldw	r2,0(r2)
  4164a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  4164ac:	e0bffc17 	ldw	r2,-16(fp)
  4164b0:	10800a04 	addi	r2,r2,40
  4164b4:	1009883a 	mov	r4,r2
  4164b8:	e17ffe17 	ldw	r5,-8(fp)
  4164bc:	e1bfff17 	ldw	r6,-4(fp)
  4164c0:	0416a340 	call	416a34 <altera_avalon_jtag_uart_ioctl>
}
  4164c4:	e037883a 	mov	sp,fp
  4164c8:	dfc00117 	ldw	ra,4(sp)
  4164cc:	df000017 	ldw	fp,0(sp)
  4164d0:	dec00204 	addi	sp,sp,8
  4164d4:	f800283a 	ret

004164d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  4164d8:	defff404 	addi	sp,sp,-48
  4164dc:	dfc00b15 	stw	ra,44(sp)
  4164e0:	df000a15 	stw	fp,40(sp)
  4164e4:	df000a04 	addi	fp,sp,40
  4164e8:	e13ffd15 	stw	r4,-12(fp)
  4164ec:	e17ffe15 	stw	r5,-8(fp)
  4164f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  4164f4:	e0bffd17 	ldw	r2,-12(fp)
  4164f8:	10800c04 	addi	r2,r2,48
  4164fc:	e0bff715 	stw	r2,-36(fp)
  416500:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  416504:	e0fff80b 	ldhu	r3,-32(fp)
  416508:	e0bffc84 	addi	r2,fp,-14
  41650c:	1809883a 	mov	r4,r3
  416510:	100b883a 	mov	r5,r2
  416514:	040e5ac0 	call	40e5ac <OSFlagCreate>
  416518:	e0fff717 	ldw	r3,-36(fp)
  41651c:	18800015 	stw	r2,0(r3)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  416520:	e0bffd17 	ldw	r2,-12(fp)
  416524:	10800a04 	addi	r2,r2,40
  416528:	e0bff915 	stw	r2,-28(fp)
  41652c:	00800044 	movi	r2,1
  416530:	e0bffa0d 	sth	r2,-24(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  416534:	e0bffa0b 	ldhu	r2,-24(fp)
  416538:	1009883a 	mov	r4,r2
  41653c:	04120100 	call	412010 <OSSemCreate>
  416540:	e0fff917 	ldw	r3,-28(fp)
  416544:	18800015 	stw	r2,0(r3)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  416548:	e0bffd17 	ldw	r2,-12(fp)
  41654c:	10800b04 	addi	r2,r2,44
  416550:	e0bffb15 	stw	r2,-20(fp)
  416554:	00800044 	movi	r2,1
  416558:	e0bffc0d 	sth	r2,-16(fp)
  41655c:	e0bffc0b 	ldhu	r2,-16(fp)
  416560:	1009883a 	mov	r4,r2
  416564:	04120100 	call	412010 <OSSemCreate>
  416568:	e0fffb17 	ldw	r3,-20(fp)
  41656c:	18800015 	stw	r2,0(r3)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  416570:	e0bffd17 	ldw	r2,-12(fp)
  416574:	00c00044 	movi	r3,1
  416578:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  41657c:	e0bffd17 	ldw	r2,-12(fp)
  416580:	10800017 	ldw	r2,0(r2)
  416584:	10800104 	addi	r2,r2,4
  416588:	e0fffd17 	ldw	r3,-12(fp)
  41658c:	18c00817 	ldw	r3,32(r3)
  416590:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  416594:	e0fffe17 	ldw	r3,-8(fp)
  416598:	e0bfff17 	ldw	r2,-4(fp)
  41659c:	d8000015 	stw	zero,0(sp)
  4165a0:	1809883a 	mov	r4,r3
  4165a4:	100b883a 	mov	r5,r2
  4165a8:	01801074 	movhi	r6,65
  4165ac:	31998504 	addi	r6,r6,26132
  4165b0:	e1fffd17 	ldw	r7,-12(fp)
  4165b4:	040abf40 	call	40abf4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  4165b8:	e0bffd17 	ldw	r2,-12(fp)
  4165bc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  4165c0:	e0bffd17 	ldw	r2,-12(fp)
  4165c4:	10c00204 	addi	r3,r2,8
  4165c8:	008010b4 	movhi	r2,66
  4165cc:	10b5a504 	addi	r2,r2,-10604
  4165d0:	10800017 	ldw	r2,0(r2)
  4165d4:	1809883a 	mov	r4,r3
  4165d8:	100b883a 	mov	r5,r2
  4165dc:	01801074 	movhi	r6,65
  4165e0:	319a3004 	addi	r6,r6,26816
  4165e4:	e1fffd17 	ldw	r7,-12(fp)
  4165e8:	04181580 	call	418158 <alt_alarm_start>
  4165ec:	1000040e 	bge	r2,zero,416600 <altera_avalon_jtag_uart_init+0x128>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  4165f0:	e0bffd17 	ldw	r2,-12(fp)
  4165f4:	00e00034 	movhi	r3,32768
  4165f8:	18ffffc4 	addi	r3,r3,-1
  4165fc:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  416600:	e037883a 	mov	sp,fp
  416604:	dfc00117 	ldw	ra,4(sp)
  416608:	df000017 	ldw	fp,0(sp)
  41660c:	dec00204 	addi	sp,sp,8
  416610:	f800283a 	ret

00416614 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  416614:	defff204 	addi	sp,sp,-56
  416618:	dfc00d15 	stw	ra,52(sp)
  41661c:	df000c15 	stw	fp,48(sp)
  416620:	df000c04 	addi	fp,sp,48
  416624:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  416628:	e0bfff17 	ldw	r2,-4(fp)
  41662c:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
  416630:	e0bff617 	ldw	r2,-40(fp)
  416634:	10800017 	ldw	r2,0(r2)
  416638:	e0bff715 	stw	r2,-36(fp)
  41663c:	00000106 	br	416644 <altera_avalon_jtag_uart_irq+0x30>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
  416640:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  416644:	e0bff717 	ldw	r2,-36(fp)
  416648:	10800104 	addi	r2,r2,4
  41664c:	10800037 	ldwio	r2,0(r2)
  416650:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  416654:	e0bff817 	ldw	r2,-32(fp)
  416658:	1080c00c 	andi	r2,r2,768
  41665c:	10009226 	beq	r2,zero,4168a8 <altera_avalon_jtag_uart_irq+0x294>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  416660:	e0bff817 	ldw	r2,-32(fp)
  416664:	1080400c 	andi	r2,r2,256
  416668:	10004826 	beq	r2,zero,41678c <altera_avalon_jtag_uart_irq+0x178>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  41666c:	00800074 	movhi	r2,1
  416670:	e0bff415 	stw	r2,-48(fp)
  416674:	00000106 	br	41667c <altera_avalon_jtag_uart_irq+0x68>
        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  416678:	0001883a 	nop
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  41667c:	e0bff617 	ldw	r2,-40(fp)
  416680:	10800d17 	ldw	r2,52(r2)
  416684:	10800044 	addi	r2,r2,1
  416688:	1081ffcc 	andi	r2,r2,2047
  41668c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  416690:	e0bff617 	ldw	r2,-40(fp)
  416694:	10c00e17 	ldw	r3,56(r2)
  416698:	e0bff917 	ldw	r2,-28(fp)
  41669c:	18802726 	beq	r3,r2,41673c <altera_avalon_jtag_uart_irq+0x128>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  4166a0:	e0bff717 	ldw	r2,-36(fp)
  4166a4:	10800037 	ldwio	r2,0(r2)
  4166a8:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  4166ac:	e0bff417 	ldw	r2,-48(fp)
  4166b0:	10a0000c 	andi	r2,r2,32768
  4166b4:	10002326 	beq	r2,zero,416744 <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  4166b8:	e0bff617 	ldw	r2,-40(fp)
  4166bc:	10800d17 	ldw	r2,52(r2)
  4166c0:	e0fff417 	ldw	r3,-48(fp)
  4166c4:	e13ff617 	ldw	r4,-40(fp)
  4166c8:	2085883a 	add	r2,r4,r2
  4166cc:	10801104 	addi	r2,r2,68
  4166d0:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  4166d4:	e0bff617 	ldw	r2,-40(fp)
  4166d8:	10800d17 	ldw	r2,52(r2)
  4166dc:	10800044 	addi	r2,r2,1
  4166e0:	10c1ffcc 	andi	r3,r2,2047
  4166e4:	e0bff617 	ldw	r2,-40(fp)
  4166e8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  4166ec:	e0bff617 	ldw	r2,-40(fp)
  4166f0:	10800c17 	ldw	r2,48(r2)
  4166f4:	e0bffa15 	stw	r2,-24(fp)
  4166f8:	00800044 	movi	r2,1
  4166fc:	e0bffb0d 	sth	r2,-20(fp)
  416700:	00800044 	movi	r2,1
  416704:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  416708:	008010b4 	movhi	r2,66
  41670c:	10b58f44 	addi	r2,r2,-10691
  416710:	10800003 	ldbu	r2,0(r2)
  416714:	10803fcc 	andi	r2,r2,255
  416718:	103fd726 	beq	r2,zero,416678 <altera_avalon_jtag_uart_irq+0x64>
  {
    OSFlagPost (group, flags, opt, &err);
  41671c:	e17ffb0b 	ldhu	r5,-20(fp)
  416720:	e0fffb83 	ldbu	r3,-18(fp)
  416724:	e0bffdc4 	addi	r2,fp,-9
  416728:	e13ffa17 	ldw	r4,-24(fp)
  41672c:	180d883a 	mov	r6,r3
  416730:	100f883a 	mov	r7,r2
  416734:	040f6500 	call	40f650 <OSFlagPost>
      }
  416738:	003fcf06 	br	416678 <altera_avalon_jtag_uart_irq+0x64>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  41673c:	0001883a 	nop
  416740:	00000106 	br	416748 <altera_avalon_jtag_uart_irq+0x134>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  416744:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  416748:	e0bff417 	ldw	r2,-48(fp)
  41674c:	10bfffec 	andhi	r2,r2,65535
  416750:	10000e26 	beq	r2,zero,41678c <altera_avalon_jtag_uart_irq+0x178>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  416754:	e0bff617 	ldw	r2,-40(fp)
  416758:	10c00817 	ldw	r3,32(r2)
  41675c:	00bfff84 	movi	r2,-2
  416760:	1886703a 	and	r3,r3,r2
  416764:	e0bff617 	ldw	r2,-40(fp)
  416768:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  41676c:	e0bff717 	ldw	r2,-36(fp)
  416770:	10800104 	addi	r2,r2,4
  416774:	e0fff617 	ldw	r3,-40(fp)
  416778:	18c00817 	ldw	r3,32(r3)
  41677c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  416780:	e0bff717 	ldw	r2,-36(fp)
  416784:	10800104 	addi	r2,r2,4
  416788:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  41678c:	e0bff817 	ldw	r2,-32(fp)
  416790:	1080800c 	andi	r2,r2,512
  416794:	103faa26 	beq	r2,zero,416640 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  416798:	e0bff817 	ldw	r2,-32(fp)
  41679c:	1004d43a 	srli	r2,r2,16
  4167a0:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  4167a4:	00002706 	br	416844 <altera_avalon_jtag_uart_irq+0x230>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  4167a8:	e0bff717 	ldw	r2,-36(fp)
  4167ac:	e0fff617 	ldw	r3,-40(fp)
  4167b0:	18c01017 	ldw	r3,64(r3)
  4167b4:	e13ff617 	ldw	r4,-40(fp)
  4167b8:	20c7883a 	add	r3,r4,r3
  4167bc:	18c21104 	addi	r3,r3,2116
  4167c0:	18c00003 	ldbu	r3,0(r3)
  4167c4:	18c03fcc 	andi	r3,r3,255
  4167c8:	18c0201c 	xori	r3,r3,128
  4167cc:	18ffe004 	addi	r3,r3,-128
  4167d0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  4167d4:	e0bff617 	ldw	r2,-40(fp)
  4167d8:	10801017 	ldw	r2,64(r2)
  4167dc:	10800044 	addi	r2,r2,1
  4167e0:	10c1ffcc 	andi	r3,r2,2047
  4167e4:	e0bff617 	ldw	r2,-40(fp)
  4167e8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  4167ec:	e0bff617 	ldw	r2,-40(fp)
  4167f0:	10800c17 	ldw	r2,48(r2)
  4167f4:	e0bffc15 	stw	r2,-16(fp)
  4167f8:	00800084 	movi	r2,2
  4167fc:	e0bffd0d 	sth	r2,-12(fp)
  416800:	00800044 	movi	r2,1
  416804:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  416808:	008010b4 	movhi	r2,66
  41680c:	10b58f44 	addi	r2,r2,-10691
  416810:	10800003 	ldbu	r2,0(r2)
  416814:	10803fcc 	andi	r2,r2,255
  416818:	10000726 	beq	r2,zero,416838 <altera_avalon_jtag_uart_irq+0x224>
  {
    OSFlagPost (group, flags, opt, &err);
  41681c:	e17ffd0b 	ldhu	r5,-12(fp)
  416820:	e0fffd83 	ldbu	r3,-10(fp)
  416824:	e0bffe04 	addi	r2,fp,-8
  416828:	e13ffc17 	ldw	r4,-16(fp)
  41682c:	180d883a 	mov	r6,r3
  416830:	100f883a 	mov	r7,r2
  416834:	040f6500 	call	40f650 <OSFlagPost>

        space--;
  416838:	e0bff517 	ldw	r2,-44(fp)
  41683c:	10bfffc4 	addi	r2,r2,-1
  416840:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  416844:	e0bff517 	ldw	r2,-44(fp)
  416848:	10000526 	beq	r2,zero,416860 <altera_avalon_jtag_uart_irq+0x24c>
  41684c:	e0bff617 	ldw	r2,-40(fp)
  416850:	10c01017 	ldw	r3,64(r2)
  416854:	e0bff617 	ldw	r2,-40(fp)
  416858:	10800f17 	ldw	r2,60(r2)
  41685c:	18bfd21e 	bne	r3,r2,4167a8 <altera_avalon_jtag_uart_irq+0x194>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  416860:	e0bff517 	ldw	r2,-44(fp)
  416864:	103f7626 	beq	r2,zero,416640 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  416868:	e0bff617 	ldw	r2,-40(fp)
  41686c:	10c00817 	ldw	r3,32(r2)
  416870:	00bfff44 	movi	r2,-3
  416874:	1886703a 	and	r3,r3,r2
  416878:	e0bff617 	ldw	r2,-40(fp)
  41687c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  416880:	e0bff617 	ldw	r2,-40(fp)
  416884:	10800017 	ldw	r2,0(r2)
  416888:	10800104 	addi	r2,r2,4
  41688c:	e0fff617 	ldw	r3,-40(fp)
  416890:	18c00817 	ldw	r3,32(r3)
  416894:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  416898:	e0bff717 	ldw	r2,-36(fp)
  41689c:	10800104 	addi	r2,r2,4
  4168a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  4168a4:	003f6606 	br	416640 <altera_avalon_jtag_uart_irq+0x2c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  4168a8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  4168ac:	e037883a 	mov	sp,fp
  4168b0:	dfc00117 	ldw	ra,4(sp)
  4168b4:	df000017 	ldw	fp,0(sp)
  4168b8:	dec00204 	addi	sp,sp,8
  4168bc:	f800283a 	ret

004168c0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  4168c0:	defff904 	addi	sp,sp,-28
  4168c4:	dfc00615 	stw	ra,24(sp)
  4168c8:	df000515 	stw	fp,20(sp)
  4168cc:	df000504 	addi	fp,sp,20
  4168d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  4168d4:	e0bfff17 	ldw	r2,-4(fp)
  4168d8:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  4168dc:	e0bffb17 	ldw	r2,-20(fp)
  4168e0:	10800017 	ldw	r2,0(r2)
  4168e4:	10800104 	addi	r2,r2,4
  4168e8:	10800037 	ldwio	r2,0(r2)
  4168ec:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  4168f0:	e0bffc17 	ldw	r2,-16(fp)
  4168f4:	1081000c 	andi	r2,r2,1024
  4168f8:	10000a26 	beq	r2,zero,416924 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  4168fc:	e0bffb17 	ldw	r2,-20(fp)
  416900:	10800017 	ldw	r2,0(r2)
  416904:	10800104 	addi	r2,r2,4
  416908:	e0fffb17 	ldw	r3,-20(fp)
  41690c:	18c00817 	ldw	r3,32(r3)
  416910:	18c10014 	ori	r3,r3,1024
  416914:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  416918:	e0bffb17 	ldw	r2,-20(fp)
  41691c:	10000915 	stw	zero,36(r2)
  416920:	00002206 	br	4169ac <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  416924:	e0bffb17 	ldw	r2,-20(fp)
  416928:	10800917 	ldw	r2,36(r2)
  41692c:	00e00034 	movhi	r3,32768
  416930:	18ffff04 	addi	r3,r3,-4
  416934:	18801d36 	bltu	r3,r2,4169ac <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
  416938:	e0bffb17 	ldw	r2,-20(fp)
  41693c:	10800917 	ldw	r2,36(r2)
  416940:	10c00044 	addi	r3,r2,1
  416944:	e0bffb17 	ldw	r2,-20(fp)
  416948:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  41694c:	e0bffb17 	ldw	r2,-20(fp)
  416950:	10c00917 	ldw	r3,36(r2)
  416954:	e0bffb17 	ldw	r2,-20(fp)
  416958:	10800117 	ldw	r2,4(r2)
  41695c:	18801336 	bltu	r3,r2,4169ac <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  416960:	e0bffb17 	ldw	r2,-20(fp)
  416964:	10800c17 	ldw	r2,48(r2)
  416968:	e0bffd15 	stw	r2,-12(fp)
  41696c:	00800104 	movi	r2,4
  416970:	e0bffe0d 	sth	r2,-8(fp)
  416974:	00800044 	movi	r2,1
  416978:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  41697c:	008010b4 	movhi	r2,66
  416980:	10b58f44 	addi	r2,r2,-10691
  416984:	10800003 	ldbu	r2,0(r2)
  416988:	10803fcc 	andi	r2,r2,255
  41698c:	10000726 	beq	r2,zero,4169ac <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
  416990:	e17ffe0b 	ldhu	r5,-8(fp)
  416994:	e0fffe83 	ldbu	r3,-6(fp)
  416998:	e0bffec4 	addi	r2,fp,-5
  41699c:	e13ffd17 	ldw	r4,-12(fp)
  4169a0:	180d883a 	mov	r6,r3
  4169a4:	100f883a 	mov	r7,r2
  4169a8:	040f6500 	call	40f650 <OSFlagPost>
  4169ac:	008010b4 	movhi	r2,66
  4169b0:	10b5a504 	addi	r2,r2,-10604
  4169b4:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  4169b8:	e037883a 	mov	sp,fp
  4169bc:	dfc00117 	ldw	ra,4(sp)
  4169c0:	df000017 	ldw	fp,0(sp)
  4169c4:	dec00204 	addi	sp,sp,8
  4169c8:	f800283a 	ret

004169cc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  4169cc:	defffd04 	addi	sp,sp,-12
  4169d0:	df000215 	stw	fp,8(sp)
  4169d4:	df000204 	addi	fp,sp,8
  4169d8:	e13ffe15 	stw	r4,-8(fp)
  4169dc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  4169e0:	00000506 	br	4169f8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  4169e4:	e0bfff17 	ldw	r2,-4(fp)
  4169e8:	1090000c 	andi	r2,r2,16384
  4169ec:	10000226 	beq	r2,zero,4169f8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  4169f0:	00bffd44 	movi	r2,-11
  4169f4:	00000b06 	br	416a24 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  4169f8:	e0bffe17 	ldw	r2,-8(fp)
  4169fc:	10c01017 	ldw	r3,64(r2)
  416a00:	e0bffe17 	ldw	r2,-8(fp)
  416a04:	10800f17 	ldw	r2,60(r2)
  416a08:	18800526 	beq	r3,r2,416a20 <altera_avalon_jtag_uart_close+0x54>
  416a0c:	e0bffe17 	ldw	r2,-8(fp)
  416a10:	10c00917 	ldw	r3,36(r2)
  416a14:	e0bffe17 	ldw	r2,-8(fp)
  416a18:	10800117 	ldw	r2,4(r2)
  416a1c:	18bff136 	bltu	r3,r2,4169e4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  416a20:	0005883a 	mov	r2,zero
}
  416a24:	e037883a 	mov	sp,fp
  416a28:	df000017 	ldw	fp,0(sp)
  416a2c:	dec00104 	addi	sp,sp,4
  416a30:	f800283a 	ret

00416a34 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  416a34:	defffa04 	addi	sp,sp,-24
  416a38:	df000515 	stw	fp,20(sp)
  416a3c:	df000504 	addi	fp,sp,20
  416a40:	e13ffd15 	stw	r4,-12(fp)
  416a44:	e17ffe15 	stw	r5,-8(fp)
  416a48:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  416a4c:	00bff9c4 	movi	r2,-25
  416a50:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  416a54:	e0bffe17 	ldw	r2,-8(fp)
  416a58:	10da8060 	cmpeqi	r3,r2,27137
  416a5c:	1800031e 	bne	r3,zero,416a6c <altera_avalon_jtag_uart_ioctl+0x38>
  416a60:	109a80a0 	cmpeqi	r2,r2,27138
  416a64:	1000181e 	bne	r2,zero,416ac8 <altera_avalon_jtag_uart_ioctl+0x94>
  416a68:	00002606 	br	416b04 <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  416a6c:	e0bffd17 	ldw	r2,-12(fp)
  416a70:	10c00117 	ldw	r3,4(r2)
  416a74:	00a00034 	movhi	r2,32768
  416a78:	10bfffc4 	addi	r2,r2,-1
  416a7c:	18802226 	beq	r3,r2,416b08 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
  416a80:	e0bfff17 	ldw	r2,-4(fp)
  416a84:	10800017 	ldw	r2,0(r2)
  416a88:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  416a8c:	e0bffc17 	ldw	r2,-16(fp)
  416a90:	10800090 	cmplti	r2,r2,2
  416a94:	1000061e 	bne	r2,zero,416ab0 <altera_avalon_jtag_uart_ioctl+0x7c>
  416a98:	e0fffc17 	ldw	r3,-16(fp)
  416a9c:	00a00034 	movhi	r2,32768
  416aa0:	10bfffc4 	addi	r2,r2,-1
  416aa4:	18800226 	beq	r3,r2,416ab0 <altera_avalon_jtag_uart_ioctl+0x7c>
  416aa8:	e0bffc17 	ldw	r2,-16(fp)
  416aac:	00000206 	br	416ab8 <altera_avalon_jtag_uart_ioctl+0x84>
  416ab0:	00a00034 	movhi	r2,32768
  416ab4:	10bfff84 	addi	r2,r2,-2
  416ab8:	e0fffd17 	ldw	r3,-12(fp)
  416abc:	18800115 	stw	r2,4(r3)
      rc = 0;
  416ac0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  416ac4:	00001006 	br	416b08 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  416ac8:	e0bffd17 	ldw	r2,-12(fp)
  416acc:	10c00117 	ldw	r3,4(r2)
  416ad0:	00a00034 	movhi	r2,32768
  416ad4:	10bfffc4 	addi	r2,r2,-1
  416ad8:	18800d26 	beq	r3,r2,416b10 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  416adc:	e0bffd17 	ldw	r2,-12(fp)
  416ae0:	10c00917 	ldw	r3,36(r2)
  416ae4:	e0bffd17 	ldw	r2,-12(fp)
  416ae8:	10800117 	ldw	r2,4(r2)
  416aec:	1885803a 	cmpltu	r2,r3,r2
  416af0:	10c03fcc 	andi	r3,r2,255
  416af4:	e0bfff17 	ldw	r2,-4(fp)
  416af8:	10c00015 	stw	r3,0(r2)
      rc = 0;
  416afc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  416b00:	00000306 	br	416b10 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
  416b04:	00000306 	br	416b14 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  416b08:	0001883a 	nop
  416b0c:	00000106 	br	416b14 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  416b10:	0001883a 	nop

  default:
    break;
  }

  return rc;
  416b14:	e0bffb17 	ldw	r2,-20(fp)
}
  416b18:	e037883a 	mov	sp,fp
  416b1c:	df000017 	ldw	fp,0(sp)
  416b20:	dec00104 	addi	sp,sp,4
  416b24:	f800283a 	ret

00416b28 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  416b28:	deffeb04 	addi	sp,sp,-84
  416b2c:	dfc01415 	stw	ra,80(sp)
  416b30:	df001315 	stw	fp,76(sp)
  416b34:	df001304 	addi	fp,sp,76
  416b38:	e13ffc15 	stw	r4,-16(fp)
  416b3c:	e17ffd15 	stw	r5,-12(fp)
  416b40:	e1bffe15 	stw	r6,-8(fp)
  416b44:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  416b48:	e0bffd17 	ldw	r2,-12(fp)
  416b4c:	e0bfee15 	stw	r2,-72(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  416b50:	e0bffc17 	ldw	r2,-16(fp)
  416b54:	10800a17 	ldw	r2,40(r2)
  416b58:	e0bff315 	stw	r2,-52(fp)
  416b5c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  416b60:	e0fff40b 	ldhu	r3,-48(fp)
  416b64:	e0bffb04 	addi	r2,fp,-20
  416b68:	e13ff317 	ldw	r4,-52(fp)
  416b6c:	180b883a 	mov	r5,r3
  416b70:	100d883a 	mov	r6,r2
  416b74:	041245c0 	call	41245c <OSSemPend>

  while (space > 0)
  416b78:	00006406 	br	416d0c <altera_avalon_jtag_uart_read+0x1e4>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  416b7c:	e0bffc17 	ldw	r2,-16(fp)
  416b80:	10800d17 	ldw	r2,52(r2)
  416b84:	e0bff015 	stw	r2,-64(fp)
      out = sp->rx_out;
  416b88:	e0bffc17 	ldw	r2,-16(fp)
  416b8c:	10800e17 	ldw	r2,56(r2)
  416b90:	e0bff115 	stw	r2,-60(fp)

      if (in >= out)
  416b94:	e0fff017 	ldw	r3,-64(fp)
  416b98:	e0bff117 	ldw	r2,-60(fp)
  416b9c:	18800536 	bltu	r3,r2,416bb4 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
  416ba0:	e0fff017 	ldw	r3,-64(fp)
  416ba4:	e0bff117 	ldw	r2,-60(fp)
  416ba8:	1885c83a 	sub	r2,r3,r2
  416bac:	e0bfef15 	stw	r2,-68(fp)
  416bb0:	00000406 	br	416bc4 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  416bb4:	00c20004 	movi	r3,2048
  416bb8:	e0bff117 	ldw	r2,-60(fp)
  416bbc:	1885c83a 	sub	r2,r3,r2
  416bc0:	e0bfef15 	stw	r2,-68(fp)

      if (n == 0)
  416bc4:	e0bfef17 	ldw	r2,-68(fp)
  416bc8:	10001e26 	beq	r2,zero,416c44 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  416bcc:	e0fffe17 	ldw	r3,-8(fp)
  416bd0:	e0bfef17 	ldw	r2,-68(fp)
  416bd4:	1880022e 	bgeu	r3,r2,416be0 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
  416bd8:	e0bffe17 	ldw	r2,-8(fp)
  416bdc:	e0bfef15 	stw	r2,-68(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  416be0:	e0bff117 	ldw	r2,-60(fp)
  416be4:	10801104 	addi	r2,r2,68
  416be8:	e0fffc17 	ldw	r3,-16(fp)
  416bec:	1885883a 	add	r2,r3,r2
  416bf0:	e13fee17 	ldw	r4,-72(fp)
  416bf4:	100b883a 	mov	r5,r2
  416bf8:	e1bfef17 	ldw	r6,-68(fp)
  416bfc:	0400f1c0 	call	400f1c <memcpy>
      ptr   += n;
  416c00:	e0ffee17 	ldw	r3,-72(fp)
  416c04:	e0bfef17 	ldw	r2,-68(fp)
  416c08:	1885883a 	add	r2,r3,r2
  416c0c:	e0bfee15 	stw	r2,-72(fp)
      space -= n;
  416c10:	e0fffe17 	ldw	r3,-8(fp)
  416c14:	e0bfef17 	ldw	r2,-68(fp)
  416c18:	1885c83a 	sub	r2,r3,r2
  416c1c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  416c20:	e0fff117 	ldw	r3,-60(fp)
  416c24:	e0bfef17 	ldw	r2,-68(fp)
  416c28:	1885883a 	add	r2,r3,r2
  416c2c:	10c1ffcc 	andi	r3,r2,2047
  416c30:	e0bffc17 	ldw	r2,-16(fp)
  416c34:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  416c38:	e0bffe17 	ldw	r2,-8(fp)
  416c3c:	00bfcf16 	blt	zero,r2,416b7c <altera_avalon_jtag_uart_read+0x54>
  416c40:	00000106 	br	416c48 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  416c44:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  416c48:	e0ffee17 	ldw	r3,-72(fp)
  416c4c:	e0bffd17 	ldw	r2,-12(fp)
  416c50:	1880311e 	bne	r3,r2,416d18 <altera_avalon_jtag_uart_read+0x1f0>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  416c54:	e0bfff17 	ldw	r2,-4(fp)
  416c58:	1090000c 	andi	r2,r2,16384
  416c5c:	1000301e 	bne	r2,zero,416d20 <altera_avalon_jtag_uart_read+0x1f8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  416c60:	008010b4 	movhi	r2,66
  416c64:	10b58f44 	addi	r2,r2,-10691
  416c68:	10800003 	ldbu	r2,0(r2)
  416c6c:	10803fcc 	andi	r2,r2,255
  416c70:	10800058 	cmpnei	r2,r2,1
  416c74:	1000171e 	bne	r2,zero,416cd4 <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  416c78:	e0bffc17 	ldw	r2,-16(fp)
  416c7c:	10800c17 	ldw	r2,48(r2)
  416c80:	e0bff515 	stw	r2,-44(fp)
  416c84:	00800144 	movi	r2,5
  416c88:	e0bff60d 	sth	r2,-40(fp)
  416c8c:	00bfe0c4 	movi	r2,-125
  416c90:	e0bff685 	stb	r2,-38(fp)
  416c94:	e03ff70d 	sth	zero,-36(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  416c98:	008010b4 	movhi	r2,66
  416c9c:	10b58f44 	addi	r2,r2,-10691
  416ca0:	10800003 	ldbu	r2,0(r2)
  416ca4:	10803fcc 	andi	r2,r2,255
  416ca8:	10001426 	beq	r2,zero,416cfc <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  416cac:	e17ff60b 	ldhu	r5,-40(fp)
  416cb0:	e0fff683 	ldbu	r3,-38(fp)
  416cb4:	e0bff70b 	ldhu	r2,-36(fp)
  416cb8:	e13ffb44 	addi	r4,fp,-19
  416cbc:	d9000015 	stw	r4,0(sp)
  416cc0:	e13ff517 	ldw	r4,-44(fp)
  416cc4:	180d883a 	mov	r6,r3
  416cc8:	100f883a 	mov	r7,r2
  416ccc:	040edac0 	call	40edac <OSFlagPend>
  416cd0:	00000a06 	br	416cfc <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  416cd4:	0001883a 	nop
  416cd8:	e0bffc17 	ldw	r2,-16(fp)
  416cdc:	10c00d17 	ldw	r3,52(r2)
  416ce0:	e0bff017 	ldw	r2,-64(fp)
  416ce4:	1880051e 	bne	r3,r2,416cfc <altera_avalon_jtag_uart_read+0x1d4>
  416ce8:	e0bffc17 	ldw	r2,-16(fp)
  416cec:	10c00917 	ldw	r3,36(r2)
  416cf0:	e0bffc17 	ldw	r2,-16(fp)
  416cf4:	10800117 	ldw	r2,4(r2)
  416cf8:	18bff736 	bltu	r3,r2,416cd8 <altera_avalon_jtag_uart_read+0x1b0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  416cfc:	e0bffc17 	ldw	r2,-16(fp)
  416d00:	10c00d17 	ldw	r3,52(r2)
  416d04:	e0bff017 	ldw	r2,-64(fp)
  416d08:	18800726 	beq	r3,r2,416d28 <altera_avalon_jtag_uart_read+0x200>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  416d0c:	e0bffe17 	ldw	r2,-8(fp)
  416d10:	00bf9a16 	blt	zero,r2,416b7c <altera_avalon_jtag_uart_read+0x54>
  416d14:	00000506 	br	416d2c <altera_avalon_jtag_uart_read+0x204>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  416d18:	0001883a 	nop
  416d1c:	00000306 	br	416d2c <altera_avalon_jtag_uart_read+0x204>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  416d20:	0001883a 	nop
  416d24:	00000106 	br	416d2c <altera_avalon_jtag_uart_read+0x204>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  416d28:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  416d2c:	e0bffc17 	ldw	r2,-16(fp)
  416d30:	10800a17 	ldw	r2,40(r2)
  416d34:	1009883a 	mov	r4,r2
  416d38:	04129180 	call	412918 <OSSemPost>

  if (ptr != buffer)
  416d3c:	e0ffee17 	ldw	r3,-72(fp)
  416d40:	e0bffd17 	ldw	r2,-12(fp)
  416d44:	18802226 	beq	r3,r2,416dd0 <altera_avalon_jtag_uart_read+0x2a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  416d48:	0005303a 	rdctl	r2,status
  416d4c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  416d50:	e0fff817 	ldw	r3,-32(fp)
  416d54:	00bfff84 	movi	r2,-2
  416d58:	1884703a 	and	r2,r3,r2
  416d5c:	1001703a 	wrctl	status,r2
  
  return context;
  416d60:	e0bff817 	ldw	r2,-32(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  416d64:	e0bff215 	stw	r2,-56(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  416d68:	e0bffc17 	ldw	r2,-16(fp)
  416d6c:	10800817 	ldw	r2,32(r2)
  416d70:	10c00054 	ori	r3,r2,1
  416d74:	e0bffc17 	ldw	r2,-16(fp)
  416d78:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  416d7c:	e0bffc17 	ldw	r2,-16(fp)
  416d80:	10800017 	ldw	r2,0(r2)
  416d84:	10800104 	addi	r2,r2,4
  416d88:	e0fffc17 	ldw	r3,-16(fp)
  416d8c:	18c00817 	ldw	r3,32(r3)
  416d90:	10c00035 	stwio	r3,0(r2)
  416d94:	e0bff217 	ldw	r2,-56(fp)
  416d98:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  416d9c:	0005303a 	rdctl	r2,status
  416da0:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  416da4:	e0fffa17 	ldw	r3,-24(fp)
  416da8:	00bfff84 	movi	r2,-2
  416dac:	1884703a 	and	r2,r3,r2
  416db0:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  416db4:	e0bff917 	ldw	r2,-28(fp)
  416db8:	1080004c 	andi	r2,r2,1
  416dbc:	e0fffa17 	ldw	r3,-24(fp)
  416dc0:	1884b03a 	or	r2,r3,r2
  416dc4:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  416dc8:	e0bffa17 	ldw	r2,-24(fp)
  416dcc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  416dd0:	e0ffee17 	ldw	r3,-72(fp)
  416dd4:	e0bffd17 	ldw	r2,-12(fp)
  416dd8:	18800426 	beq	r3,r2,416dec <altera_avalon_jtag_uart_read+0x2c4>
    return ptr - buffer;
  416ddc:	e0ffee17 	ldw	r3,-72(fp)
  416de0:	e0bffd17 	ldw	r2,-12(fp)
  416de4:	1885c83a 	sub	r2,r3,r2
  416de8:	00000606 	br	416e04 <altera_avalon_jtag_uart_read+0x2dc>
  else if (flags & O_NONBLOCK)
  416dec:	e0bfff17 	ldw	r2,-4(fp)
  416df0:	1090000c 	andi	r2,r2,16384
  416df4:	10000226 	beq	r2,zero,416e00 <altera_avalon_jtag_uart_read+0x2d8>
    return -EWOULDBLOCK;
  416df8:	00bffd44 	movi	r2,-11
  416dfc:	00000106 	br	416e04 <altera_avalon_jtag_uart_read+0x2dc>
  else
    return -EIO;
  416e00:	00bffec4 	movi	r2,-5
}
  416e04:	e037883a 	mov	sp,fp
  416e08:	dfc00117 	ldw	ra,4(sp)
  416e0c:	df000017 	ldw	fp,0(sp)
  416e10:	dec00204 	addi	sp,sp,8
  416e14:	f800283a 	ret

00416e18 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  416e18:	deffec04 	addi	sp,sp,-80
  416e1c:	dfc01315 	stw	ra,76(sp)
  416e20:	df001215 	stw	fp,72(sp)
  416e24:	df001204 	addi	fp,sp,72
  416e28:	e13ffc15 	stw	r4,-16(fp)
  416e2c:	e17ffd15 	stw	r5,-12(fp)
  416e30:	e1bffe15 	stw	r6,-8(fp)
  416e34:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  416e38:	e03fef15 	stw	zero,-68(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  416e3c:	e0bffd17 	ldw	r2,-12(fp)
  416e40:	e0bff115 	stw	r2,-60(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  416e44:	e0bffc17 	ldw	r2,-16(fp)
  416e48:	10800b17 	ldw	r2,44(r2)
  416e4c:	e0bff415 	stw	r2,-48(fp)
  416e50:	e03ff50d 	sth	zero,-44(fp)
  416e54:	e0fff50b 	ldhu	r3,-44(fp)
  416e58:	e0bffbc4 	addi	r2,fp,-17
  416e5c:	e13ff417 	ldw	r4,-48(fp)
  416e60:	180b883a 	mov	r5,r3
  416e64:	100d883a 	mov	r6,r2
  416e68:	041245c0 	call	41245c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  416e6c:	00003706 	br	416f4c <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  416e70:	e0bffc17 	ldw	r2,-16(fp)
  416e74:	10800f17 	ldw	r2,60(r2)
  416e78:	e0bff215 	stw	r2,-56(fp)
      out = sp->tx_out;
  416e7c:	e0bffc17 	ldw	r2,-16(fp)
  416e80:	10801017 	ldw	r2,64(r2)
  416e84:	e0bfef15 	stw	r2,-68(fp)

      if (in < out)
  416e88:	e0fff217 	ldw	r3,-56(fp)
  416e8c:	e0bfef17 	ldw	r2,-68(fp)
  416e90:	1880062e 	bgeu	r3,r2,416eac <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
  416e94:	e0ffef17 	ldw	r3,-68(fp)
  416e98:	e0bff217 	ldw	r2,-56(fp)
  416e9c:	1885c83a 	sub	r2,r3,r2
  416ea0:	10bfffc4 	addi	r2,r2,-1
  416ea4:	e0bff015 	stw	r2,-64(fp)
  416ea8:	00000b06 	br	416ed8 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
  416eac:	e0bfef17 	ldw	r2,-68(fp)
  416eb0:	10000526 	beq	r2,zero,416ec8 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  416eb4:	00c20004 	movi	r3,2048
  416eb8:	e0bff217 	ldw	r2,-56(fp)
  416ebc:	1885c83a 	sub	r2,r3,r2
  416ec0:	e0bff015 	stw	r2,-64(fp)
  416ec4:	00000406 	br	416ed8 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  416ec8:	00c1ffc4 	movi	r3,2047
  416ecc:	e0bff217 	ldw	r2,-56(fp)
  416ed0:	1885c83a 	sub	r2,r3,r2
  416ed4:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
  416ed8:	e0bff017 	ldw	r2,-64(fp)
  416edc:	10001e26 	beq	r2,zero,416f58 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
  416ee0:	e0fffe17 	ldw	r3,-8(fp)
  416ee4:	e0bff017 	ldw	r2,-64(fp)
  416ee8:	1880022e 	bgeu	r3,r2,416ef4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  416eec:	e0bffe17 	ldw	r2,-8(fp)
  416ef0:	e0bff015 	stw	r2,-64(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  416ef4:	e0bff217 	ldw	r2,-56(fp)
  416ef8:	10821104 	addi	r2,r2,2116
  416efc:	e0fffc17 	ldw	r3,-16(fp)
  416f00:	1885883a 	add	r2,r3,r2
  416f04:	1009883a 	mov	r4,r2
  416f08:	e17ffd17 	ldw	r5,-12(fp)
  416f0c:	e1bff017 	ldw	r6,-64(fp)
  416f10:	0400f1c0 	call	400f1c <memcpy>
      ptr   += n;
  416f14:	e0fffd17 	ldw	r3,-12(fp)
  416f18:	e0bff017 	ldw	r2,-64(fp)
  416f1c:	1885883a 	add	r2,r3,r2
  416f20:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  416f24:	e0fffe17 	ldw	r3,-8(fp)
  416f28:	e0bff017 	ldw	r2,-64(fp)
  416f2c:	1885c83a 	sub	r2,r3,r2
  416f30:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  416f34:	e0fff217 	ldw	r3,-56(fp)
  416f38:	e0bff017 	ldw	r2,-64(fp)
  416f3c:	1885883a 	add	r2,r3,r2
  416f40:	10c1ffcc 	andi	r3,r2,2047
  416f44:	e0bffc17 	ldw	r2,-16(fp)
  416f48:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  416f4c:	e0bffe17 	ldw	r2,-8(fp)
  416f50:	00bfc716 	blt	zero,r2,416e70 <altera_avalon_jtag_uart_write+0x58>
  416f54:	00000106 	br	416f5c <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  416f58:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  416f5c:	0005303a 	rdctl	r2,status
  416f60:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  416f64:	e0fff617 	ldw	r3,-40(fp)
  416f68:	00bfff84 	movi	r2,-2
  416f6c:	1884703a 	and	r2,r3,r2
  416f70:	1001703a 	wrctl	status,r2
  
  return context;
  416f74:	e0bff617 	ldw	r2,-40(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  416f78:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  416f7c:	e0bffc17 	ldw	r2,-16(fp)
  416f80:	10800817 	ldw	r2,32(r2)
  416f84:	10c00094 	ori	r3,r2,2
  416f88:	e0bffc17 	ldw	r2,-16(fp)
  416f8c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  416f90:	e0bffc17 	ldw	r2,-16(fp)
  416f94:	10800017 	ldw	r2,0(r2)
  416f98:	10800104 	addi	r2,r2,4
  416f9c:	e0fffc17 	ldw	r3,-16(fp)
  416fa0:	18c00817 	ldw	r3,32(r3)
  416fa4:	10c00035 	stwio	r3,0(r2)
  416fa8:	e0bff317 	ldw	r2,-52(fp)
  416fac:	e0bff715 	stw	r2,-36(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  416fb0:	0005303a 	rdctl	r2,status
  416fb4:	e0bff815 	stw	r2,-32(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  416fb8:	e0fff817 	ldw	r3,-32(fp)
  416fbc:	00bfff84 	movi	r2,-2
  416fc0:	1884703a 	and	r2,r3,r2
  416fc4:	e0bff815 	stw	r2,-32(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  416fc8:	e0bff717 	ldw	r2,-36(fp)
  416fcc:	1080004c 	andi	r2,r2,1
  416fd0:	e0fff817 	ldw	r3,-32(fp)
  416fd4:	1884b03a 	or	r2,r3,r2
  416fd8:	e0bff815 	stw	r2,-32(fp)
  
  NIOS2_WRITE_STATUS (status);
  416fdc:	e0bff817 	ldw	r2,-32(fp)
  416fe0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  416fe4:	e0bffe17 	ldw	r2,-8(fp)
  416fe8:	00802e0e 	bge	zero,r2,4170a4 <altera_avalon_jtag_uart_write+0x28c>
    {
      if (flags & O_NONBLOCK)
  416fec:	e0bfff17 	ldw	r2,-4(fp)
  416ff0:	1090000c 	andi	r2,r2,16384
  416ff4:	10002e1e 	bne	r2,zero,4170b0 <altera_avalon_jtag_uart_write+0x298>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  416ff8:	008010b4 	movhi	r2,66
  416ffc:	10b58f44 	addi	r2,r2,-10691
  417000:	10800003 	ldbu	r2,0(r2)
  417004:	10803fcc 	andi	r2,r2,255
  417008:	10800058 	cmpnei	r2,r2,1
  41700c:	1000171e 	bne	r2,zero,41706c <altera_avalon_jtag_uart_write+0x254>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
  417010:	e0bffc17 	ldw	r2,-16(fp)
  417014:	10800c17 	ldw	r2,48(r2)
  417018:	e0bff915 	stw	r2,-28(fp)
  41701c:	00800184 	movi	r2,6
  417020:	e0bffa0d 	sth	r2,-24(fp)
  417024:	00bfe0c4 	movi	r2,-125
  417028:	e0bffa85 	stb	r2,-22(fp)
  41702c:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  417030:	008010b4 	movhi	r2,66
  417034:	10b58f44 	addi	r2,r2,-10691
  417038:	10800003 	ldbu	r2,0(r2)
  41703c:	10803fcc 	andi	r2,r2,255
  417040:	10001426 	beq	r2,zero,417094 <altera_avalon_jtag_uart_write+0x27c>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  417044:	e17ffa0b 	ldhu	r5,-24(fp)
  417048:	e0fffa83 	ldbu	r3,-22(fp)
  41704c:	e0bffb0b 	ldhu	r2,-20(fp)
  417050:	e13ffb84 	addi	r4,fp,-18
  417054:	d9000015 	stw	r4,0(sp)
  417058:	e13ff917 	ldw	r4,-28(fp)
  41705c:	180d883a 	mov	r6,r3
  417060:	100f883a 	mov	r7,r2
  417064:	040edac0 	call	40edac <OSFlagPend>
  417068:	00000a06 	br	417094 <altera_avalon_jtag_uart_write+0x27c>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  41706c:	0001883a 	nop
  417070:	e0bffc17 	ldw	r2,-16(fp)
  417074:	10c01017 	ldw	r3,64(r2)
  417078:	e0bfef17 	ldw	r2,-68(fp)
  41707c:	1880051e 	bne	r3,r2,417094 <altera_avalon_jtag_uart_write+0x27c>
  417080:	e0bffc17 	ldw	r2,-16(fp)
  417084:	10c00917 	ldw	r3,36(r2)
  417088:	e0bffc17 	ldw	r2,-16(fp)
  41708c:	10800117 	ldw	r2,4(r2)
  417090:	18bff736 	bltu	r3,r2,417070 <altera_avalon_jtag_uart_write+0x258>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  417094:	e0bffc17 	ldw	r2,-16(fp)
  417098:	10c01017 	ldw	r3,64(r2)
  41709c:	e0bfef17 	ldw	r2,-68(fp)
  4170a0:	18800526 	beq	r3,r2,4170b8 <altera_avalon_jtag_uart_write+0x2a0>
         break;
    }
  }
  while (count > 0);
  4170a4:	e0bffe17 	ldw	r2,-8(fp)
  4170a8:	00bfa816 	blt	zero,r2,416f4c <altera_avalon_jtag_uart_write+0x134>
  4170ac:	00000306 	br	4170bc <altera_avalon_jtag_uart_write+0x2a4>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  4170b0:	0001883a 	nop
  4170b4:	00000106 	br	4170bc <altera_avalon_jtag_uart_write+0x2a4>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
  4170b8:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  4170bc:	e0bffc17 	ldw	r2,-16(fp)
  4170c0:	10800b17 	ldw	r2,44(r2)
  4170c4:	1009883a 	mov	r4,r2
  4170c8:	04129180 	call	412918 <OSSemPost>

  if (ptr != start)
  4170cc:	e0fffd17 	ldw	r3,-12(fp)
  4170d0:	e0bff117 	ldw	r2,-60(fp)
  4170d4:	18800426 	beq	r3,r2,4170e8 <altera_avalon_jtag_uart_write+0x2d0>
    return ptr - start;
  4170d8:	e0fffd17 	ldw	r3,-12(fp)
  4170dc:	e0bff117 	ldw	r2,-60(fp)
  4170e0:	1885c83a 	sub	r2,r3,r2
  4170e4:	00000606 	br	417100 <altera_avalon_jtag_uart_write+0x2e8>
  else if (flags & O_NONBLOCK)
  4170e8:	e0bfff17 	ldw	r2,-4(fp)
  4170ec:	1090000c 	andi	r2,r2,16384
  4170f0:	10000226 	beq	r2,zero,4170fc <altera_avalon_jtag_uart_write+0x2e4>
    return -EWOULDBLOCK;
  4170f4:	00bffd44 	movi	r2,-11
  4170f8:	00000106 	br	417100 <altera_avalon_jtag_uart_write+0x2e8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  4170fc:	00bffec4 	movi	r2,-5
}
  417100:	e037883a 	mov	sp,fp
  417104:	dfc00117 	ldw	ra,4(sp)
  417108:	df000017 	ldw	fp,0(sp)
  41710c:	dec00204 	addi	sp,sp,8
  417110:	f800283a 	ret

00417114 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  417114:	defffe04 	addi	sp,sp,-8
  417118:	dfc00115 	stw	ra,4(sp)
  41711c:	df000015 	stw	fp,0(sp)
  417120:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  417124:	008010b4 	movhi	r2,66
  417128:	10ae1304 	addi	r2,r2,-18356
  41712c:	10800017 	ldw	r2,0(r2)
  417130:	10000526 	beq	r2,zero,417148 <alt_get_errno+0x34>
  417134:	008010b4 	movhi	r2,66
  417138:	10ae1304 	addi	r2,r2,-18356
  41713c:	10800017 	ldw	r2,0(r2)
  417140:	103ee83a 	callr	r2
  417144:	00000206 	br	417150 <alt_get_errno+0x3c>
  417148:	008010b4 	movhi	r2,66
  41714c:	10b58504 	addi	r2,r2,-10732
}
  417150:	e037883a 	mov	sp,fp
  417154:	dfc00117 	ldw	ra,4(sp)
  417158:	df000017 	ldw	fp,0(sp)
  41715c:	dec00204 	addi	sp,sp,8
  417160:	f800283a 	ret

00417164 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  417164:	defff904 	addi	sp,sp,-28
  417168:	df000615 	stw	fp,24(sp)
  41716c:	df000604 	addi	fp,sp,24
  417170:	e13ffe15 	stw	r4,-8(fp)
  417174:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
  417178:	00bfffc4 	movi	r2,-1
  41717c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
  417180:	0005317a 	rdctl	r2,cpuid
  417184:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
  417188:	e0bffb17 	ldw	r2,-20(fp)
  41718c:	1006943a 	slli	r3,r2,16
  417190:	e0bfff17 	ldw	r2,-4(fp)
  417194:	1884b03a 	or	r2,r3,r2
  417198:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
  41719c:	e0bffe17 	ldw	r2,-8(fp)
  4171a0:	10800317 	ldw	r2,12(r2)
  4171a4:	e0fffc17 	ldw	r3,-16(fp)
  4171a8:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  4171ac:	e0bffe17 	ldw	r2,-8(fp)
  4171b0:	10800317 	ldw	r2,12(r2)
  4171b4:	10800037 	ldwio	r2,0(r2)
  4171b8:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
  4171bc:	e0fffd17 	ldw	r3,-12(fp)
  4171c0:	e0bffc17 	ldw	r2,-16(fp)
  4171c4:	1880011e 	bne	r3,r2,4171cc <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
  4171c8:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
  4171cc:	e0bffa17 	ldw	r2,-24(fp)
}
  4171d0:	e037883a 	mov	sp,fp
  4171d4:	df000017 	ldw	fp,0(sp)
  4171d8:	dec00104 	addi	sp,sp,4
  4171dc:	f800283a 	ret

004171e0 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
  4171e0:	defffc04 	addi	sp,sp,-16
  4171e4:	dfc00315 	stw	ra,12(sp)
  4171e8:	df000215 	stw	fp,8(sp)
  4171ec:	df000204 	addi	fp,sp,8
  4171f0:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
  4171f4:	e13fff17 	ldw	r4,-4(fp)
  4171f8:	d1603204 	addi	r5,gp,-32568
  4171fc:	040aa640 	call	40aa64 <alt_find_dev>
  417200:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
  417204:	e0bffe17 	ldw	r2,-8(fp)
  417208:	1000031e 	bne	r2,zero,417218 <altera_avalon_mutex_open+0x38>
  {
    ALT_ERRNO = ENODEV;
  41720c:	04171140 	call	417114 <alt_get_errno>
  417210:	00c004c4 	movi	r3,19
  417214:	10c00015 	stw	r3,0(r2)
  }

  return dev;
  417218:	e0bffe17 	ldw	r2,-8(fp)
}
  41721c:	e037883a 	mov	sp,fp
  417220:	dfc00117 	ldw	ra,4(sp)
  417224:	df000017 	ldw	fp,0(sp)
  417228:	dec00204 	addi	sp,sp,8
  41722c:	f800283a 	ret

00417230 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
  417230:	defffe04 	addi	sp,sp,-8
  417234:	df000115 	stw	fp,4(sp)
  417238:	df000104 	addi	fp,sp,4
  41723c:	e13fff15 	stw	r4,-4(fp)
  return;
  417240:	0001883a 	nop
}
  417244:	e037883a 	mov	sp,fp
  417248:	df000017 	ldw	fp,0(sp)
  41724c:	dec00104 	addi	sp,sp,4
  417250:	f800283a 	ret

00417254 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
  417254:	defffa04 	addi	sp,sp,-24
  417258:	dfc00515 	stw	ra,20(sp)
  41725c:	df000415 	stw	fp,16(sp)
  417260:	df000404 	addi	fp,sp,16
  417264:	e13ffe15 	stw	r4,-8(fp)
  417268:	e17fff15 	stw	r5,-4(fp)
  /*
   * When running in a multi threaded environment, obtain the "lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);
  41726c:	e0bffe17 	ldw	r2,-8(fp)
  417270:	10800417 	ldw	r2,16(r2)
  417274:	e0bffc15 	stw	r2,-16(fp)
  417278:	e03ffd0d 	sth	zero,-12(fp)
  41727c:	e0fffd0b 	ldhu	r3,-12(fp)
  417280:	e0bffd84 	addi	r2,fp,-10
  417284:	e13ffc17 	ldw	r4,-16(fp)
  417288:	180b883a 	mov	r5,r3
  41728c:	100d883a 	mov	r6,r2
  417290:	041245c0 	call	41245c <OSSemPend>

  while ( alt_mutex_trylock( dev, value ) != 0);
  417294:	0001883a 	nop
  417298:	e13ffe17 	ldw	r4,-8(fp)
  41729c:	e17fff17 	ldw	r5,-4(fp)
  4172a0:	04171640 	call	417164 <alt_mutex_trylock>
  4172a4:	103ffc1e 	bne	r2,zero,417298 <altera_avalon_mutex_lock+0x44>
}
  4172a8:	e037883a 	mov	sp,fp
  4172ac:	dfc00117 	ldw	ra,4(sp)
  4172b0:	df000017 	ldw	fp,0(sp)
  4172b4:	dec00204 	addi	sp,sp,8
  4172b8:	f800283a 	ret

004172bc <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
  4172bc:	defff904 	addi	sp,sp,-28
  4172c0:	dfc00615 	stw	ra,24(sp)
  4172c4:	df000515 	stw	fp,20(sp)
  4172c8:	df000504 	addi	fp,sp,20
  4172cc:	e13ffe15 	stw	r4,-8(fp)
  4172d0:	e17fff15 	stw	r5,-4(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);
  4172d4:	e0bffe17 	ldw	r2,-8(fp)
  4172d8:	10800417 	ldw	r2,16(r2)
  4172dc:	e0bffc15 	stw	r2,-16(fp)
  4172e0:	e03ffd0d 	sth	zero,-12(fp)
  4172e4:	e0fffd0b 	ldhu	r3,-12(fp)
  4172e8:	e0bffd84 	addi	r2,fp,-10
  4172ec:	e13ffc17 	ldw	r4,-16(fp)
  4172f0:	180b883a 	mov	r5,r3
  4172f4:	100d883a 	mov	r6,r2
  4172f8:	041245c0 	call	41245c <OSSemPend>

  ret_code = alt_mutex_trylock( dev, value);
  4172fc:	e13ffe17 	ldw	r4,-8(fp)
  417300:	e17fff17 	ldw	r5,-4(fp)
  417304:	04171640 	call	417164 <alt_mutex_trylock>
  417308:	e0bffb15 	stw	r2,-20(fp)

  /*
  * If the try failed then release the thread Mutex  
  */
  if (ret_code)
  41730c:	e0bffb17 	ldw	r2,-20(fp)
  417310:	10000426 	beq	r2,zero,417324 <altera_avalon_mutex_trylock+0x68>
  {
    ALT_SEM_POST (dev->lock);
  417314:	e0bffe17 	ldw	r2,-8(fp)
  417318:	10800417 	ldw	r2,16(r2)
  41731c:	1009883a 	mov	r4,r2
  417320:	04129180 	call	412918 <OSSemPost>
  }

  return ret_code;
  417324:	e0bffb17 	ldw	r2,-20(fp)
}
  417328:	e037883a 	mov	sp,fp
  41732c:	dfc00117 	ldw	ra,4(sp)
  417330:	df000017 	ldw	fp,0(sp)
  417334:	dec00204 	addi	sp,sp,8
  417338:	f800283a 	ret

0041733c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
  41733c:	defffc04 	addi	sp,sp,-16
  417340:	dfc00315 	stw	ra,12(sp)
  417344:	df000215 	stw	fp,8(sp)
  417348:	df000204 	addi	fp,sp,8
  41734c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
  417350:	0005317a 	rdctl	r2,cpuid
  417354:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
  417358:	e0bfff17 	ldw	r2,-4(fp)
  41735c:	10800317 	ldw	r2,12(r2)
  417360:	10800104 	addi	r2,r2,4
  417364:	00c00044 	movi	r3,1
  417368:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
  41736c:	e0bfff17 	ldw	r2,-4(fp)
  417370:	10800317 	ldw	r2,12(r2)
  417374:	e0fffe17 	ldw	r3,-8(fp)
  417378:	1806943a 	slli	r3,r3,16
  41737c:	10c00035 	stwio	r3,0(r2)
                                  id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST);

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
  417380:	e0bfff17 	ldw	r2,-4(fp)
  417384:	10800417 	ldw	r2,16(r2)
  417388:	1009883a 	mov	r4,r2
  41738c:	04129180 	call	412918 <OSSemPost>
}
  417390:	e037883a 	mov	sp,fp
  417394:	dfc00117 	ldw	ra,4(sp)
  417398:	df000017 	ldw	fp,0(sp)
  41739c:	dec00204 	addi	sp,sp,8
  4173a0:	f800283a 	ret

004173a4 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
  4173a4:	defff904 	addi	sp,sp,-28
  4173a8:	df000615 	stw	fp,24(sp)
  4173ac:	df000604 	addi	fp,sp,24
  4173b0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
  4173b4:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
  4173b8:	0005317a 	rdctl	r2,cpuid
  4173bc:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
  4173c0:	e0bfff17 	ldw	r2,-4(fp)
  4173c4:	10800317 	ldw	r2,12(r2)
  4173c8:	10800037 	ldwio	r2,0(r2)
  4173cc:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
  4173d0:	e0bffc17 	ldw	r2,-16(fp)
  4173d4:	1004d43a 	srli	r2,r2,16
  4173d8:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
  4173dc:	e0fffd17 	ldw	r3,-12(fp)
  4173e0:	e0bffb17 	ldw	r2,-20(fp)
  4173e4:	1880071e 	bne	r3,r2,417404 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
  4173e8:	e0bffc17 	ldw	r2,-16(fp)
  4173ec:	10bfffcc 	andi	r2,r2,65535
  4173f0:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
  4173f4:	e0bffe17 	ldw	r2,-8(fp)
  4173f8:	10000226 	beq	r2,zero,417404 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
  4173fc:	00800044 	movi	r2,1
  417400:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
  417404:	e0bffa17 	ldw	r2,-24(fp)
}
  417408:	e037883a 	mov	sp,fp
  41740c:	df000017 	ldw	fp,0(sp)
  417410:	dec00104 	addi	sp,sp,4
  417414:	f800283a 	ret

00417418 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
  417418:	defffc04 	addi	sp,sp,-16
  41741c:	df000315 	stw	fp,12(sp)
  417420:	df000304 	addi	fp,sp,12
  417424:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
  417428:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
  41742c:	e0bfff17 	ldw	r2,-4(fp)
  417430:	10800317 	ldw	r2,12(r2)
  417434:	10800104 	addi	r2,r2,4
  417438:	10800037 	ldwio	r2,0(r2)
  41743c:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
  417440:	e0bffe17 	ldw	r2,-8(fp)
  417444:	1080004c 	andi	r2,r2,1
  417448:	10000226 	beq	r2,zero,417454 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
  41744c:	00800044 	movi	r2,1
  417450:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
  417454:	e0bffd17 	ldw	r2,-12(fp)
}
  417458:	e037883a 	mov	sp,fp
  41745c:	df000017 	ldw	fp,0(sp)
  417460:	dec00104 	addi	sp,sp,4
  417464:	f800283a 	ret

00417468 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  417468:	defff904 	addi	sp,sp,-28
  41746c:	dfc00615 	stw	ra,24(sp)
  417470:	df000515 	stw	fp,20(sp)
  417474:	df000504 	addi	fp,sp,20
  417478:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  41747c:	0007883a 	mov	r3,zero
  417480:	e0bfff17 	ldw	r2,-4(fp)
  417484:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  417488:	e0bfff17 	ldw	r2,-4(fp)
  41748c:	10800104 	addi	r2,r2,4
  417490:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  417494:	0005303a 	rdctl	r2,status
  417498:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  41749c:	e0fffc17 	ldw	r3,-16(fp)
  4174a0:	00bfff84 	movi	r2,-2
  4174a4:	1884703a 	and	r2,r3,r2
  4174a8:	1001703a 	wrctl	status,r2
  
  return context;
  4174ac:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  4174b0:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  4174b4:	04189f00 	call	4189f0 <alt_tick>
  4174b8:	e0bffb17 	ldw	r2,-20(fp)
  4174bc:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4174c0:	0005303a 	rdctl	r2,status
  4174c4:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4174c8:	e0fffe17 	ldw	r3,-8(fp)
  4174cc:	00bfff84 	movi	r2,-2
  4174d0:	1884703a 	and	r2,r3,r2
  4174d4:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4174d8:	e0bffd17 	ldw	r2,-12(fp)
  4174dc:	1080004c 	andi	r2,r2,1
  4174e0:	e0fffe17 	ldw	r3,-8(fp)
  4174e4:	1884b03a 	or	r2,r3,r2
  4174e8:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  4174ec:	e0bffe17 	ldw	r2,-8(fp)
  4174f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  4174f4:	e037883a 	mov	sp,fp
  4174f8:	dfc00117 	ldw	ra,4(sp)
  4174fc:	df000017 	ldw	fp,0(sp)
  417500:	dec00204 	addi	sp,sp,8
  417504:	f800283a 	ret

00417508 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  417508:	defff804 	addi	sp,sp,-32
  41750c:	dfc00715 	stw	ra,28(sp)
  417510:	df000615 	stw	fp,24(sp)
  417514:	df000604 	addi	fp,sp,24
  417518:	e13ffc15 	stw	r4,-16(fp)
  41751c:	e17ffd15 	stw	r5,-12(fp)
  417520:	e1bffe15 	stw	r6,-8(fp)
  417524:	e1ffff15 	stw	r7,-4(fp)
  417528:	e0bfff17 	ldw	r2,-4(fp)
  41752c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  417530:	008010b4 	movhi	r2,66
  417534:	10b5a504 	addi	r2,r2,-10604
  417538:	10800017 	ldw	r2,0(r2)
  41753c:	1000041e 	bne	r2,zero,417550 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
  417540:	008010b4 	movhi	r2,66
  417544:	10b5a504 	addi	r2,r2,-10604
  417548:	e0fffb17 	ldw	r3,-20(fp)
  41754c:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  417550:	e0bffc17 	ldw	r2,-16(fp)
  417554:	10800104 	addi	r2,r2,4
  417558:	00c001c4 	movi	r3,7
  41755c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  417560:	d8000015 	stw	zero,0(sp)
  417564:	e13ffd17 	ldw	r4,-12(fp)
  417568:	e17ffe17 	ldw	r5,-8(fp)
  41756c:	01801074 	movhi	r6,65
  417570:	319d1a04 	addi	r6,r6,29800
  417574:	e1fffc17 	ldw	r7,-16(fp)
  417578:	040abf40 	call	40abf4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  41757c:	e037883a 	mov	sp,fp
  417580:	dfc00117 	ldw	ra,4(sp)
  417584:	df000017 	ldw	fp,0(sp)
  417588:	dec00204 	addi	sp,sp,8
  41758c:	f800283a 	ret

00417590 <read_word>:
* reads a word from an address in flash
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word(alt_u8* current_ptr)
{
  417590:	defffe04 	addi	sp,sp,-8
  417594:	df000115 	stw	fp,4(sp)
  417598:	df000104 	addi	fp,sp,4
  41759c:	e13fff15 	stw	r4,-4(fp)
  return (alt_u32)(*current_ptr | 
  4175a0:	e0bfff17 	ldw	r2,-4(fp)
  4175a4:	10800003 	ldbu	r2,0(r2)
  4175a8:	10c03fcc 	andi	r3,r2,255
         (*(current_ptr+1) << 8) | 
  4175ac:	e0bfff17 	ldw	r2,-4(fp)
  4175b0:	10800044 	addi	r2,r2,1
  4175b4:	10800003 	ldbu	r2,0(r2)
  4175b8:	10803fcc 	andi	r2,r2,255
  4175bc:	1004923a 	slli	r2,r2,8
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word(alt_u8* current_ptr)
{
  return (alt_u32)(*current_ptr | 
  4175c0:	1886b03a 	or	r3,r3,r2
         (*(current_ptr+1) << 8) | 
         (*(current_ptr+2) << 16) |
  4175c4:	e0bfff17 	ldw	r2,-4(fp)
  4175c8:	10800084 	addi	r2,r2,2
  4175cc:	10800003 	ldbu	r2,0(r2)
  4175d0:	10803fcc 	andi	r2,r2,255
  4175d4:	1004943a 	slli	r2,r2,16
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word(alt_u8* current_ptr)
{
  return (alt_u32)(*current_ptr | 
         (*(current_ptr+1) << 8) | 
  4175d8:	1886b03a 	or	r3,r3,r2
         (*(current_ptr+2) << 16) |
         (*(current_ptr+3) << 24 ));
  4175dc:	e0bfff17 	ldw	r2,-4(fp)
  4175e0:	108000c4 	addi	r2,r2,3
  4175e4:	10800003 	ldbu	r2,0(r2)
  4175e8:	10803fcc 	andi	r2,r2,255
  4175ec:	1004963a 	slli	r2,r2,24
*/
static alt_u32 read_word(alt_u8* current_ptr)
{
  return (alt_u32)(*current_ptr | 
         (*(current_ptr+1) << 8) | 
         (*(current_ptr+2) << 16) |
  4175f0:	1884b03a 	or	r2,r3,r2
         (*(current_ptr+3) << 24 ));
}
  4175f4:	e037883a 	mov	sp,fp
  4175f8:	df000017 	ldw	fp,0(sp)
  4175fc:	dec00104 	addi	sp,sp,4
  417600:	f800283a 	ret

00417604 <read_word_inc>:
* reads a word from an address in flash, and increments the ptr
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u32 read_word_inc(alt_u8** current_ptr)
{
  417604:	defffc04 	addi	sp,sp,-16
  417608:	dfc00315 	stw	ra,12(sp)
  41760c:	df000215 	stw	fp,8(sp)
  417610:	df000204 	addi	fp,sp,8
  417614:	e13fff15 	stw	r4,-4(fp)
  alt_u32 value = read_word(*current_ptr);
  417618:	e0bfff17 	ldw	r2,-4(fp)
  41761c:	10800017 	ldw	r2,0(r2)
  417620:	1009883a 	mov	r4,r2
  417624:	04175900 	call	417590 <read_word>
  417628:	e0bffe15 	stw	r2,-8(fp)
  *current_ptr += 4;
  41762c:	e0bfff17 	ldw	r2,-4(fp)
  417630:	10800017 	ldw	r2,0(r2)
  417634:	10c00104 	addi	r3,r2,4
  417638:	e0bfff17 	ldw	r2,-4(fp)
  41763c:	10c00015 	stw	r3,0(r2)
  return value;
  417640:	e0bffe17 	ldw	r2,-8(fp)
}
  417644:	e037883a 	mov	sp,fp
  417648:	dfc00117 	ldw	ra,4(sp)
  41764c:	df000017 	ldw	fp,0(sp)
  417650:	dec00204 	addi	sp,sp,8
  417654:	f800283a 	ret

00417658 <read_half_word>:
* reads a half word from an address in flash
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word(alt_u8* current_ptr)
{
  417658:	defffe04 	addi	sp,sp,-8
  41765c:	df000115 	stw	fp,4(sp)
  417660:	df000104 	addi	fp,sp,4
  417664:	e13fff15 	stw	r4,-4(fp)
  return (alt_u16)(*current_ptr | 
  417668:	e0bfff17 	ldw	r2,-4(fp)
  41766c:	10800003 	ldbu	r2,0(r2)
  417670:	10c03fcc 	andi	r3,r2,255
         (*(current_ptr+1) << 8));
  417674:	e0bfff17 	ldw	r2,-4(fp)
  417678:	10800044 	addi	r2,r2,1
  41767c:	10800003 	ldbu	r2,0(r2)
  417680:	10803fcc 	andi	r2,r2,255
  417684:	1004923a 	slli	r2,r2,8
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word(alt_u8* current_ptr)
{
  return (alt_u16)(*current_ptr | 
  417688:	1884b03a 	or	r2,r3,r2
         (*(current_ptr+1) << 8));
}
  41768c:	e037883a 	mov	sp,fp
  417690:	df000017 	ldw	fp,0(sp)
  417694:	dec00104 	addi	sp,sp,4
  417698:	f800283a 	ret

0041769c <read_half_word_inc>:
* reads a half word from an address in flash, and increment the ptr
* this is necessary as we can't do 
* unaligned from an unaligned boundary in Nios II
*/
static alt_u16 read_half_word_inc(alt_u8** current_ptr)
{
  41769c:	defffc04 	addi	sp,sp,-16
  4176a0:	dfc00315 	stw	ra,12(sp)
  4176a4:	df000215 	stw	fp,8(sp)
  4176a8:	df000204 	addi	fp,sp,8
  4176ac:	e13fff15 	stw	r4,-4(fp)
  alt_u16 value = read_word(*current_ptr);
  4176b0:	e0bfff17 	ldw	r2,-4(fp)
  4176b4:	10800017 	ldw	r2,0(r2)
  4176b8:	1009883a 	mov	r4,r2
  4176bc:	04175900 	call	417590 <read_word>
  4176c0:	e0bffe0d 	sth	r2,-8(fp)
  *current_ptr += 2;
  4176c4:	e0bfff17 	ldw	r2,-4(fp)
  4176c8:	10800017 	ldw	r2,0(r2)
  4176cc:	10c00084 	addi	r3,r2,2
  4176d0:	e0bfff17 	ldw	r2,-4(fp)
  4176d4:	10c00015 	stw	r3,0(r2)
  return value;
  4176d8:	e0bffe0b 	ldhu	r2,-8(fp)
}
  4176dc:	e037883a 	mov	sp,fp
  4176e0:	dfc00117 	ldw	ra,4(sp)
  4176e4:	df000017 	ldw	fp,0(sp)
  4176e8:	dec00204 	addi	sp,sp,8
  4176ec:	f800283a 	ret

004176f0 <check_file_header>:
*
* Check that this is a file header we can cope with and inrement the current ptr 
* accordingly
*/
static int check_file_header(alt_u8** current_ptr)
{
  4176f0:	defff704 	addi	sp,sp,-36
  4176f4:	dfc00815 	stw	ra,32(sp)
  4176f8:	df000715 	stw	fp,28(sp)
  4176fc:	df000704 	addi	fp,sp,28
  417700:	e13fff15 	stw	r4,-4(fp)
  int ret_code = -ENOENT;
  417704:	00bfff84 	movi	r2,-2
  417708:	e0bff915 	stw	r2,-28(fp)
  alt_u16 name_len, extra_len, version, flags, compression;
  alt_u32 uncompressed_len, compressed_len;

  version = read_half_word_inc(current_ptr);
  41770c:	e13fff17 	ldw	r4,-4(fp)
  417710:	041769c0 	call	41769c <read_half_word_inc>
  417714:	e0bffa0d 	sth	r2,-24(fp)

  /* We can parse files designed for version 10 */
  if (version > 10)
  417718:	e0bffa0b 	ldhu	r2,-24(fp)
  41771c:	108002f0 	cmpltui	r2,r2,11
  417720:	10003226 	beq	r2,zero,4177ec <check_file_header+0xfc>
  {
    goto exit;
  }

  /* Read the flags, right now any flags are an error */
  flags = read_half_word_inc(current_ptr);
  417724:	e13fff17 	ldw	r4,-4(fp)
  417728:	041769c0 	call	41769c <read_half_word_inc>
  41772c:	e0bffa8d 	sth	r2,-22(fp)

  if (flags )
  417730:	e0bffa8b 	ldhu	r2,-22(fp)
  417734:	10002f1e 	bne	r2,zero,4177f4 <check_file_header+0x104>
  {
    goto exit;
  }

  compression = read_half_word_inc(current_ptr);
  417738:	e13fff17 	ldw	r4,-4(fp)
  41773c:	041769c0 	call	41769c <read_half_word_inc>
  417740:	e0bffb0d 	sth	r2,-20(fp)

  /* Skip the mod times and the CRC */
  *current_ptr += 8;
  417744:	e0bfff17 	ldw	r2,-4(fp)
  417748:	10800017 	ldw	r2,0(r2)
  41774c:	10c00204 	addi	r3,r2,8
  417750:	e0bfff17 	ldw	r2,-4(fp)
  417754:	10c00015 	stw	r3,0(r2)

  /* Read the compressed and uncompressed lengths, these should be the same */
  compressed_len = read_word_inc(current_ptr);
  417758:	e13fff17 	ldw	r4,-4(fp)
  41775c:	04176040 	call	417604 <read_word_inc>
  417760:	e0bffc15 	stw	r2,-16(fp)
  uncompressed_len = read_word_inc(current_ptr);
  417764:	e13fff17 	ldw	r4,-4(fp)
  417768:	04176040 	call	417604 <read_word_inc>
  41776c:	e0bffd15 	stw	r2,-12(fp)

  if ((compression) || (compressed_len != uncompressed_len))
  417770:	e0bffb0b 	ldhu	r2,-20(fp)
  417774:	1000201e 	bne	r2,zero,4177f8 <check_file_header+0x108>
  417778:	e0fffc17 	ldw	r3,-16(fp)
  41777c:	e0bffd17 	ldw	r2,-12(fp)
  417780:	18801d1e 	bne	r3,r2,4177f8 <check_file_header+0x108>
  {
    goto exit;
  }

  /* Read the length of the name and extra fields */
  name_len = read_half_word_inc(current_ptr);
  417784:	e13fff17 	ldw	r4,-4(fp)
  417788:	041769c0 	call	41769c <read_half_word_inc>
  41778c:	e0bffe0d 	sth	r2,-8(fp)
  extra_len = read_half_word_inc(current_ptr);
  417790:	e13fff17 	ldw	r4,-4(fp)
  417794:	041769c0 	call	41769c <read_half_word_inc>
  417798:	e0bffe8d 	sth	r2,-6(fp)

  /* Skip the name and extra fields */
  *current_ptr += name_len;
  41779c:	e0bfff17 	ldw	r2,-4(fp)
  4177a0:	10c00017 	ldw	r3,0(r2)
  4177a4:	e0bffe0b 	ldhu	r2,-8(fp)
  4177a8:	1887883a 	add	r3,r3,r2
  4177ac:	e0bfff17 	ldw	r2,-4(fp)
  4177b0:	10c00015 	stw	r3,0(r2)
  *current_ptr += extra_len;
  4177b4:	e0bfff17 	ldw	r2,-4(fp)
  4177b8:	10c00017 	ldw	r3,0(r2)
  4177bc:	e0bffe8b 	ldhu	r2,-6(fp)
  4177c0:	1887883a 	add	r3,r3,r2
  4177c4:	e0bfff17 	ldw	r2,-4(fp)
  4177c8:	10c00015 	stw	r3,0(r2)

  *current_ptr += compressed_len;
  4177cc:	e0bfff17 	ldw	r2,-4(fp)
  4177d0:	10c00017 	ldw	r3,0(r2)
  4177d4:	e0bffc17 	ldw	r2,-16(fp)
  4177d8:	1887883a 	add	r3,r3,r2
  4177dc:	e0bfff17 	ldw	r2,-4(fp)
  4177e0:	10c00015 	stw	r3,0(r2)

  ret_code = 0;
  4177e4:	e03ff915 	stw	zero,-28(fp)
  4177e8:	00000306 	br	4177f8 <check_file_header+0x108>
  version = read_half_word_inc(current_ptr);

  /* We can parse files designed for version 10 */
  if (version > 10)
  {
    goto exit;
  4177ec:	0001883a 	nop
  4177f0:	00000106 	br	4177f8 <check_file_header+0x108>
  /* Read the flags, right now any flags are an error */
  flags = read_half_word_inc(current_ptr);

  if (flags )
  {
    goto exit;
  4177f4:	0001883a 	nop
  *current_ptr += compressed_len;

  ret_code = 0;

exit:
  return ret_code;
  4177f8:	e0bff917 	ldw	r2,-28(fp)
}
  4177fc:	e037883a 	mov	sp,fp
  417800:	dfc00117 	ldw	ra,4(sp)
  417804:	df000017 	ldw	fp,0(sp)
  417808:	dec00204 	addi	sp,sp,8
  41780c:	f800283a 	ret

00417810 <check_directory_header>:
* Sanity check an entry in the directory structure
* 
* returns 0 for success -ENOENT if not
*/
int check_directory_header(alt_u8** current_ptr)
{
  417810:	defff604 	addi	sp,sp,-40
  417814:	dfc00915 	stw	ra,36(sp)
  417818:	df000815 	stw	fp,32(sp)
  41781c:	df000804 	addi	fp,sp,32
  417820:	e13fff15 	stw	r4,-4(fp)
  int ret_code = -ENOENT;
  417824:	00bfff84 	movi	r2,-2
  417828:	e0bff815 	stw	r2,-32(fp)
  alt_u16 version, flags, compression, name_len, extra_len, comment_len;
  alt_u32 compressed_len, uncompressed_len;

  /* We don't care what version made this file */
  *current_ptr += 2;
  41782c:	e0bfff17 	ldw	r2,-4(fp)
  417830:	10800017 	ldw	r2,0(r2)
  417834:	10c00084 	addi	r3,r2,2
  417838:	e0bfff17 	ldw	r2,-4(fp)
  41783c:	10c00015 	stw	r3,0(r2)

  /* We can parse files designed for version 10 */
  version = read_half_word_inc(current_ptr);
  417840:	e13fff17 	ldw	r4,-4(fp)
  417844:	041769c0 	call	41769c <read_half_word_inc>
  417848:	e0bff90d 	sth	r2,-28(fp)
  if (version > 10)
  41784c:	e0bff90b 	ldhu	r2,-28(fp)
  417850:	108002f0 	cmpltui	r2,r2,11
  417854:	10003226 	beq	r2,zero,417920 <check_directory_header+0x110>
  {
    goto exit;
  }

  /* Read the flags, any set are an error */
  flags = read_half_word_inc(current_ptr);
  417858:	e13fff17 	ldw	r4,-4(fp)
  41785c:	041769c0 	call	41769c <read_half_word_inc>
  417860:	e0bff98d 	sth	r2,-26(fp)

  if (flags )
  417864:	e0bff98b 	ldhu	r2,-26(fp)
  417868:	10002f1e 	bne	r2,zero,417928 <check_directory_header+0x118>
  {
    goto exit;
  }

  compression = read_half_word_inc(current_ptr);
  41786c:	e13fff17 	ldw	r4,-4(fp)
  417870:	041769c0 	call	41769c <read_half_word_inc>
  417874:	e0bffa0d 	sth	r2,-24(fp)


  /* Skip the mod times and the CRC */
  *current_ptr += 8;
  417878:	e0bfff17 	ldw	r2,-4(fp)
  41787c:	10800017 	ldw	r2,0(r2)
  417880:	10c00204 	addi	r3,r2,8
  417884:	e0bfff17 	ldw	r2,-4(fp)
  417888:	10c00015 	stw	r3,0(r2)

  /* Read the compressed and uncompressed lengths,these should be the same */
  compressed_len = read_word_inc(current_ptr);
  41788c:	e13fff17 	ldw	r4,-4(fp)
  417890:	04176040 	call	417604 <read_word_inc>
  417894:	e0bffb15 	stw	r2,-20(fp)
  uncompressed_len = read_word_inc(current_ptr);
  417898:	e13fff17 	ldw	r4,-4(fp)
  41789c:	04176040 	call	417604 <read_word_inc>
  4178a0:	e0bffc15 	stw	r2,-16(fp)

  if ((compression) || (compressed_len != uncompressed_len))
  4178a4:	e0bffa0b 	ldhu	r2,-24(fp)
  4178a8:	1000201e 	bne	r2,zero,41792c <check_directory_header+0x11c>
  4178ac:	e0fffb17 	ldw	r3,-20(fp)
  4178b0:	e0bffc17 	ldw	r2,-16(fp)
  4178b4:	18801d1e 	bne	r3,r2,41792c <check_directory_header+0x11c>
  {
    goto exit;
  }

  /* Read the length of the name, extra fields and comment fields*/
  name_len = read_half_word_inc(current_ptr);
  4178b8:	e13fff17 	ldw	r4,-4(fp)
  4178bc:	041769c0 	call	41769c <read_half_word_inc>
  4178c0:	e0bffd0d 	sth	r2,-12(fp)
  extra_len = read_half_word_inc(current_ptr);
  4178c4:	e13fff17 	ldw	r4,-4(fp)
  4178c8:	041769c0 	call	41769c <read_half_word_inc>
  4178cc:	e0bffd8d 	sth	r2,-10(fp)
  comment_len = read_half_word_inc(current_ptr);
  4178d0:	e13fff17 	ldw	r4,-4(fp)
  4178d4:	041769c0 	call	41769c <read_half_word_inc>
  4178d8:	e0bffe0d 	sth	r2,-8(fp)

  /* We don't care about the disk number, the file attributes or the offset */
  *current_ptr += 12;
  4178dc:	e0bfff17 	ldw	r2,-4(fp)
  4178e0:	10800017 	ldw	r2,0(r2)
  4178e4:	10c00304 	addi	r3,r2,12
  4178e8:	e0bfff17 	ldw	r2,-4(fp)
  4178ec:	10c00015 	stw	r3,0(r2)

  *current_ptr += (name_len + extra_len + comment_len);
  4178f0:	e0bfff17 	ldw	r2,-4(fp)
  4178f4:	10c00017 	ldw	r3,0(r2)
  4178f8:	e13ffd0b 	ldhu	r4,-12(fp)
  4178fc:	e0bffd8b 	ldhu	r2,-10(fp)
  417900:	2089883a 	add	r4,r4,r2
  417904:	e0bffe0b 	ldhu	r2,-8(fp)
  417908:	2085883a 	add	r2,r4,r2
  41790c:	1887883a 	add	r3,r3,r2
  417910:	e0bfff17 	ldw	r2,-4(fp)
  417914:	10c00015 	stw	r3,0(r2)

  ret_code = 0;
  417918:	e03ff815 	stw	zero,-32(fp)
  41791c:	00000306 	br	41792c <check_directory_header+0x11c>

  /* We can parse files designed for version 10 */
  version = read_half_word_inc(current_ptr);
  if (version > 10)
  {
    goto exit;
  417920:	0001883a 	nop
  417924:	00000106 	br	41792c <check_directory_header+0x11c>
  /* Read the flags, any set are an error */
  flags = read_half_word_inc(current_ptr);

  if (flags )
  {
    goto exit;
  417928:	0001883a 	nop

  *current_ptr += (name_len + extra_len + comment_len);

  ret_code = 0;
exit:
  return ret_code;
  41792c:	e0bff817 	ldw	r2,-32(fp)
}
  417930:	e037883a 	mov	sp,fp
  417934:	dfc00117 	ldw	ra,4(sp)
  417938:	df000017 	ldw	fp,0(sp)
  41793c:	dec00204 	addi	sp,sp,8
  417940:	f800283a 	ret

00417944 <check_directory_table>:
* tokens are in the right place, none of the files are compressed etc.
* 
* returns 0 for success -ENOENT if not
*/
static int check_directory_table(alt_ro_zipfs_dev* dev)
{
  417944:	defffa04 	addi	sp,sp,-24
  417948:	dfc00515 	stw	ra,20(sp)
  41794c:	df000415 	stw	fp,16(sp)
  417950:	df000404 	addi	fp,sp,16
  417954:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  417958:	e03ffc15 	stw	zero,-16(fp)
  alt_u8* current_ptr = (alt_u8*)dev->directory;
  41795c:	e0bfff17 	ldw	r2,-4(fp)
  417960:	10800b17 	ldw	r2,44(r2)
  417964:	e0bffe15 	stw	r2,-8(fp)
  alt_u32 token;

  while(1)
  {
    token = read_word_inc(&current_ptr);
  417968:	e0bffe04 	addi	r2,fp,-8
  41796c:	1009883a 	mov	r4,r2
  417970:	04176040 	call	417604 <read_word_inc>
  417974:	e0bffd15 	stw	r2,-12(fp)

    switch(token)
  417978:	e0bffd17 	ldw	r2,-12(fp)
  41797c:	00c08074 	movhi	r3,513
  417980:	18d2d404 	addi	r3,r3,19280
  417984:	10c00426 	beq	r2,r3,417998 <check_directory_table+0x54>
  417988:	00c18174 	movhi	r3,1541
  41798c:	18d2d404 	addi	r3,r3,19280
  417990:	10c00826 	beq	r2,r3,4179b4 <check_directory_table+0x70>
  417994:	00000906 	br	4179bc <check_directory_table+0x78>
    {
    case ZIP_DIRECTORY_RECORD:
      {
        ret_code = check_directory_header(&current_ptr);
  417998:	e0bffe04 	addi	r2,fp,-8
  41799c:	1009883a 	mov	r4,r2
  4179a0:	04178100 	call	417810 <check_directory_header>
  4179a4:	e0bffc15 	stw	r2,-16(fp)
        if (ret_code)
  4179a8:	e0bffc17 	ldw	r2,-16(fp)
  4179ac:	10000626 	beq	r2,zero,4179c8 <check_directory_table+0x84>
        {
          goto exit;
  4179b0:	00000706 	br	4179d0 <check_directory_table+0x8c>
        }
        break;
      }
    case ZIP_END_OF_DIRECTORY_RECORD:
      {
        ret_code = 0;
  4179b4:	e03ffc15 	stw	zero,-16(fp)
        goto exit;
  4179b8:	00000506 	br	4179d0 <check_directory_table+0x8c>
      }
    default:
      {
        ret_code = -ENOENT;
  4179bc:	00bfff84 	movi	r2,-2
  4179c0:	e0bffc15 	stw	r2,-16(fp)
        goto exit;
  4179c4:	00000206 	br	4179d0 <check_directory_table+0x8c>
        ret_code = check_directory_header(&current_ptr);
        if (ret_code)
        {
          goto exit;
        }
        break;
  4179c8:	0001883a 	nop
      {
        ret_code = -ENOENT;
        goto exit;
      }
    }
  }
  4179cc:	003fe606 	br	417968 <check_directory_table+0x24>

exit:
  return ret_code;
  4179d0:	e0bffc17 	ldw	r2,-16(fp)
}
  4179d4:	e037883a 	mov	sp,fp
  4179d8:	dfc00117 	ldw	ra,4(sp)
  4179dc:	df000017 	ldw	fp,0(sp)
  4179e0:	dec00204 	addi	sp,sp,8
  4179e4:	f800283a 	ret

004179e8 <find_directory_entry>:
* tokens are in the right place, none of the files are comrpessed etc.
* 
* returns 0 for success -ENOENT if not
*/
static int find_directory_entry(alt_ro_zipfs_dev* dev)
{
  4179e8:	defffa04 	addi	sp,sp,-24
  4179ec:	dfc00515 	stw	ra,20(sp)
  4179f0:	df000415 	stw	fp,16(sp)
  4179f4:	df000404 	addi	fp,sp,16
  4179f8:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  4179fc:	e03ffc15 	stw	zero,-16(fp)
  alt_u32 token;
  alt_u8* current_ptr = dev->base;
  417a00:	e0bfff17 	ldw	r2,-4(fp)
  417a04:	10800a17 	ldw	r2,40(r2)
  417a08:	e0bffe15 	stw	r2,-8(fp)

  while(1)
  {
    token = read_word_inc(&current_ptr);
  417a0c:	e0bffe04 	addi	r2,fp,-8
  417a10:	1009883a 	mov	r4,r2
  417a14:	04176040 	call	417604 <read_word_inc>
  417a18:	e0bffd15 	stw	r2,-12(fp)

    switch(token)
  417a1c:	e0bffd17 	ldw	r2,-12(fp)
  417a20:	00c08074 	movhi	r3,513
  417a24:	18d2d404 	addi	r3,r3,19280
  417a28:	10c00a26 	beq	r2,r3,417a54 <find_directory_entry+0x6c>
  417a2c:	00c100f4 	movhi	r3,1027
  417a30:	18d2d404 	addi	r3,r3,19280
  417a34:	10c00c1e 	bne	r2,r3,417a68 <find_directory_entry+0x80>
    {
    case ZIP_FILE_RECORD:
      {
        ret_code = check_file_header(&current_ptr);
  417a38:	e0bffe04 	addi	r2,fp,-8
  417a3c:	1009883a 	mov	r4,r2
  417a40:	04176f00 	call	4176f0 <check_file_header>
  417a44:	e0bffc15 	stw	r2,-16(fp)
        if(ret_code)
  417a48:	e0bffc17 	ldw	r2,-16(fp)
  417a4c:	10000926 	beq	r2,zero,417a74 <find_directory_entry+0x8c>
        {
          goto exit;
  417a50:	00000a06 	br	417a7c <find_directory_entry+0x94>
        }
        break;
      }
    case ZIP_DIRECTORY_RECORD:
      {
        dev->directory = current_ptr - 4;
  417a54:	e0bffe17 	ldw	r2,-8(fp)
  417a58:	10ffff04 	addi	r3,r2,-4
  417a5c:	e0bfff17 	ldw	r2,-4(fp)
  417a60:	10c00b15 	stw	r3,44(r2)
        goto exit;
  417a64:	00000506 	br	417a7c <find_directory_entry+0x94>
      }
    default:
      {
        ret_code = -ENOENT;
  417a68:	00bfff84 	movi	r2,-2
  417a6c:	e0bffc15 	stw	r2,-16(fp)
        goto exit;
  417a70:	00000206 	br	417a7c <find_directory_entry+0x94>
        ret_code = check_file_header(&current_ptr);
        if(ret_code)
        {
          goto exit;
        }
        break;
  417a74:	0001883a 	nop
      {
        ret_code = -ENOENT;
        goto exit;
      }
    }
  }
  417a78:	003fe406 	br	417a0c <find_directory_entry+0x24>
exit:
  return ret_code;
  417a7c:	e0bffc17 	ldw	r2,-16(fp)
}
  417a80:	e037883a 	mov	sp,fp
  417a84:	dfc00117 	ldw	ra,4(sp)
  417a88:	df000017 	ldw	fp,0(sp)
  417a8c:	dec00204 	addi	sp,sp,8
  417a90:	f800283a 	ret

00417a94 <find_file_entry_by_name>:
*
* returns -ENOENT if fails
*/
static int find_file_entry_by_name( alt_ro_zipfs_dev* dev, alt_fd* fd, 
                                    const alt_u8* name)
{
  417a94:	defff504 	addi	sp,sp,-44
  417a98:	dfc00a15 	stw	ra,40(sp)
  417a9c:	df000915 	stw	fp,36(sp)
  417aa0:	df000904 	addi	fp,sp,36
  417aa4:	e13ffd15 	stw	r4,-12(fp)
  417aa8:	e17ffe15 	stw	r5,-8(fp)
  417aac:	e1bfff15 	stw	r6,-4(fp)
  int ret_code = -ENOENT;
  417ab0:	00bfff84 	movi	r2,-2
  417ab4:	e0bff715 	stw	r2,-36(fp)
  alt_u32 token;
  alt_u8* current_ptr = dev->directory;
  417ab8:	e0bffd17 	ldw	r2,-12(fp)
  417abc:	10800b17 	ldw	r2,44(r2)
  417ac0:	e0bff815 	stw	r2,-32(fp)
  alt_u16 name_len, extra_len, comment_len, extra_file_len;
  alt_u32 offset;

  current_ptr = dev->directory;
  417ac4:	e0bffd17 	ldw	r2,-12(fp)
  417ac8:	10800b17 	ldw	r2,44(r2)
  417acc:	e0bff815 	stw	r2,-32(fp)

  while(1)
  {
    token = read_word(current_ptr);
  417ad0:	e13ff817 	ldw	r4,-32(fp)
  417ad4:	04175900 	call	417590 <read_word>
  417ad8:	e0bff915 	stw	r2,-28(fp)

    if(token != ZIP_DIRECTORY_RECORD)
  417adc:	e0fff917 	ldw	r3,-28(fp)
  417ae0:	00808074 	movhi	r2,513
  417ae4:	1092d404 	addi	r2,r2,19280
  417ae8:	18803f1e 	bne	r3,r2,417be8 <find_file_entry_by_name+0x154>
    {
      break;
    }

    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
  417aec:	e0bff817 	ldw	r2,-32(fp)
  417af0:	10800a84 	addi	r2,r2,42
  417af4:	1009883a 	mov	r4,r2
  417af8:	04175900 	call	417590 <read_word>
  417afc:	e0bffa15 	stw	r2,-24(fp)
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
  417b00:	e0bff817 	ldw	r2,-32(fp)
  417b04:	10800704 	addi	r2,r2,28
  417b08:	1009883a 	mov	r4,r2
  417b0c:	04176580 	call	417658 <read_half_word>
  417b10:	e0bffb0d 	sth	r2,-20(fp)
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
  417b14:	e0bff817 	ldw	r2,-32(fp)
  417b18:	10800784 	addi	r2,r2,30
  417b1c:	1009883a 	mov	r4,r2
  417b20:	04176580 	call	417658 <read_half_word>
  417b24:	e0bffb8d 	sth	r2,-18(fp)
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);
  417b28:	e0bff817 	ldw	r2,-32(fp)
  417b2c:	10800804 	addi	r2,r2,32
  417b30:	1009883a 	mov	r4,r2
  417b34:	04176580 	call	417658 <read_half_word>
  417b38:	e0bffc0d 	sth	r2,-16(fp)

    if ((strlen((const char *)name) == name_len) && 
  417b3c:	e13fff17 	ldw	r4,-4(fp)
  417b40:	040115c0 	call	40115c <strlen>
  417b44:	e0fffb0b 	ldhu	r3,-20(fp)
  417b48:	10c01d1e 	bne	r2,r3,417bc0 <find_file_entry_by_name+0x12c>
    (!strncmp((const char *)(current_ptr+ZIP_DIR_HEADER_SIZE), (const char *)name, name_len)))
  417b4c:	e0bff817 	ldw	r2,-32(fp)
  417b50:	10c00b84 	addi	r3,r2,46
  417b54:	e0bffb0b 	ldhu	r2,-20(fp)
  417b58:	1809883a 	mov	r4,r3
  417b5c:	e17fff17 	ldw	r5,-4(fp)
  417b60:	100d883a 	mov	r6,r2
  417b64:	04193240 	call	419324 <strncmp>
    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);

    if ((strlen((const char *)name) == name_len) && 
  417b68:	1000151e 	bne	r2,zero,417bc0 <find_file_entry_by_name+0x12c>
    (!strncmp((const char *)(current_ptr+ZIP_DIR_HEADER_SIZE), (const char *)name, name_len)))
    {
      extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
  417b6c:	e0bffd17 	ldw	r2,-12(fp)
  417b70:	10c00a17 	ldw	r3,40(r2)
  417b74:	e0bffa17 	ldw	r2,-24(fp)
  417b78:	10800704 	addi	r2,r2,28
  417b7c:	1885883a 	add	r2,r3,r2
  417b80:	1009883a 	mov	r4,r2
  417b84:	04176580 	call	417658 <read_half_word>
  417b88:	e0bffc8d 	sth	r2,-14(fp)
      fd->priv = dev->base + ZIP_FILE_HEADER_SIZE 
  417b8c:	e0bffd17 	ldw	r2,-12(fp)
  417b90:	10c00a17 	ldw	r3,40(r2)
                  + offset + extra_file_len + name_len;
  417b94:	e13ffc8b 	ldhu	r4,-14(fp)
  417b98:	e0bffa17 	ldw	r2,-24(fp)
  417b9c:	2089883a 	add	r4,r4,r2
  417ba0:	e0bffb0b 	ldhu	r2,-20(fp)
  417ba4:	2085883a 	add	r2,r4,r2
  417ba8:	10800784 	addi	r2,r2,30
  417bac:	1887883a 	add	r3,r3,r2

    if ((strlen((const char *)name) == name_len) && 
    (!strncmp((const char *)(current_ptr+ZIP_DIR_HEADER_SIZE), (const char *)name, name_len)))
    {
      extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
      fd->priv = dev->base + ZIP_FILE_HEADER_SIZE 
  417bb0:	e0bffe17 	ldw	r2,-8(fp)
  417bb4:	10c00115 	stw	r3,4(r2)
                  + offset + extra_file_len + name_len;
      ret_code = 0;
  417bb8:	e03ff715 	stw	zero,-36(fp)
      break;
  417bbc:	00000b06 	br	417bec <find_file_entry_by_name+0x158>
    }
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
  417bc0:	e0bffb0b 	ldhu	r2,-20(fp)
  417bc4:	10c00b84 	addi	r3,r2,46
  417bc8:	e0bffb8b 	ldhu	r2,-18(fp)
  417bcc:	1887883a 	add	r3,r3,r2
  417bd0:	e0bffc0b 	ldhu	r2,-16(fp)
  417bd4:	1885883a 	add	r2,r3,r2
  417bd8:	e0fff817 	ldw	r3,-32(fp)
  417bdc:	1885883a 	add	r2,r3,r2
  417be0:	e0bff815 	stw	r2,-32(fp)
  }
  417be4:	003fba06 	br	417ad0 <find_file_entry_by_name+0x3c>
  {
    token = read_word(current_ptr);

    if(token != ZIP_DIRECTORY_RECORD)
    {
      break;
  417be8:	0001883a 	nop
      break;
    }
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
  }

  return ret_code;
  417bec:	e0bff717 	ldw	r2,-36(fp)
}
  417bf0:	e037883a 	mov	sp,fp
  417bf4:	dfc00117 	ldw	ra,4(sp)
  417bf8:	df000017 	ldw	fp,0(sp)
  417bfc:	dec00204 	addi	sp,sp,8
  417c00:	f800283a 	ret

00417c04 <find_file_entry>:
*
* returns -EBADF if fails
*/
static int find_file_entry( alt_ro_zipfs_dev* dev, alt_fd* fd, 
                            alt_u8** start, alt_u32* len)
{
  417c04:	defff304 	addi	sp,sp,-52
  417c08:	dfc00c15 	stw	ra,48(sp)
  417c0c:	df000b15 	stw	fp,44(sp)
  417c10:	df000b04 	addi	fp,sp,44
  417c14:	e13ffc15 	stw	r4,-16(fp)
  417c18:	e17ffd15 	stw	r5,-12(fp)
  417c1c:	e1bffe15 	stw	r6,-8(fp)
  417c20:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = -EBADF;
  417c24:	00bffdc4 	movi	r2,-9
  417c28:	e0bff515 	stw	r2,-44(fp)
  alt_u32 token;
  alt_u8* current_ptr = (alt_u8*)dev->directory;
  417c2c:	e0bffc17 	ldw	r2,-16(fp)
  417c30:	10800b17 	ldw	r2,44(r2)
  417c34:	e0bff615 	stw	r2,-40(fp)
  alt_u8* end;
  alt_u16 name_len, extra_len, comment_len, extra_file_len;
  alt_u32 offset;

  current_ptr = dev->directory;
  417c38:	e0bffc17 	ldw	r2,-16(fp)
  417c3c:	10800b17 	ldw	r2,44(r2)
  417c40:	e0bff615 	stw	r2,-40(fp)
  417c44:	00000106 	br	417c4c <find_file_entry+0x48>
        (fd->priv <= end))
    {
      ret_code = 0;
      break;
    }
  }
  417c48:	0001883a 	nop

  current_ptr = dev->directory;

  while(1)
  {
    token = read_word(current_ptr);
  417c4c:	e13ff617 	ldw	r4,-40(fp)
  417c50:	04175900 	call	417590 <read_word>
  417c54:	e0bff715 	stw	r2,-36(fp)

    if(token != ZIP_DIRECTORY_RECORD)
  417c58:	e0fff717 	ldw	r3,-36(fp)
  417c5c:	00808074 	movhi	r2,513
  417c60:	1092d404 	addi	r2,r2,19280
  417c64:	1880471e 	bne	r3,r2,417d84 <find_file_entry+0x180>
    {
      break;
    }
    
    *len = read_word(current_ptr + ZIP_DIR_UNCOMPRESSED_LEN);
  417c68:	e0bff617 	ldw	r2,-40(fp)
  417c6c:	10800604 	addi	r2,r2,24
  417c70:	1009883a 	mov	r4,r2
  417c74:	04175900 	call	417590 <read_word>
  417c78:	e0ffff17 	ldw	r3,-4(fp)
  417c7c:	18800015 	stw	r2,0(r3)
    offset = read_word(current_ptr + ZIP_DIR_OFFSET);
  417c80:	e0bff617 	ldw	r2,-40(fp)
  417c84:	10800a84 	addi	r2,r2,42
  417c88:	1009883a 	mov	r4,r2
  417c8c:	04175900 	call	417590 <read_word>
  417c90:	e0bff815 	stw	r2,-32(fp)
    name_len = read_half_word(current_ptr + ZIP_DIR_NAME_LEN);
  417c94:	e0bff617 	ldw	r2,-40(fp)
  417c98:	10800704 	addi	r2,r2,28
  417c9c:	1009883a 	mov	r4,r2
  417ca0:	04176580 	call	417658 <read_half_word>
  417ca4:	e0bff90d 	sth	r2,-28(fp)
    extra_len = read_half_word(current_ptr + ZIP_DIR_EXTRA_LEN);
  417ca8:	e0bff617 	ldw	r2,-40(fp)
  417cac:	10800784 	addi	r2,r2,30
  417cb0:	1009883a 	mov	r4,r2
  417cb4:	04176580 	call	417658 <read_half_word>
  417cb8:	e0bff98d 	sth	r2,-26(fp)
    comment_len = read_half_word(current_ptr + ZIP_DIR_COMMENT_LEN);
  417cbc:	e0bff617 	ldw	r2,-40(fp)
  417cc0:	10800804 	addi	r2,r2,32
  417cc4:	1009883a 	mov	r4,r2
  417cc8:	04176580 	call	417658 <read_half_word>
  417ccc:	e0bffa0d 	sth	r2,-24(fp)
    current_ptr += ZIP_DIR_HEADER_SIZE + name_len + extra_len + comment_len;
  417cd0:	e0bff90b 	ldhu	r2,-28(fp)
  417cd4:	10c00b84 	addi	r3,r2,46
  417cd8:	e0bff98b 	ldhu	r2,-26(fp)
  417cdc:	1887883a 	add	r3,r3,r2
  417ce0:	e0bffa0b 	ldhu	r2,-24(fp)
  417ce4:	1885883a 	add	r2,r3,r2
  417ce8:	e0fff617 	ldw	r3,-40(fp)
  417cec:	1885883a 	add	r2,r3,r2
  417cf0:	e0bff615 	stw	r2,-40(fp)

    extra_file_len = read_half_word(dev->base + offset + ZIP_FILE_EXTRA_LEN); 
  417cf4:	e0bffc17 	ldw	r2,-16(fp)
  417cf8:	10c00a17 	ldw	r3,40(r2)
  417cfc:	e0bff817 	ldw	r2,-32(fp)
  417d00:	10800704 	addi	r2,r2,28
  417d04:	1885883a 	add	r2,r3,r2
  417d08:	1009883a 	mov	r4,r2
  417d0c:	04176580 	call	417658 <read_half_word>
  417d10:	e0bffa8d 	sth	r2,-22(fp)

    *start = dev->base + ZIP_FILE_HEADER_SIZE + offset + extra_file_len + name_len;
  417d14:	e0bffc17 	ldw	r2,-16(fp)
  417d18:	10c00a17 	ldw	r3,40(r2)
  417d1c:	e13ffa8b 	ldhu	r4,-22(fp)
  417d20:	e0bff817 	ldw	r2,-32(fp)
  417d24:	2089883a 	add	r4,r4,r2
  417d28:	e0bff90b 	ldhu	r2,-28(fp)
  417d2c:	2085883a 	add	r2,r4,r2
  417d30:	10800784 	addi	r2,r2,30
  417d34:	1887883a 	add	r3,r3,r2
  417d38:	e0bffe17 	ldw	r2,-8(fp)
  417d3c:	10c00015 	stw	r3,0(r2)

    /* The plus 1 is for the End of file condition */
    end = *start + *len;
  417d40:	e0bffe17 	ldw	r2,-8(fp)
  417d44:	10c00017 	ldw	r3,0(r2)
  417d48:	e0bfff17 	ldw	r2,-4(fp)
  417d4c:	10800017 	ldw	r2,0(r2)
  417d50:	1885883a 	add	r2,r3,r2
  417d54:	e0bffb15 	stw	r2,-20(fp)
    if ((fd->priv >= *start ) &&
  417d58:	e0bffd17 	ldw	r2,-12(fp)
  417d5c:	10c00117 	ldw	r3,4(r2)
  417d60:	e0bffe17 	ldw	r2,-8(fp)
  417d64:	10800017 	ldw	r2,0(r2)
  417d68:	18bfb736 	bltu	r3,r2,417c48 <find_file_entry+0x44>
        (fd->priv <= end))
  417d6c:	e0bffd17 	ldw	r2,-12(fp)
  417d70:	10800117 	ldw	r2,4(r2)

    *start = dev->base + ZIP_FILE_HEADER_SIZE + offset + extra_file_len + name_len;

    /* The plus 1 is for the End of file condition */
    end = *start + *len;
    if ((fd->priv >= *start ) &&
  417d74:	e0fffb17 	ldw	r3,-20(fp)
  417d78:	18bfb336 	bltu	r3,r2,417c48 <find_file_entry+0x44>
        (fd->priv <= end))
    {
      ret_code = 0;
  417d7c:	e03ff515 	stw	zero,-44(fp)
      break;
  417d80:	00000106 	br	417d88 <find_file_entry+0x184>
  {
    token = read_word(current_ptr);

    if(token != ZIP_DIRECTORY_RECORD)
    {
      break;
  417d84:	0001883a 	nop
      ret_code = 0;
      break;
    }
  }

  return ret_code;
  417d88:	e0bff517 	ldw	r2,-44(fp)
}
  417d8c:	e037883a 	mov	sp,fp
  417d90:	dfc00117 	ldw	ra,4(sp)
  417d94:	df000017 	ldw	fp,0(sp)
  417d98:	dec00204 	addi	sp,sp,8
  417d9c:	f800283a 	ret

00417da0 <alt_ro_zipfs_open>:
* Find the Central dircetory and then find the pointer to this file
* from that.
*
*/
int alt_ro_zipfs_open(alt_fd* fd, const char* name, int flags, int mode)
{
  417da0:	defff804 	addi	sp,sp,-32
  417da4:	dfc00715 	stw	ra,28(sp)
  417da8:	df000615 	stw	fp,24(sp)
  417dac:	df000604 	addi	fp,sp,24
  417db0:	e13ffc15 	stw	r4,-16(fp)
  417db4:	e17ffd15 	stw	r5,-12(fp)
  417db8:	e1bffe15 	stw	r6,-8(fp)
  417dbc:	e1ffff15 	stw	r7,-4(fp)
  int ret_code = -EROFS;
  417dc0:	00bff884 	movi	r2,-30
  417dc4:	e0bffa15 	stw	r2,-24(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  417dc8:	e0bffc17 	ldw	r2,-16(fp)
  417dcc:	10800017 	ldw	r2,0(r2)
  417dd0:	e0bffb15 	stw	r2,-20(fp)

#ifdef ALT_USE_DIRECT_DRIVERS
  ALT_LINK_ERROR("Error: Read-only ZIP filesystem not supported when direct drivers are used.");
#endif

  if (flags == O_RDONLY )
  417dd4:	e0bffe17 	ldw	r2,-8(fp)
  417dd8:	10000f1e 	bne	r2,zero,417e18 <alt_ro_zipfs_open+0x78>
  {
    if (dev->directory != NULL)
  417ddc:	e0bffb17 	ldw	r2,-20(fp)
  417de0:	10800b17 	ldw	r2,44(r2)
  417de4:	10000c26 	beq	r2,zero,417e18 <alt_ro_zipfs_open+0x78>
    {
      ret_code = find_file_entry_by_name( dev, fd, 
                                          (const alt_u8*)(name+strlen(dev->fs_dev.name)+1));
  417de8:	e0bffb17 	ldw	r2,-20(fp)
  417dec:	10800217 	ldw	r2,8(r2)
  417df0:	1009883a 	mov	r4,r2
  417df4:	040115c0 	call	40115c <strlen>
  417df8:	10800044 	addi	r2,r2,1
  417dfc:	e0fffd17 	ldw	r3,-12(fp)
  417e00:	1885883a 	add	r2,r3,r2

  if (flags == O_RDONLY )
  {
    if (dev->directory != NULL)
    {
      ret_code = find_file_entry_by_name( dev, fd, 
  417e04:	e13ffb17 	ldw	r4,-20(fp)
  417e08:	e17ffc17 	ldw	r5,-16(fp)
  417e0c:	100d883a 	mov	r6,r2
  417e10:	0417a940 	call	417a94 <find_file_entry_by_name>
  417e14:	e0bffa15 	stw	r2,-24(fp)
                                          (const alt_u8*)(name+strlen(dev->fs_dev.name)+1));
    }
  }

  return ret_code;
  417e18:	e0bffa17 	ldw	r2,-24(fp)
}
  417e1c:	e037883a 	mov	sp,fp
  417e20:	dfc00117 	ldw	ra,4(sp)
  417e24:	df000017 	ldw	fp,0(sp)
  417e28:	dec00204 	addi	sp,sp,8
  417e2c:	f800283a 	ret

00417e30 <alt_ro_zipfs_read>:
* alt_ro_zipfs_read
*
* Read the file
*/
int alt_ro_zipfs_read(alt_fd* fd, char* ptr, int len)
{
  417e30:	defff204 	addi	sp,sp,-56
  417e34:	dfc00d15 	stw	ra,52(sp)
  417e38:	df000c15 	stw	fp,48(sp)
  417e3c:	df000c04 	addi	fp,sp,48
  417e40:	e13ffd15 	stw	r4,-12(fp)
  417e44:	e17ffe15 	stw	r5,-8(fp)
  417e48:	e1bfff15 	stw	r6,-4(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  417e4c:	e0bffd17 	ldw	r2,-12(fp)
  417e50:	10800017 	ldw	r2,0(r2)
  417e54:	e0bff415 	stw	r2,-48(fp)
  alt_u8 *start, *current;
  alt_u32 file_len;
  int amount_to_copy;
  alt_irq_context context;

  find_file_entry(dev, fd, &start, &file_len);
  417e58:	e0fffb04 	addi	r3,fp,-20
  417e5c:	e0bffc04 	addi	r2,fp,-16
  417e60:	e13ff417 	ldw	r4,-48(fp)
  417e64:	e17ffd17 	ldw	r5,-12(fp)
  417e68:	180d883a 	mov	r6,r3
  417e6c:	100f883a 	mov	r7,r2
  417e70:	0417c040 	call	417c04 <find_file_entry>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  417e74:	0005303a 	rdctl	r2,status
  417e78:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  417e7c:	e0fff817 	ldw	r3,-32(fp)
  417e80:	00bfff84 	movi	r2,-2
  417e84:	1884703a 	and	r2,r3,r2
  417e88:	1001703a 	wrctl	status,r2
  
  return context;
  417e8c:	e0bff817 	ldw	r2,-32(fp)
  *
  * We could use a Mutex or a binary semaphore, but those would have 
  * a much bigger code footprint and disable interrupts for as many 
  * instructions anyway
  */
  context = alt_irq_disable_all();
  417e90:	e0bff515 	stw	r2,-44(fp)
  current = fd->priv;
  417e94:	e0bffd17 	ldw	r2,-12(fp)
  417e98:	10800117 	ldw	r2,4(r2)
  417e9c:	e0bff615 	stw	r2,-40(fp)
  amount_to_copy = MIN(len, file_len - (current - start));
  417ea0:	e0bffb17 	ldw	r2,-20(fp)
  417ea4:	1007883a 	mov	r3,r2
  417ea8:	e0bff617 	ldw	r2,-40(fp)
  417eac:	1885c83a 	sub	r2,r3,r2
  417eb0:	1007883a 	mov	r3,r2
  417eb4:	e0bffc17 	ldw	r2,-16(fp)
  417eb8:	1885883a 	add	r2,r3,r2
  417ebc:	e0ffff17 	ldw	r3,-4(fp)
  417ec0:	1880012e 	bgeu	r3,r2,417ec8 <alt_ro_zipfs_read+0x98>
  417ec4:	1805883a 	mov	r2,r3
  417ec8:	e0bff715 	stw	r2,-36(fp)
  fd->priv += amount_to_copy;
  417ecc:	e0bffd17 	ldw	r2,-12(fp)
  417ed0:	10c00117 	ldw	r3,4(r2)
  417ed4:	e0bff717 	ldw	r2,-36(fp)
  417ed8:	1887883a 	add	r3,r3,r2
  417edc:	e0bffd17 	ldw	r2,-12(fp)
  417ee0:	10c00115 	stw	r3,4(r2)
  417ee4:	e0bff517 	ldw	r2,-44(fp)
  417ee8:	e0bff915 	stw	r2,-28(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  417eec:	0005303a 	rdctl	r2,status
  417ef0:	e0bffa15 	stw	r2,-24(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  417ef4:	e0fffa17 	ldw	r3,-24(fp)
  417ef8:	00bfff84 	movi	r2,-2
  417efc:	1884703a 	and	r2,r3,r2
  417f00:	e0bffa15 	stw	r2,-24(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  417f04:	e0bff917 	ldw	r2,-28(fp)
  417f08:	1080004c 	andi	r2,r2,1
  417f0c:	e0fffa17 	ldw	r3,-24(fp)
  417f10:	1884b03a 	or	r2,r3,r2
  417f14:	e0bffa15 	stw	r2,-24(fp)
  
  NIOS2_WRITE_STATUS (status);
  417f18:	e0bffa17 	ldw	r2,-24(fp)
  417f1c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(context);

  memcpy(ptr, current, amount_to_copy);
  417f20:	e0bff717 	ldw	r2,-36(fp)
  417f24:	e13ffe17 	ldw	r4,-8(fp)
  417f28:	e17ff617 	ldw	r5,-40(fp)
  417f2c:	100d883a 	mov	r6,r2
  417f30:	0400f1c0 	call	400f1c <memcpy>
  
  return amount_to_copy;
  417f34:	e0bff717 	ldw	r2,-36(fp)
}
  417f38:	e037883a 	mov	sp,fp
  417f3c:	dfc00117 	ldw	ra,4(sp)
  417f40:	df000017 	ldw	fp,0(sp)
  417f44:	dec00204 	addi	sp,sp,8
  417f48:	f800283a 	ret

00417f4c <alt_ro_zipfs_seek>:
* Move around within a file
*
* returns -EROFS for a seek beyond the end of the file
*/
int alt_ro_zipfs_seek(alt_fd* fd, int ptr, int dir)
{
  417f4c:	defff704 	addi	sp,sp,-36
  417f50:	dfc00815 	stw	ra,32(sp)
  417f54:	df000715 	stw	fp,28(sp)
  417f58:	df000704 	addi	fp,sp,28
  417f5c:	e13ffd15 	stw	r4,-12(fp)
  417f60:	e17ffe15 	stw	r5,-8(fp)
  417f64:	e1bfff15 	stw	r6,-4(fp)
  int ret_code;
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  417f68:	e0bffd17 	ldw	r2,-12(fp)
  417f6c:	10800017 	ldw	r2,0(r2)
  417f70:	e0bffa15 	stw	r2,-24(fp)
  alt_u8* start;
  alt_u32 len;

  find_file_entry(dev, fd, &start, &len);
  417f74:	e0fffb04 	addi	r3,fp,-20
  417f78:	e0bffc04 	addi	r2,fp,-16
  417f7c:	e13ffa17 	ldw	r4,-24(fp)
  417f80:	e17ffd17 	ldw	r5,-12(fp)
  417f84:	180d883a 	mov	r6,r3
  417f88:	100f883a 	mov	r7,r2
  417f8c:	0417c040 	call	417c04 <find_file_entry>

  switch(dir)
  417f90:	e0bfff17 	ldw	r2,-4(fp)
  417f94:	10c00060 	cmpeqi	r3,r2,1
  417f98:	1800041e 	bne	r3,zero,417fac <alt_ro_zipfs_seek+0x60>
  417f9c:	10c000a0 	cmpeqi	r3,r2,2
  417fa0:	1800201e 	bne	r3,zero,418024 <alt_ro_zipfs_seek+0xd8>
  417fa4:	10001326 	beq	r2,zero,417ff4 <alt_ro_zipfs_seek+0xa8>
  417fa8:	00002b06 	br	418058 <alt_ro_zipfs_seek+0x10c>
  {

  case SEEK_CUR:
    {
      /* Seek from current position */
      if ((fd->priv + ptr) > (start +len))
  417fac:	e0bffd17 	ldw	r2,-12(fp)
  417fb0:	10c00117 	ldw	r3,4(r2)
  417fb4:	e0bffe17 	ldw	r2,-8(fp)
  417fb8:	1885883a 	add	r2,r3,r2
  417fbc:	e13ffb17 	ldw	r4,-20(fp)
  417fc0:	e0fffc17 	ldw	r3,-16(fp)
  417fc4:	20c7883a 	add	r3,r4,r3
  417fc8:	1880032e 	bgeu	r3,r2,417fd8 <alt_ro_zipfs_seek+0x8c>
      {
        ret_code = -EINVAL;
  417fcc:	00bffa84 	movi	r2,-22
  417fd0:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  417fd4:	00002606 	br	418070 <alt_ro_zipfs_seek+0x124>
      }

      fd->priv += ptr;
  417fd8:	e0bffd17 	ldw	r2,-12(fp)
  417fdc:	10c00117 	ldw	r3,4(r2)
  417fe0:	e0bffe17 	ldw	r2,-8(fp)
  417fe4:	1887883a 	add	r3,r3,r2
  417fe8:	e0bffd17 	ldw	r2,-12(fp)
  417fec:	10c00115 	stw	r3,4(r2)
      break;
  417ff0:	00001906 	br	418058 <alt_ro_zipfs_seek+0x10c>
    }
  case SEEK_SET:
    {
      /* Seek from the beginning */
      if (ptr > len)
  417ff4:	e0bffe17 	ldw	r2,-8(fp)
  417ff8:	e0fffc17 	ldw	r3,-16(fp)
  417ffc:	1880032e 	bgeu	r3,r2,41800c <alt_ro_zipfs_seek+0xc0>
      {
        ret_code = -EINVAL;
  418000:	00bffa84 	movi	r2,-22
  418004:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  418008:	00001906 	br	418070 <alt_ro_zipfs_seek+0x124>
      }

      fd->priv = start + ptr;
  41800c:	e0fffb17 	ldw	r3,-20(fp)
  418010:	e0bffe17 	ldw	r2,-8(fp)
  418014:	1887883a 	add	r3,r3,r2
  418018:	e0bffd17 	ldw	r2,-12(fp)
  41801c:	10c00115 	stw	r3,4(r2)
      break;
  418020:	00000d06 	br	418058 <alt_ro_zipfs_seek+0x10c>
    }
  case SEEK_END:
    {
      if(ptr > 0)
  418024:	e0bffe17 	ldw	r2,-8(fp)
  418028:	0080030e 	bge	zero,r2,418038 <alt_ro_zipfs_seek+0xec>
      {
        ret_code = -EINVAL;
  41802c:	00bffa84 	movi	r2,-22
  418030:	e0bff915 	stw	r2,-28(fp)
        goto exit;
  418034:	00000e06 	br	418070 <alt_ro_zipfs_seek+0x124>
      }

      fd->priv = start + ptr + len;
  418038:	e0fffb17 	ldw	r3,-20(fp)
  41803c:	e13ffe17 	ldw	r4,-8(fp)
  418040:	e0bffc17 	ldw	r2,-16(fp)
  418044:	2085883a 	add	r2,r4,r2
  418048:	1887883a 	add	r3,r3,r2
  41804c:	e0bffd17 	ldw	r2,-12(fp)
  418050:	10c00115 	stw	r3,4(r2)
      break;
  418054:	0001883a 	nop
    }
  }
  ret_code = (int)(fd->priv - start);
  418058:	e0bffd17 	ldw	r2,-12(fp)
  41805c:	10800117 	ldw	r2,4(r2)
  418060:	1007883a 	mov	r3,r2
  418064:	e0bffb17 	ldw	r2,-20(fp)
  418068:	1885c83a 	sub	r2,r3,r2
  41806c:	e0bff915 	stw	r2,-28(fp)

exit:
  return ret_code;
  418070:	e0bff917 	ldw	r2,-28(fp)
}
  418074:	e037883a 	mov	sp,fp
  418078:	dfc00117 	ldw	ra,4(sp)
  41807c:	df000017 	ldw	fp,0(sp)
  418080:	dec00204 	addi	sp,sp,8
  418084:	f800283a 	ret

00418088 <alt_ro_zipfs_fstat>:
* 
* Return the file status information, the only fields we fill in are
* the size and that this really is a file, not a device
*/
int alt_ro_zipfs_fstat(alt_fd* fd, struct stat* buf)
{
  418088:	defff804 	addi	sp,sp,-32
  41808c:	dfc00715 	stw	ra,28(sp)
  418090:	df000615 	stw	fp,24(sp)
  418094:	df000604 	addi	fp,sp,24
  418098:	e13ffe15 	stw	r4,-8(fp)
  41809c:	e17fff15 	stw	r5,-4(fp)
  alt_ro_zipfs_dev* dev= (alt_ro_zipfs_dev*)fd->dev;
  4180a0:	e0bffe17 	ldw	r2,-8(fp)
  4180a4:	10800017 	ldw	r2,0(r2)
  4180a8:	e0bffa15 	stw	r2,-24(fp)
  alt_u8* start;
  alt_u32 len;
  int ret_code = 0;
  4180ac:	e03ffb15 	stw	zero,-20(fp)

  find_file_entry(dev, fd, &start, &len);
  4180b0:	e0fffc04 	addi	r3,fp,-16
  4180b4:	e0bffd04 	addi	r2,fp,-12
  4180b8:	e13ffa17 	ldw	r4,-24(fp)
  4180bc:	e17ffe17 	ldw	r5,-8(fp)
  4180c0:	180d883a 	mov	r6,r3
  4180c4:	100f883a 	mov	r7,r2
  4180c8:	0417c040 	call	417c04 <find_file_entry>
  buf->st_mode = S_IFREG;
  4180cc:	e0bfff17 	ldw	r2,-4(fp)
  4180d0:	00e00014 	movui	r3,32768
  4180d4:	10c00115 	stw	r3,4(r2)
  buf->st_size = (off_t)len;
  4180d8:	e0bffd17 	ldw	r2,-12(fp)
  4180dc:	1007883a 	mov	r3,r2
  4180e0:	e0bfff17 	ldw	r2,-4(fp)
  4180e4:	10c00415 	stw	r3,16(r2)

  return ret_code;
  4180e8:	e0bffb17 	ldw	r2,-20(fp)
}
  4180ec:	e037883a 	mov	sp,fp
  4180f0:	dfc00117 	ldw	ra,4(sp)
  4180f4:	df000017 	ldw	fp,0(sp)
  4180f8:	dec00204 	addi	sp,sp,8
  4180fc:	f800283a 	ret

00418100 <alt_ro_zipfs_check_valid>:
* check that the file system is a valid zip file
* if so return 1
*
*/
int alt_ro_zipfs_check_valid(alt_ro_zipfs_dev* dev)
{
  418100:	defffc04 	addi	sp,sp,-16
  418104:	dfc00315 	stw	ra,12(sp)
  418108:	df000215 	stw	fp,8(sp)
  41810c:	df000204 	addi	fp,sp,8
  418110:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0;
  418114:	e03ffe15 	stw	zero,-8(fp)
  if (find_directory_entry(dev) != -ENOENT)
  418118:	e13fff17 	ldw	r4,-4(fp)
  41811c:	04179e80 	call	4179e8 <find_directory_entry>
  418120:	10bfffa0 	cmpeqi	r2,r2,-2
  418124:	1000061e 	bne	r2,zero,418140 <alt_ro_zipfs_check_valid+0x40>
  {
    if (check_directory_table(dev) != -ENOENT)
  418128:	e13fff17 	ldw	r4,-4(fp)
  41812c:	04179440 	call	417944 <check_directory_table>
  418130:	10bfffa0 	cmpeqi	r2,r2,-2
  418134:	1000021e 	bne	r2,zero,418140 <alt_ro_zipfs_check_valid+0x40>
    {
      ret_code = 1;
  418138:	00800044 	movi	r2,1
  41813c:	e0bffe15 	stw	r2,-8(fp)
    }
  }

  return ret_code;
  418140:	e0bffe17 	ldw	r2,-8(fp)
}
  418144:	e037883a 	mov	sp,fp
  418148:	dfc00117 	ldw	ra,4(sp)
  41814c:	df000017 	ldw	fp,0(sp)
  418150:	dec00204 	addi	sp,sp,8
  418154:	f800283a 	ret

00418158 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  418158:	defff404 	addi	sp,sp,-48
  41815c:	df000b15 	stw	fp,44(sp)
  418160:	df000b04 	addi	fp,sp,44
  418164:	e13ffc15 	stw	r4,-16(fp)
  418168:	e17ffd15 	stw	r5,-12(fp)
  41816c:	e1bffe15 	stw	r6,-8(fp)
  418170:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  418174:	e03ff515 	stw	zero,-44(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  418178:	008010b4 	movhi	r2,66
  41817c:	10b5a504 	addi	r2,r2,-10604
  418180:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  418184:	10004a26 	beq	r2,zero,4182b0 <alt_alarm_start+0x158>
  {
    if (alarm)
  418188:	e0bffc17 	ldw	r2,-16(fp)
  41818c:	10004626 	beq	r2,zero,4182a8 <alt_alarm_start+0x150>
    {
      alarm->callback = callback;
  418190:	e0bffc17 	ldw	r2,-16(fp)
  418194:	e0fffe17 	ldw	r3,-8(fp)
  418198:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  41819c:	e0bffc17 	ldw	r2,-16(fp)
  4181a0:	e0ffff17 	ldw	r3,-4(fp)
  4181a4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  4181a8:	0005303a 	rdctl	r2,status
  4181ac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  4181b0:	e0fff717 	ldw	r3,-36(fp)
  4181b4:	00bfff84 	movi	r2,-2
  4181b8:	1884703a 	and	r2,r3,r2
  4181bc:	1001703a 	wrctl	status,r2
  
  return context;
  4181c0:	e0bff717 	ldw	r2,-36(fp)
 
      irq_context = alt_irq_disable_all ();
  4181c4:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  4181c8:	008010b4 	movhi	r2,66
  4181cc:	10b5a604 	addi	r2,r2,-10600
  4181d0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  4181d4:	e0bff515 	stw	r2,-44(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  4181d8:	e0fffd17 	ldw	r3,-12(fp)
  4181dc:	e0bff517 	ldw	r2,-44(fp)
  4181e0:	1885883a 	add	r2,r3,r2
  4181e4:	10c00044 	addi	r3,r2,1
  4181e8:	e0bffc17 	ldw	r2,-16(fp)
  4181ec:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  4181f0:	e0bffc17 	ldw	r2,-16(fp)
  4181f4:	10c00217 	ldw	r3,8(r2)
  4181f8:	e0bff517 	ldw	r2,-44(fp)
  4181fc:	1880042e 	bgeu	r3,r2,418210 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
  418200:	e0bffc17 	ldw	r2,-16(fp)
  418204:	00c00044 	movi	r3,1
  418208:	10c00405 	stb	r3,16(r2)
  41820c:	00000206 	br	418218 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
  418210:	e0bffc17 	ldw	r2,-16(fp)
  418214:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  418218:	e0bffc17 	ldw	r2,-16(fp)
  41821c:	00c010b4 	movhi	r3,66
  418220:	18ee3704 	addi	r3,r3,-18212
  418224:	e0fff815 	stw	r3,-32(fp)
  418228:	e0bff915 	stw	r2,-28(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  41822c:	e0bff917 	ldw	r2,-28(fp)
  418230:	e0fff817 	ldw	r3,-32(fp)
  418234:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  418238:	e0bff817 	ldw	r2,-32(fp)
  41823c:	10c00017 	ldw	r3,0(r2)
  418240:	e0bff917 	ldw	r2,-28(fp)
  418244:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  418248:	e0bff817 	ldw	r2,-32(fp)
  41824c:	10800017 	ldw	r2,0(r2)
  418250:	e0fff917 	ldw	r3,-28(fp)
  418254:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  418258:	e0bff817 	ldw	r2,-32(fp)
  41825c:	e0fff917 	ldw	r3,-28(fp)
  418260:	10c00015 	stw	r3,0(r2)
  418264:	e0bff617 	ldw	r2,-40(fp)
  418268:	e0bffa15 	stw	r2,-24(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  41826c:	0005303a 	rdctl	r2,status
  418270:	e0bffb15 	stw	r2,-20(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  418274:	e0fffb17 	ldw	r3,-20(fp)
  418278:	00bfff84 	movi	r2,-2
  41827c:	1884703a 	and	r2,r3,r2
  418280:	e0bffb15 	stw	r2,-20(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  418284:	e0bffa17 	ldw	r2,-24(fp)
  418288:	1080004c 	andi	r2,r2,1
  41828c:	e0fffb17 	ldw	r3,-20(fp)
  418290:	1884b03a 	or	r2,r3,r2
  418294:	e0bffb15 	stw	r2,-20(fp)
  
  NIOS2_WRITE_STATUS (status);
  418298:	e0bffb17 	ldw	r2,-20(fp)
  41829c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  4182a0:	0005883a 	mov	r2,zero
  4182a4:	00000306 	br	4182b4 <alt_alarm_start+0x15c>
    }
    else
    {
      return -EINVAL;
  4182a8:	00bffa84 	movi	r2,-22
  4182ac:	00000106 	br	4182b4 <alt_alarm_start+0x15c>
    }
  }
  else
  {
    return -ENOTSUP;
  4182b0:	00bfde84 	movi	r2,-134
  }
}
  4182b4:	e037883a 	mov	sp,fp
  4182b8:	df000017 	ldw	fp,0(sp)
  4182bc:	dec00104 	addi	sp,sp,4
  4182c0:	f800283a 	ret

004182c4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  4182c4:	deffff04 	addi	sp,sp,-4
  4182c8:	df000015 	stw	fp,0(sp)
  4182cc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  4182d0:	e037883a 	mov	sp,fp
  4182d4:	df000017 	ldw	fp,0(sp)
  4182d8:	dec00104 	addi	sp,sp,4
  4182dc:	f800283a 	ret

004182e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  4182e0:	defffe04 	addi	sp,sp,-8
  4182e4:	dfc00115 	stw	ra,4(sp)
  4182e8:	df000015 	stw	fp,0(sp)
  4182ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  4182f0:	008010b4 	movhi	r2,66
  4182f4:	10ae1304 	addi	r2,r2,-18356
  4182f8:	10800017 	ldw	r2,0(r2)
  4182fc:	10000526 	beq	r2,zero,418314 <alt_get_errno+0x34>
  418300:	008010b4 	movhi	r2,66
  418304:	10ae1304 	addi	r2,r2,-18356
  418308:	10800017 	ldw	r2,0(r2)
  41830c:	103ee83a 	callr	r2
  418310:	00000206 	br	41831c <alt_get_errno+0x3c>
  418314:	008010b4 	movhi	r2,66
  418318:	10b58504 	addi	r2,r2,-10732
}
  41831c:	e037883a 	mov	sp,fp
  418320:	dfc00117 	ldw	ra,4(sp)
  418324:	df000017 	ldw	fp,0(sp)
  418328:	dec00204 	addi	sp,sp,8
  41832c:	f800283a 	ret

00418330 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  418330:	defffa04 	addi	sp,sp,-24
  418334:	dfc00515 	stw	ra,20(sp)
  418338:	df000415 	stw	fp,16(sp)
  41833c:	df000404 	addi	fp,sp,16
  418340:	e13ffe15 	stw	r4,-8(fp)
  418344:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  418348:	e0bffe17 	ldw	r2,-8(fp)
  41834c:	10000326 	beq	r2,zero,41835c <alt_dev_llist_insert+0x2c>
  418350:	e0bffe17 	ldw	r2,-8(fp)
  418354:	10800217 	ldw	r2,8(r2)
  418358:	1000051e 	bne	r2,zero,418370 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
  41835c:	04182e00 	call	4182e0 <alt_get_errno>
  418360:	00c00584 	movi	r3,22
  418364:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  418368:	00bffa84 	movi	r2,-22
  41836c:	00001306 	br	4183bc <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  418370:	e0bffe17 	ldw	r2,-8(fp)
  418374:	e0ffff17 	ldw	r3,-4(fp)
  418378:	e0fffc15 	stw	r3,-16(fp)
  41837c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  418380:	e0bffd17 	ldw	r2,-12(fp)
  418384:	e0fffc17 	ldw	r3,-16(fp)
  418388:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  41838c:	e0bffc17 	ldw	r2,-16(fp)
  418390:	10c00017 	ldw	r3,0(r2)
  418394:	e0bffd17 	ldw	r2,-12(fp)
  418398:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  41839c:	e0bffc17 	ldw	r2,-16(fp)
  4183a0:	10800017 	ldw	r2,0(r2)
  4183a4:	e0fffd17 	ldw	r3,-12(fp)
  4183a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  4183ac:	e0bffc17 	ldw	r2,-16(fp)
  4183b0:	e0fffd17 	ldw	r3,-12(fp)
  4183b4:	10c00015 	stw	r3,0(r2)

  return 0;  
  4183b8:	0005883a 	mov	r2,zero
}
  4183bc:	e037883a 	mov	sp,fp
  4183c0:	dfc00117 	ldw	ra,4(sp)
  4183c4:	df000017 	ldw	fp,0(sp)
  4183c8:	dec00204 	addi	sp,sp,8
  4183cc:	f800283a 	ret

004183d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  4183d0:	defffd04 	addi	sp,sp,-12
  4183d4:	dfc00215 	stw	ra,8(sp)
  4183d8:	df000115 	stw	fp,4(sp)
  4183dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  4183e0:	008010b4 	movhi	r2,66
  4183e4:	10a57404 	addi	r2,r2,-27184
  4183e8:	e0bfff15 	stw	r2,-4(fp)
  4183ec:	00000606 	br	418408 <_do_ctors+0x38>
        (*ctor) (); 
  4183f0:	e0bfff17 	ldw	r2,-4(fp)
  4183f4:	10800017 	ldw	r2,0(r2)
  4183f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  4183fc:	e0bfff17 	ldw	r2,-4(fp)
  418400:	10bfff04 	addi	r2,r2,-4
  418404:	e0bfff15 	stw	r2,-4(fp)
  418408:	e0ffff17 	ldw	r3,-4(fp)
  41840c:	008010b4 	movhi	r2,66
  418410:	10a57504 	addi	r2,r2,-27180
  418414:	18bff62e 	bgeu	r3,r2,4183f0 <_do_ctors+0x20>
        (*ctor) (); 
}
  418418:	e037883a 	mov	sp,fp
  41841c:	dfc00117 	ldw	ra,4(sp)
  418420:	df000017 	ldw	fp,0(sp)
  418424:	dec00204 	addi	sp,sp,8
  418428:	f800283a 	ret

0041842c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  41842c:	defffd04 	addi	sp,sp,-12
  418430:	dfc00215 	stw	ra,8(sp)
  418434:	df000115 	stw	fp,4(sp)
  418438:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  41843c:	008010b4 	movhi	r2,66
  418440:	10a57404 	addi	r2,r2,-27184
  418444:	e0bfff15 	stw	r2,-4(fp)
  418448:	00000606 	br	418464 <_do_dtors+0x38>
        (*dtor) (); 
  41844c:	e0bfff17 	ldw	r2,-4(fp)
  418450:	10800017 	ldw	r2,0(r2)
  418454:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  418458:	e0bfff17 	ldw	r2,-4(fp)
  41845c:	10bfff04 	addi	r2,r2,-4
  418460:	e0bfff15 	stw	r2,-4(fp)
  418464:	e0ffff17 	ldw	r3,-4(fp)
  418468:	008010b4 	movhi	r2,66
  41846c:	10a57504 	addi	r2,r2,-27180
  418470:	18bff62e 	bgeu	r3,r2,41844c <_do_dtors+0x20>
        (*dtor) (); 
}
  418474:	e037883a 	mov	sp,fp
  418478:	dfc00117 	ldw	ra,4(sp)
  41847c:	df000017 	ldw	fp,0(sp)
  418480:	dec00204 	addi	sp,sp,8
  418484:	f800283a 	ret

00418488 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
  418488:	defffc04 	addi	sp,sp,-16
  41848c:	df000315 	stw	fp,12(sp)
  418490:	df000304 	addi	fp,sp,12
  418494:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
  418498:	e0bfff17 	ldw	r2,-4(fp)
  41849c:	10800217 	ldw	r2,8(r2)
  4184a0:	1000021e 	bne	r2,zero,4184ac <alt_fs_reg+0x24>
  {
    return -ENODEV;
  4184a4:	00bffb44 	movi	r2,-19
  4184a8:	00001406 	br	4184fc <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
  4184ac:	e0bfff17 	ldw	r2,-4(fp)
  4184b0:	00c010b4 	movhi	r3,66
  4184b4:	18ee0a04 	addi	r3,r3,-18392
  4184b8:	e0fffd15 	stw	r3,-12(fp)
  4184bc:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  4184c0:	e0bffe17 	ldw	r2,-8(fp)
  4184c4:	e0fffd17 	ldw	r3,-12(fp)
  4184c8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  4184cc:	e0bffd17 	ldw	r2,-12(fp)
  4184d0:	10c00017 	ldw	r3,0(r2)
  4184d4:	e0bffe17 	ldw	r2,-8(fp)
  4184d8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  4184dc:	e0bffd17 	ldw	r2,-12(fp)
  4184e0:	10800017 	ldw	r2,0(r2)
  4184e4:	e0fffe17 	ldw	r3,-8(fp)
  4184e8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  4184ec:	e0bffd17 	ldw	r2,-12(fp)
  4184f0:	e0fffe17 	ldw	r3,-8(fp)
  4184f4:	10c00015 	stw	r3,0(r2)

  return 0;
  4184f8:	0005883a 	mov	r2,zero
} 
  4184fc:	e037883a 	mov	sp,fp
  418500:	df000017 	ldw	fp,0(sp)
  418504:	dec00104 	addi	sp,sp,4
  418508:	f800283a 	ret

0041850c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  41850c:	defffe04 	addi	sp,sp,-8
  418510:	dfc00115 	stw	ra,4(sp)
  418514:	df000015 	stw	fp,0(sp)
  418518:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  41851c:	0009883a 	mov	r4,zero
  418520:	01410004 	movi	r5,1024
  418524:	04192080 	call	419208 <alt_icache_flush>
#endif
}
  418528:	e037883a 	mov	sp,fp
  41852c:	dfc00117 	ldw	ra,4(sp)
  418530:	df000017 	ldw	fp,0(sp)
  418534:	dec00204 	addi	sp,sp,8
  418538:	f800283a 	ret

0041853c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  41853c:	defff804 	addi	sp,sp,-32
  418540:	dfc00715 	stw	ra,28(sp)
  418544:	df000615 	stw	fp,24(sp)
  418548:	dc000515 	stw	r16,20(sp)
  41854c:	df000504 	addi	fp,sp,20
  418550:	e13ffc15 	stw	r4,-16(fp)
  418554:	e17ffd15 	stw	r5,-12(fp)
  418558:	e1bffe15 	stw	r6,-8(fp)
  41855c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  418560:	e13ffd17 	ldw	r4,-12(fp)
  418564:	e17ffe17 	ldw	r5,-8(fp)
  418568:	e1bfff17 	ldw	r6,-4(fp)
  41856c:	04187d40 	call	4187d4 <open>
  418570:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  418574:	e0bffb17 	ldw	r2,-20(fp)
  418578:	10002216 	blt	r2,zero,418604 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  41857c:	040010b4 	movhi	r16,66
  418580:	84290904 	addi	r16,r16,-23516
  418584:	e0bffb17 	ldw	r2,-20(fp)
  418588:	1009883a 	mov	r4,r2
  41858c:	01400304 	movi	r5,12
  418590:	0400e700 	call	400e70 <__mulsi3>
  418594:	8085883a 	add	r2,r16,r2
  418598:	10c00017 	ldw	r3,0(r2)
  41859c:	e0bffc17 	ldw	r2,-16(fp)
  4185a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  4185a4:	040010b4 	movhi	r16,66
  4185a8:	84290904 	addi	r16,r16,-23516
  4185ac:	e0bffb17 	ldw	r2,-20(fp)
  4185b0:	1009883a 	mov	r4,r2
  4185b4:	01400304 	movi	r5,12
  4185b8:	0400e700 	call	400e70 <__mulsi3>
  4185bc:	8085883a 	add	r2,r16,r2
  4185c0:	10800104 	addi	r2,r2,4
  4185c4:	10c00017 	ldw	r3,0(r2)
  4185c8:	e0bffc17 	ldw	r2,-16(fp)
  4185cc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  4185d0:	040010b4 	movhi	r16,66
  4185d4:	84290904 	addi	r16,r16,-23516
  4185d8:	e0bffb17 	ldw	r2,-20(fp)
  4185dc:	1009883a 	mov	r4,r2
  4185e0:	01400304 	movi	r5,12
  4185e4:	0400e700 	call	400e70 <__mulsi3>
  4185e8:	8085883a 	add	r2,r16,r2
  4185ec:	10800204 	addi	r2,r2,8
  4185f0:	10c00017 	ldw	r3,0(r2)
  4185f4:	e0bffc17 	ldw	r2,-16(fp)
  4185f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  4185fc:	e13ffb17 	ldw	r4,-20(fp)
  418600:	040b4540 	call	40b454 <alt_release_fd>
  }
} 
  418604:	e037883a 	mov	sp,fp
  418608:	dfc00217 	ldw	ra,8(sp)
  41860c:	df000117 	ldw	fp,4(sp)
  418610:	dc000017 	ldw	r16,0(sp)
  418614:	dec00304 	addi	sp,sp,12
  418618:	f800283a 	ret

0041861c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  41861c:	defffb04 	addi	sp,sp,-20
  418620:	dfc00415 	stw	ra,16(sp)
  418624:	df000315 	stw	fp,12(sp)
  418628:	df000304 	addi	fp,sp,12
  41862c:	e13ffd15 	stw	r4,-12(fp)
  418630:	e17ffe15 	stw	r5,-8(fp)
  418634:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  418638:	010010b4 	movhi	r4,66
  41863c:	21290c04 	addi	r4,r4,-23504
  418640:	e17ffd17 	ldw	r5,-12(fp)
  418644:	01800044 	movi	r6,1
  418648:	01c07fc4 	movi	r7,511
  41864c:	041853c0 	call	41853c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  418650:	010010b4 	movhi	r4,66
  418654:	21290904 	addi	r4,r4,-23516
  418658:	e17ffe17 	ldw	r5,-8(fp)
  41865c:	000d883a 	mov	r6,zero
  418660:	01c07fc4 	movi	r7,511
  418664:	041853c0 	call	41853c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  418668:	010010b4 	movhi	r4,66
  41866c:	21290f04 	addi	r4,r4,-23492
  418670:	e17fff17 	ldw	r5,-4(fp)
  418674:	01800044 	movi	r6,1
  418678:	01c07fc4 	movi	r7,511
  41867c:	041853c0 	call	41853c <alt_open_fd>
}  
  418680:	e037883a 	mov	sp,fp
  418684:	dfc00117 	ldw	ra,4(sp)
  418688:	df000017 	ldw	fp,0(sp)
  41868c:	dec00204 	addi	sp,sp,8
  418690:	f800283a 	ret

00418694 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  418694:	defffe04 	addi	sp,sp,-8
  418698:	dfc00115 	stw	ra,4(sp)
  41869c:	df000015 	stw	fp,0(sp)
  4186a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  4186a4:	008010b4 	movhi	r2,66
  4186a8:	10ae1304 	addi	r2,r2,-18356
  4186ac:	10800017 	ldw	r2,0(r2)
  4186b0:	10000526 	beq	r2,zero,4186c8 <alt_get_errno+0x34>
  4186b4:	008010b4 	movhi	r2,66
  4186b8:	10ae1304 	addi	r2,r2,-18356
  4186bc:	10800017 	ldw	r2,0(r2)
  4186c0:	103ee83a 	callr	r2
  4186c4:	00000206 	br	4186d0 <alt_get_errno+0x3c>
  4186c8:	008010b4 	movhi	r2,66
  4186cc:	10b58504 	addi	r2,r2,-10732
}
  4186d0:	e037883a 	mov	sp,fp
  4186d4:	dfc00117 	ldw	ra,4(sp)
  4186d8:	df000017 	ldw	fp,0(sp)
  4186dc:	dec00204 	addi	sp,sp,8
  4186e0:	f800283a 	ret

004186e4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  4186e4:	defffb04 	addi	sp,sp,-20
  4186e8:	dfc00415 	stw	ra,16(sp)
  4186ec:	df000315 	stw	fp,12(sp)
  4186f0:	dc000215 	stw	r16,8(sp)
  4186f4:	df000204 	addi	fp,sp,8
  4186f8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  4186fc:	e0bfff17 	ldw	r2,-4(fp)
  418700:	10800217 	ldw	r2,8(r2)
  418704:	10d00034 	orhi	r3,r2,16384
  418708:	e0bfff17 	ldw	r2,-4(fp)
  41870c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  418710:	e03ffe15 	stw	zero,-8(fp)
  418714:	00002206 	br	4187a0 <alt_file_locked+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  418718:	040010b4 	movhi	r16,66
  41871c:	84290904 	addi	r16,r16,-23516
  418720:	e0bffe17 	ldw	r2,-8(fp)
  418724:	1009883a 	mov	r4,r2
  418728:	01400304 	movi	r5,12
  41872c:	0400e700 	call	400e70 <__mulsi3>
  418730:	8085883a 	add	r2,r16,r2
  418734:	10c00017 	ldw	r3,0(r2)
  418738:	e0bfff17 	ldw	r2,-4(fp)
  41873c:	10800017 	ldw	r2,0(r2)
  418740:	1880141e 	bne	r3,r2,418794 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  418744:	040010b4 	movhi	r16,66
  418748:	84290904 	addi	r16,r16,-23516
  41874c:	e0bffe17 	ldw	r2,-8(fp)
  418750:	1009883a 	mov	r4,r2
  418754:	01400304 	movi	r5,12
  418758:	0400e700 	call	400e70 <__mulsi3>
  41875c:	8085883a 	add	r2,r16,r2
  418760:	10800204 	addi	r2,r2,8
  418764:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  418768:	10000a0e 	bge	r2,zero,418794 <alt_file_locked+0xb0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  41876c:	e13ffe17 	ldw	r4,-8(fp)
  418770:	01400304 	movi	r5,12
  418774:	0400e700 	call	400e70 <__mulsi3>
  418778:	00c010b4 	movhi	r3,66
  41877c:	18e90904 	addi	r3,r3,-23516
  418780:	10c7883a 	add	r3,r2,r3
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  418784:	e0bfff17 	ldw	r2,-4(fp)
  418788:	18800226 	beq	r3,r2,418794 <alt_file_locked+0xb0>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  41878c:	00bffcc4 	movi	r2,-13
  418790:	00000a06 	br	4187bc <alt_file_locked+0xd8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  418794:	e0bffe17 	ldw	r2,-8(fp)
  418798:	10800044 	addi	r2,r2,1
  41879c:	e0bffe15 	stw	r2,-8(fp)
  4187a0:	008010b4 	movhi	r2,66
  4187a4:	10ae0e04 	addi	r2,r2,-18376
  4187a8:	10800017 	ldw	r2,0(r2)
  4187ac:	1007883a 	mov	r3,r2
  4187b0:	e0bffe17 	ldw	r2,-8(fp)
  4187b4:	18bfd82e 	bgeu	r3,r2,418718 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  4187b8:	0005883a 	mov	r2,zero
}
  4187bc:	e037883a 	mov	sp,fp
  4187c0:	dfc00217 	ldw	ra,8(sp)
  4187c4:	df000117 	ldw	fp,4(sp)
  4187c8:	dc000017 	ldw	r16,0(sp)
  4187cc:	dec00304 	addi	sp,sp,12
  4187d0:	f800283a 	ret

004187d4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  4187d4:	defff604 	addi	sp,sp,-40
  4187d8:	dfc00915 	stw	ra,36(sp)
  4187dc:	df000815 	stw	fp,32(sp)
  4187e0:	df000804 	addi	fp,sp,32
  4187e4:	e13ffd15 	stw	r4,-12(fp)
  4187e8:	e17ffe15 	stw	r5,-8(fp)
  4187ec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  4187f0:	00bfffc4 	movi	r2,-1
  4187f4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  4187f8:	00bffb44 	movi	r2,-19
  4187fc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  418800:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  418804:	e13ffd17 	ldw	r4,-12(fp)
  418808:	014010b4 	movhi	r5,66
  41880c:	296e0c04 	addi	r5,r5,-18384
  418810:	040aa640 	call	40aa64 <alt_find_dev>
  418814:	e0bff815 	stw	r2,-32(fp)
  418818:	e0bff817 	ldw	r2,-32(fp)
  41881c:	1000051e 	bne	r2,zero,418834 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  418820:	e13ffd17 	ldw	r4,-12(fp)
  418824:	0418fe00 	call	418fe0 <alt_find_file>
  418828:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  41882c:	00800044 	movi	r2,1
  418830:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  418834:	e0bff817 	ldw	r2,-32(fp)
  418838:	10002a26 	beq	r2,zero,4188e4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  41883c:	e13ff817 	ldw	r4,-32(fp)
  418840:	04190f40 	call	4190f4 <alt_get_fd>
  418844:	e0bff915 	stw	r2,-28(fp)
  418848:	e0bff917 	ldw	r2,-28(fp)
  41884c:	1000030e 	bge	r2,zero,41885c <open+0x88>
    {
      status = index;
  418850:	e0bff917 	ldw	r2,-28(fp)
  418854:	e0bffa15 	stw	r2,-24(fp)
  418858:	00002406 	br	4188ec <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  41885c:	e13ff917 	ldw	r4,-28(fp)
  418860:	01400304 	movi	r5,12
  418864:	0400e700 	call	400e70 <__mulsi3>
  418868:	00c010b4 	movhi	r3,66
  41886c:	18e90904 	addi	r3,r3,-23516
  418870:	10c5883a 	add	r2,r2,r3
  418874:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  418878:	e0fffe17 	ldw	r3,-8(fp)
  41887c:	00900034 	movhi	r2,16384
  418880:	10bfffc4 	addi	r2,r2,-1
  418884:	1886703a 	and	r3,r3,r2
  418888:	e0bffc17 	ldw	r2,-16(fp)
  41888c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  418890:	e0bffb17 	ldw	r2,-20(fp)
  418894:	1000051e 	bne	r2,zero,4188ac <open+0xd8>
  418898:	e13ffc17 	ldw	r4,-16(fp)
  41889c:	04186e40 	call	4186e4 <alt_file_locked>
  4188a0:	e0bffa15 	stw	r2,-24(fp)
  4188a4:	e0bffa17 	ldw	r2,-24(fp)
  4188a8:	10001016 	blt	r2,zero,4188ec <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  4188ac:	e0bff817 	ldw	r2,-32(fp)
  4188b0:	10800317 	ldw	r2,12(r2)
  4188b4:	10000826 	beq	r2,zero,4188d8 <open+0x104>
  4188b8:	e0bff817 	ldw	r2,-32(fp)
  4188bc:	10800317 	ldw	r2,12(r2)
  4188c0:	e13ffc17 	ldw	r4,-16(fp)
  4188c4:	e17ffd17 	ldw	r5,-12(fp)
  4188c8:	e1bffe17 	ldw	r6,-8(fp)
  4188cc:	e1ffff17 	ldw	r7,-4(fp)
  4188d0:	103ee83a 	callr	r2
  4188d4:	00000106 	br	4188dc <open+0x108>
  4188d8:	0005883a 	mov	r2,zero
  4188dc:	e0bffa15 	stw	r2,-24(fp)
  4188e0:	00000206 	br	4188ec <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  4188e4:	00bffb44 	movi	r2,-19
  4188e8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  4188ec:	e0bffa17 	ldw	r2,-24(fp)
  4188f0:	1000080e 	bge	r2,zero,418914 <open+0x140>
  {
    alt_release_fd (index);  
  4188f4:	e13ff917 	ldw	r4,-28(fp)
  4188f8:	040b4540 	call	40b454 <alt_release_fd>
    ALT_ERRNO = -status;
  4188fc:	04186940 	call	418694 <alt_get_errno>
  418900:	e0fffa17 	ldw	r3,-24(fp)
  418904:	00c7c83a 	sub	r3,zero,r3
  418908:	10c00015 	stw	r3,0(r2)
    return -1;
  41890c:	00bfffc4 	movi	r2,-1
  418910:	00000106 	br	418918 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
  418914:	e0bff917 	ldw	r2,-28(fp)
}
  418918:	e037883a 	mov	sp,fp
  41891c:	dfc00117 	ldw	ra,4(sp)
  418920:	df000017 	ldw	fp,0(sp)
  418924:	dec00204 	addi	sp,sp,8
  418928:	f800283a 	ret

0041892c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  41892c:	defff904 	addi	sp,sp,-28
  418930:	df000615 	stw	fp,24(sp)
  418934:	df000604 	addi	fp,sp,24
  418938:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  41893c:	0005303a 	rdctl	r2,status
  418940:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  418944:	e0fffb17 	ldw	r3,-20(fp)
  418948:	00bfff84 	movi	r2,-2
  41894c:	1884703a 	and	r2,r3,r2
  418950:	1001703a 	wrctl	status,r2
  
  return context;
  418954:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  418958:	e0bffa15 	stw	r2,-24(fp)
  alt_llist_remove (&alarm->llist);
  41895c:	e0bfff17 	ldw	r2,-4(fp)
  418960:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  418964:	e0bffc17 	ldw	r2,-16(fp)
  418968:	10800017 	ldw	r2,0(r2)
  41896c:	e0fffc17 	ldw	r3,-16(fp)
  418970:	18c00117 	ldw	r3,4(r3)
  418974:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  418978:	e0bffc17 	ldw	r2,-16(fp)
  41897c:	10800117 	ldw	r2,4(r2)
  418980:	e0fffc17 	ldw	r3,-16(fp)
  418984:	18c00017 	ldw	r3,0(r3)
  418988:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  41898c:	e0bffc17 	ldw	r2,-16(fp)
  418990:	e0fffc17 	ldw	r3,-16(fp)
  418994:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  418998:	e0bffc17 	ldw	r2,-16(fp)
  41899c:	e0fffc17 	ldw	r3,-16(fp)
  4189a0:	10c00015 	stw	r3,0(r2)
  4189a4:	e0bffa17 	ldw	r2,-24(fp)
  4189a8:	e0bffd15 	stw	r2,-12(fp)
{
#if (NIOS2_NUM_OF_SHADOW_REG_SETS > 0) || (defined NIOS2_EIC_PRESENT) || \
    (defined NIOS2_MMU_PRESENT) || (defined NIOS2_MPU_PRESENT)
  alt_irq_context status;
  
  NIOS2_READ_STATUS (status);
  4189ac:	0005303a 	rdctl	r2,status
  4189b0:	e0bffe15 	stw	r2,-8(fp)
  
  status &= ~NIOS2_STATUS_PIE_MSK;
  4189b4:	e0fffe17 	ldw	r3,-8(fp)
  4189b8:	00bfff84 	movi	r2,-2
  4189bc:	1884703a 	and	r2,r3,r2
  4189c0:	e0bffe15 	stw	r2,-8(fp)
  status |= (context & NIOS2_STATUS_PIE_MSK);
  4189c4:	e0bffd17 	ldw	r2,-12(fp)
  4189c8:	1080004c 	andi	r2,r2,1
  4189cc:	e0fffe17 	ldw	r3,-8(fp)
  4189d0:	1884b03a 	or	r2,r3,r2
  4189d4:	e0bffe15 	stw	r2,-8(fp)
  
  NIOS2_WRITE_STATUS (status);
  4189d8:	e0bffe17 	ldw	r2,-8(fp)
  4189dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  4189e0:	e037883a 	mov	sp,fp
  4189e4:	df000017 	ldw	fp,0(sp)
  4189e8:	dec00104 	addi	sp,sp,4
  4189ec:	f800283a 	ret

004189f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  4189f0:	defffb04 	addi	sp,sp,-20
  4189f4:	dfc00415 	stw	ra,16(sp)
  4189f8:	df000315 	stw	fp,12(sp)
  4189fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  418a00:	d0a03417 	ldw	r2,-32560(gp)
  418a04:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  418a08:	d0a7a317 	ldw	r2,-24948(gp)
  418a0c:	10800044 	addi	r2,r2,1
  418a10:	d0a7a315 	stw	r2,-24948(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  418a14:	00002e06 	br	418ad0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  418a18:	e0bffd17 	ldw	r2,-12(fp)
  418a1c:	10800017 	ldw	r2,0(r2)
  418a20:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  418a24:	e0bffd17 	ldw	r2,-12(fp)
  418a28:	10800403 	ldbu	r2,16(r2)
  418a2c:	10803fcc 	andi	r2,r2,255
  418a30:	10000426 	beq	r2,zero,418a44 <alt_tick+0x54>
  418a34:	d0a7a317 	ldw	r2,-24948(gp)
  418a38:	1000021e 	bne	r2,zero,418a44 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  418a3c:	e0bffd17 	ldw	r2,-12(fp)
  418a40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  418a44:	e0bffd17 	ldw	r2,-12(fp)
  418a48:	10800217 	ldw	r2,8(r2)
  418a4c:	d0e7a317 	ldw	r3,-24948(gp)
  418a50:	18801d36 	bltu	r3,r2,418ac8 <alt_tick+0xd8>
  418a54:	e0bffd17 	ldw	r2,-12(fp)
  418a58:	10800403 	ldbu	r2,16(r2)
  418a5c:	10803fcc 	andi	r2,r2,255
  418a60:	1000191e 	bne	r2,zero,418ac8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  418a64:	e0bffd17 	ldw	r2,-12(fp)
  418a68:	10c00317 	ldw	r3,12(r2)
  418a6c:	e0bffd17 	ldw	r2,-12(fp)
  418a70:	10800517 	ldw	r2,20(r2)
  418a74:	1009883a 	mov	r4,r2
  418a78:	183ee83a 	callr	r3
  418a7c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  418a80:	e0bfff17 	ldw	r2,-4(fp)
  418a84:	1000031e 	bne	r2,zero,418a94 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  418a88:	e13ffd17 	ldw	r4,-12(fp)
  418a8c:	041892c0 	call	41892c <alt_alarm_stop>
  418a90:	00000d06 	br	418ac8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  418a94:	e0bffd17 	ldw	r2,-12(fp)
  418a98:	10c00217 	ldw	r3,8(r2)
  418a9c:	e0bfff17 	ldw	r2,-4(fp)
  418aa0:	1887883a 	add	r3,r3,r2
  418aa4:	e0bffd17 	ldw	r2,-12(fp)
  418aa8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  418aac:	e0bffd17 	ldw	r2,-12(fp)
  418ab0:	10c00217 	ldw	r3,8(r2)
  418ab4:	d0a7a317 	ldw	r2,-24948(gp)
  418ab8:	1880032e 	bgeu	r3,r2,418ac8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  418abc:	e0bffd17 	ldw	r2,-12(fp)
  418ac0:	00c00044 	movi	r3,1
  418ac4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  418ac8:	e0bffe17 	ldw	r2,-8(fp)
  418acc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  418ad0:	e0fffd17 	ldw	r3,-12(fp)
  418ad4:	d0a03404 	addi	r2,gp,-32560
  418ad8:	18bfcf1e 	bne	r3,r2,418a18 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  418adc:	040cb940 	call	40cb94 <OSTimeTick>
}
  418ae0:	e037883a 	mov	sp,fp
  418ae4:	dfc00117 	ldw	ra,4(sp)
  418ae8:	df000017 	ldw	fp,0(sp)
  418aec:	dec00204 	addi	sp,sp,8
  418af0:	f800283a 	ret

00418af4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  418af4:	deffff04 	addi	sp,sp,-4
  418af8:	df000015 	stw	fp,0(sp)
  418afc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  418b00:	000170fa 	wrctl	ienable,zero
}
  418b04:	e037883a 	mov	sp,fp
  418b08:	df000017 	ldw	fp,0(sp)
  418b0c:	dec00104 	addi	sp,sp,4
  418b10:	f800283a 	ret

00418b14 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  418b14:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  418b18:	d0e00317 	ldw	r3,-32756(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  418b1c:	d1279b17 	ldw	r4,-24980(gp)

      stw ra,  0(sp)
  418b20:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  418b24:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  418b28:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  418b2c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  418b30:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  418b34:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  418b38:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  418b3c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  418b40:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  418b44:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  418b48:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  418b4c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  418b50:	0418f180 	call	418f18 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  418b54:	d1279617 	ldw	r4,-25000(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  418b58:	d1678e07 	ldb	r5,-25032(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  418b5c:	d1279b15 	stw	r4,-24980(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  418b60:	d1678e45 	stb	r5,-25031(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  418b64:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  418b68:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  418b6c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  418b70:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  418b74:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  418b78:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  418b7c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  418b80:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  418b84:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  418b88:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  418b8c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  418b90:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  418b94:	d0e00315 	stw	r3,-32756(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  418b98:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  418b9c:	f800283a 	ret

00418ba0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  418ba0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  418ba4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  418ba8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  418bac:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  418bb0:	0418f180 	call	418f18 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  418bb4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  418bb8:	d4a78c45 	stb	r18,-25039(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  418bbc:	003fe506 	br	418b54 <OSCtxSw+0x40>

00418bc0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  418bc0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  418bc4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  418bc8:	10800054 	ori	r2,r2,1
      wrctl status, r2
  418bcc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  418bd0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  418bd4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  418bd8:	dec00204 	addi	sp,sp,8

      callr r2
  418bdc:	103ee83a 	callr	r2

      nop
  418be0:	0001883a 	nop

00418be4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  418be4:	defff704 	addi	sp,sp,-36
  418be8:	dfc00815 	stw	ra,32(sp)
  418bec:	df000715 	stw	fp,28(sp)
  418bf0:	df000704 	addi	fp,sp,28
  418bf4:	e13ffc15 	stw	r4,-16(fp)
  418bf8:	e17ffd15 	stw	r5,-12(fp)
  418bfc:	e1bffe15 	stw	r6,-8(fp)
  418c00:	3805883a 	mov	r2,r7
  418c04:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  418c08:	e0fffe17 	ldw	r3,-8(fp)
  418c0c:	00bfff04 	movi	r2,-4
  418c10:	1884703a 	and	r2,r3,r2
  418c14:	10bf0004 	addi	r2,r2,-1024
  418c18:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  418c1c:	e0bff917 	ldw	r2,-28(fp)
  418c20:	10000015 	stw	zero,0(r2)
  418c24:	e0bff917 	ldw	r2,-28(fp)
  418c28:	10c0bb04 	addi	r3,r2,748
  418c2c:	e0bff917 	ldw	r2,-28(fp)
  418c30:	10c00115 	stw	r3,4(r2)
  418c34:	e0bff917 	ldw	r2,-28(fp)
  418c38:	10c0d204 	addi	r3,r2,840
  418c3c:	e0bff917 	ldw	r2,-28(fp)
  418c40:	10c00215 	stw	r3,8(r2)
  418c44:	e0bff917 	ldw	r2,-28(fp)
  418c48:	10c0e904 	addi	r3,r2,932
  418c4c:	e0bff917 	ldw	r2,-28(fp)
  418c50:	10c00315 	stw	r3,12(r2)
  418c54:	e0bff917 	ldw	r2,-28(fp)
  418c58:	10000415 	stw	zero,16(r2)
  418c5c:	e0bff917 	ldw	r2,-28(fp)
  418c60:	10800504 	addi	r2,r2,20
  418c64:	1009883a 	mov	r4,r2
  418c68:	000b883a 	mov	r5,zero
  418c6c:	01800644 	movi	r6,25
  418c70:	04068100 	call	406810 <memset>
  418c74:	e0bff917 	ldw	r2,-28(fp)
  418c78:	10000c15 	stw	zero,48(r2)
  418c7c:	e0bff917 	ldw	r2,-28(fp)
  418c80:	00c010b4 	movhi	r3,66
  418c84:	18e6f904 	addi	r3,r3,-25628
  418c88:	10c00d15 	stw	r3,52(r2)
  418c8c:	e0bff917 	ldw	r2,-28(fp)
  418c90:	10000e15 	stw	zero,56(r2)
  418c94:	e0bff917 	ldw	r2,-28(fp)
  418c98:	10000f15 	stw	zero,60(r2)
  418c9c:	e0bff917 	ldw	r2,-28(fp)
  418ca0:	10001015 	stw	zero,64(r2)
  418ca4:	e0bff917 	ldw	r2,-28(fp)
  418ca8:	10001115 	stw	zero,68(r2)
  418cac:	e0bff917 	ldw	r2,-28(fp)
  418cb0:	10001215 	stw	zero,72(r2)
  418cb4:	e0bff917 	ldw	r2,-28(fp)
  418cb8:	10001315 	stw	zero,76(r2)
  418cbc:	e0bff917 	ldw	r2,-28(fp)
  418cc0:	10001415 	stw	zero,80(r2)
  418cc4:	e0bff917 	ldw	r2,-28(fp)
  418cc8:	10001515 	stw	zero,84(r2)
  418ccc:	e0bff917 	ldw	r2,-28(fp)
  418cd0:	10001615 	stw	zero,88(r2)
  418cd4:	e0bff917 	ldw	r2,-28(fp)
  418cd8:	10001715 	stw	zero,92(r2)
  418cdc:	e0bff917 	ldw	r2,-28(fp)
  418ce0:	10001805 	stb	zero,96(r2)
  418ce4:	e0bff917 	ldw	r2,-28(fp)
  418ce8:	10801f04 	addi	r2,r2,124
  418cec:	1009883a 	mov	r4,r2
  418cf0:	000b883a 	mov	r5,zero
  418cf4:	01800904 	movi	r6,36
  418cf8:	04068100 	call	406810 <memset>
  418cfc:	e0bff917 	ldw	r2,-28(fp)
  418d00:	10002815 	stw	zero,160(r2)
  418d04:	e0bff917 	ldw	r2,-28(fp)
  418d08:	00c00044 	movi	r3,1
  418d0c:	10c02915 	stw	r3,164(r2)
  418d10:	10002a15 	stw	zero,168(r2)
  418d14:	e0bff917 	ldw	r2,-28(fp)
  418d18:	00ccc384 	movi	r3,13070
  418d1c:	10c02b0d 	sth	r3,172(r2)
  418d20:	e0bff917 	ldw	r2,-28(fp)
  418d24:	00eaf344 	movi	r3,-21555
  418d28:	10c02b8d 	sth	r3,174(r2)
  418d2c:	e0bff917 	ldw	r2,-28(fp)
  418d30:	00c48d04 	movi	r3,4660
  418d34:	10c02c0d 	sth	r3,176(r2)
  418d38:	e0bff917 	ldw	r2,-28(fp)
  418d3c:	00f99b44 	movi	r3,-6547
  418d40:	10c02c8d 	sth	r3,178(r2)
  418d44:	e0bff917 	ldw	r2,-28(fp)
  418d48:	00f7bb04 	movi	r3,-8468
  418d4c:	10c02d0d 	sth	r3,180(r2)
  418d50:	e0bff917 	ldw	r2,-28(fp)
  418d54:	00c00144 	movi	r3,5
  418d58:	10c02d8d 	sth	r3,182(r2)
  418d5c:	e0bff917 	ldw	r2,-28(fp)
  418d60:	00c002c4 	movi	r3,11
  418d64:	10c02e0d 	sth	r3,184(r2)
  418d68:	e0bff917 	ldw	r2,-28(fp)
  418d6c:	10002f15 	stw	zero,188(r2)
  418d70:	e0bff917 	ldw	r2,-28(fp)
  418d74:	10003015 	stw	zero,192(r2)
  418d78:	e0bff917 	ldw	r2,-28(fp)
  418d7c:	10003115 	stw	zero,196(r2)
  418d80:	e0bff917 	ldw	r2,-28(fp)
  418d84:	10003215 	stw	zero,200(r2)
  418d88:	e0bff917 	ldw	r2,-28(fp)
  418d8c:	10003315 	stw	zero,204(r2)
  418d90:	e0bff917 	ldw	r2,-28(fp)
  418d94:	10003415 	stw	zero,208(r2)
  418d98:	e0bff917 	ldw	r2,-28(fp)
  418d9c:	10003e15 	stw	zero,248(r2)
  418da0:	e0bff917 	ldw	r2,-28(fp)
  418da4:	10003f15 	stw	zero,252(r2)
  418da8:	e0bff917 	ldw	r2,-28(fp)
  418dac:	10004015 	stw	zero,256(r2)
  418db0:	e0bff917 	ldw	r2,-28(fp)
  418db4:	10004115 	stw	zero,260(r2)
  418db8:	e0bff917 	ldw	r2,-28(fp)
  418dbc:	10004215 	stw	zero,264(r2)
  418dc0:	e0bff917 	ldw	r2,-28(fp)
  418dc4:	10004315 	stw	zero,268(r2)
  418dc8:	e0bff917 	ldw	r2,-28(fp)
  418dcc:	10004415 	stw	zero,272(r2)
  418dd0:	e0bff917 	ldw	r2,-28(fp)
  418dd4:	10004515 	stw	zero,276(r2)
  418dd8:	e0bff917 	ldw	r2,-28(fp)
  418ddc:	10004615 	stw	zero,280(r2)
  418de0:	e0bff917 	ldw	r2,-28(fp)
  418de4:	10004715 	stw	zero,284(r2)
  418de8:	e0bff917 	ldw	r2,-28(fp)
  418dec:	10003505 	stb	zero,212(r2)
  418df0:	e0bff917 	ldw	r2,-28(fp)
  418df4:	10003705 	stb	zero,220(r2)
  418df8:	e0bff917 	ldw	r2,-28(fp)
  418dfc:	10003d15 	stw	zero,244(r2)
  418e00:	e0bff917 	ldw	r2,-28(fp)
  418e04:	10005215 	stw	zero,328(r2)
  418e08:	e0bff917 	ldw	r2,-28(fp)
  418e0c:	10005315 	stw	zero,332(r2)
  418e10:	e0bff917 	ldw	r2,-28(fp)
  418e14:	10005415 	stw	zero,336(r2)
  418e18:	e0bff917 	ldw	r2,-28(fp)
  418e1c:	10005515 	stw	zero,340(r2)
  418e20:	e0bff917 	ldw	r2,-28(fp)
  418e24:	1000b515 	stw	zero,724(r2)
  418e28:	e0bff917 	ldw	r2,-28(fp)
  418e2c:	10007515 	stw	zero,468(r2)
  418e30:	e0bff917 	ldw	r2,-28(fp)
  418e34:	1000b715 	stw	zero,732(r2)
  418e38:	e0bff917 	ldw	r2,-28(fp)
  418e3c:	1000b815 	stw	zero,736(r2)
  418e40:	e0bff917 	ldw	r2,-28(fp)
  418e44:	1000b915 	stw	zero,740(r2)
  418e48:	e0bff917 	ldw	r2,-28(fp)
  418e4c:	1000ba15 	stw	zero,744(r2)
  418e50:	e0bff917 	ldw	r2,-28(fp)
  418e54:	1080bb04 	addi	r2,r2,748
  418e58:	1009883a 	mov	r4,r2
  418e5c:	000b883a 	mov	r5,zero
  418e60:	01804504 	movi	r6,276
  418e64:	04068100 	call	406810 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  418e68:	e0bff917 	ldw	r2,-28(fp)
  418e6c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  418e70:	e0bffa17 	ldw	r2,-24(fp)
  418e74:	10bff304 	addi	r2,r2,-52
  418e78:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  418e7c:	e0bffb17 	ldw	r2,-20(fp)
  418e80:	10800c04 	addi	r2,r2,48
  418e84:	e0fffc17 	ldw	r3,-16(fp)
  418e88:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  418e8c:	e0bffb17 	ldw	r2,-20(fp)
  418e90:	10800b04 	addi	r2,r2,44
  418e94:	e0fffd17 	ldw	r3,-12(fp)
  418e98:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  418e9c:	e0bffb17 	ldw	r2,-20(fp)
  418ea0:	10800a04 	addi	r2,r2,40
  418ea4:	e0fff917 	ldw	r3,-28(fp)
  418ea8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  418eac:	008010b4 	movhi	r2,66
  418eb0:	10a2f004 	addi	r2,r2,-29760
  418eb4:	10c00104 	addi	r3,r2,4
  418eb8:	e0bffb17 	ldw	r2,-20(fp)
  418ebc:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  418ec0:	e0bffb17 	ldw	r2,-20(fp)
}
  418ec4:	e037883a 	mov	sp,fp
  418ec8:	dfc00117 	ldw	ra,4(sp)
  418ecc:	df000017 	ldw	fp,0(sp)
  418ed0:	dec00204 	addi	sp,sp,8
  418ed4:	f800283a 	ret

00418ed8 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  418ed8:	defffe04 	addi	sp,sp,-8
  418edc:	df000115 	stw	fp,4(sp)
  418ee0:	df000104 	addi	fp,sp,4
  418ee4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  418ee8:	e037883a 	mov	sp,fp
  418eec:	df000017 	ldw	fp,0(sp)
  418ef0:	dec00104 	addi	sp,sp,4
  418ef4:	f800283a 	ret

00418ef8 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  418ef8:	defffe04 	addi	sp,sp,-8
  418efc:	df000115 	stw	fp,4(sp)
  418f00:	df000104 	addi	fp,sp,4
  418f04:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  418f08:	e037883a 	mov	sp,fp
  418f0c:	df000017 	ldw	fp,0(sp)
  418f10:	dec00104 	addi	sp,sp,4
  418f14:	f800283a 	ret

00418f18 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  418f18:	deffff04 	addi	sp,sp,-4
  418f1c:	df000015 	stw	fp,0(sp)
  418f20:	d839883a 	mov	fp,sp
}
  418f24:	e037883a 	mov	sp,fp
  418f28:	df000017 	ldw	fp,0(sp)
  418f2c:	dec00104 	addi	sp,sp,4
  418f30:	f800283a 	ret

00418f34 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  418f34:	deffff04 	addi	sp,sp,-4
  418f38:	df000015 	stw	fp,0(sp)
  418f3c:	d839883a 	mov	fp,sp
}
  418f40:	e037883a 	mov	sp,fp
  418f44:	df000017 	ldw	fp,0(sp)
  418f48:	dec00104 	addi	sp,sp,4
  418f4c:	f800283a 	ret

00418f50 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  418f50:	deffff04 	addi	sp,sp,-4
  418f54:	df000015 	stw	fp,0(sp)
  418f58:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  418f5c:	e037883a 	mov	sp,fp
  418f60:	df000017 	ldw	fp,0(sp)
  418f64:	dec00104 	addi	sp,sp,4
  418f68:	f800283a 	ret

00418f6c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  418f6c:	deffff04 	addi	sp,sp,-4
  418f70:	df000015 	stw	fp,0(sp)
  418f74:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  418f78:	e037883a 	mov	sp,fp
  418f7c:	df000017 	ldw	fp,0(sp)
  418f80:	dec00104 	addi	sp,sp,4
  418f84:	f800283a 	ret

00418f88 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  418f88:	deffff04 	addi	sp,sp,-4
  418f8c:	df000015 	stw	fp,0(sp)
  418f90:	d839883a 	mov	fp,sp
}
  418f94:	e037883a 	mov	sp,fp
  418f98:	df000017 	ldw	fp,0(sp)
  418f9c:	dec00104 	addi	sp,sp,4
  418fa0:	f800283a 	ret

00418fa4 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  418fa4:	deffff04 	addi	sp,sp,-4
  418fa8:	df000015 	stw	fp,0(sp)
  418fac:	d839883a 	mov	fp,sp
}
  418fb0:	e037883a 	mov	sp,fp
  418fb4:	df000017 	ldw	fp,0(sp)
  418fb8:	dec00104 	addi	sp,sp,4
  418fbc:	f800283a 	ret

00418fc0 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  418fc0:	defffe04 	addi	sp,sp,-8
  418fc4:	df000115 	stw	fp,4(sp)
  418fc8:	df000104 	addi	fp,sp,4
  418fcc:	e13fff15 	stw	r4,-4(fp)
}
  418fd0:	e037883a 	mov	sp,fp
  418fd4:	df000017 	ldw	fp,0(sp)
  418fd8:	dec00104 	addi	sp,sp,4
  418fdc:	f800283a 	ret

00418fe0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  418fe0:	defffb04 	addi	sp,sp,-20
  418fe4:	dfc00415 	stw	ra,16(sp)
  418fe8:	df000315 	stw	fp,12(sp)
  418fec:	df000304 	addi	fp,sp,12
  418ff0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  418ff4:	008010b4 	movhi	r2,66
  418ff8:	10ae0a04 	addi	r2,r2,-18392
  418ffc:	10800017 	ldw	r2,0(r2)
  419000:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  419004:	00003106 	br	4190cc <alt_find_file+0xec>
  {
    len = strlen(next->name);
  419008:	e0bffd17 	ldw	r2,-12(fp)
  41900c:	10800217 	ldw	r2,8(r2)
  419010:	1009883a 	mov	r4,r2
  419014:	040115c0 	call	40115c <strlen>
  419018:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  41901c:	e0bffd17 	ldw	r2,-12(fp)
  419020:	10c00217 	ldw	r3,8(r2)
  419024:	e0bffe17 	ldw	r2,-8(fp)
  419028:	10bfffc4 	addi	r2,r2,-1
  41902c:	1885883a 	add	r2,r3,r2
  419030:	10800003 	ldbu	r2,0(r2)
  419034:	10803fcc 	andi	r2,r2,255
  419038:	1080201c 	xori	r2,r2,128
  41903c:	10bfe004 	addi	r2,r2,-128
  419040:	10800bd8 	cmpnei	r2,r2,47
  419044:	1000031e 	bne	r2,zero,419054 <alt_find_file+0x74>
    {
      len -= 1;
  419048:	e0bffe17 	ldw	r2,-8(fp)
  41904c:	10bfffc4 	addi	r2,r2,-1
  419050:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  419054:	e0bffe17 	ldw	r2,-8(fp)
  419058:	e0ffff17 	ldw	r3,-4(fp)
  41905c:	1885883a 	add	r2,r3,r2
  419060:	10800003 	ldbu	r2,0(r2)
  419064:	10803fcc 	andi	r2,r2,255
  419068:	1080201c 	xori	r2,r2,128
  41906c:	10bfe004 	addi	r2,r2,-128
  419070:	10800be0 	cmpeqi	r2,r2,47
  419074:	1000081e 	bne	r2,zero,419098 <alt_find_file+0xb8>
  419078:	e0bffe17 	ldw	r2,-8(fp)
  41907c:	e0ffff17 	ldw	r3,-4(fp)
  419080:	1885883a 	add	r2,r3,r2
  419084:	10800003 	ldbu	r2,0(r2)
  419088:	10803fcc 	andi	r2,r2,255
  41908c:	1080201c 	xori	r2,r2,128
  419090:	10bfe004 	addi	r2,r2,-128
  419094:	10000a1e 	bne	r2,zero,4190c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
  419098:	e0bffd17 	ldw	r2,-12(fp)
  41909c:	10c00217 	ldw	r3,8(r2)
  4190a0:	e0bffe17 	ldw	r2,-8(fp)
  4190a4:	1809883a 	mov	r4,r3
  4190a8:	e17fff17 	ldw	r5,-4(fp)
  4190ac:	100d883a 	mov	r6,r2
  4190b0:	04192a80 	call	4192a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  4190b4:	1000021e 	bne	r2,zero,4190c0 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  4190b8:	e0bffd17 	ldw	r2,-12(fp)
  4190bc:	00000806 	br	4190e0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
  4190c0:	e0bffd17 	ldw	r2,-12(fp)
  4190c4:	10800017 	ldw	r2,0(r2)
  4190c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  4190cc:	e0fffd17 	ldw	r3,-12(fp)
  4190d0:	008010b4 	movhi	r2,66
  4190d4:	10ae0a04 	addi	r2,r2,-18392
  4190d8:	18bfcb1e 	bne	r3,r2,419008 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  4190dc:	0005883a 	mov	r2,zero
}
  4190e0:	e037883a 	mov	sp,fp
  4190e4:	dfc00117 	ldw	ra,4(sp)
  4190e8:	df000017 	ldw	fp,0(sp)
  4190ec:	dec00204 	addi	sp,sp,8
  4190f0:	f800283a 	ret

004190f4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  4190f4:	defff804 	addi	sp,sp,-32
  4190f8:	dfc00715 	stw	ra,28(sp)
  4190fc:	df000615 	stw	fp,24(sp)
  419100:	dc000515 	stw	r16,20(sp)
  419104:	df000504 	addi	fp,sp,20
  419108:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  41910c:	00bffa04 	movi	r2,-24
  419110:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  419114:	008010b4 	movhi	r2,66
  419118:	10b58604 	addi	r2,r2,-10728
  41911c:	10800017 	ldw	r2,0(r2)
  419120:	e0bffd15 	stw	r2,-12(fp)
  419124:	e03ffe0d 	sth	zero,-8(fp)
  419128:	e0fffe0b 	ldhu	r3,-8(fp)
  41912c:	e0bffe84 	addi	r2,fp,-6
  419130:	e13ffd17 	ldw	r4,-12(fp)
  419134:	180b883a 	mov	r5,r3
  419138:	100d883a 	mov	r6,r2
  41913c:	041245c0 	call	41245c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  419140:	e03ffb15 	stw	zero,-20(fp)
  419144:	00002106 	br	4191cc <alt_get_fd+0xd8>
  {
    if (!alt_fd_list[i].dev)
  419148:	040010b4 	movhi	r16,66
  41914c:	84290904 	addi	r16,r16,-23516
  419150:	e0bffb17 	ldw	r2,-20(fp)
  419154:	1009883a 	mov	r4,r2
  419158:	01400304 	movi	r5,12
  41915c:	0400e700 	call	400e70 <__mulsi3>
  419160:	8085883a 	add	r2,r16,r2
  419164:	10800017 	ldw	r2,0(r2)
  419168:	1000151e 	bne	r2,zero,4191c0 <alt_get_fd+0xcc>
    {
      alt_fd_list[i].dev = dev;
  41916c:	040010b4 	movhi	r16,66
  419170:	84290904 	addi	r16,r16,-23516
  419174:	e0bffb17 	ldw	r2,-20(fp)
  419178:	1009883a 	mov	r4,r2
  41917c:	01400304 	movi	r5,12
  419180:	0400e700 	call	400e70 <__mulsi3>
  419184:	8085883a 	add	r2,r16,r2
  419188:	e0ffff17 	ldw	r3,-4(fp)
  41918c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  419190:	008010b4 	movhi	r2,66
  419194:	10ae0e04 	addi	r2,r2,-18376
  419198:	10c00017 	ldw	r3,0(r2)
  41919c:	e0bffb17 	ldw	r2,-20(fp)
  4191a0:	1880040e 	bge	r3,r2,4191b4 <alt_get_fd+0xc0>
      {
        alt_max_fd = i;
  4191a4:	008010b4 	movhi	r2,66
  4191a8:	10ae0e04 	addi	r2,r2,-18376
  4191ac:	e0fffb17 	ldw	r3,-20(fp)
  4191b0:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
  4191b4:	e0bffb17 	ldw	r2,-20(fp)
  4191b8:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  4191bc:	00000606 	br	4191d8 <alt_get_fd+0xe4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  4191c0:	e0bffb17 	ldw	r2,-20(fp)
  4191c4:	10800044 	addi	r2,r2,1
  4191c8:	e0bffb15 	stw	r2,-20(fp)
  4191cc:	e0bffb17 	ldw	r2,-20(fp)
  4191d0:	10800810 	cmplti	r2,r2,32
  4191d4:	103fdc1e 	bne	r2,zero,419148 <alt_get_fd+0x54>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  4191d8:	008010b4 	movhi	r2,66
  4191dc:	10b58604 	addi	r2,r2,-10728
  4191e0:	10800017 	ldw	r2,0(r2)
  4191e4:	1009883a 	mov	r4,r2
  4191e8:	04129180 	call	412918 <OSSemPost>

  return rc;
  4191ec:	e0bffc17 	ldw	r2,-16(fp)
}
  4191f0:	e037883a 	mov	sp,fp
  4191f4:	dfc00217 	ldw	ra,8(sp)
  4191f8:	df000117 	ldw	fp,4(sp)
  4191fc:	dc000017 	ldw	r16,0(sp)
  419200:	dec00304 	addi	sp,sp,12
  419204:	f800283a 	ret

00419208 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  419208:	defffb04 	addi	sp,sp,-20
  41920c:	df000415 	stw	fp,16(sp)
  419210:	df000404 	addi	fp,sp,16
  419214:	e13ffe15 	stw	r4,-8(fp)
  419218:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  41921c:	e0bfff17 	ldw	r2,-4(fp)
  419220:	10810070 	cmpltui	r2,r2,1025
  419224:	1000021e 	bne	r2,zero,419230 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  419228:	00810004 	movi	r2,1024
  41922c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  419230:	e0fffe17 	ldw	r3,-8(fp)
  419234:	e0bfff17 	ldw	r2,-4(fp)
  419238:	1885883a 	add	r2,r3,r2
  41923c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  419240:	e0bffe17 	ldw	r2,-8(fp)
  419244:	e0bffc15 	stw	r2,-16(fp)
  419248:	00000506 	br	419260 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  41924c:	e0bffc17 	ldw	r2,-16(fp)
  419250:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  419254:	e0bffc17 	ldw	r2,-16(fp)
  419258:	10800804 	addi	r2,r2,32
  41925c:	e0bffc15 	stw	r2,-16(fp)
  419260:	e0fffc17 	ldw	r3,-16(fp)
  419264:	e0bffd17 	ldw	r2,-12(fp)
  419268:	18bff836 	bltu	r3,r2,41924c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  41926c:	e0bffe17 	ldw	r2,-8(fp)
  419270:	108007cc 	andi	r2,r2,31
  419274:	10000226 	beq	r2,zero,419280 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  419278:	e0bffc17 	ldw	r2,-16(fp)
  41927c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  419280:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  419284:	e037883a 	mov	sp,fp
  419288:	df000017 	ldw	fp,0(sp)
  41928c:	dec00104 	addi	sp,sp,4
  419290:	f800283a 	ret

00419294 <atexit>:
  419294:	200b883a 	mov	r5,r4
  419298:	000d883a 	mov	r6,zero
  41929c:	0009883a 	mov	r4,zero
  4192a0:	000f883a 	mov	r7,zero
  4192a4:	04194201 	jmpi	419420 <__register_exitproc>

004192a8 <memcmp>:
  4192a8:	01c000c4 	movi	r7,3
  4192ac:	3980192e 	bgeu	r7,r6,419314 <memcmp+0x6c>
  4192b0:	2904b03a 	or	r2,r5,r4
  4192b4:	11c4703a 	and	r2,r2,r7
  4192b8:	10000f26 	beq	r2,zero,4192f8 <memcmp+0x50>
  4192bc:	20c00003 	ldbu	r3,0(r4)
  4192c0:	28800003 	ldbu	r2,0(r5)
  4192c4:	1880151e 	bne	r3,r2,41931c <memcmp+0x74>
  4192c8:	31bfff84 	addi	r6,r6,-2
  4192cc:	01ffffc4 	movi	r7,-1
  4192d0:	00000406 	br	4192e4 <memcmp+0x3c>
  4192d4:	20c00003 	ldbu	r3,0(r4)
  4192d8:	28800003 	ldbu	r2,0(r5)
  4192dc:	31bfffc4 	addi	r6,r6,-1
  4192e0:	18800e1e 	bne	r3,r2,41931c <memcmp+0x74>
  4192e4:	21000044 	addi	r4,r4,1
  4192e8:	29400044 	addi	r5,r5,1
  4192ec:	31fff91e 	bne	r6,r7,4192d4 <memcmp+0x2c>
  4192f0:	0005883a 	mov	r2,zero
  4192f4:	f800283a 	ret
  4192f8:	20c00017 	ldw	r3,0(r4)
  4192fc:	28800017 	ldw	r2,0(r5)
  419300:	1880041e 	bne	r3,r2,419314 <memcmp+0x6c>
  419304:	31bfff04 	addi	r6,r6,-4
  419308:	21000104 	addi	r4,r4,4
  41930c:	29400104 	addi	r5,r5,4
  419310:	39bff936 	bltu	r7,r6,4192f8 <memcmp+0x50>
  419314:	303fe91e 	bne	r6,zero,4192bc <memcmp+0x14>
  419318:	003ff506 	br	4192f0 <memcmp+0x48>
  41931c:	1885c83a 	sub	r2,r3,r2
  419320:	f800283a 	ret

00419324 <strncmp>:
  419324:	30001826 	beq	r6,zero,419388 <strncmp+0x64>
  419328:	2904b03a 	or	r2,r5,r4
  41932c:	108000cc 	andi	r2,r2,3
  419330:	10001726 	beq	r2,zero,419390 <strncmp+0x6c>
  419334:	31bfffc4 	addi	r6,r6,-1
  419338:	20800007 	ldb	r2,0(r4)
  41933c:	28c00007 	ldb	r3,0(r5)
  419340:	10c0331e 	bne	r2,r3,419410 <strncmp+0xec>
  419344:	30001026 	beq	r6,zero,419388 <strncmp+0x64>
  419348:	10000f26 	beq	r2,zero,419388 <strncmp+0x64>
  41934c:	20800044 	addi	r2,r4,1
  419350:	29400044 	addi	r5,r5,1
  419354:	2189883a 	add	r4,r4,r6
  419358:	00000406 	br	41936c <strncmp+0x48>
  41935c:	11000a26 	beq	r2,r4,419388 <strncmp+0x64>
  419360:	18000926 	beq	r3,zero,419388 <strncmp+0x64>
  419364:	10800044 	addi	r2,r2,1
  419368:	29400044 	addi	r5,r5,1
  41936c:	10c00007 	ldb	r3,0(r2)
  419370:	29800007 	ldb	r6,0(r5)
  419374:	19bff926 	beq	r3,r6,41935c <strncmp+0x38>
  419378:	10c00003 	ldbu	r3,0(r2)
  41937c:	28800003 	ldbu	r2,0(r5)
  419380:	1885c83a 	sub	r2,r3,r2
  419384:	f800283a 	ret
  419388:	0005883a 	mov	r2,zero
  41938c:	f800283a 	ret
  419390:	024000c4 	movi	r9,3
  419394:	49bfe72e 	bgeu	r9,r6,419334 <strncmp+0x10>
  419398:	20800017 	ldw	r2,0(r4)
  41939c:	28c00017 	ldw	r3,0(r5)
  4193a0:	10ffe41e 	bne	r2,r3,419334 <strncmp+0x10>
  4193a4:	30ffff04 	addi	r3,r6,-4
  4193a8:	183ff726 	beq	r3,zero,419388 <strncmp+0x64>
  4193ac:	02ffbff4 	movhi	r11,65279
  4193b0:	5affbfc4 	addi	r11,r11,-257
  4193b4:	12cd883a 	add	r6,r2,r11
  4193b8:	0084303a 	nor	r2,zero,r2
  4193bc:	3084703a 	and	r2,r6,r2
  4193c0:	02a02074 	movhi	r10,32897
  4193c4:	52a02004 	addi	r10,r10,-32640
  4193c8:	1284703a 	and	r2,r2,r10
  4193cc:	10000b26 	beq	r2,zero,4193fc <strncmp+0xd8>
  4193d0:	003fed06 	br	419388 <strncmp+0x64>
  4193d4:	21800017 	ldw	r6,0(r4)
  4193d8:	28800017 	ldw	r2,0(r5)
  4193dc:	32d1883a 	add	r8,r6,r11
  4193e0:	018e303a 	nor	r7,zero,r6
  4193e4:	41ce703a 	and	r7,r8,r7
  4193e8:	3a8e703a 	and	r7,r7,r10
  4193ec:	30800a1e 	bne	r6,r2,419418 <strncmp+0xf4>
  4193f0:	18ffff04 	addi	r3,r3,-4
  4193f4:	183fe426 	beq	r3,zero,419388 <strncmp+0x64>
  4193f8:	383fe31e 	bne	r7,zero,419388 <strncmp+0x64>
  4193fc:	21000104 	addi	r4,r4,4
  419400:	29400104 	addi	r5,r5,4
  419404:	48fff336 	bltu	r9,r3,4193d4 <strncmp+0xb0>
  419408:	19bfffc4 	addi	r6,r3,-1
  41940c:	183fca1e 	bne	r3,zero,419338 <strncmp+0x14>
  419410:	2005883a 	mov	r2,r4
  419414:	003fd806 	br	419378 <strncmp+0x54>
  419418:	19bfffc4 	addi	r6,r3,-1
  41941c:	003fc606 	br	419338 <strncmp+0x14>

00419420 <__register_exitproc>:
  419420:	defffa04 	addi	sp,sp,-24
  419424:	008010b4 	movhi	r2,66
  419428:	10ae0504 	addi	r2,r2,-18412
  41942c:	dc000315 	stw	r16,12(sp)
  419430:	14000017 	ldw	r16,0(r2)
  419434:	dc400415 	stw	r17,16(sp)
  419438:	dfc00515 	stw	ra,20(sp)
  41943c:	80805217 	ldw	r2,328(r16)
  419440:	2023883a 	mov	r17,r4
  419444:	10003e26 	beq	r2,zero,419540 <__register_exitproc+0x120>
  419448:	10c00117 	ldw	r3,4(r2)
  41944c:	020007c4 	movi	r8,31
  419450:	40c0180e 	bge	r8,r3,4194b4 <__register_exitproc+0x94>
  419454:	00800034 	movhi	r2,0
  419458:	10800004 	addi	r2,r2,0
  41945c:	1000061e 	bne	r2,zero,419478 <__register_exitproc+0x58>
  419460:	00bfffc4 	movi	r2,-1
  419464:	dfc00517 	ldw	ra,20(sp)
  419468:	dc400417 	ldw	r17,16(sp)
  41946c:	dc000317 	ldw	r16,12(sp)
  419470:	dec00604 	addi	sp,sp,24
  419474:	f800283a 	ret
  419478:	01006404 	movi	r4,400
  41947c:	d9400015 	stw	r5,0(sp)
  419480:	d9800115 	stw	r6,4(sp)
  419484:	d9c00215 	stw	r7,8(sp)
  419488:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  41948c:	d9400017 	ldw	r5,0(sp)
  419490:	d9800117 	ldw	r6,4(sp)
  419494:	d9c00217 	ldw	r7,8(sp)
  419498:	103ff126 	beq	r2,zero,419460 <__register_exitproc+0x40>
  41949c:	80c05217 	ldw	r3,328(r16)
  4194a0:	10000115 	stw	zero,4(r2)
  4194a4:	10c00015 	stw	r3,0(r2)
  4194a8:	80805215 	stw	r2,328(r16)
  4194ac:	10006215 	stw	zero,392(r2)
  4194b0:	10006315 	stw	zero,396(r2)
  4194b4:	10c00117 	ldw	r3,4(r2)
  4194b8:	88000d1e 	bne	r17,zero,4194f0 <__register_exitproc+0xd0>
  4194bc:	19000084 	addi	r4,r3,2
  4194c0:	2109883a 	add	r4,r4,r4
  4194c4:	18c00044 	addi	r3,r3,1
  4194c8:	2109883a 	add	r4,r4,r4
  4194cc:	1109883a 	add	r4,r2,r4
  4194d0:	10c00115 	stw	r3,4(r2)
  4194d4:	0005883a 	mov	r2,zero
  4194d8:	21400015 	stw	r5,0(r4)
  4194dc:	dfc00517 	ldw	ra,20(sp)
  4194e0:	dc400417 	ldw	r17,16(sp)
  4194e4:	dc000317 	ldw	r16,12(sp)
  4194e8:	dec00604 	addi	sp,sp,24
  4194ec:	f800283a 	ret
  4194f0:	02400044 	movi	r9,1
  4194f4:	12806217 	ldw	r10,392(r2)
  4194f8:	48d2983a 	sll	r9,r9,r3
  4194fc:	19000804 	addi	r4,r3,32
  419500:	18d1883a 	add	r8,r3,r3
  419504:	2109883a 	add	r4,r4,r4
  419508:	4211883a 	add	r8,r8,r8
  41950c:	2109883a 	add	r4,r4,r4
  419510:	1109883a 	add	r4,r2,r4
  419514:	1211883a 	add	r8,r2,r8
  419518:	5254b03a 	or	r10,r10,r9
  41951c:	21c02215 	stw	r7,136(r4)
  419520:	41802215 	stw	r6,136(r8)
  419524:	12806215 	stw	r10,392(r2)
  419528:	01000084 	movi	r4,2
  41952c:	893fe31e 	bne	r17,r4,4194bc <__register_exitproc+0x9c>
  419530:	11006317 	ldw	r4,396(r2)
  419534:	2252b03a 	or	r9,r4,r9
  419538:	12406315 	stw	r9,396(r2)
  41953c:	003fdf06 	br	4194bc <__register_exitproc+0x9c>
  419540:	008010b4 	movhi	r2,66
  419544:	10828404 	addi	r2,r2,2576
  419548:	80805215 	stw	r2,328(r16)
  41954c:	003fbe06 	br	419448 <__register_exitproc+0x28>

00419550 <__fixunsdfsi>:
  419550:	defffd04 	addi	sp,sp,-12
  419554:	000d883a 	mov	r6,zero
  419558:	01d07834 	movhi	r7,16864
  41955c:	dc400115 	stw	r17,4(sp)
  419560:	dc000015 	stw	r16,0(sp)
  419564:	dfc00215 	stw	ra,8(sp)
  419568:	2023883a 	mov	r17,r4
  41956c:	2821883a 	mov	r16,r5
  419570:	0409ca80 	call	409ca8 <__gedf2>
  419574:	1000080e 	bge	r2,zero,419598 <__fixunsdfsi+0x48>
  419578:	8809883a 	mov	r4,r17
  41957c:	800b883a 	mov	r5,r16
  419580:	0409e3c0 	call	409e3c <__fixdfsi>
  419584:	dfc00217 	ldw	ra,8(sp)
  419588:	dc400117 	ldw	r17,4(sp)
  41958c:	dc000017 	ldw	r16,0(sp)
  419590:	dec00304 	addi	sp,sp,12
  419594:	f800283a 	ret
  419598:	000d883a 	mov	r6,zero
  41959c:	01d07834 	movhi	r7,16864
  4195a0:	8809883a 	mov	r4,r17
  4195a4:	800b883a 	mov	r5,r16
  4195a8:	04096940 	call	409694 <__subdf3>
  4195ac:	180b883a 	mov	r5,r3
  4195b0:	1009883a 	mov	r4,r2
  4195b4:	0409e3c0 	call	409e3c <__fixdfsi>
  4195b8:	00e00034 	movhi	r3,32768
  4195bc:	10c5883a 	add	r2,r2,r3
  4195c0:	dfc00217 	ldw	ra,8(sp)
  4195c4:	dc400117 	ldw	r17,4(sp)
  4195c8:	dc000017 	ldw	r16,0(sp)
  4195cc:	dec00304 	addi	sp,sp,12
  4195d0:	f800283a 	ret
